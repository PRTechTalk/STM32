
DTS_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071bc  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08007408  08007408  00008408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007484  08007484  00009084  2**0
                  CONTENTS
  4 .ARM          00000008  08007484  08007484  00008484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800748c  0800748c  00009084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800748c  0800748c  0000848c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007490  08007490  00008490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08007494  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000084  08007518  00009084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08007518  000092d0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00009084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efa8  00000000  00000000  000090ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f0  00000000  00000000  00018062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0001a158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000939  00000000  00000000  0001ad78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031b66  00000000  00000000  0001b6b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e2c  00000000  00000000  0004d217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00135068  00000000  00000000  0005e043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001930ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038ec  00000000  00000000  001930f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001969dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000084 	.word	0x20000084
 8000268:	00000000 	.word	0x00000000
 800026c:	080073f0 	.word	0x080073f0

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000088 	.word	0x20000088
 8000288:	080073f0 	.word	0x080073f0

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b97e 	b.w	80005a0 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14d      	bne.n	8000364 <__udivmoddi4+0xa8>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	460f      	mov	r7, r1
 80002cc:	4684      	mov	ip, r0
 80002ce:	4696      	mov	lr, r2
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	d960      	bls.n	8000398 <__udivmoddi4+0xdc>
 80002d6:	b14b      	cbz	r3, 80002ec <__udivmoddi4+0x30>
 80002d8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f0:	fa1f f48e 	uxth.w	r4, lr
 80002f4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f8:	fbb7 f1f6 	udiv	r1, r7, r6
 80002fc:	fb06 7711 	mls	r7, r6, r1, r7
 8000300:	fb01 f004 	mul.w	r0, r1, r4
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x62>
 800030c:	eb1e 0202 	adds.w	r2, lr, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x60>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 812d 	bhi.w	8000576 <__udivmoddi4+0x2ba>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	fa1f fc8c 	uxth.w	ip, ip
 8000324:	fbb2 f0f6 	udiv	r0, r2, r6
 8000328:	fb06 2210 	mls	r2, r6, r0, r2
 800032c:	fb00 f404 	mul.w	r4, r0, r4
 8000330:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000334:	4564      	cmp	r4, ip
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x8e>
 8000338:	eb1e 0c0c 	adds.w	ip, lr, ip
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x8c>
 8000342:	4564      	cmp	r4, ip
 8000344:	f200 811a 	bhi.w	800057c <__udivmoddi4+0x2c0>
 8000348:	4610      	mov	r0, r2
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	ebac 0c04 	sub.w	ip, ip, r4
 8000352:	2100      	movs	r1, #0
 8000354:	b125      	cbz	r5, 8000360 <__udivmoddi4+0xa4>
 8000356:	fa2c f303 	lsr.w	r3, ip, r3
 800035a:	2200      	movs	r2, #0
 800035c:	e9c5 3200 	strd	r3, r2, [r5]
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d905      	bls.n	8000374 <__udivmoddi4+0xb8>
 8000368:	b10d      	cbz	r5, 800036e <__udivmoddi4+0xb2>
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	2100      	movs	r1, #0
 8000370:	4608      	mov	r0, r1
 8000372:	e7f5      	b.n	8000360 <__udivmoddi4+0xa4>
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14d      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037c:	42a3      	cmp	r3, r4
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2aa>
 8000382:	4290      	cmp	r0, r2
 8000384:	f080 80ef 	bcs.w	8000566 <__udivmoddi4+0x2aa>
 8000388:	4606      	mov	r6, r0
 800038a:	4623      	mov	r3, r4
 800038c:	4608      	mov	r0, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e6      	beq.n	8000360 <__udivmoddi4+0xa4>
 8000392:	e9c5 6300 	strd	r6, r3, [r5]
 8000396:	e7e3      	b.n	8000360 <__udivmoddi4+0xa4>
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 80a2 	bne.w	80004e2 <__udivmoddi4+0x226>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a4:	fa1f f68e 	uxth.w	r6, lr
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ae:	fb07 2014 	mls	r0, r7, r4, r2
 80003b2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb06 f004 	mul.w	r0, r6, r4
 80003be:	4290      	cmp	r0, r2
 80003c0:	d90f      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c2:	eb1e 0202 	adds.w	r2, lr, r2
 80003c6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	4290      	cmp	r0, r2
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80c8 	beq.w	8000570 <__udivmoddi4+0x2b4>
 80003e0:	4644      	mov	r4, r8
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	fa1f fc8c 	uxth.w	ip, ip
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	fb00 f606 	mul.w	r6, r0, r6
 80003f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f8:	4566      	cmp	r6, ip
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x152>
 80003fc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x150>
 8000406:	4566      	cmp	r6, ip
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c6>
 800040c:	4610      	mov	r0, r2
 800040e:	ebac 0c06 	sub.w	ip, ip, r6
 8000412:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa20 fc06 	lsr.w	ip, r0, r6
 800042a:	40f4      	lsrs	r4, r6
 800042c:	408a      	lsls	r2, r1
 800042e:	431f      	orrs	r7, r3
 8000430:	ea4e 030c 	orr.w	r3, lr, ip
 8000434:	fa00 fe01 	lsl.w	lr, r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	fbb4 f0f8 	udiv	r0, r4, r8
 8000448:	fb08 4410 	mls	r4, r8, r0, r4
 800044c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000450:	fb00 f90c 	mul.w	r9, r0, ip
 8000454:	45a1      	cmp	r9, r4
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x1ba>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 3aff 	add.w	sl, r0, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0b01 	movcs.w	fp, #1
 8000464:	f04f 0b00 	movcc.w	fp, #0
 8000468:	45a1      	cmp	r9, r4
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x1b8>
 800046c:	f1bb 0f00 	cmp.w	fp, #0
 8000470:	f000 8093 	beq.w	800059a <__udivmoddi4+0x2de>
 8000474:	4650      	mov	r0, sl
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000482:	fb08 4413 	mls	r4, r8, r3, r4
 8000486:	fb03 fc0c 	mul.w	ip, r3, ip
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	45a4      	cmp	ip, r4
 8000490:	d906      	bls.n	80004a0 <__udivmoddi4+0x1e4>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 38ff 	add.w	r8, r3, #4294967295
 8000498:	d201      	bcs.n	800049e <__udivmoddi4+0x1e2>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d87a      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 800049e:	4643      	mov	r3, r8
 80004a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a4:	eba4 040c 	sub.w	r4, r4, ip
 80004a8:	fba0 9802 	umull	r9, r8, r0, r2
 80004ac:	4544      	cmp	r4, r8
 80004ae:	46cc      	mov	ip, r9
 80004b0:	4643      	mov	r3, r8
 80004b2:	d302      	bcc.n	80004ba <__udivmoddi4+0x1fe>
 80004b4:	d106      	bne.n	80004c4 <__udivmoddi4+0x208>
 80004b6:	45ce      	cmp	lr, r9
 80004b8:	d204      	bcs.n	80004c4 <__udivmoddi4+0x208>
 80004ba:	3801      	subs	r0, #1
 80004bc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c0:	eb68 0307 	sbc.w	r3, r8, r7
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x222>
 80004c6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ca:	eb64 0403 	sbc.w	r4, r4, r3
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e73e      	b.n	8000360 <__udivmoddi4+0xa4>
 80004e2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e6:	f1c3 0120 	rsb	r1, r3, #32
 80004ea:	fa04 f203 	lsl.w	r2, r4, r3
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f8:	fa20 f101 	lsr.w	r1, r0, r1
 80004fc:	fa1f f68e 	uxth.w	r6, lr
 8000500:	fbb4 f0f7 	udiv	r0, r4, r7
 8000504:	430a      	orrs	r2, r1
 8000506:	fb07 4410 	mls	r4, r7, r0, r4
 800050a:	0c11      	lsrs	r1, r2, #16
 800050c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000510:	fb00 f406 	mul.w	r4, r0, r6
 8000514:	428c      	cmp	r4, r1
 8000516:	d90e      	bls.n	8000536 <__udivmoddi4+0x27a>
 8000518:	eb1e 0101 	adds.w	r1, lr, r1
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	bf2c      	ite	cs
 8000522:	f04f 0901 	movcs.w	r9, #1
 8000526:	f04f 0900 	movcc.w	r9, #0
 800052a:	428c      	cmp	r4, r1
 800052c:	d902      	bls.n	8000534 <__udivmoddi4+0x278>
 800052e:	f1b9 0f00 	cmp.w	r9, #0
 8000532:	d02c      	beq.n	800058e <__udivmoddi4+0x2d2>
 8000534:	4640      	mov	r0, r8
 8000536:	1b09      	subs	r1, r1, r4
 8000538:	b292      	uxth	r2, r2
 800053a:	fbb1 f4f7 	udiv	r4, r1, r7
 800053e:	fb07 1114 	mls	r1, r7, r4, r1
 8000542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000546:	fb04 f106 	mul.w	r1, r4, r6
 800054a:	4291      	cmp	r1, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x2a2>
 800054e:	eb1e 0202 	adds.w	r2, lr, r2
 8000552:	f104 38ff 	add.w	r8, r4, #4294967295
 8000556:	d201      	bcs.n	800055c <__udivmoddi4+0x2a0>
 8000558:	4291      	cmp	r1, r2
 800055a:	d815      	bhi.n	8000588 <__udivmoddi4+0x2cc>
 800055c:	4644      	mov	r4, r8
 800055e:	1a52      	subs	r2, r2, r1
 8000560:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000564:	e721      	b.n	80003aa <__udivmoddi4+0xee>
 8000566:	1a86      	subs	r6, r0, r2
 8000568:	eb64 0303 	sbc.w	r3, r4, r3
 800056c:	2001      	movs	r0, #1
 800056e:	e70e      	b.n	800038e <__udivmoddi4+0xd2>
 8000570:	3c02      	subs	r4, #2
 8000572:	4472      	add	r2, lr
 8000574:	e735      	b.n	80003e2 <__udivmoddi4+0x126>
 8000576:	3902      	subs	r1, #2
 8000578:	4472      	add	r2, lr
 800057a:	e6d0      	b.n	800031e <__udivmoddi4+0x62>
 800057c:	44f4      	add	ip, lr
 800057e:	3802      	subs	r0, #2
 8000580:	e6e3      	b.n	800034a <__udivmoddi4+0x8e>
 8000582:	44f4      	add	ip, lr
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x152>
 8000588:	3c02      	subs	r4, #2
 800058a:	4472      	add	r2, lr
 800058c:	e7e7      	b.n	800055e <__udivmoddi4+0x2a2>
 800058e:	3802      	subs	r0, #2
 8000590:	4471      	add	r1, lr
 8000592:	e7d0      	b.n	8000536 <__udivmoddi4+0x27a>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e782      	b.n	80004a0 <__udivmoddi4+0x1e4>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e76a      	b.n	8000476 <__udivmoddi4+0x1ba>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 fd9c 	bl	80010e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f858 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f8fa 	bl	80007a8 <MX_GPIO_Init>
  MX_DTS_Init();
 80005b4:	f000 f8ba 	bl	800072c <MX_DTS_Init>
  MX_ICACHE_Init();
 80005b8:	f000 f8e2 	bl	8000780 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80005bc:	2000      	movs	r0, #0
 80005be:	f000 fba1 	bl	8000d04 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80005c2:	2001      	movs	r0, #1
 80005c4:	f000 fb9e 	bl	8000d04 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80005c8:	2002      	movs	r0, #2
 80005ca:	f000 fb9b 	bl	8000d04 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80005ce:	2101      	movs	r1, #1
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 fc0d 	bl	8000df0 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80005d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000650 <main+0xac>)
 80005d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005dc:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80005de:	4b1c      	ldr	r3, [pc, #112]	@ (8000650 <main+0xac>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80005e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000650 <main+0xac>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80005ea:	4b19      	ldr	r3, [pc, #100]	@ (8000650 <main+0xac>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80005f0:	4b17      	ldr	r3, [pc, #92]	@ (8000650 <main+0xac>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80005f6:	4916      	ldr	r1, [pc, #88]	@ (8000650 <main+0xac>)
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fc93 	bl	8000f24 <BSP_COM_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <main+0x64>
  {
    Error_Handler();
 8000604:	f000 f9ce 	bl	80009a4 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_DTS_Start(&hdts)!= HAL_OK){
 8000608:	4812      	ldr	r0, [pc, #72]	@ (8000654 <main+0xb0>)
 800060a:	f001 f874 	bl	80016f6 <HAL_DTS_Start>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <main+0x74>
		     /* DTS start Error */
		     Error_Handler();
 8000614:	f000 f9c6 	bl	80009a4 <Error_Handler>
		   }

	  /* Get temperature in deg C */
	 if(HAL_DTS_GetTemperature(&hdts, &Temperature)!= HAL_OK){
 8000618:	490f      	ldr	r1, [pc, #60]	@ (8000658 <main+0xb4>)
 800061a:	480e      	ldr	r0, [pc, #56]	@ (8000654 <main+0xb0>)
 800061c:	f001 f8ef 	bl	80017fe <HAL_DTS_GetTemperature>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <main+0x86>
		      /* DTS GetTemperature Error */
		      Error_Handler();
 8000626:	f000 f9bd 	bl	80009a4 <Error_Handler>
		  }

	  printf("Temp: %lu\r\n", Temperature);
 800062a:	4b0b      	ldr	r3, [pc, #44]	@ (8000658 <main+0xb4>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4619      	mov	r1, r3
 8000630:	480a      	ldr	r0, [pc, #40]	@ (800065c <main+0xb8>)
 8000632:	f006 f85d 	bl	80066f0 <iprintf>

	  if(HAL_DTS_Stop(&hdts) != HAL_OK){
 8000636:	4807      	ldr	r0, [pc, #28]	@ (8000654 <main+0xb0>)
 8000638:	f001 f8aa 	bl	8001790 <HAL_DTS_Stop>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <main+0xa2>
			  Error_Handler();
 8000642:	f000 f9af 	bl	80009a4 <Error_Handler>
		  }

	  HAL_Delay(1000);
 8000646:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800064a:	f000 fe09 	bl	8001260 <HAL_Delay>
	  if(HAL_DTS_Start(&hdts)!= HAL_OK){
 800064e:	e7db      	b.n	8000608 <main+0x64>
 8000650:	200000a0 	.word	0x200000a0
 8000654:	200000b0 	.word	0x200000b0
 8000658:	200000d4 	.word	0x200000d4
 800065c:	08007408 	.word	0x08007408

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b09c      	sub	sp, #112	@ 0x70
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2250      	movs	r2, #80	@ 0x50
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f006 f893 	bl	800679a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
 8000684:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000686:	4b28      	ldr	r3, [pc, #160]	@ (8000728 <SystemClock_Config+0xc8>)
 8000688:	691b      	ldr	r3, [r3, #16]
 800068a:	4a27      	ldr	r2, [pc, #156]	@ (8000728 <SystemClock_Config+0xc8>)
 800068c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000690:	6113      	str	r3, [r2, #16]
 8000692:	4b25      	ldr	r3, [pc, #148]	@ (8000728 <SystemClock_Config+0xc8>)
 8000694:	691b      	ldr	r3, [r3, #16]
 8000696:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800069e:	bf00      	nop
 80006a0:	4b21      	ldr	r3, [pc, #132]	@ (8000728 <SystemClock_Config+0xc8>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f003 0308 	and.w	r3, r3, #8
 80006a8:	2b08      	cmp	r3, #8
 80006aa:	d1f9      	bne.n	80006a0 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ac:	2301      	movs	r3, #1
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006b0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80006ba:	2303      	movs	r3, #3
 80006bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 80006c2:	2319      	movs	r3, #25
 80006c4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 80006d2:	230c      	movs	r3, #12
 80006d4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fb2a 	bl	8001d3c <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006ee:	f000 f959 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	231f      	movs	r3, #31
 80006f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2303      	movs	r3, #3
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	2104      	movs	r1, #4
 8000710:	4618      	mov	r0, r3
 8000712:	f001 ff4b 	bl	80025ac <HAL_RCC_ClockConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800071c:	f000 f942 	bl	80009a4 <Error_Handler>
  }
}
 8000720:	bf00      	nop
 8000722:	3770      	adds	r7, #112	@ 0x70
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	44020800 	.word	0x44020800

0800072c <MX_DTS_Init>:
  * @brief DTS Initialization Function
  * @param None
  * @retval None
  */
static void MX_DTS_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END DTS_Init 0 */

  /* USER CODE BEGIN DTS_Init 1 */

  /* USER CODE END DTS_Init 1 */
  hdts.Instance = DTS;
 8000730:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_DTS_Init+0x4c>)
 8000732:	4a12      	ldr	r2, [pc, #72]	@ (800077c <MX_DTS_Init+0x50>)
 8000734:	601a      	str	r2, [r3, #0]
  hdts.Init.QuickMeasure = DTS_QUICKMEAS_DISABLE;
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <MX_DTS_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	605a      	str	r2, [r3, #4]
  hdts.Init.RefClock = DTS_REFCLKSEL_PCLK;
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_DTS_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hdts.Init.TriggerInput = DTS_TRIGGER_HW_NONE;
 8000742:	4b0d      	ldr	r3, [pc, #52]	@ (8000778 <MX_DTS_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hdts.Init.SamplingTime = DTS_SMP_TIME_10_CYCLE;
 8000748:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <MX_DTS_Init+0x4c>)
 800074a:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 800074e:	611a      	str	r2, [r3, #16]
  hdts.Init.Divider = 100;
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_DTS_Init+0x4c>)
 8000752:	2264      	movs	r2, #100	@ 0x64
 8000754:	615a      	str	r2, [r3, #20]
  hdts.Init.HighThreshold = 0x0;
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <MX_DTS_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  hdts.Init.LowThreshold = 0x0;
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_DTS_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  if (HAL_DTS_Init(&hdts) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_DTS_Init+0x4c>)
 8000764:	f000 ff30 	bl	80015c8 <HAL_DTS_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_DTS_Init+0x46>
  {
    Error_Handler();
 800076e:	f000 f919 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN DTS_Init 2 */

  /* USER CODE END DTS_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200000b0 	.word	0x200000b0
 800077c:	40008c00 	.word	0x40008c00

08000780 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000784:	2000      	movs	r0, #0
 8000786:	f001 faa9 	bl	8001cdc <HAL_ICACHE_ConfigAssociativityMode>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000790:	f000 f908 	bl	80009a4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000794:	f001 fac2 	bl	8001d1c <HAL_ICACHE_Enable>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800079e:	f000 f901 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08c      	sub	sp, #48	@ 0x30
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007be:	4b73      	ldr	r3, [pc, #460]	@ (800098c <MX_GPIO_Init+0x1e4>)
 80007c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007c4:	4a71      	ldr	r2, [pc, #452]	@ (800098c <MX_GPIO_Init+0x1e4>)
 80007c6:	f043 0310 	orr.w	r3, r3, #16
 80007ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007ce:	4b6f      	ldr	r3, [pc, #444]	@ (800098c <MX_GPIO_Init+0x1e4>)
 80007d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007d4:	f003 0310 	and.w	r3, r3, #16
 80007d8:	61bb      	str	r3, [r7, #24]
 80007da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007dc:	4b6b      	ldr	r3, [pc, #428]	@ (800098c <MX_GPIO_Init+0x1e4>)
 80007de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007e2:	4a6a      	ldr	r2, [pc, #424]	@ (800098c <MX_GPIO_Init+0x1e4>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007ec:	4b67      	ldr	r3, [pc, #412]	@ (800098c <MX_GPIO_Init+0x1e4>)
 80007ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	4b64      	ldr	r3, [pc, #400]	@ (800098c <MX_GPIO_Init+0x1e4>)
 80007fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000800:	4a62      	ldr	r2, [pc, #392]	@ (800098c <MX_GPIO_Init+0x1e4>)
 8000802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000806:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800080a:	4b60      	ldr	r3, [pc, #384]	@ (800098c <MX_GPIO_Init+0x1e4>)
 800080c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000818:	4b5c      	ldr	r3, [pc, #368]	@ (800098c <MX_GPIO_Init+0x1e4>)
 800081a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800081e:	4a5b      	ldr	r2, [pc, #364]	@ (800098c <MX_GPIO_Init+0x1e4>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000828:	4b58      	ldr	r3, [pc, #352]	@ (800098c <MX_GPIO_Init+0x1e4>)
 800082a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b55      	ldr	r3, [pc, #340]	@ (800098c <MX_GPIO_Init+0x1e4>)
 8000838:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800083c:	4a53      	ldr	r2, [pc, #332]	@ (800098c <MX_GPIO_Init+0x1e4>)
 800083e:	f043 0302 	orr.w	r3, r3, #2
 8000842:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000846:	4b51      	ldr	r3, [pc, #324]	@ (800098c <MX_GPIO_Init+0x1e4>)
 8000848:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800084c:	f003 0302 	and.w	r3, r3, #2
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000854:	4b4d      	ldr	r3, [pc, #308]	@ (800098c <MX_GPIO_Init+0x1e4>)
 8000856:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800085a:	4a4c      	ldr	r2, [pc, #304]	@ (800098c <MX_GPIO_Init+0x1e4>)
 800085c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000860:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000864:	4b49      	ldr	r3, [pc, #292]	@ (800098c <MX_GPIO_Init+0x1e4>)
 8000866:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800086a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000872:	2332      	movs	r3, #50	@ 0x32
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087e:	2302      	movs	r3, #2
 8000880:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000882:	230b      	movs	r3, #11
 8000884:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	4840      	ldr	r0, [pc, #256]	@ (8000990 <MX_GPIO_Init+0x1e8>)
 800088e:	f001 f8bb 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000892:	2386      	movs	r3, #134	@ 0x86
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800089e:	2302      	movs	r3, #2
 80008a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008a2:	230b      	movs	r3, #11
 80008a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4839      	ldr	r0, [pc, #228]	@ (8000994 <MX_GPIO_Init+0x1ec>)
 80008ae:	f001 f8ab 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80008b2:	2310      	movs	r3, #16
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008b6:	2303      	movs	r3, #3
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4833      	ldr	r0, [pc, #204]	@ (8000994 <MX_GPIO_Init+0x1ec>)
 80008c6:	f001 f89f 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 80008ca:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d0:	2303      	movs	r3, #3
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	482e      	ldr	r0, [pc, #184]	@ (8000998 <MX_GPIO_Init+0x1f0>)
 80008e0:	f001 f892 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f2:	2302      	movs	r3, #2
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008f6:	230b      	movs	r3, #11
 80008f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4825      	ldr	r0, [pc, #148]	@ (8000998 <MX_GPIO_Init+0x1f0>)
 8000902:	f001 f881 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000906:	2380      	movs	r3, #128	@ 0x80
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800090a:	4b24      	ldr	r3, [pc, #144]	@ (800099c <MX_GPIO_Init+0x1f4>)
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4821      	ldr	r0, [pc, #132]	@ (80009a0 <MX_GPIO_Init+0x1f8>)
 800091a:	f001 f875 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 800091e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000930:	230a      	movs	r3, #10
 8000932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4816      	ldr	r0, [pc, #88]	@ (8000994 <MX_GPIO_Init+0x1ec>)
 800093c:	f001 f864 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8000940:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800094e:	2302      	movs	r3, #2
 8000950:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000952:	230b      	movs	r3, #11
 8000954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4810      	ldr	r0, [pc, #64]	@ (80009a0 <MX_GPIO_Init+0x1f8>)
 800095e:	f001 f853 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000962:	23c0      	movs	r3, #192	@ 0xc0
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000972:	2308      	movs	r3, #8
 8000974:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4806      	ldr	r0, [pc, #24]	@ (8000998 <MX_GPIO_Init+0x1f0>)
 800097e:	f001 f843 	bl	8001a08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000982:	bf00      	nop
 8000984:	3730      	adds	r7, #48	@ 0x30
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	44020c00 	.word	0x44020c00
 8000990:	42020800 	.word	0x42020800
 8000994:	42020000 	.word	0x42020000
 8000998:	42020400 	.word	0x42020400
 800099c:	10110000 	.word	0x10110000
 80009a0:	42021800 	.word	0x42021800

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <Error_Handler+0x8>

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <HAL_DTS_MspInit>:
* This function configures the hardware resources used in this example
* @param hdts: DTS handle pointer
* @retval None
*/
void HAL_DTS_MspInit(DTS_HandleTypeDef* hdts)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  if(hdts->Instance==DTS)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a0b      	ldr	r2, [pc, #44]	@ (80009fc <HAL_DTS_MspInit+0x3c>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d10e      	bne.n	80009f0 <HAL_DTS_MspInit+0x30>
  {
  /* USER CODE BEGIN DTS_MspInit 0 */

  /* USER CODE END DTS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DTS_CLK_ENABLE();
 80009d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a00 <HAL_DTS_MspInit+0x40>)
 80009d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80009d8:	4a09      	ldr	r2, [pc, #36]	@ (8000a00 <HAL_DTS_MspInit+0x40>)
 80009da:	f043 0308 	orr.w	r3, r3, #8
 80009de:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 80009e2:	4b07      	ldr	r3, [pc, #28]	@ (8000a00 <HAL_DTS_MspInit+0x40>)
 80009e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80009e8:	f003 0308 	and.w	r3, r3, #8
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DTS_MspInit 1 */

  /* USER CODE END DTS_MspInit 1 */
  }

}
 80009f0:	bf00      	nop
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	40008c00 	.word	0x40008c00
 8000a00:	44020c00 	.word	0x44020c00

08000a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <NMI_Handler+0x4>

08000a0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5a:	f000 fbe1 	bl	8001220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000a66:	2000      	movs	r0, #0
 8000a68:	f000 fa3a 	bl	8000ee0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	e00a      	b.n	8000a98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a82:	f3af 8000 	nop.w
 8000a86:	4601      	mov	r1, r0
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	60ba      	str	r2, [r7, #8]
 8000a8e:	b2ca      	uxtb	r2, r1
 8000a90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3301      	adds	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dbf0      	blt.n	8000a82 <_read+0x12>
  }

  return len;
 8000aa0:	687b      	ldr	r3, [r7, #4]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b086      	sub	sp, #24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	60f8      	str	r0, [r7, #12]
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	e009      	b.n	8000ad0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	60ba      	str	r2, [r7, #8]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 fa91 	bl	8000fec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3301      	adds	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697a      	ldr	r2, [r7, #20]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	dbf1      	blt.n	8000abc <_write+0x12>
  }
  return len;
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <_close>:

int _close(int file)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <_isatty>:

int _isatty(int file)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b54:	4a14      	ldr	r2, [pc, #80]	@ (8000ba8 <_sbrk+0x5c>)
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <_sbrk+0x60>)
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b60:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b68:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <_sbrk+0x64>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	@ (8000bb4 <_sbrk+0x68>)
 8000b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6e:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d207      	bcs.n	8000b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b7c:	f005 fe5c 	bl	8006838 <__errno>
 8000b80:	4603      	mov	r3, r0
 8000b82:	220c      	movs	r2, #12
 8000b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8a:	e009      	b.n	8000ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b8c:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b92:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	4a05      	ldr	r2, [pc, #20]	@ (8000bb0 <_sbrk+0x64>)
 8000b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	200a0000 	.word	0x200a0000
 8000bac:	00000400 	.word	0x00000400
 8000bb0:	200000d8 	.word	0x200000d8
 8000bb4:	200002d0 	.word	0x200002d0

08000bb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bbe:	4b35      	ldr	r3, [pc, #212]	@ (8000c94 <SystemInit+0xdc>)
 8000bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bc4:	4a33      	ldr	r2, [pc, #204]	@ (8000c94 <SystemInit+0xdc>)
 8000bc6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bca:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000bce:	4b32      	ldr	r3, [pc, #200]	@ (8000c98 <SystemInit+0xe0>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000bd4:	4b30      	ldr	r3, [pc, #192]	@ (8000c98 <SystemInit+0xe0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000bda:	4b2f      	ldr	r3, [pc, #188]	@ (8000c98 <SystemInit+0xe0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000be0:	4b2d      	ldr	r3, [pc, #180]	@ (8000c98 <SystemInit+0xe0>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	492c      	ldr	r1, [pc, #176]	@ (8000c98 <SystemInit+0xe0>)
 8000be6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c9c <SystemInit+0xe4>)
 8000be8:	4013      	ands	r3, r2
 8000bea:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000bec:	4b2a      	ldr	r3, [pc, #168]	@ (8000c98 <SystemInit+0xe0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000bf2:	4b29      	ldr	r3, [pc, #164]	@ (8000c98 <SystemInit+0xe0>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000bf8:	4b27      	ldr	r3, [pc, #156]	@ (8000c98 <SystemInit+0xe0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000bfe:	4b26      	ldr	r3, [pc, #152]	@ (8000c98 <SystemInit+0xe0>)
 8000c00:	4a27      	ldr	r2, [pc, #156]	@ (8000ca0 <SystemInit+0xe8>)
 8000c02:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000c04:	4b24      	ldr	r3, [pc, #144]	@ (8000c98 <SystemInit+0xe0>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000c0a:	4b23      	ldr	r3, [pc, #140]	@ (8000c98 <SystemInit+0xe0>)
 8000c0c:	4a24      	ldr	r2, [pc, #144]	@ (8000ca0 <SystemInit+0xe8>)
 8000c0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000c10:	4b21      	ldr	r3, [pc, #132]	@ (8000c98 <SystemInit+0xe0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000c16:	4b20      	ldr	r3, [pc, #128]	@ (8000c98 <SystemInit+0xe0>)
 8000c18:	4a21      	ldr	r2, [pc, #132]	@ (8000ca0 <SystemInit+0xe8>)
 8000c1a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c98 <SystemInit+0xe0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000c22:	4b1d      	ldr	r3, [pc, #116]	@ (8000c98 <SystemInit+0xe0>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a1c      	ldr	r2, [pc, #112]	@ (8000c98 <SystemInit+0xe0>)
 8000c28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c2c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <SystemInit+0xe0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c34:	4b17      	ldr	r3, [pc, #92]	@ (8000c94 <SystemInit+0xdc>)
 8000c36:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c3a:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000c3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <SystemInit+0xec>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000c44:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000c4c:	d003      	beq.n	8000c56 <SystemInit+0x9e>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000c54:	d117      	bne.n	8000c86 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000c56:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <SystemInit+0xec>)
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d005      	beq.n	8000c6e <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000c62:	4b10      	ldr	r3, [pc, #64]	@ (8000ca4 <SystemInit+0xec>)
 8000c64:	4a10      	ldr	r2, [pc, #64]	@ (8000ca8 <SystemInit+0xf0>)
 8000c66:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000c68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <SystemInit+0xec>)
 8000c6a:	4a10      	ldr	r2, [pc, #64]	@ (8000cac <SystemInit+0xf4>)
 8000c6c:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca4 <SystemInit+0xec>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	4a0c      	ldr	r2, [pc, #48]	@ (8000ca4 <SystemInit+0xec>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <SystemInit+0xec>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	4a09      	ldr	r2, [pc, #36]	@ (8000ca4 <SystemInit+0xec>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	61d3      	str	r3, [r2, #28]
  }
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00
 8000c98:	44020c00 	.word	0x44020c00
 8000c9c:	eae2eae3 	.word	0xeae2eae3
 8000ca0:	01010280 	.word	0x01010280
 8000ca4:	40022000 	.word	0x40022000
 8000ca8:	08192a3b 	.word	0x08192a3b
 8000cac:	4c5d6e7f 	.word	0x4c5d6e7f

08000cb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cb0:	480d      	ldr	r0, [pc, #52]	@ (8000ce8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cb2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cb4:	f7ff ff80 	bl	8000bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb8:	480c      	ldr	r0, [pc, #48]	@ (8000cec <LoopForever+0x6>)
  ldr r1, =_edata
 8000cba:	490d      	ldr	r1, [pc, #52]	@ (8000cf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf4 <LoopForever+0xe>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cfc <LoopForever+0x16>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cde:	f005 fdb1 	bl	8006844 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ce2:	f7ff fc5f 	bl	80005a4 <main>

08000ce6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ce6:	e7fe      	b.n	8000ce6 <LoopForever>
  ldr   r0, =_estack
 8000ce8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000cf4:	08007494 	.word	0x08007494
  ldr r2, =_sbss
 8000cf8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000cfc:	200002d0 	.word	0x200002d0

08000d00 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC1_IRQHandler>
	...

08000d04 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08c      	sub	sp, #48	@ 0x30
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED2)
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d009      	beq.n	8000d2c <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
     && (Led != LED1) && (Led != LED3)
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d006      	beq.n	8000d2c <BSP_LED_Init+0x28>
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d003      	beq.n	8000d2c <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
       )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000d24:	f06f 0301 	mvn.w	r3, #1
 8000d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d2a:	e055      	b.n	8000dd8 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED2)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d10f      	bne.n	8000d52 <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 8000d32:	4b2c      	ldr	r3, [pc, #176]	@ (8000de4 <BSP_LED_Init+0xe0>)
 8000d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d38:	4a2a      	ldr	r2, [pc, #168]	@ (8000de4 <BSP_LED_Init+0xe0>)
 8000d3a:	f043 0320 	orr.w	r3, r3, #32
 8000d3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d42:	4b28      	ldr	r3, [pc, #160]	@ (8000de4 <BSP_LED_Init+0xe0>)
 8000d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d48:	f003 0320 	and.w	r3, r3, #32
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	e021      	b.n	8000d96 <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d10f      	bne.n	8000d78 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8000d58:	4b22      	ldr	r3, [pc, #136]	@ (8000de4 <BSP_LED_Init+0xe0>)
 8000d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d5e:	4a21      	ldr	r2, [pc, #132]	@ (8000de4 <BSP_LED_Init+0xe0>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d68:	4b1e      	ldr	r3, [pc, #120]	@ (8000de4 <BSP_LED_Init+0xe0>)
 8000d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	e00e      	b.n	8000d96 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000d78:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <BSP_LED_Init+0xe0>)
 8000d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d7e:	4a19      	ldr	r2, [pc, #100]	@ (8000de4 <BSP_LED_Init+0xe0>)
 8000d80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d84:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d88:	4b16      	ldr	r3, [pc, #88]	@ (8000de4 <BSP_LED_Init+0xe0>)
 8000d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	4a13      	ldr	r2, [pc, #76]	@ (8000de8 <BSP_LED_Init+0xe4>)
 8000d9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d9e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	4a0f      	ldr	r2, [pc, #60]	@ (8000dec <BSP_LED_Init+0xe8>)
 8000db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db4:	f107 0218 	add.w	r2, r7, #24
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 fe24 	bl	8001a08 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dec <BSP_LED_Init+0xe8>)
 8000dc4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	4a07      	ldr	r2, [pc, #28]	@ (8000de8 <BSP_LED_Init+0xe4>)
 8000dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f000 ff6a 	bl	8001cac <HAL_GPIO_WritePin>
  }

  return ret;
 8000dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3730      	adds	r7, #48	@ 0x30
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	44020c00 	.word	0x44020c00
 8000de8:	0800742c 	.word	0x0800742c
 8000dec:	20000008 	.word	0x20000008

08000df0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	460a      	mov	r2, r1
 8000dfa:	71fb      	strb	r3, [r7, #7]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000e00:	4b30      	ldr	r3, [pc, #192]	@ (8000ec4 <BSP_PB_Init+0xd4>)
 8000e02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e06:	4a2f      	ldr	r2, [pc, #188]	@ (8000ec4 <BSP_PB_Init+0xd4>)
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e10:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec4 <BSP_PB_Init+0xd4>)
 8000e12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000e1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e22:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000e24:	2302      	movs	r3, #2
 8000e26:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000e2c:	79bb      	ldrb	r3, [r7, #6]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d10c      	bne.n	8000e4c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	4a23      	ldr	r2, [pc, #140]	@ (8000ec8 <BSP_PB_Init+0xd8>)
 8000e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3e:	f107 020c 	add.w	r2, r7, #12
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 fddf 	bl	8001a08 <HAL_GPIO_Init>
 8000e4a:	e036      	b.n	8000eba <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ecc <BSP_PB_Init+0xdc>)
 8000e4e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	4a1d      	ldr	r2, [pc, #116]	@ (8000ec8 <BSP_PB_Init+0xd8>)
 8000e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e58:	f107 020c 	add.w	r2, r7, #12
 8000e5c:	4611      	mov	r1, r2
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 fdd2 	bl	8001a08 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000e64:	79fa      	ldrb	r2, [r7, #7]
 8000e66:	4613      	mov	r3, r2
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4a18      	ldr	r2, [pc, #96]	@ (8000ed0 <BSP_PB_Init+0xe0>)
 8000e70:	441a      	add	r2, r3
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	4917      	ldr	r1, [pc, #92]	@ (8000ed4 <BSP_PB_Init+0xe4>)
 8000e76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	f000 fd67 	bl	8001950 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000e82:	79fa      	ldrb	r2, [r7, #7]
 8000e84:	4613      	mov	r3, r2
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	4413      	add	r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4a10      	ldr	r2, [pc, #64]	@ (8000ed0 <BSP_PB_Init+0xe0>)
 8000e8e:	1898      	adds	r0, r3, r2
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	4a11      	ldr	r2, [pc, #68]	@ (8000ed8 <BSP_PB_Init+0xe8>)
 8000e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	f000 fd2c 	bl	80018f8 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000ea0:	2018      	movs	r0, #24
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8000edc <BSP_PB_Init+0xec>)
 8000ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4619      	mov	r1, r3
 8000eae:	f000 fab3 	bl	8001418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000eb2:	2318      	movs	r3, #24
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 fac9 	bl	800144c <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3720      	adds	r7, #32
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	44020c00 	.word	0x44020c00
 8000ec8:	20000014 	.word	0x20000014
 8000ecc:	10110000 	.word	0x10110000
 8000ed0:	200000dc 	.word	0x200000dc
 8000ed4:	08007434 	.word	0x08007434
 8000ed8:	20000018 	.word	0x20000018
 8000edc:	2000001c 	.word	0x2000001c

08000ee0 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000eea:	79fa      	ldrb	r2, [r7, #7]
 8000eec:	4613      	mov	r3, r2
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	4413      	add	r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4a04      	ldr	r2, [pc, #16]	@ (8000f08 <BSP_PB_IRQHandler+0x28>)
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 fd3d 	bl	8001978 <HAL_EXTI_IRQHandler>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200000dc 	.word	0x200000dc

08000f0c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000f3a:	f06f 0301 	mvn.w	r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	e018      	b.n	8000f74 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2294      	movs	r2, #148	@ 0x94
 8000f46:	fb02 f303 	mul.w	r3, r2, r3
 8000f4a:	4a0d      	ldr	r2, [pc, #52]	@ (8000f80 <BSP_COM_Init+0x5c>)
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f870 	bl	8001034 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	2294      	movs	r2, #148	@ 0x94
 8000f58:	fb02 f303 	mul.w	r3, r2, r3
 8000f5c:	4a08      	ldr	r2, [pc, #32]	@ (8000f80 <BSP_COM_Init+0x5c>)
 8000f5e:	4413      	add	r3, r2
 8000f60:	6839      	ldr	r1, [r7, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f80e 	bl	8000f84 <MX_USART_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d002      	beq.n	8000f74 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000f6e:	f06f 0303 	mvn.w	r3, #3
 8000f72:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000f74:	68fb      	ldr	r3, [r7, #12]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200000e8 	.word	0x200000e8

08000f84 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8000f8e:	4b16      	ldr	r3, [pc, #88]	@ (8000fe8 <MX_USART_Init+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	220c      	movs	r2, #12
 8000fa2:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	895b      	ldrh	r3, [r3, #10]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	891b      	ldrh	r3, [r3, #8]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	899b      	ldrh	r3, [r3, #12]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000fd0:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f004 fdc1 	bl	8005b60 <HAL_UART_Init>
 8000fde:	4603      	mov	r3, r0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000004 	.word	0x20000004

08000fec <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8000ff4:	4b09      	ldr	r3, [pc, #36]	@ (800101c <__io_putchar+0x30>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	2394      	movs	r3, #148	@ 0x94
 8000ffc:	fb02 f303 	mul.w	r3, r2, r3
 8001000:	4a07      	ldr	r2, [pc, #28]	@ (8001020 <__io_putchar+0x34>)
 8001002:	1898      	adds	r0, r3, r2
 8001004:	1d39      	adds	r1, r7, #4
 8001006:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800100a:	2201      	movs	r2, #1
 800100c:	f004 fe02 	bl	8005c14 <HAL_UART_Transmit>
  return ch;
 8001010:	687b      	ldr	r3, [r7, #4]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2000017c 	.word	0x2000017c
 8001020:	200000e8 	.word	0x200000e8

08001024 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001028:	2000      	movs	r0, #0
 800102a:	f7ff ff6f 	bl	8000f0c <BSP_PB_Callback>
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	@ 0x28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800103c:	4b27      	ldr	r3, [pc, #156]	@ (80010dc <COM1_MspInit+0xa8>)
 800103e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001042:	4a26      	ldr	r2, [pc, #152]	@ (80010dc <COM1_MspInit+0xa8>)
 8001044:	f043 0308 	orr.w	r3, r3, #8
 8001048:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800104c:	4b23      	ldr	r3, [pc, #140]	@ (80010dc <COM1_MspInit+0xa8>)
 800104e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001052:	f003 0308 	and.w	r3, r3, #8
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800105a:	4b20      	ldr	r3, [pc, #128]	@ (80010dc <COM1_MspInit+0xa8>)
 800105c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001060:	4a1e      	ldr	r2, [pc, #120]	@ (80010dc <COM1_MspInit+0xa8>)
 8001062:	f043 0308 	orr.w	r3, r3, #8
 8001066:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800106a:	4b1c      	ldr	r3, [pc, #112]	@ (80010dc <COM1_MspInit+0xa8>)
 800106c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001070:	f003 0308 	and.w	r3, r3, #8
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001078:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <COM1_MspInit+0xa8>)
 800107a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800107e:	4a17      	ldr	r2, [pc, #92]	@ (80010dc <COM1_MspInit+0xa8>)
 8001080:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001084:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001088:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <COM1_MspInit+0xa8>)
 800108a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800108e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001096:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800109a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80010a0:	2302      	movs	r3, #2
 80010a2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80010a8:	2307      	movs	r3, #7
 80010aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	480b      	ldr	r0, [pc, #44]	@ (80010e0 <COM1_MspInit+0xac>)
 80010b4:	f000 fca8 	bl	8001a08 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 80010b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010bc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80010c2:	2307      	movs	r3, #7
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4804      	ldr	r0, [pc, #16]	@ (80010e0 <COM1_MspInit+0xac>)
 80010ce:	f000 fc9b 	bl	8001a08 <HAL_GPIO_Init>
}
 80010d2:	bf00      	nop
 80010d4:	3728      	adds	r7, #40	@ 0x28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	44020c00 	.word	0x44020c00
 80010e0:	42020c00 	.word	0x42020c00

080010e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e8:	2003      	movs	r0, #3
 80010ea:	f000 f98a 	bl	8001402 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80010ee:	f001 fc15 	bl	800291c <HAL_RCC_GetSysClockFreq>
 80010f2:	4602      	mov	r2, r0
 80010f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <HAL_Init+0x44>)
 80010f6:	6a1b      	ldr	r3, [r3, #32]
 80010f8:	f003 030f 	and.w	r3, r3, #15
 80010fc:	490b      	ldr	r1, [pc, #44]	@ (800112c <HAL_Init+0x48>)
 80010fe:	5ccb      	ldrb	r3, [r1, r3]
 8001100:	fa22 f303 	lsr.w	r3, r2, r3
 8001104:	4a0a      	ldr	r2, [pc, #40]	@ (8001130 <HAL_Init+0x4c>)
 8001106:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001108:	2004      	movs	r0, #4
 800110a:	f000 f9cf 	bl	80014ac <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800110e:	200f      	movs	r0, #15
 8001110:	f000 f810 	bl	8001134 <HAL_InitTick>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e002      	b.n	8001124 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800111e:	f7ff fc47 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	bd80      	pop	{r7, pc}
 8001128:	44020c00 	.word	0x44020c00
 800112c:	08007414 	.word	0x08007414
 8001130:	20000000 	.word	0x20000000

08001134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001140:	4b33      	ldr	r3, [pc, #204]	@ (8001210 <HAL_InitTick+0xdc>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d101      	bne.n	800114c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e05c      	b.n	8001206 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800114c:	4b31      	ldr	r3, [pc, #196]	@ (8001214 <HAL_InitTick+0xe0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b04      	cmp	r3, #4
 8001156:	d10c      	bne.n	8001172 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001158:	4b2f      	ldr	r3, [pc, #188]	@ (8001218 <HAL_InitTick+0xe4>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b2c      	ldr	r3, [pc, #176]	@ (8001210 <HAL_InitTick+0xdc>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	4619      	mov	r1, r3
 8001162:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001166:	fbb3 f3f1 	udiv	r3, r3, r1
 800116a:	fbb2 f3f3 	udiv	r3, r2, r3
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	e037      	b.n	80011e2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001172:	f000 f9f3 	bl	800155c <HAL_SYSTICK_GetCLKSourceConfig>
 8001176:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2b02      	cmp	r3, #2
 800117c:	d023      	beq.n	80011c6 <HAL_InitTick+0x92>
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d82d      	bhi.n	80011e0 <HAL_InitTick+0xac>
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_InitTick+0x5e>
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d00d      	beq.n	80011ac <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001190:	e026      	b.n	80011e0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001192:	4b21      	ldr	r3, [pc, #132]	@ (8001218 <HAL_InitTick+0xe4>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	4b1e      	ldr	r3, [pc, #120]	@ (8001210 <HAL_InitTick+0xdc>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	4619      	mov	r1, r3
 800119c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80011a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a8:	60fb      	str	r3, [r7, #12]
        break;
 80011aa:	e01a      	b.n	80011e2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80011ac:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <HAL_InitTick+0xdc>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80011ba:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	60fb      	str	r3, [r7, #12]
        break;
 80011c4:	e00d      	b.n	80011e2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80011c6:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <HAL_InitTick+0xdc>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80011d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011dc:	60fb      	str	r3, [r7, #12]
        break;
 80011de:	e000      	b.n	80011e2 <HAL_InitTick+0xae>
        break;
 80011e0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f000 f940 	bl	8001468 <HAL_SYSTICK_Config>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e009      	b.n	8001206 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f2:	2200      	movs	r2, #0
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	f04f 30ff 	mov.w	r0, #4294967295
 80011fa:	f000 f90d 	bl	8001418 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80011fe:	4a07      	ldr	r2, [pc, #28]	@ (800121c <HAL_InitTick+0xe8>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000024 	.word	0x20000024
 8001214:	e000e010 	.word	0xe000e010
 8001218:	20000000 	.word	0x20000000
 800121c:	20000020 	.word	0x20000020

08001220 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001224:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <HAL_IncTick+0x20>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <HAL_IncTick+0x24>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <HAL_IncTick+0x24>)
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000024 	.word	0x20000024
 8001244:	20000180 	.word	0x20000180

08001248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return uwTick;
 800124c:	4b03      	ldr	r3, [pc, #12]	@ (800125c <HAL_GetTick+0x14>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000180 	.word	0x20000180

08001260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001268:	f7ff ffee 	bl	8001248 <HAL_GetTick>
 800126c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001278:	d005      	beq.n	8001286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800127a:	4b0a      	ldr	r3, [pc, #40]	@ (80012a4 <HAL_Delay+0x44>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001286:	bf00      	nop
 8001288:	f7ff ffde 	bl	8001248 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	429a      	cmp	r2, r3
 8001296:	d8f7      	bhi.n	8001288 <HAL_Delay+0x28>
  {
  }
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000024 	.word	0x20000024

080012a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b8:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <__NVIC_SetPriorityGrouping+0x44>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012c4:	4013      	ands	r3, r2
 80012c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012da:	4a04      	ldr	r2, [pc, #16]	@ (80012ec <__NVIC_SetPriorityGrouping+0x44>)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	60d3      	str	r3, [r2, #12]
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f4:	4b04      	ldr	r3, [pc, #16]	@ (8001308 <__NVIC_GetPriorityGrouping+0x18>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	0a1b      	lsrs	r3, r3, #8
 80012fa:	f003 0307 	and.w	r3, r3, #7
}
 80012fe:	4618      	mov	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800131a:	2b00      	cmp	r3, #0
 800131c:	db0b      	blt.n	8001336 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	f003 021f 	and.w	r2, r3, #31
 8001324:	4907      	ldr	r1, [pc, #28]	@ (8001344 <__NVIC_EnableIRQ+0x38>)
 8001326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800132a:	095b      	lsrs	r3, r3, #5
 800132c:	2001      	movs	r0, #1
 800132e:	fa00 f202 	lsl.w	r2, r0, r2
 8001332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000e100 	.word	0xe000e100

08001348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	6039      	str	r1, [r7, #0]
 8001352:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001354:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001358:	2b00      	cmp	r3, #0
 800135a:	db0a      	blt.n	8001372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	b2da      	uxtb	r2, r3
 8001360:	490c      	ldr	r1, [pc, #48]	@ (8001394 <__NVIC_SetPriority+0x4c>)
 8001362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001366:	0112      	lsls	r2, r2, #4
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	440b      	add	r3, r1
 800136c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001370:	e00a      	b.n	8001388 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4908      	ldr	r1, [pc, #32]	@ (8001398 <__NVIC_SetPriority+0x50>)
 8001378:	88fb      	ldrh	r3, [r7, #6]
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	3b04      	subs	r3, #4
 8001380:	0112      	lsls	r2, r2, #4
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	440b      	add	r3, r1
 8001386:	761a      	strb	r2, [r3, #24]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000e100 	.word	0xe000e100
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800139c:	b480      	push	{r7}
 800139e:	b089      	sub	sp, #36	@ 0x24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f1c3 0307 	rsb	r3, r3, #7
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	bf28      	it	cs
 80013ba:	2304      	movcs	r3, #4
 80013bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3304      	adds	r3, #4
 80013c2:	2b06      	cmp	r3, #6
 80013c4:	d902      	bls.n	80013cc <NVIC_EncodePriority+0x30>
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3b03      	subs	r3, #3
 80013ca:	e000      	b.n	80013ce <NVIC_EncodePriority+0x32>
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	f04f 32ff 	mov.w	r2, #4294967295
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43da      	mvns	r2, r3
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	401a      	ands	r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e4:	f04f 31ff 	mov.w	r1, #4294967295
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	fa01 f303 	lsl.w	r3, r1, r3
 80013ee:	43d9      	mvns	r1, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	4313      	orrs	r3, r2
         );
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3724      	adds	r7, #36	@ 0x24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ff4c 	bl	80012a8 <__NVIC_SetPriorityGrouping>
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
 8001424:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001426:	f7ff ff63 	bl	80012f0 <__NVIC_GetPriorityGrouping>
 800142a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	68b9      	ldr	r1, [r7, #8]
 8001430:	6978      	ldr	r0, [r7, #20]
 8001432:	f7ff ffb3 	bl	800139c <NVIC_EncodePriority>
 8001436:	4602      	mov	r2, r0
 8001438:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800143c:	4611      	mov	r1, r2
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ff82 	bl	8001348 <__NVIC_SetPriority>
}
 8001444:	bf00      	nop
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001456:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff56 	bl	800130c <__NVIC_EnableIRQ>
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001478:	d301      	bcc.n	800147e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800147a:	2301      	movs	r3, #1
 800147c:	e00d      	b.n	800149a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800147e:	4a0a      	ldr	r2, [pc, #40]	@ (80014a8 <HAL_SYSTICK_Config+0x40>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001486:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <HAL_SYSTICK_Config+0x40>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <HAL_SYSTICK_Config+0x40>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a05      	ldr	r2, [pc, #20]	@ (80014a8 <HAL_SYSTICK_Config+0x40>)
 8001492:	f043 0303 	orr.w	r3, r3, #3
 8001496:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000e010 	.word	0xe000e010

080014ac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d844      	bhi.n	8001544 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80014ba:	a201      	add	r2, pc, #4	@ (adr r2, 80014c0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80014bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c0:	080014e3 	.word	0x080014e3
 80014c4:	08001501 	.word	0x08001501
 80014c8:	08001523 	.word	0x08001523
 80014cc:	08001545 	.word	0x08001545
 80014d0:	080014d5 	.word	0x080014d5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80014d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001554 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001554 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	6013      	str	r3, [r2, #0]
      break;
 80014e0:	e031      	b.n	8001546 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80014e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001554 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001554 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80014e8:	f023 0304 	bic.w	r3, r3, #4
 80014ec:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80014ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001558 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80014f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80014f4:	4a18      	ldr	r2, [pc, #96]	@ (8001558 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80014f6:	f023 030c 	bic.w	r3, r3, #12
 80014fa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80014fe:	e022      	b.n	8001546 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001500:	4b14      	ldr	r3, [pc, #80]	@ (8001554 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a13      	ldr	r2, [pc, #76]	@ (8001554 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001506:	f023 0304 	bic.w	r3, r3, #4
 800150a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800150c:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800150e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001512:	f023 030c 	bic.w	r3, r3, #12
 8001516:	4a10      	ldr	r2, [pc, #64]	@ (8001558 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001520:	e011      	b.n	8001546 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001522:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a0b      	ldr	r2, [pc, #44]	@ (8001554 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001528:	f023 0304 	bic.w	r3, r3, #4
 800152c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800152e:	4b0a      	ldr	r3, [pc, #40]	@ (8001558 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001530:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001534:	f023 030c 	bic.w	r3, r3, #12
 8001538:	4a07      	ldr	r2, [pc, #28]	@ (8001558 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800153a:	f043 0308 	orr.w	r3, r3, #8
 800153e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001542:	e000      	b.n	8001546 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001544:	bf00      	nop
  }
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000e010 	.word	0xe000e010
 8001558:	44020c00 	.word	0x44020c00

0800155c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001562:	4b17      	ldr	r3, [pc, #92]	@ (80015c0 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	2b00      	cmp	r3, #0
 800156c:	d002      	beq.n	8001574 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800156e:	2304      	movs	r3, #4
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	e01e      	b.n	80015b2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001574:	4b13      	ldr	r3, [pc, #76]	@ (80015c4 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001576:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	2b08      	cmp	r3, #8
 8001584:	d00f      	beq.n	80015a6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	2b08      	cmp	r3, #8
 800158a:	d80f      	bhi.n	80015ac <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	2b04      	cmp	r3, #4
 8001596:	d003      	beq.n	80015a0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001598:	e008      	b.n	80015ac <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
        break;
 800159e:	e008      	b.n	80015b2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80015a0:	2301      	movs	r3, #1
 80015a2:	607b      	str	r3, [r7, #4]
        break;
 80015a4:	e005      	b.n	80015b2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80015a6:	2302      	movs	r3, #2
 80015a8:	607b      	str	r3, [r7, #4]
        break;
 80015aa:	e002      	b.n	80015b2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80015ac:	2300      	movs	r3, #0
 80015ae:	607b      	str	r3, [r7, #4]
        break;
 80015b0:	bf00      	nop
    }
  }
  return systick_source;
 80015b2:	687b      	ldr	r3, [r7, #4]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000e010 	.word	0xe000e010
 80015c4:	44020c00 	.word	0x44020c00

080015c8 <HAL_DTS_Init>:
  *         parameters in the DTS_InitTypeDef and initialize the associated handle.
  * @param  hdts  DTS handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DTS_Init(DTS_HandleTypeDef *hdts)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the DTS handle allocation */
  if (hdts == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_DTS_Init+0x12>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e089      	b.n	80016ee <HAL_DTS_Init+0x126>
  assert_param(IS_DTS_TRIGGERINPUT(hdts->Init.TriggerInput));
  assert_param(IS_DTS_SAMPLINGTIME(hdts->Init.SamplingTime));
  assert_param(IS_DTS_THRESHOLD(hdts->Init.HighThreshold));
  assert_param(IS_DTS_THRESHOLD(hdts->Init.LowThreshold));

  if (hdts->State == HAL_DTS_STATE_RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d102      	bne.n	80015ec <HAL_DTS_Init+0x24>

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hdts->MspInitCallback(hdts);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_DTS_MspInit(hdts);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff f9ea 	bl	80009c0 <HAL_DTS_MspInit>
#endif /* USE_HAL_DTS_REGISTER_CALLBACKS */
  }

  /* Change the DTS state */
  hdts->State = HAL_DTS_STATE_BUSY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2202      	movs	r2, #2
 80015f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check ramp coefficient */
  if (hdts->Instance->RAMPVALR == 0UL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_DTS_Init+0x3a>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e075      	b.n	80016ee <HAL_DTS_Init+0x126>
  }

  /* Check factory calibration temperature  */
  if (hdts->Instance->T0VALR1 == 0UL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <HAL_DTS_Init+0x48>
  {
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e06e      	b.n	80016ee <HAL_DTS_Init+0x126>
  }

  /* Check Quick Measure option is enabled or disabled */
  if (hdts->Init.QuickMeasure == DTS_QUICKMEAS_DISABLE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d108      	bne.n	800162a <HAL_DTS_Init+0x62>
    if (hdts->Init.RefClock == DTS_REFCLKSEL_PCLK)
    {
      assert_param(IS_DTS_DIVIDER_RATIO_NUMBER(hdts->Init.Divider));
    }
    /* Quick measurement mode disabled */
    CLEAR_BIT(hdts->Instance->CFGR1, DTS_CFGR1_Q_MEAS_OPT);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	e00e      	b.n	8001648 <HAL_DTS_Init+0x80>
  }
  else
  {
    /* DTS_QUICKMEAS_ENABLE shall be used only when the LSE clock is
       selected as reference clock */
    if (hdts->Init.RefClock != DTS_REFCLKSEL_LSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001632:	d001      	beq.n	8001638 <HAL_DTS_Init+0x70>
    {
      return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e05a      	b.n	80016ee <HAL_DTS_Init+0x126>
    }

    /* Quick measurement mode enabled - no calibration needed */
    SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_Q_MEAS_OPT);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8001646:	601a      	str	r2, [r3, #0]
  }

  /* set the DTS clk source */
  if (hdts->Init.RefClock == DTS_REFCLKSEL_LSE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001650:	d108      	bne.n	8001664 <HAL_DTS_Init+0x9c>
  {
    SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_REFCLK_SEL);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	e007      	b.n	8001674 <HAL_DTS_Init+0xac>
  }
  else
  {
    CLEAR_BIT(hdts->Instance->CFGR1, DTS_CFGR1_REFCLK_SEL);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8001672:	601a      	str	r2, [r3, #0]
  }

  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_HSREF_CLK_DIV, (hdts->Init.Divider << DTS_CFGR1_HSREF_CLK_DIV_Pos));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f023 41fe 	bic.w	r1, r3, #2130706432	@ 0x7f000000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	061a      	lsls	r2, r3, #24
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_TS1_SMP_TIME, hdts->Init.SamplingTime);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f423 2170 	bic.w	r1, r3, #983040	@ 0xf0000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691a      	ldr	r2, [r3, #16]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_TS1_INTRIG_SEL, hdts->Init.TriggerInput);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->ITR1, DTS_ITR1_TS1_HITTHD, (hdts->Init.HighThreshold << DTS_ITR1_TS1_HITTHD_Pos));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	b299      	uxth	r1, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	041a      	lsls	r2, r3, #16
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	615a      	str	r2, [r3, #20]
  MODIFY_REG(hdts->Instance->ITR1, DTS_ITR1_TS1_LITTHD, hdts->Init.LowThreshold);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	0c1b      	lsrs	r3, r3, #16
 80016d6:	041b      	lsls	r3, r3, #16
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	69d1      	ldr	r1, [r2, #28]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	430b      	orrs	r3, r1
 80016e2:	6153      	str	r3, [r2, #20]

  /* Change the DTS state */
  hdts->State = HAL_DTS_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_DTS_Start>:
  * @brief  Start the DTS sensor.
  * @param  hdts  DTS handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DTS_Start(DTS_HandleTypeDef *hdts)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b084      	sub	sp, #16
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  uint32_t Ref_Time;

  /* Check the DTS handle allocation */
  if (hdts == NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_DTS_Start+0x12>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e03f      	b.n	8001788 <HAL_DTS_Start+0x92>
  }

  if (hdts->State == HAL_DTS_STATE_READY)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b01      	cmp	r3, #1
 8001712:	d138      	bne.n	8001786 <HAL_DTS_Start+0x90>
  {
    hdts->State = HAL_DTS_STATE_BUSY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2202      	movs	r2, #2
 8001718:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Enable DTS sensor */
    __HAL_DTS_ENABLE(hdts);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 0201 	orr.w	r2, r2, #1
 800172a:	601a      	str	r2, [r3, #0]

    /* Get Start Tick*/
    Ref_Time = HAL_GetTick();
 800172c:	f7ff fd8c 	bl	8001248 <HAL_GetTick>
 8001730:	60f8      	str	r0, [r7, #12]

    /* Wait till TS1_RDY flag is set */
    while (__HAL_DTS_GET_FLAG(hdts, DTS_FLAG_TS1_RDY) == RESET)
 8001732:	e008      	b.n	8001746 <HAL_DTS_Start+0x50>
    {
      if ((HAL_GetTick() - Ref_Time) > DTS_DELAY_STARTUP)
 8001734:	f7ff fd88 	bl	8001248 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b01      	cmp	r3, #1
 8001740:	d901      	bls.n	8001746 <HAL_DTS_Start+0x50>
      {
        return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e020      	b.n	8001788 <HAL_DTS_Start+0x92>
    while (__HAL_DTS_GET_FLAG(hdts, DTS_FLAG_TS1_RDY) == RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001750:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001754:	d1ee      	bne.n	8001734 <HAL_DTS_Start+0x3e>
      }
    }

    if (__HAL_DTS_GET_TRIGGER(hdts) == DTS_TRIGGER_HW_NONE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10a      	bne.n	800177a <HAL_DTS_Start+0x84>
    {
      /* Start continuous measures */
      SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_TS1_START);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 0210 	orr.w	r2, r2, #16
 8001772:	601a      	str	r2, [r3, #0]

      /* Ensure start is taken into account */
      HAL_Delay(TS_TIMEOUT_MS);
 8001774:	2005      	movs	r0, #5
 8001776:	f7ff fd73 	bl	8001260 <HAL_Delay>
    }

    hdts->State = HAL_DTS_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  else
  {
    return HAL_BUSY;
  }

  return HAL_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	e000      	b.n	8001788 <HAL_DTS_Start+0x92>
    return HAL_BUSY;
 8001786:	2302      	movs	r3, #2
}
 8001788:	4618      	mov	r0, r3
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_DTS_Stop>:
  * @brief  Stop the DTS Sensor.
  * @param  hdts  DTS handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DTS_Stop(DTS_HandleTypeDef *hdts)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Check the DTS handle allocation */
  if (hdts == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_DTS_Stop+0x12>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e027      	b.n	80017f2 <HAL_DTS_Stop+0x62>
  }

  if (hdts->State == HAL_DTS_STATE_READY)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d120      	bne.n	80017f0 <HAL_DTS_Stop+0x60>
  {
    hdts->State = HAL_DTS_STATE_BUSY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2202      	movs	r2, #2
 80017b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    if (__HAL_DTS_GET_TRIGGER(hdts) == DTS_TRIGGER_HW_NONE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d107      	bne.n	80017d4 <HAL_DTS_Stop+0x44>
    {
      CLEAR_BIT(hdts->Instance->CFGR1, DTS_CFGR1_TS1_START);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0210 	bic.w	r2, r2, #16
 80017d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable the selected DTS sensor */
    __HAL_DTS_DISABLE(hdts);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0201 	bic.w	r2, r2, #1
 80017e2:	601a      	str	r2, [r3, #0]

    hdts->State = HAL_DTS_STATE_READY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  else
  {
    return HAL_BUSY;
  }

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
 80017ee:	e000      	b.n	80017f2 <HAL_DTS_Stop+0x62>
    return HAL_BUSY;
 80017f0:	2302      	movs	r3, #2
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <HAL_DTS_GetTemperature>:
  * @param  Temperature  Temperature in deg C
  * @note This function retrieves latest available measure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DTS_GetTemperature(DTS_HandleTypeDef *hdts, int32_t *Temperature)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b088      	sub	sp, #32
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
  uint32_t samples;
  uint32_t t0_temp;
  uint32_t t0_freq;
  uint32_t ramp_coeff;

  if (hdts->State == HAL_DTS_STATE_READY)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b01      	cmp	r3, #1
 8001812:	d16c      	bne.n	80018ee <HAL_DTS_GetTemperature+0xf0>
  {
    hdts->State = HAL_DTS_STATE_BUSY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2202      	movs	r2, #2
 8001818:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Get the total number of samples */
    samples = (hdts->Instance->DR & DTS_DR_TS1_MFREQ);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	b29b      	uxth	r3, r3
 8001824:	617b      	str	r3, [r7, #20]

    if ((hdts->Init.SamplingTime == 0UL) || (samples == 0UL))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <HAL_DTS_GetTemperature+0x36>
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d105      	bne.n	8001840 <HAL_DTS_GetTemperature+0x42>
    {
      hdts->State = HAL_DTS_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e057      	b.n	80018f0 <HAL_DTS_GetTemperature+0xf2>
    }

    if ((hdts->Init.RefClock) == DTS_REFCLKSEL_LSE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001848:	d108      	bne.n	800185c <HAL_DTS_GetTemperature+0x5e>
    {
      /* Measured frequency On Hz */
      freq_meas = (LSE_VALUE * samples) / (hdts->Init.SamplingTime >> DTS_CFGR1_TS1_SMP_TIME_Pos);
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	03da      	lsls	r2, r3, #15
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	0c1b      	lsrs	r3, r3, #16
 8001854:	fbb2 f3f3 	udiv	r3, r2, r3
 8001858:	61fb      	str	r3, [r7, #28]
 800185a:	e00b      	b.n	8001874 <HAL_DTS_GetTemperature+0x76>
    }
    else
    {
      /* Measured frequency On Hz */
      freq_meas = (HAL_RCC_GetPCLK1Freq() * (hdts->Init.SamplingTime >> DTS_CFGR1_TS1_SMP_TIME_Pos)) / samples;
 800185c:	f001 f9a6 	bl	8002bac <HAL_RCC_GetPCLK1Freq>
 8001860:	4602      	mov	r2, r0
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	0c1b      	lsrs	r3, r3, #16
 8001868:	fb03 f202 	mul.w	r2, r3, r2
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001872:	61fb      	str	r3, [r7, #28]
    }

    /* Read factory settings */
    t0_temp = hdts->Instance->T0VALR1 >> DTS_T0VALR1_TS1_T0_Pos;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	0c1b      	lsrs	r3, r3, #16
 800187c:	61bb      	str	r3, [r7, #24]

    if (t0_temp == 0UL)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d102      	bne.n	800188a <HAL_DTS_GetTemperature+0x8c>
    {
      t0_temp = DTS_FACTORY_TEMPERATURE1; /* 30 deg C */
 8001884:	231e      	movs	r3, #30
 8001886:	61bb      	str	r3, [r7, #24]
 8001888:	e00b      	b.n	80018a2 <HAL_DTS_GetTemperature+0xa4>
    }
    else if (t0_temp == 1UL)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d102      	bne.n	8001896 <HAL_DTS_GetTemperature+0x98>
    {
      t0_temp = DTS_FACTORY_TEMPERATURE2; /* 130 deg C */
 8001890:	2382      	movs	r3, #130	@ 0x82
 8001892:	61bb      	str	r3, [r7, #24]
 8001894:	e005      	b.n	80018a2 <HAL_DTS_GetTemperature+0xa4>
    }
    else
    {
      hdts->State = HAL_DTS_STATE_READY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e026      	b.n	80018f0 <HAL_DTS_GetTemperature+0xf2>
    }

    t0_freq = (hdts->Instance->T0VALR1 & DTS_T0VALR1_TS1_FMT0) * 100UL; /* Hz */
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	2264      	movs	r2, #100	@ 0x64
 80018ac:	fb02 f303 	mul.w	r3, r2, r3
 80018b0:	613b      	str	r3, [r7, #16]

    ramp_coeff = hdts->Instance->RAMPVALR & DTS_RAMPVALR_TS1_RAMP_COEFF; /* deg C/Hz */
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	60fb      	str	r3, [r7, #12]

    if (ramp_coeff == 0UL)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d105      	bne.n	80018ce <HAL_DTS_GetTemperature+0xd0>
    {
      hdts->State = HAL_DTS_STATE_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e010      	b.n	80018f0 <HAL_DTS_GetTemperature+0xf2>
    }

    /* Figure out the temperature deg C */
    *Temperature = (int32_t)t0_temp + (((int32_t)freq_meas - (int32_t)t0_freq) / (int32_t)ramp_coeff);
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad2      	subs	r2, r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	fb92 f2f3 	sdiv	r2, r2, r3
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	441a      	add	r2, r3
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	601a      	str	r2, [r3, #0]

    hdts->State = HAL_DTS_STATE_READY;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  else
  {
    return HAL_BUSY;
  }

  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	e000      	b.n	80018f0 <HAL_DTS_GetTemperature+0xf2>
    return HAL_BUSY;
 80018ee:	2302      	movs	r3, #2
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3720      	adds	r7, #32
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80018f8:	b480      	push	{r7}
 80018fa:	b087      	sub	sp, #28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	460b      	mov	r3, r1
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800190a:	7afb      	ldrb	r3, [r7, #11]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d011      	beq.n	8001934 <HAL_EXTI_RegisterCallback+0x3c>
 8001910:	2b02      	cmp	r3, #2
 8001912:	dc13      	bgt.n	800193c <HAL_EXTI_RegisterCallback+0x44>
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <HAL_EXTI_RegisterCallback+0x26>
 8001918:	2b01      	cmp	r3, #1
 800191a:	d007      	beq.n	800192c <HAL_EXTI_RegisterCallback+0x34>
 800191c:	e00e      	b.n	800193c <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	609a      	str	r2, [r3, #8]
      break;
 800192a:	e00a      	b.n	8001942 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	605a      	str	r2, [r3, #4]
      break;
 8001932:	e006      	b.n	8001942 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	609a      	str	r2, [r3, #8]
      break;
 800193a:	e002      	b.n	8001942 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	75fb      	strb	r3, [r7, #23]
      break;
 8001940:	bf00      	nop
  }

  return status;
 8001942:	7dfb      	ldrb	r3, [r7, #23]
}
 8001944:	4618      	mov	r0, r3
 8001946:	371c      	adds	r7, #28
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e003      	b.n	800196c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800196a:	2300      	movs	r3, #0
  }
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	0c1b      	lsrs	r3, r3, #16
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 031f 	and.w	r3, r3, #31
 8001994:	2201      	movs	r2, #1
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	015a      	lsls	r2, r3, #5
 80019a0:	4b17      	ldr	r3, [pc, #92]	@ (8001a00 <HAL_EXTI_IRQHandler+0x88>)
 80019a2:	4413      	add	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d009      	beq.n	80019ca <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	015a      	lsls	r2, r3, #5
 80019ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001a04 <HAL_EXTI_IRQHandler+0x8c>)
 80019d0:	4413      	add	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d009      	beq.n	80019f8 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d002      	beq.n	80019f8 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	4798      	blx	r3
    }
  }
}
 80019f8:	bf00      	nop
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	4402200c 	.word	0x4402200c
 8001a04:	44022010 	.word	0x44022010

08001a08 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001a16:	e136      	b.n	8001c86 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	fa01 f303 	lsl.w	r3, r1, r3
 8001a24:	4013      	ands	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 8128 	beq.w	8001c80 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x38>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b12      	cmp	r3, #18
 8001a3e:	d125      	bne.n	8001a8c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	08da      	lsrs	r2, r3, #3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3208      	adds	r2, #8
 8001a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	220f      	movs	r2, #15
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	4013      	ands	r3, r2
 8001a62:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	f003 020f 	and.w	r2, r3, #15
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	08da      	lsrs	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3208      	adds	r2, #8
 8001a86:	6979      	ldr	r1, [r7, #20]
 8001a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2203      	movs	r2, #3
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0203 	and.w	r2, r3, #3
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d00b      	beq.n	8001ae0 <HAL_GPIO_Init+0xd8>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d007      	beq.n	8001ae0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ad4:	2b11      	cmp	r3, #17
 8001ad6:	d003      	beq.n	8001ae0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b12      	cmp	r3, #18
 8001ade:	d130      	bne.n	8001b42 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2203      	movs	r2, #3
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	4013      	ands	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b16:	2201      	movs	r2, #1
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	4013      	ands	r3, r2
 8001b24:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	f003 0201 	and.w	r2, r3, #1
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b03      	cmp	r3, #3
 8001b48:	d017      	beq.n	8001b7a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	2203      	movs	r2, #3
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d07c      	beq.n	8001c80 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001b86:	4a47      	ldr	r2, [pc, #284]	@ (8001ca4 <HAL_GPIO_Init+0x29c>)
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	089b      	lsrs	r3, r3, #2
 8001b8c:	3318      	adds	r3, #24
 8001b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b92:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	220f      	movs	r2, #15
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	0a9a      	lsrs	r2, r3, #10
 8001bae:	4b3e      	ldr	r3, [pc, #248]	@ (8001ca8 <HAL_GPIO_Init+0x2a0>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	f002 0203 	and.w	r2, r2, #3
 8001bb8:	00d2      	lsls	r2, r2, #3
 8001bba:	4093      	lsls	r3, r2
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001bc2:	4938      	ldr	r1, [pc, #224]	@ (8001ca4 <HAL_GPIO_Init+0x29c>)
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	089b      	lsrs	r3, r3, #2
 8001bc8:	3318      	adds	r3, #24
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001bd0:	4b34      	ldr	r3, [pc, #208]	@ (8001ca4 <HAL_GPIO_Init+0x29c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001bf4:	4a2b      	ldr	r2, [pc, #172]	@ (8001ca4 <HAL_GPIO_Init+0x29c>)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8001ca4 <HAL_GPIO_Init+0x29c>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	4013      	ands	r3, r2
 8001c08:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001c1e:	4a21      	ldr	r2, [pc, #132]	@ (8001ca4 <HAL_GPIO_Init+0x29c>)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001c24:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca4 <HAL_GPIO_Init+0x29c>)
 8001c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c2a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	4013      	ands	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001c4a:	4a16      	ldr	r2, [pc, #88]	@ (8001ca4 <HAL_GPIO_Init+0x29c>)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001c52:	4b14      	ldr	r3, [pc, #80]	@ (8001ca4 <HAL_GPIO_Init+0x29c>)
 8001c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c58:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	4013      	ands	r3, r2
 8001c62:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001c78:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca4 <HAL_GPIO_Init+0x29c>)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	3301      	adds	r3, #1
 8001c84:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f47f aec1 	bne.w	8001a18 <HAL_GPIO_Init+0x10>
  }
}
 8001c96:	bf00      	nop
 8001c98:	bf00      	nop
 8001c9a:	371c      	adds	r7, #28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	44022000 	.word	0x44022000
 8001ca8:	002f7f7f 	.word	0x002f7f7f

08001cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cbc:	787b      	ldrb	r3, [r7, #1]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cc2:	887a      	ldrh	r2, [r7, #2]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cc8:	e002      	b.n	8001cd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d18 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d002      	beq.n	8001cfa <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
 8001cf8:	e007      	b.n	8001d0a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001cfa:	4b07      	ldr	r3, [pc, #28]	@ (8001d18 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 0204 	bic.w	r2, r3, #4
 8001d02:	4905      	ldr	r1, [pc, #20]	@ (8001d18 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	40030400 	.word	0x40030400

08001d1c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001d20:	4b05      	ldr	r3, [pc, #20]	@ (8001d38 <HAL_ICACHE_Enable+0x1c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a04      	ldr	r2, [pc, #16]	@ (8001d38 <HAL_ICACHE_Enable+0x1c>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	40030400 	.word	0x40030400

08001d3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d102      	bne.n	8001d50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	f000 bc28 	b.w	80025a0 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d50:	4b94      	ldr	r3, [pc, #592]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	f003 0318 	and.w	r3, r3, #24
 8001d58:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001d5a:	4b92      	ldr	r3, [pc, #584]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0310 	and.w	r3, r3, #16
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d05b      	beq.n	8001e28 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d005      	beq.n	8001d82 <HAL_RCC_OscConfig+0x46>
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	2b18      	cmp	r3, #24
 8001d7a:	d114      	bne.n	8001da6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d111      	bne.n	8001da6 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d102      	bne.n	8001d90 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	f000 bc08 	b.w	80025a0 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001d90:	4b84      	ldr	r3, [pc, #528]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	041b      	lsls	r3, r3, #16
 8001d9e:	4981      	ldr	r1, [pc, #516]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001da4:	e040      	b.n	8001e28 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d023      	beq.n	8001df6 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001dae:	4b7d      	ldr	r3, [pc, #500]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a7c      	ldr	r2, [pc, #496]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dba:	f7ff fa45 	bl	8001248 <HAL_GetTick>
 8001dbe:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001dc2:	f7ff fa41 	bl	8001248 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e3e5      	b.n	80025a0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001dd4:	4b73      	ldr	r3, [pc, #460]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001de0:	4b70      	ldr	r3, [pc, #448]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	041b      	lsls	r3, r3, #16
 8001dee:	496d      	ldr	r1, [pc, #436]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	618b      	str	r3, [r1, #24]
 8001df4:	e018      	b.n	8001e28 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001df6:	4b6b      	ldr	r3, [pc, #428]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a6a      	ldr	r2, [pc, #424]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001dfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e02:	f7ff fa21 	bl	8001248 <HAL_GetTick>
 8001e06:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001e0a:	f7ff fa1d 	bl	8001248 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e3c1      	b.n	80025a0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001e1c:	4b61      	ldr	r3, [pc, #388]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f0      	bne.n	8001e0a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 80a0 	beq.w	8001f76 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	2b10      	cmp	r3, #16
 8001e3a:	d005      	beq.n	8001e48 <HAL_RCC_OscConfig+0x10c>
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	2b18      	cmp	r3, #24
 8001e40:	d109      	bne.n	8001e56 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d106      	bne.n	8001e56 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f040 8092 	bne.w	8001f76 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e3a4      	b.n	80025a0 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x132>
 8001e60:	4b50      	ldr	r3, [pc, #320]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a4f      	ldr	r2, [pc, #316]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001e66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	e058      	b.n	8001f20 <HAL_RCC_OscConfig+0x1e4>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d112      	bne.n	8001e9c <HAL_RCC_OscConfig+0x160>
 8001e76:	4b4b      	ldr	r3, [pc, #300]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a4a      	ldr	r2, [pc, #296]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001e7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	4b48      	ldr	r3, [pc, #288]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a47      	ldr	r2, [pc, #284]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001e88:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	4b45      	ldr	r3, [pc, #276]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a44      	ldr	r2, [pc, #272]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001e94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	e041      	b.n	8001f20 <HAL_RCC_OscConfig+0x1e4>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ea4:	d112      	bne.n	8001ecc <HAL_RCC_OscConfig+0x190>
 8001ea6:	4b3f      	ldr	r3, [pc, #252]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a3e      	ldr	r2, [pc, #248]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001eac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	4b3c      	ldr	r3, [pc, #240]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a3b      	ldr	r2, [pc, #236]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001eb8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	4b39      	ldr	r3, [pc, #228]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a38      	ldr	r2, [pc, #224]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	e029      	b.n	8001f20 <HAL_RCC_OscConfig+0x1e4>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001ed4:	d112      	bne.n	8001efc <HAL_RCC_OscConfig+0x1c0>
 8001ed6:	4b33      	ldr	r3, [pc, #204]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a32      	ldr	r2, [pc, #200]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001edc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b30      	ldr	r3, [pc, #192]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a2f      	ldr	r2, [pc, #188]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001ee8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	4b2d      	ldr	r3, [pc, #180]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a2c      	ldr	r2, [pc, #176]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e011      	b.n	8001f20 <HAL_RCC_OscConfig+0x1e4>
 8001efc:	4b29      	ldr	r3, [pc, #164]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a28      	ldr	r2, [pc, #160]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001f02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	4b26      	ldr	r3, [pc, #152]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a25      	ldr	r2, [pc, #148]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001f0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	4b23      	ldr	r3, [pc, #140]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a22      	ldr	r2, [pc, #136]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001f1a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d013      	beq.n	8001f50 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7ff f98e 	bl	8001248 <HAL_GetTick>
 8001f2c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001f30:	f7ff f98a 	bl	8001248 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	@ 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e32e      	b.n	80025a0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f42:	4b18      	ldr	r3, [pc, #96]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0x1f4>
 8001f4e:	e012      	b.n	8001f76 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f50:	f7ff f97a 	bl	8001248 <HAL_GetTick>
 8001f54:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001f58:	f7ff f976 	bl	8001248 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	@ 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e31a      	b.n	80025a0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa4 <HAL_RCC_OscConfig+0x268>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 809a 	beq.w	80020b8 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d005      	beq.n	8001f96 <HAL_RCC_OscConfig+0x25a>
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	2b18      	cmp	r3, #24
 8001f8e:	d149      	bne.n	8002024 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d146      	bne.n	8002024 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d104      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e2fe      	b.n	80025a0 <HAL_RCC_OscConfig+0x864>
 8001fa2:	bf00      	nop
 8001fa4:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d11c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001fae:	4b9a      	ldr	r3, [pc, #616]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0218 	and.w	r2, r3, #24
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d014      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001fbe:	4b96      	ldr	r3, [pc, #600]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 0218 	bic.w	r2, r3, #24
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	4993      	ldr	r1, [pc, #588]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001fd0:	f000 fdd0 	bl	8002b74 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fd4:	4b91      	ldr	r3, [pc, #580]	@ (800221c <HAL_RCC_OscConfig+0x4e0>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff f8ab 	bl	8001134 <HAL_InitTick>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e2db      	b.n	80025a0 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe8:	f7ff f92e 	bl	8001248 <HAL_GetTick>
 8001fec:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001ff0:	f7ff f92a 	bl	8001248 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e2ce      	b.n	80025a0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002002:	4b85      	ldr	r3, [pc, #532]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800200e:	4b82      	ldr	r3, [pc, #520]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	041b      	lsls	r3, r3, #16
 800201c:	497e      	ldr	r1, [pc, #504]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 800201e:	4313      	orrs	r3, r2
 8002020:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002022:	e049      	b.n	80020b8 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d02c      	beq.n	8002086 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800202c:	4b7a      	ldr	r3, [pc, #488]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f023 0218 	bic.w	r2, r3, #24
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	4977      	ldr	r1, [pc, #476]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800203e:	4b76      	ldr	r3, [pc, #472]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a75      	ldr	r2, [pc, #468]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204a:	f7ff f8fd 	bl	8001248 <HAL_GetTick>
 800204e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002052:	f7ff f8f9 	bl	8001248 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e29d      	b.n	80025a0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002064:	4b6c      	ldr	r3, [pc, #432]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002070:	4b69      	ldr	r3, [pc, #420]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	041b      	lsls	r3, r3, #16
 800207e:	4966      	ldr	r1, [pc, #408]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 8002080:	4313      	orrs	r3, r2
 8002082:	610b      	str	r3, [r1, #16]
 8002084:	e018      	b.n	80020b8 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002086:	4b64      	ldr	r3, [pc, #400]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a63      	ldr	r2, [pc, #396]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 800208c:	f023 0301 	bic.w	r3, r3, #1
 8002090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002092:	f7ff f8d9 	bl	8001248 <HAL_GetTick>
 8002096:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800209a:	f7ff f8d5 	bl	8001248 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e279      	b.n	80025a0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020ac:	4b5a      	ldr	r3, [pc, #360]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f0      	bne.n	800209a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d03c      	beq.n	800213e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d01c      	beq.n	8002106 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020cc:	4b52      	ldr	r3, [pc, #328]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 80020ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020d2:	4a51      	ldr	r2, [pc, #324]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 80020d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80020d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020dc:	f7ff f8b4 	bl	8001248 <HAL_GetTick>
 80020e0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80020e4:	f7ff f8b0 	bl	8001248 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e254      	b.n	80025a0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80020f6:	4b48      	ldr	r3, [pc, #288]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 80020f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0ef      	beq.n	80020e4 <HAL_RCC_OscConfig+0x3a8>
 8002104:	e01b      	b.n	800213e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002106:	4b44      	ldr	r3, [pc, #272]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 8002108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800210c:	4a42      	ldr	r2, [pc, #264]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 800210e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002112:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002116:	f7ff f897 	bl	8001248 <HAL_GetTick>
 800211a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800211e:	f7ff f893 	bl	8001248 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e237      	b.n	80025a0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002130:	4b39      	ldr	r3, [pc, #228]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 8002132:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002136:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1ef      	bne.n	800211e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 80d2 	beq.w	80022f0 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800214c:	4b34      	ldr	r3, [pc, #208]	@ (8002220 <HAL_RCC_OscConfig+0x4e4>)
 800214e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d118      	bne.n	800218a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002158:	4b31      	ldr	r3, [pc, #196]	@ (8002220 <HAL_RCC_OscConfig+0x4e4>)
 800215a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215c:	4a30      	ldr	r2, [pc, #192]	@ (8002220 <HAL_RCC_OscConfig+0x4e4>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002164:	f7ff f870 	bl	8001248 <HAL_GetTick>
 8002168:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800216c:	f7ff f86c 	bl	8001248 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e210      	b.n	80025a0 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800217e:	4b28      	ldr	r3, [pc, #160]	@ (8002220 <HAL_RCC_OscConfig+0x4e4>)
 8002180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d108      	bne.n	80021a4 <HAL_RCC_OscConfig+0x468>
 8002192:	4b21      	ldr	r3, [pc, #132]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 8002194:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002198:	4a1f      	ldr	r2, [pc, #124]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80021a2:	e074      	b.n	800228e <HAL_RCC_OscConfig+0x552>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d118      	bne.n	80021de <HAL_RCC_OscConfig+0x4a2>
 80021ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 80021ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021b2:	4a19      	ldr	r2, [pc, #100]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80021bc:	4b16      	ldr	r3, [pc, #88]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 80021be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021c2:	4a15      	ldr	r2, [pc, #84]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 80021c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80021cc:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 80021ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021d2:	4a11      	ldr	r2, [pc, #68]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 80021d4:	f023 0304 	bic.w	r3, r3, #4
 80021d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80021dc:	e057      	b.n	800228e <HAL_RCC_OscConfig+0x552>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2b05      	cmp	r3, #5
 80021e4:	d11e      	bne.n	8002224 <HAL_RCC_OscConfig+0x4e8>
 80021e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 80021e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 80021ee:	f043 0304 	orr.w	r3, r3, #4
 80021f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80021f6:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 80021f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021fc:	4a06      	ldr	r2, [pc, #24]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 80021fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002202:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002206:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 8002208:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800220c:	4a02      	ldr	r2, [pc, #8]	@ (8002218 <HAL_RCC_OscConfig+0x4dc>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002216:	e03a      	b.n	800228e <HAL_RCC_OscConfig+0x552>
 8002218:	44020c00 	.word	0x44020c00
 800221c:	20000020 	.word	0x20000020
 8002220:	44020800 	.word	0x44020800
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b85      	cmp	r3, #133	@ 0x85
 800222a:	d118      	bne.n	800225e <HAL_RCC_OscConfig+0x522>
 800222c:	4ba2      	ldr	r3, [pc, #648]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 800222e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002232:	4aa1      	ldr	r2, [pc, #644]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 8002234:	f043 0304 	orr.w	r3, r3, #4
 8002238:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800223c:	4b9e      	ldr	r3, [pc, #632]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 800223e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002242:	4a9d      	ldr	r2, [pc, #628]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 8002244:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002248:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800224c:	4b9a      	ldr	r3, [pc, #616]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 800224e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002252:	4a99      	ldr	r2, [pc, #612]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800225c:	e017      	b.n	800228e <HAL_RCC_OscConfig+0x552>
 800225e:	4b96      	ldr	r3, [pc, #600]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 8002260:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002264:	4a94      	ldr	r2, [pc, #592]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 8002266:	f023 0301 	bic.w	r3, r3, #1
 800226a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800226e:	4b92      	ldr	r3, [pc, #584]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 8002270:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002274:	4a90      	ldr	r2, [pc, #576]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 8002276:	f023 0304 	bic.w	r3, r3, #4
 800227a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800227e:	4b8e      	ldr	r3, [pc, #568]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 8002280:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002284:	4a8c      	ldr	r2, [pc, #560]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 8002286:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800228a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d016      	beq.n	80022c4 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002296:	f7fe ffd7 	bl	8001248 <HAL_GetTick>
 800229a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800229c:	e00a      	b.n	80022b4 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7fe ffd3 	bl	8001248 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e175      	b.n	80025a0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022b4:	4b80      	ldr	r3, [pc, #512]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 80022b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0ed      	beq.n	800229e <HAL_RCC_OscConfig+0x562>
 80022c2:	e015      	b.n	80022f0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c4:	f7fe ffc0 	bl	8001248 <HAL_GetTick>
 80022c8:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022ca:	e00a      	b.n	80022e2 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022cc:	f7fe ffbc 	bl	8001248 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e15e      	b.n	80025a0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022e2:	4b75      	ldr	r3, [pc, #468]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 80022e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1ed      	bne.n	80022cc <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d036      	beq.n	800236a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002300:	2b00      	cmp	r3, #0
 8002302:	d019      	beq.n	8002338 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002304:	4b6c      	ldr	r3, [pc, #432]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a6b      	ldr	r2, [pc, #428]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 800230a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800230e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002310:	f7fe ff9a 	bl	8001248 <HAL_GetTick>
 8002314:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002318:	f7fe ff96 	bl	8001248 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e13a      	b.n	80025a0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800232a:	4b63      	ldr	r3, [pc, #396]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0x5dc>
 8002336:	e018      	b.n	800236a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002338:	4b5f      	ldr	r3, [pc, #380]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a5e      	ldr	r2, [pc, #376]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 800233e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002342:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002344:	f7fe ff80 	bl	8001248 <HAL_GetTick>
 8002348:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800234c:	f7fe ff7c 	bl	8001248 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e120      	b.n	80025a0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800235e:	4b56      	ldr	r3, [pc, #344]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 8115 	beq.w	800259e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	2b18      	cmp	r3, #24
 8002378:	f000 80af 	beq.w	80024da <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002380:	2b02      	cmp	r3, #2
 8002382:	f040 8086 	bne.w	8002492 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002386:	4b4c      	ldr	r3, [pc, #304]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a4b      	ldr	r2, [pc, #300]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 800238c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002392:	f7fe ff59 	bl	8001248 <HAL_GetTick>
 8002396:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800239a:	f7fe ff55 	bl	8001248 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e0f9      	b.n	80025a0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80023ac:	4b42      	ldr	r3, [pc, #264]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f0      	bne.n	800239a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80023b8:	4b3f      	ldr	r3, [pc, #252]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 80023ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80023c0:	f023 0303 	bic.w	r3, r3, #3
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80023cc:	0212      	lsls	r2, r2, #8
 80023ce:	430a      	orrs	r2, r1
 80023d0:	4939      	ldr	r1, [pc, #228]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	628b      	str	r3, [r1, #40]	@ 0x28
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023da:	3b01      	subs	r3, #1
 80023dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e4:	3b01      	subs	r3, #1
 80023e6:	025b      	lsls	r3, r3, #9
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f0:	3b01      	subs	r3, #1
 80023f2:	041b      	lsls	r3, r3, #16
 80023f4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	3b01      	subs	r3, #1
 8002400:	061b      	lsls	r3, r3, #24
 8002402:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002406:	492c      	ldr	r1, [pc, #176]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 8002408:	4313      	orrs	r3, r2
 800240a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800240c:	4b2a      	ldr	r3, [pc, #168]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 800240e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002410:	4a29      	ldr	r2, [pc, #164]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 8002412:	f023 0310 	bic.w	r3, r3, #16
 8002416:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800241c:	4a26      	ldr	r2, [pc, #152]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002422:	4b25      	ldr	r3, [pc, #148]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 8002424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002426:	4a24      	ldr	r2, [pc, #144]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 8002428:	f043 0310 	orr.w	r3, r3, #16
 800242c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800242e:	4b22      	ldr	r3, [pc, #136]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 8002430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002432:	f023 020c 	bic.w	r2, r3, #12
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243a:	491f      	ldr	r1, [pc, #124]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 800243c:	4313      	orrs	r3, r2
 800243e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002440:	4b1d      	ldr	r3, [pc, #116]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 8002442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002444:	f023 0220 	bic.w	r2, r3, #32
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800244c:	491a      	ldr	r1, [pc, #104]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 800244e:	4313      	orrs	r3, r2
 8002450:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002452:	4b19      	ldr	r3, [pc, #100]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 8002454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002456:	4a18      	ldr	r2, [pc, #96]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 8002458:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800245c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800245e:	4b16      	ldr	r3, [pc, #88]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a15      	ldr	r2, [pc, #84]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 8002464:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246a:	f7fe feed 	bl	8001248 <HAL_GetTick>
 800246e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002472:	f7fe fee9 	bl	8001248 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e08d      	b.n	80025a0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002484:	4b0c      	ldr	r3, [pc, #48]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x736>
 8002490:	e085      	b.n	800259e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002492:	4b09      	ldr	r3, [pc, #36]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a08      	ldr	r2, [pc, #32]	@ (80024b8 <HAL_RCC_OscConfig+0x77c>)
 8002498:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800249c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249e:	f7fe fed3 	bl	8001248 <HAL_GetTick>
 80024a2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80024a4:	e00a      	b.n	80024bc <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80024a6:	f7fe fecf 	bl	8001248 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d903      	bls.n	80024bc <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e073      	b.n	80025a0 <HAL_RCC_OscConfig+0x864>
 80024b8:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80024bc:	4b3a      	ldr	r3, [pc, #232]	@ (80025a8 <HAL_RCC_OscConfig+0x86c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1ee      	bne.n	80024a6 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80024c8:	4b37      	ldr	r3, [pc, #220]	@ (80025a8 <HAL_RCC_OscConfig+0x86c>)
 80024ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024cc:	4a36      	ldr	r2, [pc, #216]	@ (80025a8 <HAL_RCC_OscConfig+0x86c>)
 80024ce:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80024d2:	f023 0303 	bic.w	r3, r3, #3
 80024d6:	6293      	str	r3, [r2, #40]	@ 0x28
 80024d8:	e061      	b.n	800259e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80024da:	4b33      	ldr	r3, [pc, #204]	@ (80025a8 <HAL_RCC_OscConfig+0x86c>)
 80024dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024de:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80024e0:	4b31      	ldr	r3, [pc, #196]	@ (80025a8 <HAL_RCC_OscConfig+0x86c>)
 80024e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024e4:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d031      	beq.n	8002552 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	f003 0203 	and.w	r2, r3, #3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d12a      	bne.n	8002552 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	0a1b      	lsrs	r3, r3, #8
 8002500:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002508:	429a      	cmp	r2, r3
 800250a:	d122      	bne.n	8002552 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002516:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002518:	429a      	cmp	r2, r3
 800251a:	d11a      	bne.n	8002552 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	0a5b      	lsrs	r3, r3, #9
 8002520:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002528:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800252a:	429a      	cmp	r2, r3
 800252c:	d111      	bne.n	8002552 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	0c1b      	lsrs	r3, r3, #16
 8002532:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800253a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800253c:	429a      	cmp	r2, r3
 800253e:	d108      	bne.n	8002552 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	0e1b      	lsrs	r3, r3, #24
 8002544:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800254e:	429a      	cmp	r2, r3
 8002550:	d001      	beq.n	8002556 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e024      	b.n	80025a0 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002556:	4b14      	ldr	r3, [pc, #80]	@ (80025a8 <HAL_RCC_OscConfig+0x86c>)
 8002558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800255a:	08db      	lsrs	r3, r3, #3
 800255c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002564:	429a      	cmp	r2, r3
 8002566:	d01a      	beq.n	800259e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002568:	4b0f      	ldr	r3, [pc, #60]	@ (80025a8 <HAL_RCC_OscConfig+0x86c>)
 800256a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256c:	4a0e      	ldr	r2, [pc, #56]	@ (80025a8 <HAL_RCC_OscConfig+0x86c>)
 800256e:	f023 0310 	bic.w	r3, r3, #16
 8002572:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7fe fe68 	bl	8001248 <HAL_GetTick>
 8002578:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800257a:	bf00      	nop
 800257c:	f7fe fe64 	bl	8001248 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	4293      	cmp	r3, r2
 8002586:	d0f9      	beq.n	800257c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258c:	4a06      	ldr	r2, [pc, #24]	@ (80025a8 <HAL_RCC_OscConfig+0x86c>)
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002592:	4b05      	ldr	r3, [pc, #20]	@ (80025a8 <HAL_RCC_OscConfig+0x86c>)
 8002594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002596:	4a04      	ldr	r2, [pc, #16]	@ (80025a8 <HAL_RCC_OscConfig+0x86c>)
 8002598:	f043 0310 	orr.w	r3, r3, #16
 800259c:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3720      	adds	r7, #32
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	44020c00 	.word	0x44020c00

080025ac <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e19e      	b.n	80028fe <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c0:	4b83      	ldr	r3, [pc, #524]	@ (80027d0 <HAL_RCC_ClockConfig+0x224>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d910      	bls.n	80025f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ce:	4b80      	ldr	r3, [pc, #512]	@ (80027d0 <HAL_RCC_ClockConfig+0x224>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 020f 	bic.w	r2, r3, #15
 80025d6:	497e      	ldr	r1, [pc, #504]	@ (80027d0 <HAL_RCC_ClockConfig+0x224>)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	4313      	orrs	r3, r2
 80025dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025de:	4b7c      	ldr	r3, [pc, #496]	@ (80027d0 <HAL_RCC_ClockConfig+0x224>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d001      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e186      	b.n	80028fe <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0310 	and.w	r3, r3, #16
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d012      	beq.n	8002622 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	695a      	ldr	r2, [r3, #20]
 8002600:	4b74      	ldr	r3, [pc, #464]	@ (80027d4 <HAL_RCC_ClockConfig+0x228>)
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	0a1b      	lsrs	r3, r3, #8
 8002606:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800260a:	429a      	cmp	r2, r3
 800260c:	d909      	bls.n	8002622 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800260e:	4b71      	ldr	r3, [pc, #452]	@ (80027d4 <HAL_RCC_ClockConfig+0x228>)
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	021b      	lsls	r3, r3, #8
 800261c:	496d      	ldr	r1, [pc, #436]	@ (80027d4 <HAL_RCC_ClockConfig+0x228>)
 800261e:	4313      	orrs	r3, r2
 8002620:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d012      	beq.n	8002654 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	4b68      	ldr	r3, [pc, #416]	@ (80027d4 <HAL_RCC_ClockConfig+0x228>)
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	091b      	lsrs	r3, r3, #4
 8002638:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800263c:	429a      	cmp	r2, r3
 800263e:	d909      	bls.n	8002654 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002640:	4b64      	ldr	r3, [pc, #400]	@ (80027d4 <HAL_RCC_ClockConfig+0x228>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	4961      	ldr	r1, [pc, #388]	@ (80027d4 <HAL_RCC_ClockConfig+0x228>)
 8002650:	4313      	orrs	r3, r2
 8002652:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d010      	beq.n	8002682 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	4b5b      	ldr	r3, [pc, #364]	@ (80027d4 <HAL_RCC_ClockConfig+0x228>)
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800266c:	429a      	cmp	r2, r3
 800266e:	d908      	bls.n	8002682 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002670:	4b58      	ldr	r3, [pc, #352]	@ (80027d4 <HAL_RCC_ClockConfig+0x228>)
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	4955      	ldr	r1, [pc, #340]	@ (80027d4 <HAL_RCC_ClockConfig+0x228>)
 800267e:	4313      	orrs	r3, r2
 8002680:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d010      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	4b50      	ldr	r3, [pc, #320]	@ (80027d4 <HAL_RCC_ClockConfig+0x228>)
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	429a      	cmp	r2, r3
 800269c:	d908      	bls.n	80026b0 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800269e:	4b4d      	ldr	r3, [pc, #308]	@ (80027d4 <HAL_RCC_ClockConfig+0x228>)
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	f023 020f 	bic.w	r2, r3, #15
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	494a      	ldr	r1, [pc, #296]	@ (80027d4 <HAL_RCC_ClockConfig+0x228>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 8093 	beq.w	80027e4 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80026c6:	4b43      	ldr	r3, [pc, #268]	@ (80027d4 <HAL_RCC_ClockConfig+0x228>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d121      	bne.n	8002716 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e113      	b.n	80028fe <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026de:	4b3d      	ldr	r3, [pc, #244]	@ (80027d4 <HAL_RCC_ClockConfig+0x228>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d115      	bne.n	8002716 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e107      	b.n	80028fe <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d107      	bne.n	8002706 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80026f6:	4b37      	ldr	r3, [pc, #220]	@ (80027d4 <HAL_RCC_ClockConfig+0x228>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e0fb      	b.n	80028fe <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002706:	4b33      	ldr	r3, [pc, #204]	@ (80027d4 <HAL_RCC_ClockConfig+0x228>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e0f3      	b.n	80028fe <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002716:	4b2f      	ldr	r3, [pc, #188]	@ (80027d4 <HAL_RCC_ClockConfig+0x228>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f023 0203 	bic.w	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	492c      	ldr	r1, [pc, #176]	@ (80027d4 <HAL_RCC_ClockConfig+0x228>)
 8002724:	4313      	orrs	r3, r2
 8002726:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002728:	f7fe fd8e 	bl	8001248 <HAL_GetTick>
 800272c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b03      	cmp	r3, #3
 8002734:	d112      	bne.n	800275c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002736:	e00a      	b.n	800274e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002738:	f7fe fd86 	bl	8001248 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002746:	4293      	cmp	r3, r2
 8002748:	d901      	bls.n	800274e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e0d7      	b.n	80028fe <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800274e:	4b21      	ldr	r3, [pc, #132]	@ (80027d4 <HAL_RCC_ClockConfig+0x228>)
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	f003 0318 	and.w	r3, r3, #24
 8002756:	2b18      	cmp	r3, #24
 8002758:	d1ee      	bne.n	8002738 <HAL_RCC_ClockConfig+0x18c>
 800275a:	e043      	b.n	80027e4 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d112      	bne.n	800278a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002764:	e00a      	b.n	800277c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002766:	f7fe fd6f 	bl	8001248 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002774:	4293      	cmp	r3, r2
 8002776:	d901      	bls.n	800277c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e0c0      	b.n	80028fe <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800277c:	4b15      	ldr	r3, [pc, #84]	@ (80027d4 <HAL_RCC_ClockConfig+0x228>)
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	f003 0318 	and.w	r3, r3, #24
 8002784:	2b10      	cmp	r3, #16
 8002786:	d1ee      	bne.n	8002766 <HAL_RCC_ClockConfig+0x1ba>
 8002788:	e02c      	b.n	80027e4 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d122      	bne.n	80027d8 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002792:	e00a      	b.n	80027aa <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002794:	f7fe fd58 	bl	8001248 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e0a9      	b.n	80028fe <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80027aa:	4b0a      	ldr	r3, [pc, #40]	@ (80027d4 <HAL_RCC_ClockConfig+0x228>)
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	f003 0318 	and.w	r3, r3, #24
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d1ee      	bne.n	8002794 <HAL_RCC_ClockConfig+0x1e8>
 80027b6:	e015      	b.n	80027e4 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80027b8:	f7fe fd46 	bl	8001248 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d906      	bls.n	80027d8 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e097      	b.n	80028fe <HAL_RCC_ClockConfig+0x352>
 80027ce:	bf00      	nop
 80027d0:	40022000 	.word	0x40022000
 80027d4:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002908 <HAL_RCC_ClockConfig+0x35c>)
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	f003 0318 	and.w	r3, r3, #24
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1e9      	bne.n	80027b8 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d010      	beq.n	8002812 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	4b44      	ldr	r3, [pc, #272]	@ (8002908 <HAL_RCC_ClockConfig+0x35c>)
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d208      	bcs.n	8002812 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002800:	4b41      	ldr	r3, [pc, #260]	@ (8002908 <HAL_RCC_ClockConfig+0x35c>)
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	f023 020f 	bic.w	r2, r3, #15
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	493e      	ldr	r1, [pc, #248]	@ (8002908 <HAL_RCC_ClockConfig+0x35c>)
 800280e:	4313      	orrs	r3, r2
 8002810:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002812:	4b3e      	ldr	r3, [pc, #248]	@ (800290c <HAL_RCC_ClockConfig+0x360>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d210      	bcs.n	8002842 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002820:	4b3a      	ldr	r3, [pc, #232]	@ (800290c <HAL_RCC_ClockConfig+0x360>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 020f 	bic.w	r2, r3, #15
 8002828:	4938      	ldr	r1, [pc, #224]	@ (800290c <HAL_RCC_ClockConfig+0x360>)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	4313      	orrs	r3, r2
 800282e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002830:	4b36      	ldr	r3, [pc, #216]	@ (800290c <HAL_RCC_ClockConfig+0x360>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 030f 	and.w	r3, r3, #15
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d001      	beq.n	8002842 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e05d      	b.n	80028fe <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	2b00      	cmp	r3, #0
 800284c:	d010      	beq.n	8002870 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	4b2d      	ldr	r3, [pc, #180]	@ (8002908 <HAL_RCC_ClockConfig+0x35c>)
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800285a:	429a      	cmp	r2, r3
 800285c:	d208      	bcs.n	8002870 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800285e:	4b2a      	ldr	r3, [pc, #168]	@ (8002908 <HAL_RCC_ClockConfig+0x35c>)
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	4927      	ldr	r1, [pc, #156]	@ (8002908 <HAL_RCC_ClockConfig+0x35c>)
 800286c:	4313      	orrs	r3, r2
 800286e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0308 	and.w	r3, r3, #8
 8002878:	2b00      	cmp	r3, #0
 800287a:	d012      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	4b21      	ldr	r3, [pc, #132]	@ (8002908 <HAL_RCC_ClockConfig+0x35c>)
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800288a:	429a      	cmp	r2, r3
 800288c:	d209      	bcs.n	80028a2 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800288e:	4b1e      	ldr	r3, [pc, #120]	@ (8002908 <HAL_RCC_ClockConfig+0x35c>)
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	491a      	ldr	r1, [pc, #104]	@ (8002908 <HAL_RCC_ClockConfig+0x35c>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0310 	and.w	r3, r3, #16
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d012      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695a      	ldr	r2, [r3, #20]
 80028b2:	4b15      	ldr	r3, [pc, #84]	@ (8002908 <HAL_RCC_ClockConfig+0x35c>)
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	0a1b      	lsrs	r3, r3, #8
 80028b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028bc:	429a      	cmp	r2, r3
 80028be:	d209      	bcs.n	80028d4 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80028c0:	4b11      	ldr	r3, [pc, #68]	@ (8002908 <HAL_RCC_ClockConfig+0x35c>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	021b      	lsls	r3, r3, #8
 80028ce:	490e      	ldr	r1, [pc, #56]	@ (8002908 <HAL_RCC_ClockConfig+0x35c>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80028d4:	f000 f822 	bl	800291c <HAL_RCC_GetSysClockFreq>
 80028d8:	4602      	mov	r2, r0
 80028da:	4b0b      	ldr	r3, [pc, #44]	@ (8002908 <HAL_RCC_ClockConfig+0x35c>)
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	490b      	ldr	r1, [pc, #44]	@ (8002910 <HAL_RCC_ClockConfig+0x364>)
 80028e4:	5ccb      	ldrb	r3, [r1, r3]
 80028e6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002914 <HAL_RCC_ClockConfig+0x368>)
 80028ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80028ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002918 <HAL_RCC_ClockConfig+0x36c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe fc1e 	bl	8001134 <HAL_InitTick>
 80028f8:	4603      	mov	r3, r0
 80028fa:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80028fc:	7afb      	ldrb	r3, [r7, #11]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	44020c00 	.word	0x44020c00
 800290c:	40022000 	.word	0x40022000
 8002910:	08007414 	.word	0x08007414
 8002914:	20000000 	.word	0x20000000
 8002918:	20000020 	.word	0x20000020

0800291c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800291c:	b480      	push	{r7}
 800291e:	b089      	sub	sp, #36	@ 0x24
 8002920:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002922:	4b8c      	ldr	r3, [pc, #560]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x238>)
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f003 0318 	and.w	r3, r3, #24
 800292a:	2b08      	cmp	r3, #8
 800292c:	d102      	bne.n	8002934 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800292e:	4b8a      	ldr	r3, [pc, #552]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	e107      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002934:	4b87      	ldr	r3, [pc, #540]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x238>)
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	f003 0318 	and.w	r3, r3, #24
 800293c:	2b00      	cmp	r3, #0
 800293e:	d112      	bne.n	8002966 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002940:	4b84      	ldr	r3, [pc, #528]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x238>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	2b00      	cmp	r3, #0
 800294a:	d009      	beq.n	8002960 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800294c:	4b81      	ldr	r3, [pc, #516]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x238>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	08db      	lsrs	r3, r3, #3
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	4a81      	ldr	r2, [pc, #516]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x240>)
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	e0f1      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002960:	4b7e      	ldr	r3, [pc, #504]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x240>)
 8002962:	61fb      	str	r3, [r7, #28]
 8002964:	e0ee      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002966:	4b7b      	ldr	r3, [pc, #492]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x238>)
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	f003 0318 	and.w	r3, r3, #24
 800296e:	2b10      	cmp	r3, #16
 8002970:	d102      	bne.n	8002978 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002972:	4b7b      	ldr	r3, [pc, #492]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0x244>)
 8002974:	61fb      	str	r3, [r7, #28]
 8002976:	e0e5      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002978:	4b76      	ldr	r3, [pc, #472]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x238>)
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	f003 0318 	and.w	r3, r3, #24
 8002980:	2b18      	cmp	r3, #24
 8002982:	f040 80dd 	bne.w	8002b40 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002986:	4b73      	ldr	r3, [pc, #460]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x238>)
 8002988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002990:	4b70      	ldr	r3, [pc, #448]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x238>)
 8002992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002994:	0a1b      	lsrs	r3, r3, #8
 8002996:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800299a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800299c:	4b6d      	ldr	r3, [pc, #436]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x238>)
 800299e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a0:	091b      	lsrs	r3, r3, #4
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80029a8:	4b6a      	ldr	r3, [pc, #424]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x238>)
 80029aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80029ac:	08db      	lsrs	r3, r3, #3
 80029ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	fb02 f303 	mul.w	r3, r2, r3
 80029b8:	ee07 3a90 	vmov	s15, r3
 80029bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029c0:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 80b7 	beq.w	8002b3a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d003      	beq.n	80029da <HAL_RCC_GetSysClockFreq+0xbe>
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d056      	beq.n	8002a86 <HAL_RCC_GetSysClockFreq+0x16a>
 80029d8:	e077      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80029da:	4b5e      	ldr	r3, [pc, #376]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x238>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0320 	and.w	r3, r3, #32
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d02d      	beq.n	8002a42 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80029e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x238>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	08db      	lsrs	r3, r3, #3
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	4a5a      	ldr	r2, [pc, #360]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x240>)
 80029f2:	fa22 f303 	lsr.w	r3, r2, r3
 80029f6:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	ee07 3a90 	vmov	s15, r3
 80029fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	ee07 3a90 	vmov	s15, r3
 8002a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a10:	4b50      	ldr	r3, [pc, #320]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a18:	ee07 3a90 	vmov	s15, r3
 8002a1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a20:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a24:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002b64 <HAL_RCC_GetSysClockFreq+0x248>
 8002a28:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a34:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002a40:	e065      	b.n	8002b0e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	ee07 3a90 	vmov	s15, r3
 8002a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a4c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002b68 <HAL_RCC_GetSysClockFreq+0x24c>
 8002a50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a54:	4b3f      	ldr	r3, [pc, #252]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a5c:	ee07 3a90 	vmov	s15, r3
 8002a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a64:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a68:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002b64 <HAL_RCC_GetSysClockFreq+0x248>
 8002a6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a70:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a78:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a80:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002a84:	e043      	b.n	8002b0e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	ee07 3a90 	vmov	s15, r3
 8002a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a90:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002b6c <HAL_RCC_GetSysClockFreq+0x250>
 8002a94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a98:	4b2e      	ldr	r3, [pc, #184]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa0:	ee07 3a90 	vmov	s15, r3
 8002aa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002aa8:	ed97 6a02 	vldr	s12, [r7, #8]
 8002aac:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002b64 <HAL_RCC_GetSysClockFreq+0x248>
 8002ab0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ab4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ab8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002abc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac4:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002ac8:	e021      	b.n	8002b0e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	ee07 3a90 	vmov	s15, r3
 8002ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002b70 <HAL_RCC_GetSysClockFreq+0x254>
 8002ad8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002adc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae4:	ee07 3a90 	vmov	s15, r3
 8002ae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002aec:	ed97 6a02 	vldr	s12, [r7, #8]
 8002af0:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002b64 <HAL_RCC_GetSysClockFreq+0x248>
 8002af4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002af8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002afc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b00:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b08:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002b0c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002b0e:	4b11      	ldr	r3, [pc, #68]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b12:	0a5b      	lsrs	r3, r3, #9
 8002b14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b18:	3301      	adds	r3, #1
 8002b1a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	ee07 3a90 	vmov	s15, r3
 8002b22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b26:	edd7 6a06 	vldr	s13, [r7, #24]
 8002b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b32:	ee17 3a90 	vmov	r3, s15
 8002b36:	61fb      	str	r3, [r7, #28]
 8002b38:	e004      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
 8002b3e:	e001      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002b40:	4b06      	ldr	r3, [pc, #24]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x240>)
 8002b42:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002b44:	69fb      	ldr	r3, [r7, #28]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3724      	adds	r7, #36	@ 0x24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	44020c00 	.word	0x44020c00
 8002b58:	003d0900 	.word	0x003d0900
 8002b5c:	03d09000 	.word	0x03d09000
 8002b60:	007a1200 	.word	0x007a1200
 8002b64:	46000000 	.word	0x46000000
 8002b68:	4c742400 	.word	0x4c742400
 8002b6c:	4af42400 	.word	0x4af42400
 8002b70:	4a742400 	.word	0x4a742400

08002b74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002b78:	f7ff fed0 	bl	800291c <HAL_RCC_GetSysClockFreq>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	4b08      	ldr	r3, [pc, #32]	@ (8002ba0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002b80:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002b82:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002b86:	4907      	ldr	r1, [pc, #28]	@ (8002ba4 <HAL_RCC_GetHCLKFreq+0x30>)
 8002b88:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002b8a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b92:	4a05      	ldr	r2, [pc, #20]	@ (8002ba8 <HAL_RCC_GetHCLKFreq+0x34>)
 8002b94:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002b96:	4b04      	ldr	r3, [pc, #16]	@ (8002ba8 <HAL_RCC_GetHCLKFreq+0x34>)
 8002b98:	681b      	ldr	r3, [r3, #0]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	44020c00 	.word	0x44020c00
 8002ba4:	08007414 	.word	0x08007414
 8002ba8:	20000000 	.word	0x20000000

08002bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002bb0:	f7ff ffe0 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	4b06      	ldr	r3, [pc, #24]	@ (8002bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	4904      	ldr	r1, [pc, #16]	@ (8002bd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bc2:	5ccb      	ldrb	r3, [r1, r3]
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	44020c00 	.word	0x44020c00
 8002bd4:	08007424 	.word	0x08007424

08002bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002bdc:	f7ff ffca 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 8002be0:	4602      	mov	r2, r0
 8002be2:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	0a1b      	lsrs	r3, r3, #8
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	4904      	ldr	r1, [pc, #16]	@ (8002c00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bee:	5ccb      	ldrb	r3, [r1, r3]
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	44020c00 	.word	0x44020c00
 8002c00:	08007424 	.word	0x08007424

08002c04 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002c08:	f7ff ffb4 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	4b06      	ldr	r3, [pc, #24]	@ (8002c28 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	0b1b      	lsrs	r3, r3, #12
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	4904      	ldr	r1, [pc, #16]	@ (8002c2c <HAL_RCC_GetPCLK3Freq+0x28>)
 8002c1a:	5ccb      	ldrb	r3, [r1, r3]
 8002c1c:	f003 031f 	and.w	r3, r3, #31
 8002c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	44020c00 	.word	0x44020c00
 8002c2c:	08007424 	.word	0x08007424

08002c30 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b08b      	sub	sp, #44	@ 0x2c
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8002c38:	4bad      	ldr	r3, [pc, #692]	@ (8002ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c40:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002c42:	4bab      	ldr	r3, [pc, #684]	@ (8002ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002c4c:	4ba8      	ldr	r3, [pc, #672]	@ (8002ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c50:	0a1b      	lsrs	r3, r3, #8
 8002c52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c56:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8002c58:	4ba5      	ldr	r3, [pc, #660]	@ (8002ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002c62:	4ba3      	ldr	r3, [pc, #652]	@ (8002ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c66:	08db      	lsrs	r3, r3, #3
 8002c68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	ee07 3a90 	vmov	s15, r3
 8002c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c7a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 8126 	beq.w	8002ed2 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d053      	beq.n	8002d34 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d86f      	bhi.n	8002d72 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d003      	beq.n	8002ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d02b      	beq.n	8002cf6 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8002c9e:	e068      	b.n	8002d72 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002ca0:	4b93      	ldr	r3, [pc, #588]	@ (8002ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	08db      	lsrs	r3, r3, #3
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	4a92      	ldr	r2, [pc, #584]	@ (8002ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002cac:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb0:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	ee07 3a90 	vmov	s15, r3
 8002cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	ee07 3a90 	vmov	s15, r3
 8002cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	ee07 3a90 	vmov	s15, r3
 8002cd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cd4:	ed97 6a04 	vldr	s12, [r7, #16]
 8002cd8:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8002ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8002cdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ce0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ce4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ce8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cf0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002cf4:	e068      	b.n	8002dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	ee07 3a90 	vmov	s15, r3
 8002cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d00:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8002efc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8002d04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	ee07 3a90 	vmov	s15, r3
 8002d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d12:	ed97 6a04 	vldr	s12, [r7, #16]
 8002d16:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8002d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d2e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002d32:	e049      	b.n	8002dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d3e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002f00 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8002d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	ee07 3a90 	vmov	s15, r3
 8002d4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d50:	ed97 6a04 	vldr	s12, [r7, #16]
 8002d54:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8002ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8002d58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d6c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002d70:	e02a      	b.n	8002dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002d72:	4b5f      	ldr	r3, [pc, #380]	@ (8002ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	08db      	lsrs	r3, r3, #3
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d82:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	ee07 3a90 	vmov	s15, r3
 8002d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	ee07 3a90 	vmov	s15, r3
 8002d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	ee07 3a90 	vmov	s15, r3
 8002da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002da6:	ed97 6a04 	vldr	s12, [r7, #16]
 8002daa:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8002ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8002dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002db6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dc2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002dc6:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002dc8:	4b49      	ldr	r3, [pc, #292]	@ (8002ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002dd4:	d121      	bne.n	8002e1a <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8002dd6:	4b46      	ldr	r3, [pc, #280]	@ (8002ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d017      	beq.n	8002e12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8002de2:	4b43      	ldr	r3, [pc, #268]	@ (8002ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002de6:	0a5b      	lsrs	r3, r3, #9
 8002de8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002dec:	ee07 3a90 	vmov	s15, r3
 8002df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8002df4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002df8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8002dfc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e08:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	e006      	b.n	8002e20 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	e002      	b.n	8002e20 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002e20:	4b33      	ldr	r3, [pc, #204]	@ (8002ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e2c:	d121      	bne.n	8002e72 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8002e2e:	4b30      	ldr	r3, [pc, #192]	@ (8002ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d017      	beq.n	8002e6a <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8002e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e3e:	0c1b      	lsrs	r3, r3, #16
 8002e40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e44:	ee07 3a90 	vmov	s15, r3
 8002e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8002e4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e50:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8002e54:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002e58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e60:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	605a      	str	r2, [r3, #4]
 8002e68:	e006      	b.n	8002e78 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	605a      	str	r2, [r3, #4]
 8002e70:	e002      	b.n	8002e78 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002e78:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e84:	d121      	bne.n	8002eca <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8002e86:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d017      	beq.n	8002ec2 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8002e92:	4b17      	ldr	r3, [pc, #92]	@ (8002ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e96:	0e1b      	lsrs	r3, r3, #24
 8002e98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e9c:	ee07 3a90 	vmov	s15, r3
 8002ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8002ea4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ea8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8002eac:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eb8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8002ec0:	e010      	b.n	8002ee4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	609a      	str	r2, [r3, #8]
}
 8002ec8:	e00c      	b.n	8002ee4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	609a      	str	r2, [r3, #8]
}
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	609a      	str	r2, [r3, #8]
}
 8002ee4:	bf00      	nop
 8002ee6:	372c      	adds	r7, #44	@ 0x2c
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	44020c00 	.word	0x44020c00
 8002ef4:	03d09000 	.word	0x03d09000
 8002ef8:	46000000 	.word	0x46000000
 8002efc:	4a742400 	.word	0x4a742400
 8002f00:	4af42400 	.word	0x4af42400

08002f04 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b08b      	sub	sp, #44	@ 0x2c
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8002f0c:	4bad      	ldr	r3, [pc, #692]	@ (80031c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f14:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8002f16:	4bab      	ldr	r3, [pc, #684]	@ (80031c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8002f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8002f20:	4ba8      	ldr	r3, [pc, #672]	@ (80031c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8002f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f24:	0a1b      	lsrs	r3, r3, #8
 8002f26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f2a:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8002f2c:	4ba5      	ldr	r3, [pc, #660]	@ (80031c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8002f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8002f36:	4ba3      	ldr	r3, [pc, #652]	@ (80031c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	08db      	lsrs	r3, r3, #3
 8002f3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	fb02 f303 	mul.w	r3, r2, r3
 8002f46:	ee07 3a90 	vmov	s15, r3
 8002f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f4e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 8126 	beq.w	80031a6 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d053      	beq.n	8003008 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d86f      	bhi.n	8003046 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d003      	beq.n	8002f74 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d02b      	beq.n	8002fca <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8002f72:	e068      	b.n	8003046 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002f74:	4b93      	ldr	r3, [pc, #588]	@ (80031c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	08db      	lsrs	r3, r3, #3
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	4a92      	ldr	r2, [pc, #584]	@ (80031c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002f80:	fa22 f303 	lsr.w	r3, r2, r3
 8002f84:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	ee07 3a90 	vmov	s15, r3
 8002f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	ee07 3a90 	vmov	s15, r3
 8002f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	ee07 3a90 	vmov	s15, r3
 8002fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fa8:	ed97 6a04 	vldr	s12, [r7, #16]
 8002fac:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80031cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8002fb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002fc8:	e068      	b.n	800309c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	ee07 3a90 	vmov	s15, r3
 8002fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fd4:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80031d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8002fd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	ee07 3a90 	vmov	s15, r3
 8002fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fe6:	ed97 6a04 	vldr	s12, [r7, #16]
 8002fea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80031cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8002fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003002:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003006:	e049      	b.n	800309c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003012:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80031d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8003016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	ee07 3a90 	vmov	s15, r3
 8003020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003024:	ed97 6a04 	vldr	s12, [r7, #16]
 8003028:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80031cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800302c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003030:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003034:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003038:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800303c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003040:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003044:	e02a      	b.n	800309c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003046:	4b5f      	ldr	r3, [pc, #380]	@ (80031c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	08db      	lsrs	r3, r3, #3
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	4a5d      	ldr	r2, [pc, #372]	@ (80031c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003052:	fa22 f303 	lsr.w	r3, r2, r3
 8003056:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	ee07 3a90 	vmov	s15, r3
 800305e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	ee07 3a90 	vmov	s15, r3
 8003068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800306c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	ee07 3a90 	vmov	s15, r3
 8003076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800307a:	ed97 6a04 	vldr	s12, [r7, #16]
 800307e:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80031cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800308a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800308e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003096:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800309a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800309c:	4b49      	ldr	r3, [pc, #292]	@ (80031c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030a8:	d121      	bne.n	80030ee <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80030aa:	4b46      	ldr	r3, [pc, #280]	@ (80031c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80030ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d017      	beq.n	80030e6 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80030b6:	4b43      	ldr	r3, [pc, #268]	@ (80031c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80030b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ba:	0a5b      	lsrs	r3, r3, #9
 80030bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030c0:	ee07 3a90 	vmov	s15, r3
 80030c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80030c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80030cc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80030d0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80030d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030dc:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	e006      	b.n	80030f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	e002      	b.n	80030f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80030f4:	4b33      	ldr	r3, [pc, #204]	@ (80031c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003100:	d121      	bne.n	8003146 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003102:	4b30      	ldr	r3, [pc, #192]	@ (80031c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d017      	beq.n	800313e <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800310e:	4b2d      	ldr	r3, [pc, #180]	@ (80031c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003112:	0c1b      	lsrs	r3, r3, #16
 8003114:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003118:	ee07 3a90 	vmov	s15, r3
 800311c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003120:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003124:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003128:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800312c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003134:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	605a      	str	r2, [r3, #4]
 800313c:	e006      	b.n	800314c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	605a      	str	r2, [r3, #4]
 8003144:	e002      	b.n	800314c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800314c:	4b1d      	ldr	r3, [pc, #116]	@ (80031c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003154:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003158:	d121      	bne.n	800319e <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800315a:	4b1a      	ldr	r3, [pc, #104]	@ (80031c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800315c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d017      	beq.n	8003196 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003166:	4b17      	ldr	r3, [pc, #92]	@ (80031c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800316a:	0e1b      	lsrs	r3, r3, #24
 800316c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003170:	ee07 3a90 	vmov	s15, r3
 8003174:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8003178:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800317c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003180:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800318c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003194:	e010      	b.n	80031b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	609a      	str	r2, [r3, #8]
}
 800319c:	e00c      	b.n	80031b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	609a      	str	r2, [r3, #8]
}
 80031a4:	e008      	b.n	80031b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	609a      	str	r2, [r3, #8]
}
 80031b8:	bf00      	nop
 80031ba:	372c      	adds	r7, #44	@ 0x2c
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	44020c00 	.word	0x44020c00
 80031c8:	03d09000 	.word	0x03d09000
 80031cc:	46000000 	.word	0x46000000
 80031d0:	4a742400 	.word	0x4a742400
 80031d4:	4af42400 	.word	0x4af42400

080031d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80031d8:	b480      	push	{r7}
 80031da:	b08b      	sub	sp, #44	@ 0x2c
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80031e0:	4bad      	ldr	r3, [pc, #692]	@ (8003498 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80031e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031e8:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80031ea:	4bab      	ldr	r3, [pc, #684]	@ (8003498 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80031f4:	4ba8      	ldr	r3, [pc, #672]	@ (8003498 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80031f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f8:	0a1b      	lsrs	r3, r3, #8
 80031fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031fe:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8003200:	4ba5      	ldr	r3, [pc, #660]	@ (8003498 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800320a:	4ba3      	ldr	r3, [pc, #652]	@ (8003498 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800320c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800320e:	08db      	lsrs	r3, r3, #3
 8003210:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	fb02 f303 	mul.w	r3, r2, r3
 800321a:	ee07 3a90 	vmov	s15, r3
 800321e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003222:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 8126 	beq.w	800347a <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	2b03      	cmp	r3, #3
 8003232:	d053      	beq.n	80032dc <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	2b03      	cmp	r3, #3
 8003238:	d86f      	bhi.n	800331a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d003      	beq.n	8003248 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d02b      	beq.n	800329e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8003246:	e068      	b.n	800331a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003248:	4b93      	ldr	r3, [pc, #588]	@ (8003498 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	08db      	lsrs	r3, r3, #3
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	4a92      	ldr	r2, [pc, #584]	@ (800349c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003254:	fa22 f303 	lsr.w	r3, r2, r3
 8003258:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	ee07 3a90 	vmov	s15, r3
 8003260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	ee07 3a90 	vmov	s15, r3
 800326a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800326e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	ee07 3a90 	vmov	s15, r3
 8003278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800327c:	ed97 6a04 	vldr	s12, [r7, #16]
 8003280:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80034a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8003284:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003288:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800328c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003290:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003298:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800329c:	e068      	b.n	8003370 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	ee07 3a90 	vmov	s15, r3
 80032a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032a8:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80034a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80032ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	ee07 3a90 	vmov	s15, r3
 80032b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ba:	ed97 6a04 	vldr	s12, [r7, #16]
 80032be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80034a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80032c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80032da:	e049      	b.n	8003370 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	ee07 3a90 	vmov	s15, r3
 80032e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e6:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80034a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80032ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	ee07 3a90 	vmov	s15, r3
 80032f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032f8:	ed97 6a04 	vldr	s12, [r7, #16]
 80032fc:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80034a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8003300:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003304:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003308:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800330c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003314:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003318:	e02a      	b.n	8003370 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800331a:	4b5f      	ldr	r3, [pc, #380]	@ (8003498 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	08db      	lsrs	r3, r3, #3
 8003320:	f003 0303 	and.w	r3, r3, #3
 8003324:	4a5d      	ldr	r2, [pc, #372]	@ (800349c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003326:	fa22 f303 	lsr.w	r3, r2, r3
 800332a:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	ee07 3a90 	vmov	s15, r3
 8003332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	ee07 3a90 	vmov	s15, r3
 800333c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003340:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800334e:	ed97 6a04 	vldr	s12, [r7, #16]
 8003352:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80034a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8003356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800335a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800335e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800336a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800336e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003370:	4b49      	ldr	r3, [pc, #292]	@ (8003498 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003378:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800337c:	d121      	bne.n	80033c2 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800337e:	4b46      	ldr	r3, [pc, #280]	@ (8003498 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d017      	beq.n	80033ba <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800338a:	4b43      	ldr	r3, [pc, #268]	@ (8003498 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800338c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338e:	0a5b      	lsrs	r3, r3, #9
 8003390:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003394:	ee07 3a90 	vmov	s15, r3
 8003398:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800339c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80033a0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80033a4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80033a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033b0:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	e006      	b.n	80033c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	e002      	b.n	80033c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80033c8:	4b33      	ldr	r3, [pc, #204]	@ (8003498 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033d4:	d121      	bne.n	800341a <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80033d6:	4b30      	ldr	r3, [pc, #192]	@ (8003498 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d017      	beq.n	8003412 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80033e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003498 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80033e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e6:	0c1b      	lsrs	r3, r3, #16
 80033e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033ec:	ee07 3a90 	vmov	s15, r3
 80033f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80033f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80033f8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80033fc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003408:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	605a      	str	r2, [r3, #4]
 8003410:	e006      	b.n	8003420 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	605a      	str	r2, [r3, #4]
 8003418:	e002      	b.n	8003420 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003420:	4b1d      	ldr	r3, [pc, #116]	@ (8003498 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003428:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800342c:	d121      	bne.n	8003472 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800342e:	4b1a      	ldr	r3, [pc, #104]	@ (8003498 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003432:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d017      	beq.n	800346a <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800343a:	4b17      	ldr	r3, [pc, #92]	@ (8003498 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800343c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343e:	0e1b      	lsrs	r3, r3, #24
 8003440:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003444:	ee07 3a90 	vmov	s15, r3
 8003448:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800344c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003450:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8003454:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800345c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003460:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8003468:	e010      	b.n	800348c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
}
 8003470:	e00c      	b.n	800348c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	609a      	str	r2, [r3, #8]
}
 8003478:	e008      	b.n	800348c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	609a      	str	r2, [r3, #8]
}
 800348c:	bf00      	nop
 800348e:	372c      	adds	r7, #44	@ 0x2c
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	44020c00 	.word	0x44020c00
 800349c:	03d09000 	.word	0x03d09000
 80034a0:	46000000 	.word	0x46000000
 80034a4:	4a742400 	.word	0x4a742400
 80034a8:	4af42400 	.word	0x4af42400

080034ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80034ac:	b590      	push	{r4, r7, lr}
 80034ae:	b08f      	sub	sp, #60	@ 0x3c
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80034b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034ba:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80034be:	4321      	orrs	r1, r4
 80034c0:	d150      	bne.n	8003564 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80034c2:	4b26      	ldr	r3, [pc, #152]	@ (800355c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80034c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034cc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80034ce:	4b23      	ldr	r3, [pc, #140]	@ (800355c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80034d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d108      	bne.n	80034ee <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80034dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034e2:	d104      	bne.n	80034ee <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80034e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80034ea:	f002 bb2a 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80034ee:	4b1b      	ldr	r3, [pc, #108]	@ (800355c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80034f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034fc:	d108      	bne.n	8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80034fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003504:	d104      	bne.n	8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8003506:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800350a:	637b      	str	r3, [r7, #52]	@ 0x34
 800350c:	f002 bb19 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8003510:	4b12      	ldr	r3, [pc, #72]	@ (800355c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003518:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800351c:	d119      	bne.n	8003552 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800351e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003520:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003524:	d115      	bne.n	8003552 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8003526:	4b0d      	ldr	r3, [pc, #52]	@ (800355c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800352e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003532:	d30a      	bcc.n	800354a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8003534:	4b09      	ldr	r3, [pc, #36]	@ (800355c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	0a1b      	lsrs	r3, r3, #8
 800353a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800353e:	4a08      	ldr	r2, [pc, #32]	@ (8003560 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003540:	fbb2 f3f3 	udiv	r3, r2, r3
 8003544:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8003546:	f002 bafc 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800354e:	f002 baf8 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	637b      	str	r3, [r7, #52]	@ 0x34
 8003556:	f002 baf4 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800355a:	bf00      	nop
 800355c:	44020c00 	.word	0x44020c00
 8003560:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8003564:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003568:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 800356c:	ea50 0104 	orrs.w	r1, r0, r4
 8003570:	f001 8275 	beq.w	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8003574:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003578:	2801      	cmp	r0, #1
 800357a:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 800357e:	f082 82dd 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003582:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003586:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800358a:	ea50 0104 	orrs.w	r1, r0, r4
 800358e:	f001 816c 	beq.w	800486a <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8003592:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003596:	2801      	cmp	r0, #1
 8003598:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 800359c:	f082 82ce 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80035a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035a4:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 80035a8:	ea50 0104 	orrs.w	r1, r0, r4
 80035ac:	f001 8602 	beq.w	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80035b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035b4:	2801      	cmp	r0, #1
 80035b6:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 80035ba:	f082 82bf 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80035be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035c2:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 80035c6:	ea50 0104 	orrs.w	r1, r0, r4
 80035ca:	f001 854c 	beq.w	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 80035ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035d2:	2801      	cmp	r0, #1
 80035d4:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 80035d8:	f082 82b0 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80035dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035e0:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 80035e4:	ea50 0104 	orrs.w	r1, r0, r4
 80035e8:	f001 849e 	beq.w	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80035ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035f0:	2801      	cmp	r0, #1
 80035f2:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 80035f6:	f082 82a1 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80035fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035fe:	f1a1 0420 	sub.w	r4, r1, #32
 8003602:	ea50 0104 	orrs.w	r1, r0, r4
 8003606:	f001 83e8 	beq.w	8004dda <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800360a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800360e:	2801      	cmp	r0, #1
 8003610:	f171 0120 	sbcs.w	r1, r1, #32
 8003614:	f082 8292 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003618:	e9d7 0100 	ldrd	r0, r1, [r7]
 800361c:	f1a1 0410 	sub.w	r4, r1, #16
 8003620:	ea50 0104 	orrs.w	r1, r0, r4
 8003624:	f002 8256 	beq.w	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8003628:	e9d7 0100 	ldrd	r0, r1, [r7]
 800362c:	2801      	cmp	r0, #1
 800362e:	f171 0110 	sbcs.w	r1, r1, #16
 8003632:	f082 8283 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003636:	e9d7 0100 	ldrd	r0, r1, [r7]
 800363a:	f1a1 0408 	sub.w	r4, r1, #8
 800363e:	ea50 0104 	orrs.w	r1, r0, r4
 8003642:	f002 81cc 	beq.w	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8003646:	e9d7 0100 	ldrd	r0, r1, [r7]
 800364a:	2801      	cmp	r0, #1
 800364c:	f171 0108 	sbcs.w	r1, r1, #8
 8003650:	f082 8274 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003654:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003658:	1f0c      	subs	r4, r1, #4
 800365a:	ea50 0104 	orrs.w	r1, r0, r4
 800365e:	f001 8648 	beq.w	80052f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8003662:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003666:	2801      	cmp	r0, #1
 8003668:	f171 0104 	sbcs.w	r1, r1, #4
 800366c:	f082 8266 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003670:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003674:	1e8c      	subs	r4, r1, #2
 8003676:	ea50 0104 	orrs.w	r1, r0, r4
 800367a:	f002 8143 	beq.w	8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800367e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003682:	2801      	cmp	r0, #1
 8003684:	f171 0102 	sbcs.w	r1, r1, #2
 8003688:	f082 8258 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800368c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003690:	1e4c      	subs	r4, r1, #1
 8003692:	ea50 0104 	orrs.w	r1, r0, r4
 8003696:	f002 80ce 	beq.w	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800369a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800369e:	2801      	cmp	r0, #1
 80036a0:	f171 0101 	sbcs.w	r1, r1, #1
 80036a4:	f082 824a 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80036a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036ac:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80036b0:	4321      	orrs	r1, r4
 80036b2:	f002 8059 	beq.w	8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80036b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036ba:	4cd9      	ldr	r4, [pc, #868]	@ (8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80036bc:	42a0      	cmp	r0, r4
 80036be:	f171 0100 	sbcs.w	r1, r1, #0
 80036c2:	f082 823b 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80036c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036ca:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80036ce:	4321      	orrs	r1, r4
 80036d0:	f001 87d9 	beq.w	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 80036d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036d8:	4cd2      	ldr	r4, [pc, #840]	@ (8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80036da:	42a0      	cmp	r0, r4
 80036dc:	f171 0100 	sbcs.w	r1, r1, #0
 80036e0:	f082 822c 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80036e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036e8:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80036ec:	4321      	orrs	r1, r4
 80036ee:	f001 8751 	beq.w	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 80036f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036f6:	4ccc      	ldr	r4, [pc, #816]	@ (8003a28 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80036f8:	42a0      	cmp	r0, r4
 80036fa:	f171 0100 	sbcs.w	r1, r1, #0
 80036fe:	f082 821d 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003702:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003706:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 800370a:	4321      	orrs	r1, r4
 800370c:	f001 869a 	beq.w	8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8003710:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003714:	4cc5      	ldr	r4, [pc, #788]	@ (8003a2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8003716:	42a0      	cmp	r0, r4
 8003718:	f171 0100 	sbcs.w	r1, r1, #0
 800371c:	f082 820e 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003720:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003724:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8003728:	4321      	orrs	r1, r4
 800372a:	f001 8612 	beq.w	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800372e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003732:	4cbf      	ldr	r4, [pc, #764]	@ (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8003734:	42a0      	cmp	r0, r4
 8003736:	f171 0100 	sbcs.w	r1, r1, #0
 800373a:	f082 81ff 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800373e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003742:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8003746:	4321      	orrs	r1, r4
 8003748:	f002 817e 	beq.w	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 800374c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003750:	4cb8      	ldr	r4, [pc, #736]	@ (8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003752:	42a0      	cmp	r0, r4
 8003754:	f171 0100 	sbcs.w	r1, r1, #0
 8003758:	f082 81f0 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800375c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003760:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8003764:	4321      	orrs	r1, r4
 8003766:	f000 829e 	beq.w	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800376a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800376e:	4cb2      	ldr	r4, [pc, #712]	@ (8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003770:	42a0      	cmp	r0, r4
 8003772:	f171 0100 	sbcs.w	r1, r1, #0
 8003776:	f082 81e1 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800377a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800377e:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8003782:	4321      	orrs	r1, r4
 8003784:	f000 826d 	beq.w	8003c62 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8003788:	e9d7 0100 	ldrd	r0, r1, [r7]
 800378c:	4cab      	ldr	r4, [pc, #684]	@ (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800378e:	42a0      	cmp	r0, r4
 8003790:	f171 0100 	sbcs.w	r1, r1, #0
 8003794:	f082 81d2 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003798:	e9d7 0100 	ldrd	r0, r1, [r7]
 800379c:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80037a0:	4321      	orrs	r1, r4
 80037a2:	f001 800d 	beq.w	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 80037a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037aa:	4ca5      	ldr	r4, [pc, #660]	@ (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80037ac:	42a0      	cmp	r0, r4
 80037ae:	f171 0100 	sbcs.w	r1, r1, #0
 80037b2:	f082 81c3 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80037b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037ba:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 80037be:	4321      	orrs	r1, r4
 80037c0:	f000 81d0 	beq.w	8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 80037c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037c8:	4c9e      	ldr	r4, [pc, #632]	@ (8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80037ca:	42a0      	cmp	r0, r4
 80037cc:	f171 0100 	sbcs.w	r1, r1, #0
 80037d0:	f082 81b4 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80037d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037d8:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 80037dc:	4321      	orrs	r1, r4
 80037de:	f000 8142 	beq.w	8003a66 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 80037e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037e6:	4c98      	ldr	r4, [pc, #608]	@ (8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80037e8:	42a0      	cmp	r0, r4
 80037ea:	f171 0100 	sbcs.w	r1, r1, #0
 80037ee:	f082 81a5 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80037f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037f6:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 80037fa:	4321      	orrs	r1, r4
 80037fc:	f001 824e 	beq.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8003800:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003804:	4c91      	ldr	r4, [pc, #580]	@ (8003a4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8003806:	42a0      	cmp	r0, r4
 8003808:	f171 0100 	sbcs.w	r1, r1, #0
 800380c:	f082 8196 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003810:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003814:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8003818:	4321      	orrs	r1, r4
 800381a:	f001 8197 	beq.w	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800381e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003822:	4c8b      	ldr	r4, [pc, #556]	@ (8003a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003824:	42a0      	cmp	r0, r4
 8003826:	f171 0100 	sbcs.w	r1, r1, #0
 800382a:	f082 8187 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800382e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003832:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8003836:	4321      	orrs	r1, r4
 8003838:	f001 8154 	beq.w	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 800383c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003840:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8003844:	f171 0100 	sbcs.w	r1, r1, #0
 8003848:	f082 8178 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800384c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003850:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8003854:	4321      	orrs	r1, r4
 8003856:	f001 80b7 	beq.w	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800385a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800385e:	f248 0401 	movw	r4, #32769	@ 0x8001
 8003862:	42a0      	cmp	r0, r4
 8003864:	f171 0100 	sbcs.w	r1, r1, #0
 8003868:	f082 8168 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800386c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003870:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8003874:	4321      	orrs	r1, r4
 8003876:	f001 8064 	beq.w	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 800387a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800387e:	f244 0401 	movw	r4, #16385	@ 0x4001
 8003882:	42a0      	cmp	r0, r4
 8003884:	f171 0100 	sbcs.w	r1, r1, #0
 8003888:	f082 8158 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800388c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003890:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8003894:	4321      	orrs	r1, r4
 8003896:	f001 8011 	beq.w	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 800389a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800389e:	f242 0401 	movw	r4, #8193	@ 0x2001
 80038a2:	42a0      	cmp	r0, r4
 80038a4:	f171 0100 	sbcs.w	r1, r1, #0
 80038a8:	f082 8148 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80038ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038b0:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 80038b4:	4321      	orrs	r1, r4
 80038b6:	f000 871e 	beq.w	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 80038ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038be:	f241 0401 	movw	r4, #4097	@ 0x1001
 80038c2:	42a0      	cmp	r0, r4
 80038c4:	f171 0100 	sbcs.w	r1, r1, #0
 80038c8:	f082 8138 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80038cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038d0:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 80038d4:	4321      	orrs	r1, r4
 80038d6:	f000 86a8 	beq.w	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 80038da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038de:	f640 0401 	movw	r4, #2049	@ 0x801
 80038e2:	42a0      	cmp	r0, r4
 80038e4:	f171 0100 	sbcs.w	r1, r1, #0
 80038e8:	f082 8128 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80038ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038f0:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 80038f4:	4321      	orrs	r1, r4
 80038f6:	f000 8632 	beq.w	800455e <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 80038fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038fe:	f240 4401 	movw	r4, #1025	@ 0x401
 8003902:	42a0      	cmp	r0, r4
 8003904:	f171 0100 	sbcs.w	r1, r1, #0
 8003908:	f082 8118 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800390c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003910:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8003914:	4321      	orrs	r1, r4
 8003916:	f000 85b0 	beq.w	800447a <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800391a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800391e:	f240 2401 	movw	r4, #513	@ 0x201
 8003922:	42a0      	cmp	r0, r4
 8003924:	f171 0100 	sbcs.w	r1, r1, #0
 8003928:	f082 8108 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800392c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003930:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8003934:	4321      	orrs	r1, r4
 8003936:	f000 8535 	beq.w	80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800393a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800393e:	f240 1401 	movw	r4, #257	@ 0x101
 8003942:	42a0      	cmp	r0, r4
 8003944:	f171 0100 	sbcs.w	r1, r1, #0
 8003948:	f082 80f8 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800394c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003950:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8003954:	4321      	orrs	r1, r4
 8003956:	f000 84ba 	beq.w	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800395a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800395e:	2881      	cmp	r0, #129	@ 0x81
 8003960:	f171 0100 	sbcs.w	r1, r1, #0
 8003964:	f082 80ea 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003968:	e9d7 0100 	ldrd	r0, r1, [r7]
 800396c:	2821      	cmp	r0, #33	@ 0x21
 800396e:	f171 0100 	sbcs.w	r1, r1, #0
 8003972:	d26f      	bcs.n	8003a54 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8003974:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003978:	4301      	orrs	r1, r0
 800397a:	f002 80df 	beq.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800397e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003982:	1e42      	subs	r2, r0, #1
 8003984:	f141 33ff 	adc.w	r3, r1, #4294967295
 8003988:	2a20      	cmp	r2, #32
 800398a:	f173 0100 	sbcs.w	r1, r3, #0
 800398e:	f082 80d5 	bcs.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003992:	2a1f      	cmp	r2, #31
 8003994:	f202 80d2 	bhi.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003998:	a101      	add	r1, pc, #4	@ (adr r1, 80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800399a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800399e:	bf00      	nop
 80039a0:	08003d01 	.word	0x08003d01
 80039a4:	08003dcd 	.word	0x08003dcd
 80039a8:	08005b3d 	.word	0x08005b3d
 80039ac:	08003e8d 	.word	0x08003e8d
 80039b0:	08005b3d 	.word	0x08005b3d
 80039b4:	08005b3d 	.word	0x08005b3d
 80039b8:	08005b3d 	.word	0x08005b3d
 80039bc:	08003f5d 	.word	0x08003f5d
 80039c0:	08005b3d 	.word	0x08005b3d
 80039c4:	08005b3d 	.word	0x08005b3d
 80039c8:	08005b3d 	.word	0x08005b3d
 80039cc:	08005b3d 	.word	0x08005b3d
 80039d0:	08005b3d 	.word	0x08005b3d
 80039d4:	08005b3d 	.word	0x08005b3d
 80039d8:	08005b3d 	.word	0x08005b3d
 80039dc:	0800403f 	.word	0x0800403f
 80039e0:	08005b3d 	.word	0x08005b3d
 80039e4:	08005b3d 	.word	0x08005b3d
 80039e8:	08005b3d 	.word	0x08005b3d
 80039ec:	08005b3d 	.word	0x08005b3d
 80039f0:	08005b3d 	.word	0x08005b3d
 80039f4:	08005b3d 	.word	0x08005b3d
 80039f8:	08005b3d 	.word	0x08005b3d
 80039fc:	08005b3d 	.word	0x08005b3d
 8003a00:	08005b3d 	.word	0x08005b3d
 8003a04:	08005b3d 	.word	0x08005b3d
 8003a08:	08005b3d 	.word	0x08005b3d
 8003a0c:	08005b3d 	.word	0x08005b3d
 8003a10:	08005b3d 	.word	0x08005b3d
 8003a14:	08005b3d 	.word	0x08005b3d
 8003a18:	08005b3d 	.word	0x08005b3d
 8003a1c:	08004115 	.word	0x08004115
 8003a20:	80000001 	.word	0x80000001
 8003a24:	40000001 	.word	0x40000001
 8003a28:	20000001 	.word	0x20000001
 8003a2c:	10000001 	.word	0x10000001
 8003a30:	08000001 	.word	0x08000001
 8003a34:	04000001 	.word	0x04000001
 8003a38:	00800001 	.word	0x00800001
 8003a3c:	00400001 	.word	0x00400001
 8003a40:	00200001 	.word	0x00200001
 8003a44:	00100001 	.word	0x00100001
 8003a48:	00080001 	.word	0x00080001
 8003a4c:	00040001 	.word	0x00040001
 8003a50:	00020001 	.word	0x00020001
 8003a54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a58:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8003a5c:	430b      	orrs	r3, r1
 8003a5e:	f000 83c4 	beq.w	80041ea <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8003a62:	f002 b86b 	b.w	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003a66:	4ba1      	ldr	r3, [pc, #644]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003a68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a6c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8003a70:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a78:	d036      	beq.n	8003ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a80:	d86b      	bhi.n	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8003a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a88:	d02b      	beq.n	8003ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a90:	d863      	bhi.n	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8003a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a98:	d01b      	beq.n	8003ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003aa0:	d85b      	bhi.n	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d004      	beq.n	8003ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aae:	d008      	beq.n	8003ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8003ab0:	e053      	b.n	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003ab2:	f107 0320 	add.w	r3, r7, #32
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff f8ba 	bl	8002c30 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8003abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003ac0:	e04e      	b.n	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ac2:	f107 0314 	add.w	r3, r7, #20
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff fa1c 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003ad0:	e046      	b.n	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003ad2:	f107 0308 	add.w	r3, r7, #8
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff fb7e 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003ae0:	e03e      	b.n	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8003ae2:	4b83      	ldr	r3, [pc, #524]	@ (8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8003ae4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003ae6:	e03b      	b.n	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003ae8:	4b80      	ldr	r3, [pc, #512]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003aea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003aee:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8003af2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003af4:	4b7d      	ldr	r3, [pc, #500]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d10c      	bne.n	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8003b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d109      	bne.n	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003b06:	4b79      	ldr	r3, [pc, #484]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	08db      	lsrs	r3, r3, #3
 8003b0c:	f003 0303 	and.w	r3, r3, #3
 8003b10:	4a78      	ldr	r2, [pc, #480]	@ (8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8003b12:	fa22 f303 	lsr.w	r3, r2, r3
 8003b16:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b18:	e01e      	b.n	8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003b1a:	4b74      	ldr	r3, [pc, #464]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b26:	d106      	bne.n	8003b36 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8003b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b2e:	d102      	bne.n	8003b36 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8003b30:	4b71      	ldr	r3, [pc, #452]	@ (8003cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8003b32:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b34:	e010      	b.n	8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003b36:	4b6d      	ldr	r3, [pc, #436]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b42:	d106      	bne.n	8003b52 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8003b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b4a:	d102      	bne.n	8003b52 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8003b4c:	4b6b      	ldr	r3, [pc, #428]	@ (8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8003b4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b50:	e002      	b.n	8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8003b56:	e003      	b.n	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8003b58:	e002      	b.n	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003b5e:	bf00      	nop
          }
        }
        break;
 8003b60:	f001 bfef 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8003b64:	4b61      	ldr	r3, [pc, #388]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003b66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b6a:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8003b6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b76:	d036      	beq.n	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8003b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b7e:	d86b      	bhi.n	8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8003b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b82:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003b86:	d02b      	beq.n	8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8003b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003b8e:	d863      	bhi.n	8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8003b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b96:	d01b      	beq.n	8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8003b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b9e:	d85b      	bhi.n	8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d004      	beq.n	8003bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003bac:	d008      	beq.n	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8003bae:	e053      	b.n	8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003bb0:	f107 0320 	add.w	r3, r7, #32
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff f83b 	bl	8002c30 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8003bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003bbe:	e04e      	b.n	8003c5e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003bc0:	f107 0314 	add.w	r3, r7, #20
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff f99d 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003bce:	e046      	b.n	8003c5e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003bd0:	f107 0308 	add.w	r3, r7, #8
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff faff 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003bde:	e03e      	b.n	8003c5e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8003be0:	4b43      	ldr	r3, [pc, #268]	@ (8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8003be2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003be4:	e03b      	b.n	8003c5e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003be6:	4b41      	ldr	r3, [pc, #260]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003be8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003bec:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8003bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d10c      	bne.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8003bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d109      	bne.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003c04:	4b39      	ldr	r3, [pc, #228]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	08db      	lsrs	r3, r3, #3
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	4a39      	ldr	r2, [pc, #228]	@ (8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8003c10:	fa22 f303 	lsr.w	r3, r2, r3
 8003c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c16:	e01e      	b.n	8003c56 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003c18:	4b34      	ldr	r3, [pc, #208]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c24:	d106      	bne.n	8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8003c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c2c:	d102      	bne.n	8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8003c2e:	4b32      	ldr	r3, [pc, #200]	@ (8003cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8003c30:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c32:	e010      	b.n	8003c56 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003c34:	4b2d      	ldr	r3, [pc, #180]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c40:	d106      	bne.n	8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8003c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c48:	d102      	bne.n	8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8003c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8003c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c4e:	e002      	b.n	8003c56 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8003c54:	e003      	b.n	8003c5e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8003c56:	e002      	b.n	8003c5e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003c5c:	bf00      	nop
          }
        }
        break;
 8003c5e:	f001 bf70 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8003c62:	4b22      	ldr	r3, [pc, #136]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003c64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c6c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d108      	bne.n	8003c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003c74:	f107 0320 	add.w	r3, r7, #32
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fe ffd9 	bl	8002c30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c80:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8003c82:	f001 bf5e 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8003c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c88:	2b40      	cmp	r3, #64	@ 0x40
 8003c8a:	d108      	bne.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c8c:	f107 0314 	add.w	r3, r7, #20
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff f937 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c9a:	f001 bf52 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003ca2:	f001 bf4e 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8003ca6:	4b11      	ldr	r3, [pc, #68]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003ca8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d108      	bne.n	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003cb8:	f107 0320 	add.w	r3, r7, #32
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fe ffb7 	bl	8002c30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8003cc6:	f001 bf3c 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8003cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ccc:	2b80      	cmp	r3, #128	@ 0x80
 8003cce:	d108      	bne.n	8003ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003cd0:	f107 0314 	add.w	r3, r7, #20
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff f915 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003cde:	f001 bf30 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003ce6:	f001 bf2c 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003cea:	bf00      	nop
 8003cec:	44020c00 	.word	0x44020c00
 8003cf0:	00bb8000 	.word	0x00bb8000
 8003cf4:	03d09000 	.word	0x03d09000
 8003cf8:	003d0900 	.word	0x003d0900
 8003cfc:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003d00:	4b9d      	ldr	r3, [pc, #628]	@ (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003d02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d104      	bne.n	8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8003d12:	f7fe ff61 	bl	8002bd8 <HAL_RCC_GetPCLK2Freq>
 8003d16:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003d18:	f001 bf13 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8003d1c:	4b96      	ldr	r3, [pc, #600]	@ (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d28:	d10a      	bne.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d107      	bne.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d30:	f107 0314 	add.w	r3, r7, #20
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff f8e5 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d3e:	e043      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8003d40:	4b8d      	ldr	r3, [pc, #564]	@ (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d4c:	d10a      	bne.n	8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d107      	bne.n	8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003d54:	f107 0308 	add.w	r3, r7, #8
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff fa3d 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d62:	e031      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8003d64:	4b84      	ldr	r3, [pc, #528]	@ (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d10c      	bne.n	8003d8a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8003d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d109      	bne.n	8003d8a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d76:	4b80      	ldr	r3, [pc, #512]	@ (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	08db      	lsrs	r3, r3, #3
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	4a7e      	ldr	r2, [pc, #504]	@ (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8003d82:	fa22 f303 	lsr.w	r3, r2, r3
 8003d86:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d88:	e01e      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8003d8a:	4b7b      	ldr	r3, [pc, #492]	@ (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d96:	d105      	bne.n	8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8003d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d102      	bne.n	8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8003d9e:	4b78      	ldr	r3, [pc, #480]	@ (8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8003da0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003da2:	e011      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8003da4:	4b74      	ldr	r3, [pc, #464]	@ (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003da6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d106      	bne.n	8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8003db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db4:	2b05      	cmp	r3, #5
 8003db6:	d103      	bne.n	8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8003db8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dbe:	e003      	b.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003dc4:	f001 bebd 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003dc8:	f001 bebb 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003dcc:	4b6a      	ldr	r3, [pc, #424]	@ (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003dce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003dd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003dd6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d104      	bne.n	8003de8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003dde:	f7fe fee5 	bl	8002bac <HAL_RCC_GetPCLK1Freq>
 8003de2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8003de4:	f001 bead 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8003de8:	4b63      	ldr	r3, [pc, #396]	@ (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003df0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003df4:	d10a      	bne.n	8003e0c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d107      	bne.n	8003e0c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003dfc:	f107 0314 	add.w	r3, r7, #20
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff f87f 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e0a:	e03d      	b.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0e:	2b10      	cmp	r3, #16
 8003e10:	d108      	bne.n	8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003e12:	f107 0308 	add.w	r3, r7, #8
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff f9de 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e20:	f001 be8f 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8003e24:	4b54      	ldr	r3, [pc, #336]	@ (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d10c      	bne.n	8003e4a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8003e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e32:	2b18      	cmp	r3, #24
 8003e34:	d109      	bne.n	8003e4a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003e36:	4b50      	ldr	r3, [pc, #320]	@ (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	08db      	lsrs	r3, r3, #3
 8003e3c:	f003 0303 	and.w	r3, r3, #3
 8003e40:	4a4e      	ldr	r2, [pc, #312]	@ (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8003e42:	fa22 f303 	lsr.w	r3, r2, r3
 8003e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e48:	e01e      	b.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8003e4a:	4b4b      	ldr	r3, [pc, #300]	@ (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e56:	d105      	bne.n	8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8003e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	d102      	bne.n	8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8003e5e:	4b48      	ldr	r3, [pc, #288]	@ (8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8003e60:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e62:	e011      	b.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8003e64:	4b44      	ldr	r3, [pc, #272]	@ (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003e66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d106      	bne.n	8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8003e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e74:	2b28      	cmp	r3, #40	@ 0x28
 8003e76:	d103      	bne.n	8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8003e78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e7e:	e003      	b.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e84:	f001 be5d 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003e88:	f001 be5b 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003e8c:	4b3a      	ldr	r3, [pc, #232]	@ (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003e8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003e92:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8003e96:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d104      	bne.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003e9e:	f7fe fe85 	bl	8002bac <HAL_RCC_GetPCLK1Freq>
 8003ea2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8003ea4:	f001 be4d 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8003ea8:	4b33      	ldr	r3, [pc, #204]	@ (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003eb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003eb4:	d10a      	bne.n	8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb8:	2b40      	cmp	r3, #64	@ 0x40
 8003eba:	d107      	bne.n	8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ebc:	f107 0314 	add.w	r3, r7, #20
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff f81f 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eca:	e045      	b.n	8003f58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8003ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ed8:	d10a      	bne.n	8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8003eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003edc:	2b80      	cmp	r3, #128	@ 0x80
 8003ede:	d107      	bne.n	8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003ee0:	f107 0308 	add.w	r3, r7, #8
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff f977 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eee:	e033      	b.n	8003f58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003ef0:	4b21      	ldr	r3, [pc, #132]	@ (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d10c      	bne.n	8003f16 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8003efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f00:	d109      	bne.n	8003f16 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f02:	4b1d      	ldr	r3, [pc, #116]	@ (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	08db      	lsrs	r3, r3, #3
 8003f08:	f003 0303 	and.w	r3, r3, #3
 8003f0c:	4a1b      	ldr	r2, [pc, #108]	@ (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8003f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f12:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f14:	e020      	b.n	8003f58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8003f16:	4b18      	ldr	r3, [pc, #96]	@ (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f22:	d106      	bne.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8003f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f2a:	d102      	bne.n	8003f32 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8003f2c:	4b14      	ldr	r3, [pc, #80]	@ (8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8003f2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f30:	e012      	b.n	8003f58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003f32:	4b11      	ldr	r3, [pc, #68]	@ (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003f34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d107      	bne.n	8003f50 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8003f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f42:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003f46:	d103      	bne.n	8003f50 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8003f48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f4e:	e003      	b.n	8003f58 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f54:	f001 bdf5 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003f58:	f001 bdf3 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003f5c:	4b06      	ldr	r3, [pc, #24]	@ (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003f5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003f62:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8003f66:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8003f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10a      	bne.n	8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f6e:	f7fe fe1d 	bl	8002bac <HAL_RCC_GetPCLK1Freq>
 8003f72:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8003f74:	f001 bde5 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003f78:	44020c00 	.word	0x44020c00
 8003f7c:	03d09000 	.word	0x03d09000
 8003f80:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8003f84:	4ba0      	ldr	r3, [pc, #640]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f90:	d10b      	bne.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8003f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f98:	d107      	bne.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003f9a:	f107 0314 	add.w	r3, r7, #20
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fe ffb0 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fa8:	e047      	b.n	800403a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8003faa:	4b97      	ldr	r3, [pc, #604]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fb6:	d10b      	bne.n	8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8003fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fbe:	d107      	bne.n	8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003fc0:	f107 0308 	add.w	r3, r7, #8
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff f907 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fce:	e034      	b.n	800403a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8003fd0:	4b8d      	ldr	r3, [pc, #564]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d10d      	bne.n	8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fde:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003fe2:	d109      	bne.n	8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003fe4:	4b88      	ldr	r3, [pc, #544]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	08db      	lsrs	r3, r3, #3
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	4a87      	ldr	r2, [pc, #540]	@ (800420c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8003ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ff6:	e020      	b.n	800403a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8003ff8:	4b83      	ldr	r3, [pc, #524]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004004:	d106      	bne.n	8004014 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8004006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004008:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800400c:	d102      	bne.n	8004014 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800400e:	4b80      	ldr	r3, [pc, #512]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004010:	637b      	str	r3, [r7, #52]	@ 0x34
 8004012:	e012      	b.n	800403a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004014:	4b7c      	ldr	r3, [pc, #496]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004016:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b02      	cmp	r3, #2
 8004020:	d107      	bne.n	8004032 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8004022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004024:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004028:	d103      	bne.n	8004032 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800402a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800402e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004030:	e003      	b.n	800403a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8004032:	2300      	movs	r3, #0
 8004034:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004036:	f001 bd84 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800403a:	f001 bd82 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800403e:	4b72      	ldr	r3, [pc, #456]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004040:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004044:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004048:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800404a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404c:	2b00      	cmp	r3, #0
 800404e:	d104      	bne.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004050:	f7fe fdac 	bl	8002bac <HAL_RCC_GetPCLK1Freq>
 8004054:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8004056:	f001 bd74 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800405a:	4b6b      	ldr	r3, [pc, #428]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004062:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004066:	d10b      	bne.n	8004080 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8004068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800406e:	d107      	bne.n	8004080 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004070:	f107 0314 	add.w	r3, r7, #20
 8004074:	4618      	mov	r0, r3
 8004076:	f7fe ff45 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	637b      	str	r3, [r7, #52]	@ 0x34
 800407e:	e047      	b.n	8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8004080:	4b61      	ldr	r3, [pc, #388]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004088:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800408c:	d10b      	bne.n	80040a6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800408e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004090:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004094:	d107      	bne.n	80040a6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004096:	f107 0308 	add.w	r3, r7, #8
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff f89c 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80040a4:	e034      	b.n	8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80040a6:	4b58      	ldr	r3, [pc, #352]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d10d      	bne.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80040b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80040b8:	d109      	bne.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80040ba:	4b53      	ldr	r3, [pc, #332]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	08db      	lsrs	r3, r3, #3
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	4a51      	ldr	r2, [pc, #324]	@ (800420c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80040c6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80040cc:	e020      	b.n	8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80040ce:	4b4e      	ldr	r3, [pc, #312]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040da:	d106      	bne.n	80040ea <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80040dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040e2:	d102      	bne.n	80040ea <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 80040e4:	4b4a      	ldr	r3, [pc, #296]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80040e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80040e8:	e012      	b.n	8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80040ea:	4b47      	ldr	r3, [pc, #284]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80040ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d107      	bne.n	8004108 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 80040f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80040fe:	d103      	bne.n	8004108 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8004100:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004104:	637b      	str	r3, [r7, #52]	@ 0x34
 8004106:	e003      	b.n	8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800410c:	f001 bd19 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004110:	f001 bd17 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8004114:	4b3c      	ldr	r3, [pc, #240]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004116:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800411a:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800411e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8004120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004122:	2b00      	cmp	r3, #0
 8004124:	d104      	bne.n	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004126:	f7fe fd41 	bl	8002bac <HAL_RCC_GetPCLK1Freq>
 800412a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800412c:	f001 bd09 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8004130:	4b35      	ldr	r3, [pc, #212]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004138:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800413c:	d10b      	bne.n	8004156 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800413e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004140:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004144:	d107      	bne.n	8004156 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004146:	f107 0314 	add.w	r3, r7, #20
 800414a:	4618      	mov	r0, r3
 800414c:	f7fe feda 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	637b      	str	r3, [r7, #52]	@ 0x34
 8004154:	e047      	b.n	80041e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8004156:	4b2c      	ldr	r3, [pc, #176]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800415e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004162:	d10b      	bne.n	800417c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8004164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004166:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800416a:	d107      	bne.n	800417c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800416c:	f107 0308 	add.w	r3, r7, #8
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff f831 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	637b      	str	r3, [r7, #52]	@ 0x34
 800417a:	e034      	b.n	80041e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800417c:	4b22      	ldr	r3, [pc, #136]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b02      	cmp	r3, #2
 8004186:	d10d      	bne.n	80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8004188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800418e:	d109      	bne.n	80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004190:	4b1d      	ldr	r3, [pc, #116]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	08db      	lsrs	r3, r3, #3
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	4a1c      	ldr	r2, [pc, #112]	@ (800420c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800419c:	fa22 f303 	lsr.w	r3, r2, r3
 80041a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80041a2:	e020      	b.n	80041e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80041a4:	4b18      	ldr	r3, [pc, #96]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041b0:	d106      	bne.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80041b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041b8:	d102      	bne.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 80041ba:	4b15      	ldr	r3, [pc, #84]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80041bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80041be:	e012      	b.n	80041e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80041c0:	4b11      	ldr	r3, [pc, #68]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80041c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d107      	bne.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80041ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80041d4:	d103      	bne.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 80041d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041da:	637b      	str	r3, [r7, #52]	@ 0x34
 80041dc:	e003      	b.n	80041e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80041e2:	f001 bcae 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80041e6:	f001 bcac 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 80041ea:	4b07      	ldr	r3, [pc, #28]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80041ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80041f0:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 80041f4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 80041f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10b      	bne.n	8004214 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80041fc:	f7fe fcd6 	bl	8002bac <HAL_RCC_GetPCLK1Freq>
 8004200:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8004202:	f001 bc9e 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004206:	bf00      	nop
 8004208:	44020c00 	.word	0x44020c00
 800420c:	03d09000 	.word	0x03d09000
 8004210:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8004214:	4ba0      	ldr	r3, [pc, #640]	@ (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800421c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004220:	d10b      	bne.n	800423a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8004222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004224:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004228:	d107      	bne.n	800423a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800422a:	f107 0314 	add.w	r3, r7, #20
 800422e:	4618      	mov	r0, r3
 8004230:	f7fe fe68 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	637b      	str	r3, [r7, #52]	@ 0x34
 8004238:	e047      	b.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800423a:	4b97      	ldr	r3, [pc, #604]	@ (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004242:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004246:	d10b      	bne.n	8004260 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8004248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800424a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800424e:	d107      	bne.n	8004260 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004250:	f107 0308 	add.w	r3, r7, #8
 8004254:	4618      	mov	r0, r3
 8004256:	f7fe ffbf 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	637b      	str	r3, [r7, #52]	@ 0x34
 800425e:	e034      	b.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8004260:	4b8d      	ldr	r3, [pc, #564]	@ (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b02      	cmp	r3, #2
 800426a:	d10d      	bne.n	8004288 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800426c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004272:	d109      	bne.n	8004288 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004274:	4b88      	ldr	r3, [pc, #544]	@ (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	08db      	lsrs	r3, r3, #3
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	4a87      	ldr	r2, [pc, #540]	@ (800449c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8004280:	fa22 f303 	lsr.w	r3, r2, r3
 8004284:	637b      	str	r3, [r7, #52]	@ 0x34
 8004286:	e020      	b.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8004288:	4b83      	ldr	r3, [pc, #524]	@ (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004294:	d106      	bne.n	80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8004296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004298:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800429c:	d102      	bne.n	80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800429e:	4b80      	ldr	r3, [pc, #512]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80042a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80042a2:	e012      	b.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80042a4:	4b7c      	ldr	r3, [pc, #496]	@ (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80042a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d107      	bne.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80042b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80042b8:	d103      	bne.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 80042ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042be:	637b      	str	r3, [r7, #52]	@ 0x34
 80042c0:	e003      	b.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042c6:	f001 bc3c 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80042ca:	f001 bc3a 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 80042ce:	4b72      	ldr	r3, [pc, #456]	@ (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80042d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80042d4:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80042d8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 80042da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d104      	bne.n	80042ea <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80042e0:	f7fe fc64 	bl	8002bac <HAL_RCC_GetPCLK1Freq>
 80042e4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 80042e6:	f001 bc2c 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 80042ea:	4b6b      	ldr	r3, [pc, #428]	@ (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042f6:	d10b      	bne.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80042f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042fe:	d107      	bne.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004300:	f107 0314 	add.w	r3, r7, #20
 8004304:	4618      	mov	r0, r3
 8004306:	f7fe fdfd 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	637b      	str	r3, [r7, #52]	@ 0x34
 800430e:	e047      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8004310:	4b61      	ldr	r3, [pc, #388]	@ (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004318:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800431c:	d10b      	bne.n	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800431e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004320:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004324:	d107      	bne.n	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004326:	f107 0308 	add.w	r3, r7, #8
 800432a:	4618      	mov	r0, r3
 800432c:	f7fe ff54 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	637b      	str	r3, [r7, #52]	@ 0x34
 8004334:	e034      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8004336:	4b58      	ldr	r3, [pc, #352]	@ (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b02      	cmp	r3, #2
 8004340:	d10d      	bne.n	800435e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8004342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004344:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004348:	d109      	bne.n	800435e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800434a:	4b53      	ldr	r3, [pc, #332]	@ (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	08db      	lsrs	r3, r3, #3
 8004350:	f003 0303 	and.w	r3, r3, #3
 8004354:	4a51      	ldr	r2, [pc, #324]	@ (800449c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8004356:	fa22 f303 	lsr.w	r3, r2, r3
 800435a:	637b      	str	r3, [r7, #52]	@ 0x34
 800435c:	e020      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800435e:	4b4e      	ldr	r3, [pc, #312]	@ (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004366:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800436a:	d106      	bne.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800436c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004372:	d102      	bne.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8004374:	4b4a      	ldr	r3, [pc, #296]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8004376:	637b      	str	r3, [r7, #52]	@ 0x34
 8004378:	e012      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800437a:	4b47      	ldr	r3, [pc, #284]	@ (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800437c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b02      	cmp	r3, #2
 8004386:	d107      	bne.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8004388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800438e:	d103      	bne.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8004390:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004394:	637b      	str	r3, [r7, #52]	@ 0x34
 8004396:	e003      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800439c:	f001 bbd1 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80043a0:	f001 bbcf 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80043a4:	4b3c      	ldr	r3, [pc, #240]	@ (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80043a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80043aa:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80043ae:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80043b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d104      	bne.n	80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80043b6:	f7fe fbf9 	bl	8002bac <HAL_RCC_GetPCLK1Freq>
 80043ba:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 80043bc:	f001 bbc1 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 80043c0:	4b35      	ldr	r3, [pc, #212]	@ (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043cc:	d10b      	bne.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 80043ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043d4:	d107      	bne.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043d6:	f107 0314 	add.w	r3, r7, #20
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe fd92 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80043e4:	e047      	b.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80043e6:	4b2c      	ldr	r3, [pc, #176]	@ (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043f2:	d10b      	bne.n	800440c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80043f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043fa:	d107      	bne.n	800440c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80043fc:	f107 0308 	add.w	r3, r7, #8
 8004400:	4618      	mov	r0, r3
 8004402:	f7fe fee9 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	637b      	str	r3, [r7, #52]	@ 0x34
 800440a:	e034      	b.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800440c:	4b22      	ldr	r3, [pc, #136]	@ (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b02      	cmp	r3, #2
 8004416:	d10d      	bne.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8004418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800441e:	d109      	bne.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004420:	4b1d      	ldr	r3, [pc, #116]	@ (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	08db      	lsrs	r3, r3, #3
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	4a1c      	ldr	r2, [pc, #112]	@ (800449c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800442c:	fa22 f303 	lsr.w	r3, r2, r3
 8004430:	637b      	str	r3, [r7, #52]	@ 0x34
 8004432:	e020      	b.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8004434:	4b18      	ldr	r3, [pc, #96]	@ (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800443c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004440:	d106      	bne.n	8004450 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8004442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004444:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004448:	d102      	bne.n	8004450 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800444a:	4b15      	ldr	r3, [pc, #84]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800444c:	637b      	str	r3, [r7, #52]	@ 0x34
 800444e:	e012      	b.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8004450:	4b11      	ldr	r3, [pc, #68]	@ (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8004452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b02      	cmp	r3, #2
 800445c:	d107      	bne.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800445e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004460:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004464:	d103      	bne.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8004466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800446a:	637b      	str	r3, [r7, #52]	@ 0x34
 800446c:	e003      	b.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004472:	f001 bb66 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004476:	f001 bb64 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800447a:	4b07      	ldr	r3, [pc, #28]	@ (8004498 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800447c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004480:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8004484:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8004486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10b      	bne.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800448c:	f7fe fb8e 	bl	8002bac <HAL_RCC_GetPCLK1Freq>
 8004490:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8004492:	f001 bb56 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004496:	bf00      	nop
 8004498:	44020c00 	.word	0x44020c00
 800449c:	03d09000 	.word	0x03d09000
 80044a0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80044a4:	4ba1      	ldr	r3, [pc, #644]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044b0:	d10b      	bne.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80044b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044b8:	d107      	bne.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044ba:	f107 0314 	add.w	r3, r7, #20
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fe fd20 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80044c8:	e047      	b.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 80044ca:	4b98      	ldr	r3, [pc, #608]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044d6:	d10b      	bne.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 80044d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044de:	d107      	bne.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80044e0:	f107 0308 	add.w	r3, r7, #8
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fe fe77 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80044ee:	e034      	b.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80044f0:	4b8e      	ldr	r3, [pc, #568]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d10d      	bne.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 80044fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044fe:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004502:	d109      	bne.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004504:	4b89      	ldr	r3, [pc, #548]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	08db      	lsrs	r3, r3, #3
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	4a88      	ldr	r2, [pc, #544]	@ (8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8004510:	fa22 f303 	lsr.w	r3, r2, r3
 8004514:	637b      	str	r3, [r7, #52]	@ 0x34
 8004516:	e020      	b.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8004518:	4b84      	ldr	r3, [pc, #528]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004524:	d106      	bne.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8004526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004528:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800452c:	d102      	bne.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800452e:	4b81      	ldr	r3, [pc, #516]	@ (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8004530:	637b      	str	r3, [r7, #52]	@ 0x34
 8004532:	e012      	b.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8004534:	4b7d      	ldr	r3, [pc, #500]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004536:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b02      	cmp	r3, #2
 8004540:	d107      	bne.n	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8004542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004544:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8004548:	d103      	bne.n	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800454a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800454e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004550:	e003      	b.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004556:	f001 baf4 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800455a:	f001 baf2 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800455e:	4b73      	ldr	r3, [pc, #460]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004560:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800456a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456c:	2b00      	cmp	r3, #0
 800456e:	d104      	bne.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004570:	f7fe fb1c 	bl	8002bac <HAL_RCC_GetPCLK1Freq>
 8004574:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8004576:	f001 bae4 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800457a:	4b6c      	ldr	r3, [pc, #432]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004582:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004586:	d10a      	bne.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8004588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458a:	2b01      	cmp	r3, #1
 800458c:	d107      	bne.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800458e:	f107 0314 	add.w	r3, r7, #20
 8004592:	4618      	mov	r0, r3
 8004594:	f7fe fcb6 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	637b      	str	r3, [r7, #52]	@ 0x34
 800459c:	e043      	b.n	8004626 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800459e:	4b63      	ldr	r3, [pc, #396]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045aa:	d10a      	bne.n	80045c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 80045ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d107      	bne.n	80045c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80045b2:	f107 0308 	add.w	r3, r7, #8
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fe fe0e 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	637b      	str	r3, [r7, #52]	@ 0x34
 80045c0:	e031      	b.n	8004626 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 80045c2:	4b5a      	ldr	r3, [pc, #360]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d10c      	bne.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 80045ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d109      	bne.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80045d4:	4b55      	ldr	r3, [pc, #340]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	08db      	lsrs	r3, r3, #3
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	4a54      	ldr	r2, [pc, #336]	@ (8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80045e0:	fa22 f303 	lsr.w	r3, r2, r3
 80045e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80045e6:	e01e      	b.n	8004626 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80045e8:	4b50      	ldr	r3, [pc, #320]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045f4:	d105      	bne.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80045f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d102      	bne.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 80045fc:	4b4d      	ldr	r3, [pc, #308]	@ (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80045fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004600:	e011      	b.n	8004626 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8004602:	4b4a      	ldr	r3, [pc, #296]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004604:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b02      	cmp	r3, #2
 800460e:	d106      	bne.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8004610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004612:	2b05      	cmp	r3, #5
 8004614:	d103      	bne.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8004616:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800461a:	637b      	str	r3, [r7, #52]	@ 0x34
 800461c:	e003      	b.n	8004626 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800461e:	2300      	movs	r3, #0
 8004620:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004622:	f001 ba8e 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004626:	f001 ba8c 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800462a:	4b40      	ldr	r3, [pc, #256]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800462c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004630:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004634:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8004636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004638:	2b00      	cmp	r3, #0
 800463a:	d104      	bne.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800463c:	f7fe fab6 	bl	8002bac <HAL_RCC_GetPCLK1Freq>
 8004640:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8004642:	f001 ba7e 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8004646:	4b39      	ldr	r3, [pc, #228]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800464e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004652:	d10a      	bne.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8004654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004656:	2b10      	cmp	r3, #16
 8004658:	d107      	bne.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800465a:	f107 0314 	add.w	r3, r7, #20
 800465e:	4618      	mov	r0, r3
 8004660:	f7fe fc50 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	637b      	str	r3, [r7, #52]	@ 0x34
 8004668:	e043      	b.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800466a:	4b30      	ldr	r3, [pc, #192]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004672:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004676:	d10a      	bne.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8004678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467a:	2b20      	cmp	r3, #32
 800467c:	d107      	bne.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800467e:	f107 0308 	add.w	r3, r7, #8
 8004682:	4618      	mov	r0, r3
 8004684:	f7fe fda8 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	637b      	str	r3, [r7, #52]	@ 0x34
 800468c:	e031      	b.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800468e:	4b27      	ldr	r3, [pc, #156]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b02      	cmp	r3, #2
 8004698:	d10c      	bne.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800469a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469c:	2b30      	cmp	r3, #48	@ 0x30
 800469e:	d109      	bne.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80046a0:	4b22      	ldr	r3, [pc, #136]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	08db      	lsrs	r3, r3, #3
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	4a21      	ldr	r2, [pc, #132]	@ (8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80046ac:	fa22 f303 	lsr.w	r3, r2, r3
 80046b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80046b2:	e01e      	b.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80046b4:	4b1d      	ldr	r3, [pc, #116]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046c0:	d105      	bne.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 80046c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c4:	2b40      	cmp	r3, #64	@ 0x40
 80046c6:	d102      	bne.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 80046c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80046ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80046cc:	e011      	b.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 80046ce:	4b17      	ldr	r3, [pc, #92]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80046d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d106      	bne.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 80046dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046de:	2b50      	cmp	r3, #80	@ 0x50
 80046e0:	d103      	bne.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 80046e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80046e8:	e003      	b.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80046ee:	f001 ba28 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80046f2:	f001 ba26 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80046f6:	4b0d      	ldr	r3, [pc, #52]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80046f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046fc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004700:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004704:	2b00      	cmp	r3, #0
 8004706:	d104      	bne.n	8004712 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004708:	f7fe fa7c 	bl	8002c04 <HAL_RCC_GetPCLK3Freq>
 800470c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800470e:	f001 ba18 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8004712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004714:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004718:	d10e      	bne.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800471a:	f107 0314 	add.w	r3, r7, #20
 800471e:	4618      	mov	r0, r3
 8004720:	f7fe fbf0 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004728:	f001 ba0b 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800472c:	44020c00 	.word	0x44020c00
 8004730:	03d09000 	.word	0x03d09000
 8004734:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8004738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800473e:	d108      	bne.n	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004740:	f107 0308 	add.w	r3, r7, #8
 8004744:	4618      	mov	r0, r3
 8004746:	f7fe fd47 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800474e:	f001 b9f8 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004752:	4ba4      	ldr	r3, [pc, #656]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b02      	cmp	r3, #2
 800475c:	d10d      	bne.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800475e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004760:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004764:	d109      	bne.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004766:	4b9f      	ldr	r3, [pc, #636]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	08db      	lsrs	r3, r3, #3
 800476c:	f003 0303 	and.w	r3, r3, #3
 8004770:	4a9d      	ldr	r2, [pc, #628]	@ (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8004772:	fa22 f303 	lsr.w	r3, r2, r3
 8004776:	637b      	str	r3, [r7, #52]	@ 0x34
 8004778:	e020      	b.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800477a:	4b9a      	ldr	r3, [pc, #616]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004782:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004786:	d106      	bne.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8004788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800478e:	d102      	bne.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8004790:	4b96      	ldr	r3, [pc, #600]	@ (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8004792:	637b      	str	r3, [r7, #52]	@ 0x34
 8004794:	e012      	b.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004796:	4b93      	ldr	r3, [pc, #588]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004798:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d107      	bne.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 80047a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80047aa:	d103      	bne.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 80047ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80047b2:	e003      	b.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047b8:	f001 b9c3 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80047bc:	f001 b9c1 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80047c0:	4b88      	ldr	r3, [pc, #544]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80047c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80047cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d104      	bne.n	80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80047d2:	f7fe f9cf 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 80047d6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80047d8:	f001 b9b3 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80047dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d104      	bne.n	80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 80047e2:	f7fe f89b 	bl	800291c <HAL_RCC_GetSysClockFreq>
 80047e6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80047e8:	f001 b9ab 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80047ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d108      	bne.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047f2:	f107 0314 	add.w	r3, r7, #20
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fe fb84 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004800:	f001 b99f 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004804:	4b77      	ldr	r3, [pc, #476]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800480c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004810:	d105      	bne.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8004812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004814:	2b03      	cmp	r3, #3
 8004816:	d102      	bne.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8004818:	4b75      	ldr	r3, [pc, #468]	@ (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800481a:	637b      	str	r3, [r7, #52]	@ 0x34
 800481c:	e023      	b.n	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800481e:	4b71      	ldr	r3, [pc, #452]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b02      	cmp	r3, #2
 8004828:	d10c      	bne.n	8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800482a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482c:	2b04      	cmp	r3, #4
 800482e:	d109      	bne.n	8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004830:	4b6c      	ldr	r3, [pc, #432]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	08db      	lsrs	r3, r3, #3
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	4a6b      	ldr	r2, [pc, #428]	@ (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800483c:	fa22 f303 	lsr.w	r3, r2, r3
 8004840:	637b      	str	r3, [r7, #52]	@ 0x34
 8004842:	e010      	b.n	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8004844:	4b67      	ldr	r3, [pc, #412]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800484c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004850:	d105      	bne.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8004852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004854:	2b05      	cmp	r3, #5
 8004856:	d102      	bne.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8004858:	4b64      	ldr	r3, [pc, #400]	@ (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800485a:	637b      	str	r3, [r7, #52]	@ 0x34
 800485c:	e003      	b.n	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004862:	f001 b96e 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004866:	f001 b96c 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800486a:	4b5e      	ldr	r3, [pc, #376]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800486c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8004876:	4b5b      	ldr	r3, [pc, #364]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b02      	cmp	r3, #2
 8004882:	d106      	bne.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8004884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004886:	2b00      	cmp	r3, #0
 8004888:	d103      	bne.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800488a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800488e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004890:	e012      	b.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8004892:	4b54      	ldr	r3, [pc, #336]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004894:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004898:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800489c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048a0:	d106      	bne.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 80048a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d103      	bne.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 80048a8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80048ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80048ae:	e003      	b.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80048b4:	f001 b945 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80048b8:	f001 b943 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80048bc:	4b49      	ldr	r3, [pc, #292]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80048be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80048c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048c6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80048c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d104      	bne.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80048ce:	f7fe f96d 	bl	8002bac <HAL_RCC_GetPCLK1Freq>
 80048d2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80048d4:	f001 b935 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 80048d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048de:	d108      	bne.n	80048f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048e0:	f107 0308 	add.w	r3, r7, #8
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fe fc77 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048ee:	f001 b928 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80048f2:	4b3c      	ldr	r3, [pc, #240]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d10d      	bne.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 80048fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004900:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004904:	d109      	bne.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004906:	4b37      	ldr	r3, [pc, #220]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	08db      	lsrs	r3, r3, #3
 800490c:	f003 0303 	and.w	r3, r3, #3
 8004910:	4a35      	ldr	r2, [pc, #212]	@ (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8004912:	fa22 f303 	lsr.w	r3, r2, r3
 8004916:	637b      	str	r3, [r7, #52]	@ 0x34
 8004918:	e011      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800491a:	4b32      	ldr	r3, [pc, #200]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004922:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004926:	d106      	bne.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8004928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800492e:	d102      	bne.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8004930:	4b2e      	ldr	r3, [pc, #184]	@ (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8004932:	637b      	str	r3, [r7, #52]	@ 0x34
 8004934:	e003      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800493a:	f001 b902 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800493e:	f001 b900 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004942:	4b28      	ldr	r3, [pc, #160]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004944:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004948:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800494c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800494e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004950:	2b00      	cmp	r3, #0
 8004952:	d104      	bne.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004954:	f7fe f92a 	bl	8002bac <HAL_RCC_GetPCLK1Freq>
 8004958:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800495a:	f001 b8f2 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800495e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004960:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004964:	d108      	bne.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004966:	f107 0308 	add.w	r3, r7, #8
 800496a:	4618      	mov	r0, r3
 800496c:	f7fe fc34 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004974:	f001 b8e5 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004978:	4b1a      	ldr	r3, [pc, #104]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b02      	cmp	r3, #2
 8004982:	d10d      	bne.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8004984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004986:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800498a:	d109      	bne.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800498c:	4b15      	ldr	r3, [pc, #84]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	08db      	lsrs	r3, r3, #3
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	4a14      	ldr	r2, [pc, #80]	@ (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8004998:	fa22 f303 	lsr.w	r3, r2, r3
 800499c:	637b      	str	r3, [r7, #52]	@ 0x34
 800499e:	e011      	b.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80049a0:	4b10      	ldr	r3, [pc, #64]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049ac:	d106      	bne.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 80049ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80049b4:	d102      	bne.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 80049b6:	4b0d      	ldr	r3, [pc, #52]	@ (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80049b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80049ba:	e003      	b.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80049c0:	f001 b8bf 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80049c4:	f001 b8bd 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80049c8:	4b06      	ldr	r3, [pc, #24]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80049ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80049ce:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80049d2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80049d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10c      	bne.n	80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80049da:	f7fe f913 	bl	8002c04 <HAL_RCC_GetPCLK3Freq>
 80049de:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 80049e0:	f001 b8af 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80049e4:	44020c00 	.word	0x44020c00
 80049e8:	03d09000 	.word	0x03d09000
 80049ec:	003d0900 	.word	0x003d0900
 80049f0:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80049f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049fa:	d108      	bne.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049fc:	f107 0308 	add.w	r3, r7, #8
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fe fbe9 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a0a:	f001 b89a 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8004a0e:	4b9f      	ldr	r3, [pc, #636]	@ (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d10d      	bne.n	8004a36 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a20:	d109      	bne.n	8004a36 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a22:	4b9a      	ldr	r3, [pc, #616]	@ (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	08db      	lsrs	r3, r3, #3
 8004a28:	f003 0303 	and.w	r3, r3, #3
 8004a2c:	4a98      	ldr	r2, [pc, #608]	@ (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8004a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a32:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a34:	e011      	b.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8004a36:	4b95      	ldr	r3, [pc, #596]	@ (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a42:	d106      	bne.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8004a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a46:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a4a:	d102      	bne.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8004a4c:	4b91      	ldr	r3, [pc, #580]	@ (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8004a4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a50:	e003      	b.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a56:	f001 b874 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004a5a:	f001 b872 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004a5e:	4b8b      	ldr	r3, [pc, #556]	@ (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004a60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a64:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004a68:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d104      	bne.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004a70:	f7fe f8c8 	bl	8002c04 <HAL_RCC_GetPCLK3Freq>
 8004a74:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8004a76:	f001 b864 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a80:	d108      	bne.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a82:	f107 0308 	add.w	r3, r7, #8
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fe fba6 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a90:	f001 b857 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004a94:	4b7d      	ldr	r3, [pc, #500]	@ (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d10d      	bne.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004aa6:	d109      	bne.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004aa8:	4b78      	ldr	r3, [pc, #480]	@ (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	08db      	lsrs	r3, r3, #3
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	4a77      	ldr	r2, [pc, #476]	@ (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8004ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aba:	e011      	b.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8004abc:	4b73      	ldr	r3, [pc, #460]	@ (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ac8:	d106      	bne.n	8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8004aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004acc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004ad0:	d102      	bne.n	8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8004ad2:	4b70      	ldr	r3, [pc, #448]	@ (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8004ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ad6:	e003      	b.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004adc:	f001 b831 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004ae0:	f001 b82f 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8004ae4:	4b69      	ldr	r3, [pc, #420]	@ (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004ae6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004aea:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004aee:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8004af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d104      	bne.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004af6:	f7fe f859 	bl	8002bac <HAL_RCC_GetPCLK1Freq>
 8004afa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004afc:	f001 b821 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8004b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b06:	d108      	bne.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b08:	f107 0308 	add.w	r3, r7, #8
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fe fb63 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b16:	f001 b814 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8004b1a:	4b5c      	ldr	r3, [pc, #368]	@ (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d10e      	bne.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8004b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b2c:	d10a      	bne.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b2e:	4b57      	ldr	r3, [pc, #348]	@ (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	08db      	lsrs	r3, r3, #3
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	4a55      	ldr	r2, [pc, #340]	@ (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8004b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b40:	f000 bfff 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b48:	f000 bffb 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004b4c:	4b4f      	ldr	r3, [pc, #316]	@ (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004b4e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004b52:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b56:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004b5e:	d056      	beq.n	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8004b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b62:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004b66:	f200 808b 	bhi.w	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b70:	d03e      	beq.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8004b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b78:	f200 8082 	bhi.w	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b82:	d027      	beq.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8004b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b8a:	d879      	bhi.n	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b92:	d017      	beq.n	8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8004b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b9a:	d871      	bhi.n	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d004      	beq.n	8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ba8:	d004      	beq.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8004baa:	e069      	b.n	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004bac:	f7fe f82a 	bl	8002c04 <HAL_RCC_GetPCLK3Freq>
 8004bb0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8004bb2:	e068      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bb4:	f107 0314 	add.w	r3, r7, #20
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fe f9a3 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004bc2:	e060      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bc4:	f107 0308 	add.w	r3, r7, #8
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7fe fb05 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004bd2:	e058      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004bd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d103      	bne.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8004be2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004be6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004be8:	e04d      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8004bea:	2300      	movs	r3, #0
 8004bec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004bee:	e04a      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004bf0:	4b26      	ldr	r3, [pc, #152]	@ (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004bf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bf6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bfe:	d103      	bne.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8004c00:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004c04:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004c06:	e03e      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004c0c:	e03b      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004c10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c14:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004c18:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d10c      	bne.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8004c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d109      	bne.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c2c:	4b17      	ldr	r3, [pc, #92]	@ (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	08db      	lsrs	r3, r3, #3
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	4a16      	ldr	r2, [pc, #88]	@ (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8004c38:	fa22 f303 	lsr.w	r3, r2, r3
 8004c3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c3e:	e01e      	b.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c40:	4b12      	ldr	r3, [pc, #72]	@ (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c4c:	d106      	bne.n	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8004c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c54:	d102      	bne.n	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004c56:	4b0f      	ldr	r3, [pc, #60]	@ (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8004c58:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c5a:	e010      	b.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c68:	d106      	bne.n	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8004c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c70:	d102      	bne.n	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004c72:	4b09      	ldr	r3, [pc, #36]	@ (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8004c74:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c76:	e002      	b.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004c7c:	e003      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8004c7e:	e002      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004c84:	bf00      	nop
          }
        }
        break;
 8004c86:	f000 bf5c 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004c8a:	bf00      	nop
 8004c8c:	44020c00 	.word	0x44020c00
 8004c90:	03d09000 	.word	0x03d09000
 8004c94:	003d0900 	.word	0x003d0900
 8004c98:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004c9c:	4b9e      	ldr	r3, [pc, #632]	@ (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004c9e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004ca2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004ca6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004caa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004cae:	d056      	beq.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004cb6:	f200 808b 	bhi.w	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8004cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cc0:	d03e      	beq.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cc8:	f200 8082 	bhi.w	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cd2:	d027      	beq.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8004cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cda:	d879      	bhi.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ce2:	d017      	beq.n	8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8004ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cea:	d871      	bhi.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8004cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d004      	beq.n	8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cf8:	d004      	beq.n	8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8004cfa:	e069      	b.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8004cfc:	f7fd ff56 	bl	8002bac <HAL_RCC_GetPCLK1Freq>
 8004d00:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8004d02:	e068      	b.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d04:	f107 0314 	add.w	r3, r7, #20
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7fe f8fb 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004d12:	e060      	b.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d14:	f107 0308 	add.w	r3, r7, #8
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fe fa5d 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004d22:	e058      	b.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004d24:	4b7c      	ldr	r3, [pc, #496]	@ (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004d26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d103      	bne.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8004d32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d36:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004d38:	e04d      	b.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004d3e:	e04a      	b.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004d40:	4b75      	ldr	r3, [pc, #468]	@ (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004d42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d4e:	d103      	bne.n	8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8004d50:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004d54:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004d56:	e03e      	b.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004d5c:	e03b      	b.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004d5e:	4b6e      	ldr	r3, [pc, #440]	@ (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004d60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d64:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004d68:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d6a:	4b6b      	ldr	r3, [pc, #428]	@ (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d10c      	bne.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8004d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d109      	bne.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d7c:	4b66      	ldr	r3, [pc, #408]	@ (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	08db      	lsrs	r3, r3, #3
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	4a65      	ldr	r2, [pc, #404]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8004d88:	fa22 f303 	lsr.w	r3, r2, r3
 8004d8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d8e:	e01e      	b.n	8004dce <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d90:	4b61      	ldr	r3, [pc, #388]	@ (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d9c:	d106      	bne.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8004d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004da4:	d102      	bne.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004da6:	4b5e      	ldr	r3, [pc, #376]	@ (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8004da8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004daa:	e010      	b.n	8004dce <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004dac:	4b5a      	ldr	r3, [pc, #360]	@ (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004db4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004db8:	d106      	bne.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8004dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dc0:	d102      	bne.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004dc2:	4b58      	ldr	r3, [pc, #352]	@ (8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8004dc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dc6:	e002      	b.n	8004dce <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004dcc:	e003      	b.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8004dce:	e002      	b.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004dd4:	bf00      	nop
          }
        }
        break;
 8004dd6:	f000 beb4 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8004dda:	4b4f      	ldr	r3, [pc, #316]	@ (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004ddc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004de0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004de4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004dec:	d056      	beq.n	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8004dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004df4:	f200 808b 	bhi.w	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8004df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dfa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004dfe:	d03e      	beq.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8004e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e06:	f200 8082 	bhi.w	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e10:	d027      	beq.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8004e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e18:	d879      	bhi.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e20:	d017      	beq.n	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8004e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e28:	d871      	bhi.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d004      	beq.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8004e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e36:	d004      	beq.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8004e38:	e069      	b.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004e3a:	f7fd fee3 	bl	8002c04 <HAL_RCC_GetPCLK3Freq>
 8004e3e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8004e40:	e068      	b.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e42:	f107 0314 	add.w	r3, r7, #20
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fe f85c 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004e50:	e060      	b.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e52:	f107 0308 	add.w	r3, r7, #8
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fe f9be 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004e60:	e058      	b.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004e62:	4b2d      	ldr	r3, [pc, #180]	@ (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d103      	bne.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8004e70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e74:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004e76:	e04d      	b.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004e7c:	e04a      	b.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004e7e:	4b26      	ldr	r3, [pc, #152]	@ (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004e80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e8c:	d103      	bne.n	8004e96 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8004e8e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004e92:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004e94:	e03e      	b.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8004e96:	2300      	movs	r3, #0
 8004e98:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004e9a:	e03b      	b.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004e9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ea2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d10c      	bne.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8004eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d109      	bne.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004eba:	4b17      	ldr	r3, [pc, #92]	@ (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	08db      	lsrs	r3, r3, #3
 8004ec0:	f003 0303 	and.w	r3, r3, #3
 8004ec4:	4a15      	ldr	r2, [pc, #84]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8004ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ecc:	e01e      	b.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ece:	4b12      	ldr	r3, [pc, #72]	@ (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ed6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eda:	d106      	bne.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8004edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ee2:	d102      	bne.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8004ee6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ee8:	e010      	b.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004eea:	4b0b      	ldr	r3, [pc, #44]	@ (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ef6:	d106      	bne.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8004ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004efa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004efe:	d102      	bne.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004f00:	4b08      	ldr	r3, [pc, #32]	@ (8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8004f02:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f04:	e002      	b.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004f0a:	e003      	b.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8004f0c:	e002      	b.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004f12:	bf00      	nop
          }
        }
        break;
 8004f14:	f000 be15 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004f18:	44020c00 	.word	0x44020c00
 8004f1c:	03d09000 	.word	0x03d09000
 8004f20:	003d0900 	.word	0x003d0900
 8004f24:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8004f28:	4b9e      	ldr	r3, [pc, #632]	@ (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004f2a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004f2e:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8004f32:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f36:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004f3a:	d056      	beq.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8004f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004f42:	f200 808b 	bhi.w	800505c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8004f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f4c:	d03e      	beq.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f54:	f200 8082 	bhi.w	800505c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8004f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f5e:	d027      	beq.n	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8004f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f66:	d879      	bhi.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8004f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f6e:	d017      	beq.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8004f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f76:	d871      	bhi.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8004f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d004      	beq.n	8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f84:	d004      	beq.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8004f86:	e069      	b.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004f88:	f7fd fe3c 	bl	8002c04 <HAL_RCC_GetPCLK3Freq>
 8004f8c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8004f8e:	e068      	b.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f90:	f107 0314 	add.w	r3, r7, #20
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fd ffb5 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004f9e:	e060      	b.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fa0:	f107 0308 	add.w	r3, r7, #8
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7fe f917 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004fae:	e058      	b.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004fb0:	4b7c      	ldr	r3, [pc, #496]	@ (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004fb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d103      	bne.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8004fbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fc2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004fc4:	e04d      	b.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004fca:	e04a      	b.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004fcc:	4b75      	ldr	r3, [pc, #468]	@ (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004fce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fda:	d103      	bne.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8004fdc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004fe0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004fe2:	e03e      	b.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004fe8:	e03b      	b.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004fea:	4b6e      	ldr	r3, [pc, #440]	@ (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004fec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ff0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ff6:	4b6b      	ldr	r3, [pc, #428]	@ (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d10c      	bne.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8005002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005004:	2b00      	cmp	r3, #0
 8005006:	d109      	bne.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005008:	4b66      	ldr	r3, [pc, #408]	@ (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	08db      	lsrs	r3, r3, #3
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	4a65      	ldr	r2, [pc, #404]	@ (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8005014:	fa22 f303 	lsr.w	r3, r2, r3
 8005018:	637b      	str	r3, [r7, #52]	@ 0x34
 800501a:	e01e      	b.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800501c:	4b61      	ldr	r3, [pc, #388]	@ (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005024:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005028:	d106      	bne.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800502a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800502c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005030:	d102      	bne.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005032:	4b5e      	ldr	r3, [pc, #376]	@ (80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8005034:	637b      	str	r3, [r7, #52]	@ 0x34
 8005036:	e010      	b.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005038:	4b5a      	ldr	r3, [pc, #360]	@ (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005040:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005044:	d106      	bne.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8005046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005048:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800504c:	d102      	bne.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800504e:	4b58      	ldr	r3, [pc, #352]	@ (80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8005050:	637b      	str	r3, [r7, #52]	@ 0x34
 8005052:	e002      	b.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005054:	2300      	movs	r3, #0
 8005056:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005058:	e003      	b.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800505a:	e002      	b.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005060:	bf00      	nop
          }
        }
        break;
 8005062:	f000 bd6e 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8005066:	4b4f      	ldr	r3, [pc, #316]	@ (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8005068:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800506c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005070:	633b      	str	r3, [r7, #48]	@ 0x30
 8005072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005074:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005078:	d056      	beq.n	8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800507a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005080:	f200 808b 	bhi.w	800519a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8005084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005086:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800508a:	d03e      	beq.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800508c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800508e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005092:	f200 8082 	bhi.w	800519a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8005096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005098:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800509c:	d027      	beq.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800509e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050a4:	d879      	bhi.n	800519a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80050a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050ac:	d017      	beq.n	80050de <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 80050ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050b4:	d871      	bhi.n	800519a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80050b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d004      	beq.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 80050bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050c2:	d004      	beq.n	80050ce <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 80050c4:	e069      	b.n	800519a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80050c6:	f7fd fd9d 	bl	8002c04 <HAL_RCC_GetPCLK3Freq>
 80050ca:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80050cc:	e068      	b.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050ce:	f107 0314 	add.w	r3, r7, #20
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fd ff16 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80050dc:	e060      	b.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050de:	f107 0308 	add.w	r3, r7, #8
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fe f878 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80050ec:	e058      	b.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80050ee:	4b2d      	ldr	r3, [pc, #180]	@ (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80050f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d103      	bne.n	8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 80050fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005100:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8005102:	e04d      	b.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8005104:	2300      	movs	r3, #0
 8005106:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005108:	e04a      	b.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800510a:	4b26      	ldr	r3, [pc, #152]	@ (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800510c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005110:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005114:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005118:	d103      	bne.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800511a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800511e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8005120:	e03e      	b.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8005122:	2300      	movs	r3, #0
 8005124:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005126:	e03b      	b.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005128:	4b1e      	ldr	r3, [pc, #120]	@ (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800512a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800512e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005132:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005134:	4b1b      	ldr	r3, [pc, #108]	@ (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b02      	cmp	r3, #2
 800513e:	d10c      	bne.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8005140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005142:	2b00      	cmp	r3, #0
 8005144:	d109      	bne.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005146:	4b17      	ldr	r3, [pc, #92]	@ (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	08db      	lsrs	r3, r3, #3
 800514c:	f003 0303 	and.w	r3, r3, #3
 8005150:	4a15      	ldr	r2, [pc, #84]	@ (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8005152:	fa22 f303 	lsr.w	r3, r2, r3
 8005156:	637b      	str	r3, [r7, #52]	@ 0x34
 8005158:	e01e      	b.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800515a:	4b12      	ldr	r3, [pc, #72]	@ (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005162:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005166:	d106      	bne.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8005168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800516a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800516e:	d102      	bne.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005170:	4b0e      	ldr	r3, [pc, #56]	@ (80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8005172:	637b      	str	r3, [r7, #52]	@ 0x34
 8005174:	e010      	b.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005176:	4b0b      	ldr	r3, [pc, #44]	@ (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800517e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005182:	d106      	bne.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8005184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005186:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800518a:	d102      	bne.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800518c:	4b08      	ldr	r3, [pc, #32]	@ (80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800518e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005190:	e002      	b.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005192:	2300      	movs	r3, #0
 8005194:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005196:	e003      	b.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8005198:	e002      	b.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800519a:	2300      	movs	r3, #0
 800519c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800519e:	bf00      	nop
          }
        }
        break;
 80051a0:	f000 bccf 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80051a4:	44020c00 	.word	0x44020c00
 80051a8:	03d09000 	.word	0x03d09000
 80051ac:	003d0900 	.word	0x003d0900
 80051b0:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 80051b4:	4b9e      	ldr	r3, [pc, #632]	@ (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80051b6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80051ba:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80051be:	633b      	str	r3, [r7, #48]	@ 0x30
 80051c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051c6:	d056      	beq.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 80051c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051ce:	f200 808b 	bhi.w	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80051d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051d8:	d03e      	beq.n	8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 80051da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051e0:	f200 8082 	bhi.w	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80051e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051ea:	d027      	beq.n	800523c <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 80051ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051f2:	d879      	bhi.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80051f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051fa:	d017      	beq.n	800522c <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 80051fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005202:	d871      	bhi.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8005204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005206:	2b00      	cmp	r3, #0
 8005208:	d004      	beq.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800520a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005210:	d004      	beq.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8005212:	e069      	b.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8005214:	f7fd fcf6 	bl	8002c04 <HAL_RCC_GetPCLK3Freq>
 8005218:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800521a:	e068      	b.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800521c:	f107 0314 	add.w	r3, r7, #20
 8005220:	4618      	mov	r0, r3
 8005222:	f7fd fe6f 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800522a:	e060      	b.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800522c:	f107 0308 	add.w	r3, r7, #8
 8005230:	4618      	mov	r0, r3
 8005232:	f7fd ffd1 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800523a:	e058      	b.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800523c:	4b7c      	ldr	r3, [pc, #496]	@ (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800523e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b02      	cmp	r3, #2
 8005248:	d103      	bne.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800524a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800524e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8005250:	e04d      	b.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8005252:	2300      	movs	r3, #0
 8005254:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005256:	e04a      	b.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8005258:	4b75      	ldr	r3, [pc, #468]	@ (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800525a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800525e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005262:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005266:	d103      	bne.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8005268:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800526c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800526e:	e03e      	b.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8005270:	2300      	movs	r3, #0
 8005272:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005274:	e03b      	b.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005276:	4b6e      	ldr	r3, [pc, #440]	@ (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8005278:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800527c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005280:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005282:	4b6b      	ldr	r3, [pc, #428]	@ (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b02      	cmp	r3, #2
 800528c:	d10c      	bne.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800528e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005290:	2b00      	cmp	r3, #0
 8005292:	d109      	bne.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005294:	4b66      	ldr	r3, [pc, #408]	@ (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	08db      	lsrs	r3, r3, #3
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	4a65      	ldr	r2, [pc, #404]	@ (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80052a0:	fa22 f303 	lsr.w	r3, r2, r3
 80052a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80052a6:	e01e      	b.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052a8:	4b61      	ldr	r3, [pc, #388]	@ (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052b4:	d106      	bne.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 80052b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052bc:	d102      	bne.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80052be:	4b5e      	ldr	r3, [pc, #376]	@ (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80052c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80052c2:	e010      	b.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80052c4:	4b5a      	ldr	r3, [pc, #360]	@ (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052d0:	d106      	bne.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 80052d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052d8:	d102      	bne.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80052da:	4b58      	ldr	r3, [pc, #352]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80052dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80052de:	e002      	b.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80052e4:	e003      	b.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 80052e6:	e002      	b.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80052ec:	bf00      	nop
          }
        }
        break;
 80052ee:	f000 bc28 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80052f2:	4b4f      	ldr	r3, [pc, #316]	@ (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80052f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80052f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052fc:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80052fe:	4b4c      	ldr	r3, [pc, #304]	@ (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005306:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800530a:	d106      	bne.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800530c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530e:	2b00      	cmp	r3, #0
 8005310:	d103      	bne.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8005312:	4b4a      	ldr	r3, [pc, #296]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8005314:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8005316:	f000 bc14 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800531a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005320:	d108      	bne.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005322:	f107 0320 	add.w	r3, r7, #32
 8005326:	4618      	mov	r0, r3
 8005328:	f7fd fc82 	bl	8002c30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800532c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005330:	f000 bc07 	b.w	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8005334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005336:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800533a:	d107      	bne.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800533c:	f107 0314 	add.w	r3, r7, #20
 8005340:	4618      	mov	r0, r3
 8005342:	f7fd fddf 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800534a:	e3fa      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005350:	e3f7      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005352:	4b37      	ldr	r3, [pc, #220]	@ (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8005354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	633b      	str	r3, [r7, #48]	@ 0x30
 800535e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005360:	2b04      	cmp	r3, #4
 8005362:	d861      	bhi.n	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8005364:	a201      	add	r2, pc, #4	@ (adr r2, 800536c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8005366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536a:	bf00      	nop
 800536c:	08005381 	.word	0x08005381
 8005370:	08005391 	.word	0x08005391
 8005374:	080053a1 	.word	0x080053a1
 8005378:	080053b1 	.word	0x080053b1
 800537c:	080053b7 	.word	0x080053b7
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005380:	f107 0320 	add.w	r3, r7, #32
 8005384:	4618      	mov	r0, r3
 8005386:	f7fd fc53 	bl	8002c30 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800538a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800538e:	e04e      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005390:	f107 0314 	add.w	r3, r7, #20
 8005394:	4618      	mov	r0, r3
 8005396:	f7fd fdb5 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800539e:	e046      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053a0:	f107 0308 	add.w	r3, r7, #8
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7fd ff17 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80053ae:	e03e      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80053b0:	4b23      	ldr	r3, [pc, #140]	@ (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 80053b2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80053b4:	e03b      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80053b6:	4b1e      	ldr	r3, [pc, #120]	@ (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80053b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053bc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80053c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80053c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d10c      	bne.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 80053ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d109      	bne.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80053d4:	4b16      	ldr	r3, [pc, #88]	@ (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	08db      	lsrs	r3, r3, #3
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	4a15      	ldr	r2, [pc, #84]	@ (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80053e0:	fa22 f303 	lsr.w	r3, r2, r3
 80053e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80053e6:	e01e      	b.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80053e8:	4b11      	ldr	r3, [pc, #68]	@ (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053f4:	d106      	bne.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 80053f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053fc:	d102      	bne.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80053fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8005400:	637b      	str	r3, [r7, #52]	@ 0x34
 8005402:	e010      	b.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005404:	4b0a      	ldr	r3, [pc, #40]	@ (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800540c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005410:	d106      	bne.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8005412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005414:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005418:	d102      	bne.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800541a:	4b08      	ldr	r3, [pc, #32]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800541c:	637b      	str	r3, [r7, #52]	@ 0x34
 800541e:	e002      	b.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005420:	2300      	movs	r3, #0
 8005422:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005424:	e003      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8005426:	e002      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8005428:	2300      	movs	r3, #0
 800542a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800542c:	bf00      	nop
          }
        }
        break;
 800542e:	e388      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005430:	44020c00 	.word	0x44020c00
 8005434:	03d09000 	.word	0x03d09000
 8005438:	003d0900 	.word	0x003d0900
 800543c:	007a1200 	.word	0x007a1200
 8005440:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005444:	4ba9      	ldr	r3, [pc, #676]	@ (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800544a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800544e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005452:	2b20      	cmp	r3, #32
 8005454:	f200 809a 	bhi.w	800558c <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8005458:	a201      	add	r2, pc, #4	@ (adr r2, 8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800545a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545e:	bf00      	nop
 8005460:	080054e5 	.word	0x080054e5
 8005464:	0800558d 	.word	0x0800558d
 8005468:	0800558d 	.word	0x0800558d
 800546c:	0800558d 	.word	0x0800558d
 8005470:	0800558d 	.word	0x0800558d
 8005474:	0800558d 	.word	0x0800558d
 8005478:	0800558d 	.word	0x0800558d
 800547c:	0800558d 	.word	0x0800558d
 8005480:	080054f5 	.word	0x080054f5
 8005484:	0800558d 	.word	0x0800558d
 8005488:	0800558d 	.word	0x0800558d
 800548c:	0800558d 	.word	0x0800558d
 8005490:	0800558d 	.word	0x0800558d
 8005494:	0800558d 	.word	0x0800558d
 8005498:	0800558d 	.word	0x0800558d
 800549c:	0800558d 	.word	0x0800558d
 80054a0:	08005505 	.word	0x08005505
 80054a4:	0800558d 	.word	0x0800558d
 80054a8:	0800558d 	.word	0x0800558d
 80054ac:	0800558d 	.word	0x0800558d
 80054b0:	0800558d 	.word	0x0800558d
 80054b4:	0800558d 	.word	0x0800558d
 80054b8:	0800558d 	.word	0x0800558d
 80054bc:	0800558d 	.word	0x0800558d
 80054c0:	08005515 	.word	0x08005515
 80054c4:	0800558d 	.word	0x0800558d
 80054c8:	0800558d 	.word	0x0800558d
 80054cc:	0800558d 	.word	0x0800558d
 80054d0:	0800558d 	.word	0x0800558d
 80054d4:	0800558d 	.word	0x0800558d
 80054d8:	0800558d 	.word	0x0800558d
 80054dc:	0800558d 	.word	0x0800558d
 80054e0:	0800551b 	.word	0x0800551b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054e4:	f107 0320 	add.w	r3, r7, #32
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fd fba1 	bl	8002c30 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80054ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80054f2:	e04e      	b.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054f4:	f107 0314 	add.w	r3, r7, #20
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7fd fd03 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005502:	e046      	b.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005504:	f107 0308 	add.w	r3, r7, #8
 8005508:	4618      	mov	r0, r3
 800550a:	f7fd fe65 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005512:	e03e      	b.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005514:	4b76      	ldr	r3, [pc, #472]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8005516:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005518:	e03b      	b.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800551a:	4b74      	ldr	r3, [pc, #464]	@ (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800551c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005520:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005524:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005526:	4b71      	ldr	r3, [pc, #452]	@ (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b02      	cmp	r3, #2
 8005530:	d10c      	bne.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8005532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005534:	2b00      	cmp	r3, #0
 8005536:	d109      	bne.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005538:	4b6c      	ldr	r3, [pc, #432]	@ (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	08db      	lsrs	r3, r3, #3
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	4a6c      	ldr	r2, [pc, #432]	@ (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8005544:	fa22 f303 	lsr.w	r3, r2, r3
 8005548:	637b      	str	r3, [r7, #52]	@ 0x34
 800554a:	e01e      	b.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800554c:	4b67      	ldr	r3, [pc, #412]	@ (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005558:	d106      	bne.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800555a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800555c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005560:	d102      	bne.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005562:	4b65      	ldr	r3, [pc, #404]	@ (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8005564:	637b      	str	r3, [r7, #52]	@ 0x34
 8005566:	e010      	b.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005568:	4b60      	ldr	r3, [pc, #384]	@ (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005570:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005574:	d106      	bne.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8005576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005578:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800557c:	d102      	bne.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800557e:	4b5f      	ldr	r3, [pc, #380]	@ (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8005580:	637b      	str	r3, [r7, #52]	@ 0x34
 8005582:	e002      	b.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005588:	e003      	b.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800558a:	e002      	b.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800558c:	2300      	movs	r3, #0
 800558e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005590:	bf00      	nop
          }
        }
        break;
 8005592:	e2d6      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005594:	4b55      	ldr	r3, [pc, #340]	@ (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800559a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800559e:	633b      	str	r3, [r7, #48]	@ 0x30
 80055a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055a6:	d031      	beq.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 80055a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055ae:	d866      	bhi.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80055b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80055b4:	d027      	beq.n	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 80055b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b8:	2bc0      	cmp	r3, #192	@ 0xc0
 80055ba:	d860      	bhi.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80055bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055be:	2b80      	cmp	r3, #128	@ 0x80
 80055c0:	d019      	beq.n	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 80055c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c4:	2b80      	cmp	r3, #128	@ 0x80
 80055c6:	d85a      	bhi.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80055c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 80055ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d0:	2b40      	cmp	r3, #64	@ 0x40
 80055d2:	d008      	beq.n	80055e6 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 80055d4:	e053      	b.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055d6:	f107 0320 	add.w	r3, r7, #32
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fd fb28 	bl	8002c30 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80055e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80055e4:	e04e      	b.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055e6:	f107 0314 	add.w	r3, r7, #20
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fd fc8a 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80055f4:	e046      	b.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055f6:	f107 0308 	add.w	r3, r7, #8
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fd fdec 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005604:	e03e      	b.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005606:	4b3a      	ldr	r3, [pc, #232]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8005608:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800560a:	e03b      	b.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800560c:	4b37      	ldr	r3, [pc, #220]	@ (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800560e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005612:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005616:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005618:	4b34      	ldr	r3, [pc, #208]	@ (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b02      	cmp	r3, #2
 8005622:	d10c      	bne.n	800563e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8005624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005626:	2b00      	cmp	r3, #0
 8005628:	d109      	bne.n	800563e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800562a:	4b30      	ldr	r3, [pc, #192]	@ (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	08db      	lsrs	r3, r3, #3
 8005630:	f003 0303 	and.w	r3, r3, #3
 8005634:	4a2f      	ldr	r2, [pc, #188]	@ (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8005636:	fa22 f303 	lsr.w	r3, r2, r3
 800563a:	637b      	str	r3, [r7, #52]	@ 0x34
 800563c:	e01e      	b.n	800567c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800563e:	4b2b      	ldr	r3, [pc, #172]	@ (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005646:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800564a:	d106      	bne.n	800565a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800564c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800564e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005652:	d102      	bne.n	800565a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005654:	4b28      	ldr	r3, [pc, #160]	@ (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8005656:	637b      	str	r3, [r7, #52]	@ 0x34
 8005658:	e010      	b.n	800567c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800565a:	4b24      	ldr	r3, [pc, #144]	@ (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005662:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005666:	d106      	bne.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8005668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800566a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800566e:	d102      	bne.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005670:	4b22      	ldr	r3, [pc, #136]	@ (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8005672:	637b      	str	r3, [r7, #52]	@ 0x34
 8005674:	e002      	b.n	800567c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005676:	2300      	movs	r3, #0
 8005678:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800567a:	e003      	b.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800567c:	e002      	b.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800567e:	2300      	movs	r3, #0
 8005680:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005682:	bf00      	nop
          }
        }
        break;
 8005684:	e25d      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8005686:	4b19      	ldr	r3, [pc, #100]	@ (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800568c:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8005690:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8005692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005694:	2b00      	cmp	r3, #0
 8005696:	d103      	bne.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005698:	f7fd fa9e 	bl	8002bd8 <HAL_RCC_GetPCLK2Freq>
 800569c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800569e:	e250      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80056a0:	4b12      	ldr	r3, [pc, #72]	@ (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056ac:	d10b      	bne.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 80056ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056b4:	d107      	bne.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056b6:	f107 0314 	add.w	r3, r7, #20
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fd fc22 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80056c4:	e04f      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 80056c6:	4b09      	ldr	r3, [pc, #36]	@ (80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056d2:	d115      	bne.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 80056d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056da:	d111      	bne.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056dc:	f107 0308 	add.w	r3, r7, #8
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7fd fd79 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80056ea:	e03c      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 80056ec:	44020c00 	.word	0x44020c00
 80056f0:	00bb8000 	.word	0x00bb8000
 80056f4:	03d09000 	.word	0x03d09000
 80056f8:	003d0900 	.word	0x003d0900
 80056fc:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8005700:	4b94      	ldr	r3, [pc, #592]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0302 	and.w	r3, r3, #2
 8005708:	2b02      	cmp	r3, #2
 800570a:	d10d      	bne.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800570c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005712:	d109      	bne.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005714:	4b8f      	ldr	r3, [pc, #572]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	08db      	lsrs	r3, r3, #3
 800571a:	f003 0303 	and.w	r3, r3, #3
 800571e:	4a8e      	ldr	r2, [pc, #568]	@ (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8005720:	fa22 f303 	lsr.w	r3, r2, r3
 8005724:	637b      	str	r3, [r7, #52]	@ 0x34
 8005726:	e01e      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8005728:	4b8a      	ldr	r3, [pc, #552]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005730:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005734:	d106      	bne.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8005736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005738:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800573c:	d102      	bne.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800573e:	4b87      	ldr	r3, [pc, #540]	@ (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8005740:	637b      	str	r3, [r7, #52]	@ 0x34
 8005742:	e010      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8005744:	4b83      	ldr	r3, [pc, #524]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800574c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005750:	d106      	bne.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8005752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005754:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005758:	d102      	bne.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800575a:	4b81      	ldr	r3, [pc, #516]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800575c:	637b      	str	r3, [r7, #52]	@ 0x34
 800575e:	e002      	b.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8005760:	2300      	movs	r3, #0
 8005762:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005764:	e1ed      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005766:	e1ec      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8005768:	4b7a      	ldr	r3, [pc, #488]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800576a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800576e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005772:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8005774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005776:	2b00      	cmp	r3, #0
 8005778:	d103      	bne.n	8005782 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800577a:	f7fd fa43 	bl	8002c04 <HAL_RCC_GetPCLK3Freq>
 800577e:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8005780:	e1df      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8005782:	4b74      	ldr	r3, [pc, #464]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800578a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800578e:	d10b      	bne.n	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8005790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005796:	d107      	bne.n	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005798:	f107 0314 	add.w	r3, r7, #20
 800579c:	4618      	mov	r0, r3
 800579e:	f7fd fbb1 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80057a6:	e045      	b.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 80057a8:	4b6a      	ldr	r3, [pc, #424]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057b4:	d10b      	bne.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 80057b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057bc:	d107      	bne.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057be:	f107 0308 	add.w	r3, r7, #8
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fd fd08 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80057cc:	e032      	b.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 80057ce:	4b61      	ldr	r3, [pc, #388]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d10d      	bne.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 80057da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80057e0:	d109      	bne.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80057e2:	4b5c      	ldr	r3, [pc, #368]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	08db      	lsrs	r3, r3, #3
 80057e8:	f003 0303 	and.w	r3, r3, #3
 80057ec:	4a5a      	ldr	r2, [pc, #360]	@ (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80057ee:	fa22 f303 	lsr.w	r3, r2, r3
 80057f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80057f4:	e01e      	b.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 80057f6:	4b57      	ldr	r3, [pc, #348]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005802:	d106      	bne.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8005804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005806:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800580a:	d102      	bne.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800580c:	4b53      	ldr	r3, [pc, #332]	@ (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800580e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005810:	e010      	b.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8005812:	4b50      	ldr	r3, [pc, #320]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800581a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800581e:	d106      	bne.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8005820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005822:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005826:	d102      	bne.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8005828:	4b4d      	ldr	r3, [pc, #308]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800582a:	637b      	str	r3, [r7, #52]	@ 0x34
 800582c:	e002      	b.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800582e:	2300      	movs	r3, #0
 8005830:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005832:	e186      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005834:	e185      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005836:	4b47      	ldr	r3, [pc, #284]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800583c:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8005840:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8005842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005844:	2b00      	cmp	r3, #0
 8005846:	d103      	bne.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005848:	f7fd f9c6 	bl	8002bd8 <HAL_RCC_GetPCLK2Freq>
 800584c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800584e:	e178      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8005850:	4b40      	ldr	r3, [pc, #256]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005858:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800585c:	d10b      	bne.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800585e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005860:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005864:	d107      	bne.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005866:	f107 0314 	add.w	r3, r7, #20
 800586a:	4618      	mov	r0, r3
 800586c:	f7fd fb4a 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	637b      	str	r3, [r7, #52]	@ 0x34
 8005874:	e045      	b.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8005876:	4b37      	ldr	r3, [pc, #220]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800587e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005882:	d10b      	bne.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8005884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005886:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800588a:	d107      	bne.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800588c:	f107 0308 	add.w	r3, r7, #8
 8005890:	4618      	mov	r0, r3
 8005892:	f7fd fca1 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	637b      	str	r3, [r7, #52]	@ 0x34
 800589a:	e032      	b.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800589c:	4b2d      	ldr	r3, [pc, #180]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d10d      	bne.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 80058a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058aa:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80058ae:	d109      	bne.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80058b0:	4b28      	ldr	r3, [pc, #160]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	08db      	lsrs	r3, r3, #3
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	4a27      	ldr	r2, [pc, #156]	@ (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80058bc:	fa22 f303 	lsr.w	r3, r2, r3
 80058c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80058c2:	e01e      	b.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 80058c4:	4b23      	ldr	r3, [pc, #140]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058d0:	d106      	bne.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 80058d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058d8:	d102      	bne.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 80058da:	4b20      	ldr	r3, [pc, #128]	@ (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80058dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80058de:	e010      	b.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 80058e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058ec:	d106      	bne.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 80058ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80058f4:	d102      	bne.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 80058f6:	4b1a      	ldr	r3, [pc, #104]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80058f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80058fa:	e002      	b.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005900:	e11f      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005902:	e11e      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005904:	4b13      	ldr	r3, [pc, #76]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005906:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800590a:	f003 0303 	and.w	r3, r3, #3
 800590e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005912:	2b03      	cmp	r3, #3
 8005914:	d85f      	bhi.n	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8005916:	a201      	add	r2, pc, #4	@ (adr r2, 800591c <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8005918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591c:	0800592d 	.word	0x0800592d
 8005920:	08005935 	.word	0x08005935
 8005924:	08005945 	.word	0x08005945
 8005928:	08005965 	.word	0x08005965

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800592c:	f7fd f922 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 8005930:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8005932:	e053      	b.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005934:	f107 0320 	add.w	r3, r7, #32
 8005938:	4618      	mov	r0, r3
 800593a:	f7fd f979 	bl	8002c30 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800593e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005940:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005942:	e04b      	b.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005944:	f107 0314 	add.w	r3, r7, #20
 8005948:	4618      	mov	r0, r3
 800594a:	f7fd fadb 	bl	8002f04 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005952:	e043      	b.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8005954:	44020c00 	.word	0x44020c00
 8005958:	03d09000 	.word	0x03d09000
 800595c:	003d0900 	.word	0x003d0900
 8005960:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005964:	4b79      	ldr	r3, [pc, #484]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005966:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800596a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800596e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005970:	4b76      	ldr	r3, [pc, #472]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b02      	cmp	r3, #2
 800597a:	d10c      	bne.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800597c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800597e:	2b00      	cmp	r3, #0
 8005980:	d109      	bne.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005982:	4b72      	ldr	r3, [pc, #456]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	08db      	lsrs	r3, r3, #3
 8005988:	f003 0303 	and.w	r3, r3, #3
 800598c:	4a70      	ldr	r2, [pc, #448]	@ (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800598e:	fa22 f303 	lsr.w	r3, r2, r3
 8005992:	637b      	str	r3, [r7, #52]	@ 0x34
 8005994:	e01e      	b.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005996:	4b6d      	ldr	r3, [pc, #436]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800599e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059a2:	d106      	bne.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 80059a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059aa:	d102      	bne.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80059ac:	4b69      	ldr	r3, [pc, #420]	@ (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 80059ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80059b0:	e010      	b.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80059b2:	4b66      	ldr	r3, [pc, #408]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059be:	d106      	bne.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 80059c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059c6:	d102      	bne.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80059c8:	4b63      	ldr	r3, [pc, #396]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 80059ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80059cc:	e002      	b.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80059d2:	e003      	b.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 80059d4:	e002      	b.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80059da:	bf00      	nop
          }
        }
        break;
 80059dc:	e0b1      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80059de:	4b5b      	ldr	r3, [pc, #364]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80059e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80059e4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80059e8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80059ea:	4b58      	ldr	r3, [pc, #352]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80059ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d106      	bne.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 80059f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d103      	bne.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 80059fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a02:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a04:	e01f      	b.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8005a06:	4b51      	ldr	r3, [pc, #324]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005a08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a14:	d106      	bne.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8005a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a18:	2b40      	cmp	r3, #64	@ 0x40
 8005a1a:	d103      	bne.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8005a1c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a22:	e010      	b.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8005a24:	4b49      	ldr	r3, [pc, #292]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a30:	d106      	bne.n	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8005a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a34:	2b80      	cmp	r3, #128	@ 0x80
 8005a36:	d103      	bne.n	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8005a38:	f248 0312 	movw	r3, #32786	@ 0x8012
 8005a3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a3e:	e002      	b.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8005a44:	e07d      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005a46:	e07c      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005a48:	4b40      	ldr	r3, [pc, #256]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005a4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a4e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a52:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005a54:	4b3d      	ldr	r3, [pc, #244]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a60:	d105      	bne.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8005a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d102      	bne.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8005a68:	4b3c      	ldr	r3, [pc, #240]	@ (8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8005a6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a6c:	e031      	b.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8005a6e:	4b37      	ldr	r3, [pc, #220]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a7a:	d10a      	bne.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7e:	2b10      	cmp	r3, #16
 8005a80:	d107      	bne.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a82:	f107 0320 	add.w	r3, r7, #32
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fd f8d2 	bl	8002c30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a90:	e01f      	b.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8005a92:	4b2e      	ldr	r3, [pc, #184]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005a94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d106      	bne.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa2:	2b20      	cmp	r3, #32
 8005aa4:	d103      	bne.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8005aa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aac:	e011      	b.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8005aae:	4b27      	ldr	r3, [pc, #156]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ab4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ab8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005abc:	d106      	bne.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8005abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac0:	2b30      	cmp	r3, #48	@ 0x30
 8005ac2:	d103      	bne.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8005ac4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005ac8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aca:	e002      	b.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8005ad0:	e037      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005ad2:	e036      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8005ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005ad6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ada:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005ade:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8005ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae2:	2b10      	cmp	r3, #16
 8005ae4:	d107      	bne.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ae6:	f107 0320 	add.w	r3, r7, #32
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fd f8a0 	bl	8002c30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005af4:	e025      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8005af6:	4b15      	ldr	r3, [pc, #84]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005afe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b02:	d10a      	bne.n	8005b1a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8005b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b06:	2b20      	cmp	r3, #32
 8005b08:	d107      	bne.n	8005b1a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b0a:	f107 0308 	add.w	r3, r7, #8
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fd fb62 	bl	80031d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b18:	e00f      	b.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8005b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b26:	d105      	bne.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8005b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2a:	2b30      	cmp	r3, #48	@ 0x30
 8005b2c:	d102      	bne.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8005b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8005b30:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b32:	e002      	b.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8005b38:	e003      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005b3a:	e002      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b40:	bf00      	nop
    }
  }

  return (frequency);
 8005b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	373c      	adds	r7, #60	@ 0x3c
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd90      	pop	{r4, r7, pc}
 8005b4c:	44020c00 	.word	0x44020c00
 8005b50:	03d09000 	.word	0x03d09000
 8005b54:	003d0900 	.word	0x003d0900
 8005b58:	007a1200 	.word	0x007a1200
 8005b5c:	02dc6c00 	.word	0x02dc6c00

08005b60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e042      	b.n	8005bf8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d106      	bne.n	8005b8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 f83b 	bl	8005c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2224      	movs	r2, #36	@ 0x24
 8005b8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0201 	bic.w	r2, r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fabe 	bl	800612c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f8cd 	bl	8005d50 <UART_SetConfig>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d101      	bne.n	8005bc0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e01b      	b.n	8005bf8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005bde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0201 	orr.w	r2, r2, #1
 8005bee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fb3d 	bl	8006270 <UART_CheckIdleState>
 8005bf6:	4603      	mov	r3, r0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08a      	sub	sp, #40	@ 0x28
 8005c18:	af02      	add	r7, sp, #8
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	603b      	str	r3, [r7, #0]
 8005c20:	4613      	mov	r3, r2
 8005c22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c2a:	2b20      	cmp	r3, #32
 8005c2c:	f040 808b 	bne.w	8005d46 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d002      	beq.n	8005c3c <HAL_UART_Transmit+0x28>
 8005c36:	88fb      	ldrh	r3, [r7, #6]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e083      	b.n	8005d48 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c4a:	2b80      	cmp	r3, #128	@ 0x80
 8005c4c:	d107      	bne.n	8005c5e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c5c:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2221      	movs	r2, #33	@ 0x21
 8005c6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c6e:	f7fb faeb 	bl	8001248 <HAL_GetTick>
 8005c72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	88fa      	ldrh	r2, [r7, #6]
 8005c78:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	88fa      	ldrh	r2, [r7, #6]
 8005c80:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c8c:	d108      	bne.n	8005ca0 <HAL_UART_Transmit+0x8c>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d104      	bne.n	8005ca0 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	61bb      	str	r3, [r7, #24]
 8005c9e:	e003      	b.n	8005ca8 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ca8:	e030      	b.n	8005d0c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	2180      	movs	r1, #128	@ 0x80
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 fb85 	bl	80063c4 <UART_WaitOnFlagUntilTimeout>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d005      	beq.n	8005ccc <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e03d      	b.n	8005d48 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10b      	bne.n	8005cea <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ce0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	3302      	adds	r3, #2
 8005ce6:	61bb      	str	r3, [r7, #24]
 8005ce8:	e007      	b.n	8005cfa <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	781a      	ldrb	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	3b01      	subs	r3, #1
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1c8      	bne.n	8005caa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	2140      	movs	r1, #64	@ 0x40
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 fb4e 	bl	80063c4 <UART_WaitOnFlagUntilTimeout>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d005      	beq.n	8005d3a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e006      	b.n	8005d48 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	e000      	b.n	8005d48 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8005d46:	2302      	movs	r3, #2
  }
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3720      	adds	r7, #32
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d54:	b094      	sub	sp, #80	@ 0x50
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	4b78      	ldr	r3, [pc, #480]	@ (8005f48 <UART_SetConfig+0x1f8>)
 8005d66:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d6a:	689a      	ldr	r2, [r3, #8]
 8005d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	431a      	orrs	r2, r3
 8005d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	431a      	orrs	r2, r3
 8005d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d7a:	69db      	ldr	r3, [r3, #28]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4971      	ldr	r1, [pc, #452]	@ (8005f4c <UART_SetConfig+0x1fc>)
 8005d88:	4019      	ands	r1, r3
 8005d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d90:	430b      	orrs	r3, r1
 8005d92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da0:	68d9      	ldr	r1, [r3, #12]
 8005da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	ea40 0301 	orr.w	r3, r0, r1
 8005daa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	4b64      	ldr	r3, [pc, #400]	@ (8005f48 <UART_SetConfig+0x1f8>)
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d009      	beq.n	8005dd0 <UART_SetConfig+0x80>
 8005dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	4b63      	ldr	r3, [pc, #396]	@ (8005f50 <UART_SetConfig+0x200>)
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d004      	beq.n	8005dd0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc8:	6a1a      	ldr	r2, [r3, #32]
 8005dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8005dda:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8005dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005de4:	430b      	orrs	r3, r1
 8005de6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dee:	f023 000f 	bic.w	r0, r3, #15
 8005df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	ea40 0301 	orr.w	r3, r0, r1
 8005dfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	4b53      	ldr	r3, [pc, #332]	@ (8005f54 <UART_SetConfig+0x204>)
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d102      	bne.n	8005e10 <UART_SetConfig+0xc0>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e0e:	e066      	b.n	8005ede <UART_SetConfig+0x18e>
 8005e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	4b50      	ldr	r3, [pc, #320]	@ (8005f58 <UART_SetConfig+0x208>)
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d102      	bne.n	8005e20 <UART_SetConfig+0xd0>
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e1e:	e05e      	b.n	8005ede <UART_SetConfig+0x18e>
 8005e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	4b4d      	ldr	r3, [pc, #308]	@ (8005f5c <UART_SetConfig+0x20c>)
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d102      	bne.n	8005e30 <UART_SetConfig+0xe0>
 8005e2a:	2304      	movs	r3, #4
 8005e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e2e:	e056      	b.n	8005ede <UART_SetConfig+0x18e>
 8005e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	4b4a      	ldr	r3, [pc, #296]	@ (8005f60 <UART_SetConfig+0x210>)
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d102      	bne.n	8005e40 <UART_SetConfig+0xf0>
 8005e3a:	2308      	movs	r3, #8
 8005e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e3e:	e04e      	b.n	8005ede <UART_SetConfig+0x18e>
 8005e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	4b47      	ldr	r3, [pc, #284]	@ (8005f64 <UART_SetConfig+0x214>)
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d102      	bne.n	8005e50 <UART_SetConfig+0x100>
 8005e4a:	2310      	movs	r3, #16
 8005e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e4e:	e046      	b.n	8005ede <UART_SetConfig+0x18e>
 8005e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	4b44      	ldr	r3, [pc, #272]	@ (8005f68 <UART_SetConfig+0x218>)
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d102      	bne.n	8005e60 <UART_SetConfig+0x110>
 8005e5a:	2320      	movs	r3, #32
 8005e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e5e:	e03e      	b.n	8005ede <UART_SetConfig+0x18e>
 8005e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	4b41      	ldr	r3, [pc, #260]	@ (8005f6c <UART_SetConfig+0x21c>)
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d102      	bne.n	8005e70 <UART_SetConfig+0x120>
 8005e6a:	2340      	movs	r3, #64	@ 0x40
 8005e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e6e:	e036      	b.n	8005ede <UART_SetConfig+0x18e>
 8005e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	4b3e      	ldr	r3, [pc, #248]	@ (8005f70 <UART_SetConfig+0x220>)
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d102      	bne.n	8005e80 <UART_SetConfig+0x130>
 8005e7a:	2380      	movs	r3, #128	@ 0x80
 8005e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e7e:	e02e      	b.n	8005ede <UART_SetConfig+0x18e>
 8005e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	4b3b      	ldr	r3, [pc, #236]	@ (8005f74 <UART_SetConfig+0x224>)
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d103      	bne.n	8005e92 <UART_SetConfig+0x142>
 8005e8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005e8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e90:	e025      	b.n	8005ede <UART_SetConfig+0x18e>
 8005e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	4b38      	ldr	r3, [pc, #224]	@ (8005f78 <UART_SetConfig+0x228>)
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d103      	bne.n	8005ea4 <UART_SetConfig+0x154>
 8005e9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ea2:	e01c      	b.n	8005ede <UART_SetConfig+0x18e>
 8005ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	4b34      	ldr	r3, [pc, #208]	@ (8005f7c <UART_SetConfig+0x22c>)
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d103      	bne.n	8005eb6 <UART_SetConfig+0x166>
 8005eae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005eb4:	e013      	b.n	8005ede <UART_SetConfig+0x18e>
 8005eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	4b31      	ldr	r3, [pc, #196]	@ (8005f80 <UART_SetConfig+0x230>)
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d103      	bne.n	8005ec8 <UART_SetConfig+0x178>
 8005ec0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ec6:	e00a      	b.n	8005ede <UART_SetConfig+0x18e>
 8005ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8005f48 <UART_SetConfig+0x1f8>)
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d103      	bne.n	8005eda <UART_SetConfig+0x18a>
 8005ed2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ed8:	e001      	b.n	8005ede <UART_SetConfig+0x18e>
 8005eda:	2300      	movs	r3, #0
 8005edc:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4b19      	ldr	r3, [pc, #100]	@ (8005f48 <UART_SetConfig+0x1f8>)
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d005      	beq.n	8005ef4 <UART_SetConfig+0x1a4>
 8005ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	4b18      	ldr	r3, [pc, #96]	@ (8005f50 <UART_SetConfig+0x200>)
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	f040 8094 	bne.w	800601c <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005ef4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	623b      	str	r3, [r7, #32]
 8005efa:	627a      	str	r2, [r7, #36]	@ 0x24
 8005efc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005f00:	f7fd fad4 	bl	80034ac <HAL_RCCEx_GetPeriphCLKFreq>
 8005f04:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 80f7 	beq.w	80060fc <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f12:	4a1c      	ldr	r2, [pc, #112]	@ (8005f84 <UART_SetConfig+0x234>)
 8005f14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f20:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	4613      	mov	r3, r2
 8005f28:	005b      	lsls	r3, r3, #1
 8005f2a:	4413      	add	r3, r2
 8005f2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d305      	bcc.n	8005f3e <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d924      	bls.n	8005f88 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005f44:	e069      	b.n	800601a <UART_SetConfig+0x2ca>
 8005f46:	bf00      	nop
 8005f48:	44002400 	.word	0x44002400
 8005f4c:	cfff69f3 	.word	0xcfff69f3
 8005f50:	54002400 	.word	0x54002400
 8005f54:	40013800 	.word	0x40013800
 8005f58:	40004400 	.word	0x40004400
 8005f5c:	40004800 	.word	0x40004800
 8005f60:	40004c00 	.word	0x40004c00
 8005f64:	40005000 	.word	0x40005000
 8005f68:	40006400 	.word	0x40006400
 8005f6c:	40007800 	.word	0x40007800
 8005f70:	40007c00 	.word	0x40007c00
 8005f74:	40008000 	.word	0x40008000
 8005f78:	40006800 	.word	0x40006800
 8005f7c:	40006c00 	.word	0x40006c00
 8005f80:	40008400 	.word	0x40008400
 8005f84:	08007438 	.word	0x08007438
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	61bb      	str	r3, [r7, #24]
 8005f8e:	61fa      	str	r2, [r7, #28]
 8005f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f94:	4a64      	ldr	r2, [pc, #400]	@ (8006128 <UART_SetConfig+0x3d8>)
 8005f96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	613b      	str	r3, [r7, #16]
 8005fa0:	617a      	str	r2, [r7, #20]
 8005fa2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005fa6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005faa:	f7fa f96f 	bl	800028c <__aeabi_uldivmod>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	f04f 0200 	mov.w	r2, #0
 8005fba:	f04f 0300 	mov.w	r3, #0
 8005fbe:	020b      	lsls	r3, r1, #8
 8005fc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005fc4:	0202      	lsls	r2, r0, #8
 8005fc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fc8:	6849      	ldr	r1, [r1, #4]
 8005fca:	0849      	lsrs	r1, r1, #1
 8005fcc:	2000      	movs	r0, #0
 8005fce:	460c      	mov	r4, r1
 8005fd0:	4605      	mov	r5, r0
 8005fd2:	eb12 0804 	adds.w	r8, r2, r4
 8005fd6:	eb43 0905 	adc.w	r9, r3, r5
 8005fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	60bb      	str	r3, [r7, #8]
 8005fe2:	60fa      	str	r2, [r7, #12]
 8005fe4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fe8:	4640      	mov	r0, r8
 8005fea:	4649      	mov	r1, r9
 8005fec:	f7fa f94e 	bl	800028c <__aeabi_uldivmod>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ffa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ffe:	d308      	bcc.n	8006012 <UART_SetConfig+0x2c2>
 8006000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006002:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006006:	d204      	bcs.n	8006012 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8006008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800600e:	60da      	str	r2, [r3, #12]
 8006010:	e003      	b.n	800601a <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8006018:	e070      	b.n	80060fc <UART_SetConfig+0x3ac>
 800601a:	e06f      	b.n	80060fc <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800601c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800601e:	69db      	ldr	r3, [r3, #28]
 8006020:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006024:	d13c      	bne.n	80060a0 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006026:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006028:	2200      	movs	r2, #0
 800602a:	603b      	str	r3, [r7, #0]
 800602c:	607a      	str	r2, [r7, #4]
 800602e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006032:	f7fd fa3b 	bl	80034ac <HAL_RCCEx_GetPeriphCLKFreq>
 8006036:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006038:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800603a:	2b00      	cmp	r3, #0
 800603c:	d05e      	beq.n	80060fc <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800603e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006042:	4a39      	ldr	r2, [pc, #228]	@ (8006128 <UART_SetConfig+0x3d8>)
 8006044:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006048:	461a      	mov	r2, r3
 800604a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800604c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006050:	005a      	lsls	r2, r3, #1
 8006052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	085b      	lsrs	r3, r3, #1
 8006058:	441a      	add	r2, r3
 800605a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006062:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006066:	2b0f      	cmp	r3, #15
 8006068:	d916      	bls.n	8006098 <UART_SetConfig+0x348>
 800606a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800606c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006070:	d212      	bcs.n	8006098 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006074:	b29b      	uxth	r3, r3
 8006076:	f023 030f 	bic.w	r3, r3, #15
 800607a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800607c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800607e:	085b      	lsrs	r3, r3, #1
 8006080:	b29b      	uxth	r3, r3
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	b29a      	uxth	r2, r3
 8006088:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800608a:	4313      	orrs	r3, r2
 800608c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800608e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8006094:	60da      	str	r2, [r3, #12]
 8006096:	e031      	b.n	80060fc <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800609e:	e02d      	b.n	80060fc <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80060a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060a2:	2200      	movs	r2, #0
 80060a4:	469a      	mov	sl, r3
 80060a6:	4693      	mov	fp, r2
 80060a8:	4650      	mov	r0, sl
 80060aa:	4659      	mov	r1, fp
 80060ac:	f7fd f9fe 	bl	80034ac <HAL_RCCEx_GetPeriphCLKFreq>
 80060b0:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80060b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d021      	beq.n	80060fc <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060bc:	4a1a      	ldr	r2, [pc, #104]	@ (8006128 <UART_SetConfig+0x3d8>)
 80060be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060c2:	461a      	mov	r2, r3
 80060c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80060ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	085b      	lsrs	r3, r3, #1
 80060d0:	441a      	add	r2, r3
 80060d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060de:	2b0f      	cmp	r3, #15
 80060e0:	d909      	bls.n	80060f6 <UART_SetConfig+0x3a6>
 80060e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060e8:	d205      	bcs.n	80060f6 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	60da      	str	r2, [r3, #12]
 80060f4:	e002      	b.n	80060fc <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060fe:	2201      	movs	r2, #1
 8006100:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006106:	2201      	movs	r2, #1
 8006108:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800610c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610e:	2200      	movs	r2, #0
 8006110:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006114:	2200      	movs	r2, #0
 8006116:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006118:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800611c:	4618      	mov	r0, r3
 800611e:	3750      	adds	r7, #80	@ 0x50
 8006120:	46bd      	mov	sp, r7
 8006122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006126:	bf00      	nop
 8006128:	08007438 	.word	0x08007438

0800612c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006138:	f003 0308 	and.w	r3, r3, #8
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00a      	beq.n	8006156 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00a      	beq.n	8006178 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	430a      	orrs	r2, r1
 8006176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00a      	beq.n	800619a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	430a      	orrs	r2, r1
 8006198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800619e:	f003 0304 	and.w	r3, r3, #4
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00a      	beq.n	80061bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	430a      	orrs	r2, r1
 80061ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c0:	f003 0310 	and.w	r3, r3, #16
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00a      	beq.n	80061de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e2:	f003 0320 	and.w	r3, r3, #32
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00a      	beq.n	8006200 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	430a      	orrs	r2, r1
 80061fe:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006208:	2b00      	cmp	r3, #0
 800620a:	d01a      	beq.n	8006242 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006226:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800622a:	d10a      	bne.n	8006242 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	605a      	str	r2, [r3, #4]
  }
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b098      	sub	sp, #96	@ 0x60
 8006274:	af02      	add	r7, sp, #8
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006280:	f7fa ffe2 	bl	8001248 <HAL_GetTick>
 8006284:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0308 	and.w	r3, r3, #8
 8006290:	2b08      	cmp	r3, #8
 8006292:	d12f      	bne.n	80062f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006294:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800629c:	2200      	movs	r2, #0
 800629e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f88e 	bl	80063c4 <UART_WaitOnFlagUntilTimeout>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d022      	beq.n	80062f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b6:	e853 3f00 	ldrex	r3, [r3]
 80062ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	461a      	mov	r2, r3
 80062ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80062ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062d4:	e841 2300 	strex	r3, r2, [r1]
 80062d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1e6      	bne.n	80062ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e063      	b.n	80063bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0304 	and.w	r3, r3, #4
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d149      	bne.n	8006396 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006302:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800630a:	2200      	movs	r2, #0
 800630c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 f857 	bl	80063c4 <UART_WaitOnFlagUntilTimeout>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d03c      	beq.n	8006396 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006324:	e853 3f00 	ldrex	r3, [r3]
 8006328:	623b      	str	r3, [r7, #32]
   return(result);
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006330:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	461a      	mov	r2, r3
 8006338:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800633a:	633b      	str	r3, [r7, #48]	@ 0x30
 800633c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006342:	e841 2300 	strex	r3, r2, [r1]
 8006346:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1e6      	bne.n	800631c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	3308      	adds	r3, #8
 8006354:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	e853 3f00 	ldrex	r3, [r3]
 800635c:	60fb      	str	r3, [r7, #12]
   return(result);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f023 0301 	bic.w	r3, r3, #1
 8006364:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3308      	adds	r3, #8
 800636c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800636e:	61fa      	str	r2, [r7, #28]
 8006370:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006372:	69b9      	ldr	r1, [r7, #24]
 8006374:	69fa      	ldr	r2, [r7, #28]
 8006376:	e841 2300 	strex	r3, r2, [r1]
 800637a:	617b      	str	r3, [r7, #20]
   return(result);
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1e5      	bne.n	800634e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2220      	movs	r2, #32
 8006386:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e012      	b.n	80063bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2220      	movs	r2, #32
 800639a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2220      	movs	r2, #32
 80063a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3758      	adds	r7, #88	@ 0x58
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	603b      	str	r3, [r7, #0]
 80063d0:	4613      	mov	r3, r2
 80063d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063d4:	e04f      	b.n	8006476 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063dc:	d04b      	beq.n	8006476 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063de:	f7fa ff33 	bl	8001248 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d302      	bcc.n	80063f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e04e      	b.n	8006496 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0304 	and.w	r3, r3, #4
 8006402:	2b00      	cmp	r3, #0
 8006404:	d037      	beq.n	8006476 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2b80      	cmp	r3, #128	@ 0x80
 800640a:	d034      	beq.n	8006476 <UART_WaitOnFlagUntilTimeout+0xb2>
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2b40      	cmp	r3, #64	@ 0x40
 8006410:	d031      	beq.n	8006476 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	f003 0308 	and.w	r3, r3, #8
 800641c:	2b08      	cmp	r3, #8
 800641e:	d110      	bne.n	8006442 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2208      	movs	r2, #8
 8006426:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 f838 	bl	800649e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2208      	movs	r2, #8
 8006432:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e029      	b.n	8006496 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800644c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006450:	d111      	bne.n	8006476 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800645a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f000 f81e 	bl	800649e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2220      	movs	r2, #32
 8006466:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e00f      	b.n	8006496 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	69da      	ldr	r2, [r3, #28]
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	4013      	ands	r3, r2
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	429a      	cmp	r2, r3
 8006484:	bf0c      	ite	eq
 8006486:	2301      	moveq	r3, #1
 8006488:	2300      	movne	r3, #0
 800648a:	b2db      	uxtb	r3, r3
 800648c:	461a      	mov	r2, r3
 800648e:	79fb      	ldrb	r3, [r7, #7]
 8006490:	429a      	cmp	r2, r3
 8006492:	d0a0      	beq.n	80063d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800649e:	b480      	push	{r7}
 80064a0:	b095      	sub	sp, #84	@ 0x54
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ae:	e853 3f00 	ldrex	r3, [r3]
 80064b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80064b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	461a      	mov	r2, r3
 80064c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80064c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80064ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064cc:	e841 2300 	strex	r3, r2, [r1]
 80064d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80064d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1e6      	bne.n	80064a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	3308      	adds	r3, #8
 80064de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	e853 3f00 	ldrex	r3, [r3]
 80064e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064ee:	f023 0301 	bic.w	r3, r3, #1
 80064f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3308      	adds	r3, #8
 80064fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006500:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006502:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006504:	e841 2300 	strex	r3, r2, [r1]
 8006508:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800650a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1e3      	bne.n	80064d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006514:	2b01      	cmp	r3, #1
 8006516:	d118      	bne.n	800654a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	e853 3f00 	ldrex	r3, [r3]
 8006524:	60bb      	str	r3, [r7, #8]
   return(result);
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f023 0310 	bic.w	r3, r3, #16
 800652c:	647b      	str	r3, [r7, #68]	@ 0x44
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006536:	61bb      	str	r3, [r7, #24]
 8006538:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653a:	6979      	ldr	r1, [r7, #20]
 800653c:	69ba      	ldr	r2, [r7, #24]
 800653e:	e841 2300 	strex	r3, r2, [r1]
 8006542:	613b      	str	r3, [r7, #16]
   return(result);
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1e6      	bne.n	8006518 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2220      	movs	r2, #32
 800654e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800655e:	bf00      	nop
 8006560:	3754      	adds	r7, #84	@ 0x54
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
	...

0800656c <std>:
 800656c:	2300      	movs	r3, #0
 800656e:	b510      	push	{r4, lr}
 8006570:	4604      	mov	r4, r0
 8006572:	6083      	str	r3, [r0, #8]
 8006574:	8181      	strh	r1, [r0, #12]
 8006576:	4619      	mov	r1, r3
 8006578:	6643      	str	r3, [r0, #100]	@ 0x64
 800657a:	81c2      	strh	r2, [r0, #14]
 800657c:	2208      	movs	r2, #8
 800657e:	6183      	str	r3, [r0, #24]
 8006580:	e9c0 3300 	strd	r3, r3, [r0]
 8006584:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006588:	305c      	adds	r0, #92	@ 0x5c
 800658a:	f000 f906 	bl	800679a <memset>
 800658e:	4b0d      	ldr	r3, [pc, #52]	@ (80065c4 <std+0x58>)
 8006590:	6224      	str	r4, [r4, #32]
 8006592:	6263      	str	r3, [r4, #36]	@ 0x24
 8006594:	4b0c      	ldr	r3, [pc, #48]	@ (80065c8 <std+0x5c>)
 8006596:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006598:	4b0c      	ldr	r3, [pc, #48]	@ (80065cc <std+0x60>)
 800659a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800659c:	4b0c      	ldr	r3, [pc, #48]	@ (80065d0 <std+0x64>)
 800659e:	6323      	str	r3, [r4, #48]	@ 0x30
 80065a0:	4b0c      	ldr	r3, [pc, #48]	@ (80065d4 <std+0x68>)
 80065a2:	429c      	cmp	r4, r3
 80065a4:	d006      	beq.n	80065b4 <std+0x48>
 80065a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80065aa:	4294      	cmp	r4, r2
 80065ac:	d002      	beq.n	80065b4 <std+0x48>
 80065ae:	33d0      	adds	r3, #208	@ 0xd0
 80065b0:	429c      	cmp	r4, r3
 80065b2:	d105      	bne.n	80065c0 <std+0x54>
 80065b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80065b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065bc:	f000 b966 	b.w	800688c <__retarget_lock_init_recursive>
 80065c0:	bd10      	pop	{r4, pc}
 80065c2:	bf00      	nop
 80065c4:	08006715 	.word	0x08006715
 80065c8:	08006737 	.word	0x08006737
 80065cc:	0800676f 	.word	0x0800676f
 80065d0:	08006793 	.word	0x08006793
 80065d4:	20000184 	.word	0x20000184

080065d8 <stdio_exit_handler>:
 80065d8:	4a02      	ldr	r2, [pc, #8]	@ (80065e4 <stdio_exit_handler+0xc>)
 80065da:	4903      	ldr	r1, [pc, #12]	@ (80065e8 <stdio_exit_handler+0x10>)
 80065dc:	4803      	ldr	r0, [pc, #12]	@ (80065ec <stdio_exit_handler+0x14>)
 80065de:	f000 b869 	b.w	80066b4 <_fwalk_sglue>
 80065e2:	bf00      	nop
 80065e4:	20000028 	.word	0x20000028
 80065e8:	08007135 	.word	0x08007135
 80065ec:	20000038 	.word	0x20000038

080065f0 <cleanup_stdio>:
 80065f0:	6841      	ldr	r1, [r0, #4]
 80065f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006624 <cleanup_stdio+0x34>)
 80065f4:	4299      	cmp	r1, r3
 80065f6:	b510      	push	{r4, lr}
 80065f8:	4604      	mov	r4, r0
 80065fa:	d001      	beq.n	8006600 <cleanup_stdio+0x10>
 80065fc:	f000 fd9a 	bl	8007134 <_fflush_r>
 8006600:	68a1      	ldr	r1, [r4, #8]
 8006602:	4b09      	ldr	r3, [pc, #36]	@ (8006628 <cleanup_stdio+0x38>)
 8006604:	4299      	cmp	r1, r3
 8006606:	d002      	beq.n	800660e <cleanup_stdio+0x1e>
 8006608:	4620      	mov	r0, r4
 800660a:	f000 fd93 	bl	8007134 <_fflush_r>
 800660e:	68e1      	ldr	r1, [r4, #12]
 8006610:	4b06      	ldr	r3, [pc, #24]	@ (800662c <cleanup_stdio+0x3c>)
 8006612:	4299      	cmp	r1, r3
 8006614:	d004      	beq.n	8006620 <cleanup_stdio+0x30>
 8006616:	4620      	mov	r0, r4
 8006618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800661c:	f000 bd8a 	b.w	8007134 <_fflush_r>
 8006620:	bd10      	pop	{r4, pc}
 8006622:	bf00      	nop
 8006624:	20000184 	.word	0x20000184
 8006628:	200001ec 	.word	0x200001ec
 800662c:	20000254 	.word	0x20000254

08006630 <global_stdio_init.part.0>:
 8006630:	b510      	push	{r4, lr}
 8006632:	4b0b      	ldr	r3, [pc, #44]	@ (8006660 <global_stdio_init.part.0+0x30>)
 8006634:	2104      	movs	r1, #4
 8006636:	4c0b      	ldr	r4, [pc, #44]	@ (8006664 <global_stdio_init.part.0+0x34>)
 8006638:	4a0b      	ldr	r2, [pc, #44]	@ (8006668 <global_stdio_init.part.0+0x38>)
 800663a:	4620      	mov	r0, r4
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	2200      	movs	r2, #0
 8006640:	f7ff ff94 	bl	800656c <std>
 8006644:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006648:	2201      	movs	r2, #1
 800664a:	2109      	movs	r1, #9
 800664c:	f7ff ff8e 	bl	800656c <std>
 8006650:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006654:	2202      	movs	r2, #2
 8006656:	2112      	movs	r1, #18
 8006658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800665c:	f7ff bf86 	b.w	800656c <std>
 8006660:	200002bc 	.word	0x200002bc
 8006664:	20000184 	.word	0x20000184
 8006668:	080065d9 	.word	0x080065d9

0800666c <__sfp_lock_acquire>:
 800666c:	4801      	ldr	r0, [pc, #4]	@ (8006674 <__sfp_lock_acquire+0x8>)
 800666e:	f000 b90e 	b.w	800688e <__retarget_lock_acquire_recursive>
 8006672:	bf00      	nop
 8006674:	200002c5 	.word	0x200002c5

08006678 <__sfp_lock_release>:
 8006678:	4801      	ldr	r0, [pc, #4]	@ (8006680 <__sfp_lock_release+0x8>)
 800667a:	f000 b909 	b.w	8006890 <__retarget_lock_release_recursive>
 800667e:	bf00      	nop
 8006680:	200002c5 	.word	0x200002c5

08006684 <__sinit>:
 8006684:	b510      	push	{r4, lr}
 8006686:	4604      	mov	r4, r0
 8006688:	f7ff fff0 	bl	800666c <__sfp_lock_acquire>
 800668c:	6a23      	ldr	r3, [r4, #32]
 800668e:	b11b      	cbz	r3, 8006698 <__sinit+0x14>
 8006690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006694:	f7ff bff0 	b.w	8006678 <__sfp_lock_release>
 8006698:	4b04      	ldr	r3, [pc, #16]	@ (80066ac <__sinit+0x28>)
 800669a:	6223      	str	r3, [r4, #32]
 800669c:	4b04      	ldr	r3, [pc, #16]	@ (80066b0 <__sinit+0x2c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1f5      	bne.n	8006690 <__sinit+0xc>
 80066a4:	f7ff ffc4 	bl	8006630 <global_stdio_init.part.0>
 80066a8:	e7f2      	b.n	8006690 <__sinit+0xc>
 80066aa:	bf00      	nop
 80066ac:	080065f1 	.word	0x080065f1
 80066b0:	200002bc 	.word	0x200002bc

080066b4 <_fwalk_sglue>:
 80066b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066b8:	4607      	mov	r7, r0
 80066ba:	4688      	mov	r8, r1
 80066bc:	4614      	mov	r4, r2
 80066be:	2600      	movs	r6, #0
 80066c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066c4:	f1b9 0901 	subs.w	r9, r9, #1
 80066c8:	d505      	bpl.n	80066d6 <_fwalk_sglue+0x22>
 80066ca:	6824      	ldr	r4, [r4, #0]
 80066cc:	2c00      	cmp	r4, #0
 80066ce:	d1f7      	bne.n	80066c0 <_fwalk_sglue+0xc>
 80066d0:	4630      	mov	r0, r6
 80066d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066d6:	89ab      	ldrh	r3, [r5, #12]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d907      	bls.n	80066ec <_fwalk_sglue+0x38>
 80066dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066e0:	3301      	adds	r3, #1
 80066e2:	d003      	beq.n	80066ec <_fwalk_sglue+0x38>
 80066e4:	4629      	mov	r1, r5
 80066e6:	4638      	mov	r0, r7
 80066e8:	47c0      	blx	r8
 80066ea:	4306      	orrs	r6, r0
 80066ec:	3568      	adds	r5, #104	@ 0x68
 80066ee:	e7e9      	b.n	80066c4 <_fwalk_sglue+0x10>

080066f0 <iprintf>:
 80066f0:	b40f      	push	{r0, r1, r2, r3}
 80066f2:	b507      	push	{r0, r1, r2, lr}
 80066f4:	4906      	ldr	r1, [pc, #24]	@ (8006710 <iprintf+0x20>)
 80066f6:	ab04      	add	r3, sp, #16
 80066f8:	6808      	ldr	r0, [r1, #0]
 80066fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80066fe:	6881      	ldr	r1, [r0, #8]
 8006700:	9301      	str	r3, [sp, #4]
 8006702:	f000 f9e9 	bl	8006ad8 <_vfiprintf_r>
 8006706:	b003      	add	sp, #12
 8006708:	f85d eb04 	ldr.w	lr, [sp], #4
 800670c:	b004      	add	sp, #16
 800670e:	4770      	bx	lr
 8006710:	20000034 	.word	0x20000034

08006714 <__sread>:
 8006714:	b510      	push	{r4, lr}
 8006716:	460c      	mov	r4, r1
 8006718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800671c:	f000 f868 	bl	80067f0 <_read_r>
 8006720:	2800      	cmp	r0, #0
 8006722:	bfab      	itete	ge
 8006724:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006726:	89a3      	ldrhlt	r3, [r4, #12]
 8006728:	181b      	addge	r3, r3, r0
 800672a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800672e:	bfac      	ite	ge
 8006730:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006732:	81a3      	strhlt	r3, [r4, #12]
 8006734:	bd10      	pop	{r4, pc}

08006736 <__swrite>:
 8006736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800673a:	461f      	mov	r7, r3
 800673c:	898b      	ldrh	r3, [r1, #12]
 800673e:	4605      	mov	r5, r0
 8006740:	460c      	mov	r4, r1
 8006742:	05db      	lsls	r3, r3, #23
 8006744:	4616      	mov	r6, r2
 8006746:	d505      	bpl.n	8006754 <__swrite+0x1e>
 8006748:	2302      	movs	r3, #2
 800674a:	2200      	movs	r2, #0
 800674c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006750:	f000 f83c 	bl	80067cc <_lseek_r>
 8006754:	89a3      	ldrh	r3, [r4, #12]
 8006756:	4632      	mov	r2, r6
 8006758:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800675c:	4628      	mov	r0, r5
 800675e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006762:	81a3      	strh	r3, [r4, #12]
 8006764:	463b      	mov	r3, r7
 8006766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800676a:	f000 b853 	b.w	8006814 <_write_r>

0800676e <__sseek>:
 800676e:	b510      	push	{r4, lr}
 8006770:	460c      	mov	r4, r1
 8006772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006776:	f000 f829 	bl	80067cc <_lseek_r>
 800677a:	1c43      	adds	r3, r0, #1
 800677c:	89a3      	ldrh	r3, [r4, #12]
 800677e:	bf15      	itete	ne
 8006780:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006782:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006786:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800678a:	81a3      	strheq	r3, [r4, #12]
 800678c:	bf18      	it	ne
 800678e:	81a3      	strhne	r3, [r4, #12]
 8006790:	bd10      	pop	{r4, pc}

08006792 <__sclose>:
 8006792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006796:	f000 b809 	b.w	80067ac <_close_r>

0800679a <memset>:
 800679a:	4402      	add	r2, r0
 800679c:	4603      	mov	r3, r0
 800679e:	4293      	cmp	r3, r2
 80067a0:	d100      	bne.n	80067a4 <memset+0xa>
 80067a2:	4770      	bx	lr
 80067a4:	f803 1b01 	strb.w	r1, [r3], #1
 80067a8:	e7f9      	b.n	800679e <memset+0x4>
	...

080067ac <_close_r>:
 80067ac:	b538      	push	{r3, r4, r5, lr}
 80067ae:	2300      	movs	r3, #0
 80067b0:	4d05      	ldr	r5, [pc, #20]	@ (80067c8 <_close_r+0x1c>)
 80067b2:	4604      	mov	r4, r0
 80067b4:	4608      	mov	r0, r1
 80067b6:	602b      	str	r3, [r5, #0]
 80067b8:	f7fa f993 	bl	8000ae2 <_close>
 80067bc:	1c43      	adds	r3, r0, #1
 80067be:	d102      	bne.n	80067c6 <_close_r+0x1a>
 80067c0:	682b      	ldr	r3, [r5, #0]
 80067c2:	b103      	cbz	r3, 80067c6 <_close_r+0x1a>
 80067c4:	6023      	str	r3, [r4, #0]
 80067c6:	bd38      	pop	{r3, r4, r5, pc}
 80067c8:	200002c0 	.word	0x200002c0

080067cc <_lseek_r>:
 80067cc:	b538      	push	{r3, r4, r5, lr}
 80067ce:	4604      	mov	r4, r0
 80067d0:	4d06      	ldr	r5, [pc, #24]	@ (80067ec <_lseek_r+0x20>)
 80067d2:	4608      	mov	r0, r1
 80067d4:	4611      	mov	r1, r2
 80067d6:	2200      	movs	r2, #0
 80067d8:	602a      	str	r2, [r5, #0]
 80067da:	461a      	mov	r2, r3
 80067dc:	f7fa f9a8 	bl	8000b30 <_lseek>
 80067e0:	1c43      	adds	r3, r0, #1
 80067e2:	d102      	bne.n	80067ea <_lseek_r+0x1e>
 80067e4:	682b      	ldr	r3, [r5, #0]
 80067e6:	b103      	cbz	r3, 80067ea <_lseek_r+0x1e>
 80067e8:	6023      	str	r3, [r4, #0]
 80067ea:	bd38      	pop	{r3, r4, r5, pc}
 80067ec:	200002c0 	.word	0x200002c0

080067f0 <_read_r>:
 80067f0:	b538      	push	{r3, r4, r5, lr}
 80067f2:	4604      	mov	r4, r0
 80067f4:	4d06      	ldr	r5, [pc, #24]	@ (8006810 <_read_r+0x20>)
 80067f6:	4608      	mov	r0, r1
 80067f8:	4611      	mov	r1, r2
 80067fa:	2200      	movs	r2, #0
 80067fc:	602a      	str	r2, [r5, #0]
 80067fe:	461a      	mov	r2, r3
 8006800:	f7fa f936 	bl	8000a70 <_read>
 8006804:	1c43      	adds	r3, r0, #1
 8006806:	d102      	bne.n	800680e <_read_r+0x1e>
 8006808:	682b      	ldr	r3, [r5, #0]
 800680a:	b103      	cbz	r3, 800680e <_read_r+0x1e>
 800680c:	6023      	str	r3, [r4, #0]
 800680e:	bd38      	pop	{r3, r4, r5, pc}
 8006810:	200002c0 	.word	0x200002c0

08006814 <_write_r>:
 8006814:	b538      	push	{r3, r4, r5, lr}
 8006816:	4604      	mov	r4, r0
 8006818:	4d06      	ldr	r5, [pc, #24]	@ (8006834 <_write_r+0x20>)
 800681a:	4608      	mov	r0, r1
 800681c:	4611      	mov	r1, r2
 800681e:	2200      	movs	r2, #0
 8006820:	602a      	str	r2, [r5, #0]
 8006822:	461a      	mov	r2, r3
 8006824:	f7fa f941 	bl	8000aaa <_write>
 8006828:	1c43      	adds	r3, r0, #1
 800682a:	d102      	bne.n	8006832 <_write_r+0x1e>
 800682c:	682b      	ldr	r3, [r5, #0]
 800682e:	b103      	cbz	r3, 8006832 <_write_r+0x1e>
 8006830:	6023      	str	r3, [r4, #0]
 8006832:	bd38      	pop	{r3, r4, r5, pc}
 8006834:	200002c0 	.word	0x200002c0

08006838 <__errno>:
 8006838:	4b01      	ldr	r3, [pc, #4]	@ (8006840 <__errno+0x8>)
 800683a:	6818      	ldr	r0, [r3, #0]
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	20000034 	.word	0x20000034

08006844 <__libc_init_array>:
 8006844:	b570      	push	{r4, r5, r6, lr}
 8006846:	4d0d      	ldr	r5, [pc, #52]	@ (800687c <__libc_init_array+0x38>)
 8006848:	2600      	movs	r6, #0
 800684a:	4c0d      	ldr	r4, [pc, #52]	@ (8006880 <__libc_init_array+0x3c>)
 800684c:	1b64      	subs	r4, r4, r5
 800684e:	10a4      	asrs	r4, r4, #2
 8006850:	42a6      	cmp	r6, r4
 8006852:	d109      	bne.n	8006868 <__libc_init_array+0x24>
 8006854:	4d0b      	ldr	r5, [pc, #44]	@ (8006884 <__libc_init_array+0x40>)
 8006856:	2600      	movs	r6, #0
 8006858:	4c0b      	ldr	r4, [pc, #44]	@ (8006888 <__libc_init_array+0x44>)
 800685a:	f000 fdc9 	bl	80073f0 <_init>
 800685e:	1b64      	subs	r4, r4, r5
 8006860:	10a4      	asrs	r4, r4, #2
 8006862:	42a6      	cmp	r6, r4
 8006864:	d105      	bne.n	8006872 <__libc_init_array+0x2e>
 8006866:	bd70      	pop	{r4, r5, r6, pc}
 8006868:	f855 3b04 	ldr.w	r3, [r5], #4
 800686c:	3601      	adds	r6, #1
 800686e:	4798      	blx	r3
 8006870:	e7ee      	b.n	8006850 <__libc_init_array+0xc>
 8006872:	f855 3b04 	ldr.w	r3, [r5], #4
 8006876:	3601      	adds	r6, #1
 8006878:	4798      	blx	r3
 800687a:	e7f2      	b.n	8006862 <__libc_init_array+0x1e>
 800687c:	0800748c 	.word	0x0800748c
 8006880:	0800748c 	.word	0x0800748c
 8006884:	0800748c 	.word	0x0800748c
 8006888:	08007490 	.word	0x08007490

0800688c <__retarget_lock_init_recursive>:
 800688c:	4770      	bx	lr

0800688e <__retarget_lock_acquire_recursive>:
 800688e:	4770      	bx	lr

08006890 <__retarget_lock_release_recursive>:
 8006890:	4770      	bx	lr
	...

08006894 <_free_r>:
 8006894:	b538      	push	{r3, r4, r5, lr}
 8006896:	4605      	mov	r5, r0
 8006898:	2900      	cmp	r1, #0
 800689a:	d041      	beq.n	8006920 <_free_r+0x8c>
 800689c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068a0:	1f0c      	subs	r4, r1, #4
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	bfb8      	it	lt
 80068a6:	18e4      	addlt	r4, r4, r3
 80068a8:	f000 f8e0 	bl	8006a6c <__malloc_lock>
 80068ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006924 <_free_r+0x90>)
 80068ae:	6813      	ldr	r3, [r2, #0]
 80068b0:	b933      	cbnz	r3, 80068c0 <_free_r+0x2c>
 80068b2:	6063      	str	r3, [r4, #4]
 80068b4:	6014      	str	r4, [r2, #0]
 80068b6:	4628      	mov	r0, r5
 80068b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068bc:	f000 b8dc 	b.w	8006a78 <__malloc_unlock>
 80068c0:	42a3      	cmp	r3, r4
 80068c2:	d908      	bls.n	80068d6 <_free_r+0x42>
 80068c4:	6820      	ldr	r0, [r4, #0]
 80068c6:	1821      	adds	r1, r4, r0
 80068c8:	428b      	cmp	r3, r1
 80068ca:	bf01      	itttt	eq
 80068cc:	6819      	ldreq	r1, [r3, #0]
 80068ce:	685b      	ldreq	r3, [r3, #4]
 80068d0:	1809      	addeq	r1, r1, r0
 80068d2:	6021      	streq	r1, [r4, #0]
 80068d4:	e7ed      	b.n	80068b2 <_free_r+0x1e>
 80068d6:	461a      	mov	r2, r3
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	b10b      	cbz	r3, 80068e0 <_free_r+0x4c>
 80068dc:	42a3      	cmp	r3, r4
 80068de:	d9fa      	bls.n	80068d6 <_free_r+0x42>
 80068e0:	6811      	ldr	r1, [r2, #0]
 80068e2:	1850      	adds	r0, r2, r1
 80068e4:	42a0      	cmp	r0, r4
 80068e6:	d10b      	bne.n	8006900 <_free_r+0x6c>
 80068e8:	6820      	ldr	r0, [r4, #0]
 80068ea:	4401      	add	r1, r0
 80068ec:	1850      	adds	r0, r2, r1
 80068ee:	6011      	str	r1, [r2, #0]
 80068f0:	4283      	cmp	r3, r0
 80068f2:	d1e0      	bne.n	80068b6 <_free_r+0x22>
 80068f4:	6818      	ldr	r0, [r3, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	4408      	add	r0, r1
 80068fa:	6053      	str	r3, [r2, #4]
 80068fc:	6010      	str	r0, [r2, #0]
 80068fe:	e7da      	b.n	80068b6 <_free_r+0x22>
 8006900:	d902      	bls.n	8006908 <_free_r+0x74>
 8006902:	230c      	movs	r3, #12
 8006904:	602b      	str	r3, [r5, #0]
 8006906:	e7d6      	b.n	80068b6 <_free_r+0x22>
 8006908:	6820      	ldr	r0, [r4, #0]
 800690a:	1821      	adds	r1, r4, r0
 800690c:	428b      	cmp	r3, r1
 800690e:	bf02      	ittt	eq
 8006910:	6819      	ldreq	r1, [r3, #0]
 8006912:	685b      	ldreq	r3, [r3, #4]
 8006914:	1809      	addeq	r1, r1, r0
 8006916:	6063      	str	r3, [r4, #4]
 8006918:	bf08      	it	eq
 800691a:	6021      	streq	r1, [r4, #0]
 800691c:	6054      	str	r4, [r2, #4]
 800691e:	e7ca      	b.n	80068b6 <_free_r+0x22>
 8006920:	bd38      	pop	{r3, r4, r5, pc}
 8006922:	bf00      	nop
 8006924:	200002cc 	.word	0x200002cc

08006928 <sbrk_aligned>:
 8006928:	b570      	push	{r4, r5, r6, lr}
 800692a:	4e0f      	ldr	r6, [pc, #60]	@ (8006968 <sbrk_aligned+0x40>)
 800692c:	460c      	mov	r4, r1
 800692e:	4605      	mov	r5, r0
 8006930:	6831      	ldr	r1, [r6, #0]
 8006932:	b911      	cbnz	r1, 800693a <sbrk_aligned+0x12>
 8006934:	f000 fcba 	bl	80072ac <_sbrk_r>
 8006938:	6030      	str	r0, [r6, #0]
 800693a:	4621      	mov	r1, r4
 800693c:	4628      	mov	r0, r5
 800693e:	f000 fcb5 	bl	80072ac <_sbrk_r>
 8006942:	1c43      	adds	r3, r0, #1
 8006944:	d103      	bne.n	800694e <sbrk_aligned+0x26>
 8006946:	f04f 34ff 	mov.w	r4, #4294967295
 800694a:	4620      	mov	r0, r4
 800694c:	bd70      	pop	{r4, r5, r6, pc}
 800694e:	1cc4      	adds	r4, r0, #3
 8006950:	f024 0403 	bic.w	r4, r4, #3
 8006954:	42a0      	cmp	r0, r4
 8006956:	d0f8      	beq.n	800694a <sbrk_aligned+0x22>
 8006958:	1a21      	subs	r1, r4, r0
 800695a:	4628      	mov	r0, r5
 800695c:	f000 fca6 	bl	80072ac <_sbrk_r>
 8006960:	3001      	adds	r0, #1
 8006962:	d1f2      	bne.n	800694a <sbrk_aligned+0x22>
 8006964:	e7ef      	b.n	8006946 <sbrk_aligned+0x1e>
 8006966:	bf00      	nop
 8006968:	200002c8 	.word	0x200002c8

0800696c <_malloc_r>:
 800696c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006970:	1ccd      	adds	r5, r1, #3
 8006972:	4606      	mov	r6, r0
 8006974:	f025 0503 	bic.w	r5, r5, #3
 8006978:	3508      	adds	r5, #8
 800697a:	2d0c      	cmp	r5, #12
 800697c:	bf38      	it	cc
 800697e:	250c      	movcc	r5, #12
 8006980:	2d00      	cmp	r5, #0
 8006982:	db01      	blt.n	8006988 <_malloc_r+0x1c>
 8006984:	42a9      	cmp	r1, r5
 8006986:	d904      	bls.n	8006992 <_malloc_r+0x26>
 8006988:	230c      	movs	r3, #12
 800698a:	6033      	str	r3, [r6, #0]
 800698c:	2000      	movs	r0, #0
 800698e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006992:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a68 <_malloc_r+0xfc>
 8006996:	f000 f869 	bl	8006a6c <__malloc_lock>
 800699a:	f8d8 3000 	ldr.w	r3, [r8]
 800699e:	461c      	mov	r4, r3
 80069a0:	bb44      	cbnz	r4, 80069f4 <_malloc_r+0x88>
 80069a2:	4629      	mov	r1, r5
 80069a4:	4630      	mov	r0, r6
 80069a6:	f7ff ffbf 	bl	8006928 <sbrk_aligned>
 80069aa:	1c43      	adds	r3, r0, #1
 80069ac:	4604      	mov	r4, r0
 80069ae:	d158      	bne.n	8006a62 <_malloc_r+0xf6>
 80069b0:	f8d8 4000 	ldr.w	r4, [r8]
 80069b4:	4627      	mov	r7, r4
 80069b6:	2f00      	cmp	r7, #0
 80069b8:	d143      	bne.n	8006a42 <_malloc_r+0xd6>
 80069ba:	2c00      	cmp	r4, #0
 80069bc:	d04b      	beq.n	8006a56 <_malloc_r+0xea>
 80069be:	6823      	ldr	r3, [r4, #0]
 80069c0:	4639      	mov	r1, r7
 80069c2:	4630      	mov	r0, r6
 80069c4:	eb04 0903 	add.w	r9, r4, r3
 80069c8:	f000 fc70 	bl	80072ac <_sbrk_r>
 80069cc:	4581      	cmp	r9, r0
 80069ce:	d142      	bne.n	8006a56 <_malloc_r+0xea>
 80069d0:	6821      	ldr	r1, [r4, #0]
 80069d2:	4630      	mov	r0, r6
 80069d4:	1a6d      	subs	r5, r5, r1
 80069d6:	4629      	mov	r1, r5
 80069d8:	f7ff ffa6 	bl	8006928 <sbrk_aligned>
 80069dc:	3001      	adds	r0, #1
 80069de:	d03a      	beq.n	8006a56 <_malloc_r+0xea>
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	442b      	add	r3, r5
 80069e4:	6023      	str	r3, [r4, #0]
 80069e6:	f8d8 3000 	ldr.w	r3, [r8]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	bb62      	cbnz	r2, 8006a48 <_malloc_r+0xdc>
 80069ee:	f8c8 7000 	str.w	r7, [r8]
 80069f2:	e00f      	b.n	8006a14 <_malloc_r+0xa8>
 80069f4:	6822      	ldr	r2, [r4, #0]
 80069f6:	1b52      	subs	r2, r2, r5
 80069f8:	d420      	bmi.n	8006a3c <_malloc_r+0xd0>
 80069fa:	2a0b      	cmp	r2, #11
 80069fc:	d917      	bls.n	8006a2e <_malloc_r+0xc2>
 80069fe:	1961      	adds	r1, r4, r5
 8006a00:	42a3      	cmp	r3, r4
 8006a02:	6025      	str	r5, [r4, #0]
 8006a04:	bf18      	it	ne
 8006a06:	6059      	strne	r1, [r3, #4]
 8006a08:	6863      	ldr	r3, [r4, #4]
 8006a0a:	bf08      	it	eq
 8006a0c:	f8c8 1000 	streq.w	r1, [r8]
 8006a10:	5162      	str	r2, [r4, r5]
 8006a12:	604b      	str	r3, [r1, #4]
 8006a14:	4630      	mov	r0, r6
 8006a16:	f000 f82f 	bl	8006a78 <__malloc_unlock>
 8006a1a:	f104 000b 	add.w	r0, r4, #11
 8006a1e:	1d23      	adds	r3, r4, #4
 8006a20:	f020 0007 	bic.w	r0, r0, #7
 8006a24:	1ac2      	subs	r2, r0, r3
 8006a26:	bf1c      	itt	ne
 8006a28:	1a1b      	subne	r3, r3, r0
 8006a2a:	50a3      	strne	r3, [r4, r2]
 8006a2c:	e7af      	b.n	800698e <_malloc_r+0x22>
 8006a2e:	6862      	ldr	r2, [r4, #4]
 8006a30:	42a3      	cmp	r3, r4
 8006a32:	bf0c      	ite	eq
 8006a34:	f8c8 2000 	streq.w	r2, [r8]
 8006a38:	605a      	strne	r2, [r3, #4]
 8006a3a:	e7eb      	b.n	8006a14 <_malloc_r+0xa8>
 8006a3c:	4623      	mov	r3, r4
 8006a3e:	6864      	ldr	r4, [r4, #4]
 8006a40:	e7ae      	b.n	80069a0 <_malloc_r+0x34>
 8006a42:	463c      	mov	r4, r7
 8006a44:	687f      	ldr	r7, [r7, #4]
 8006a46:	e7b6      	b.n	80069b6 <_malloc_r+0x4a>
 8006a48:	461a      	mov	r2, r3
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	42a3      	cmp	r3, r4
 8006a4e:	d1fb      	bne.n	8006a48 <_malloc_r+0xdc>
 8006a50:	2300      	movs	r3, #0
 8006a52:	6053      	str	r3, [r2, #4]
 8006a54:	e7de      	b.n	8006a14 <_malloc_r+0xa8>
 8006a56:	230c      	movs	r3, #12
 8006a58:	4630      	mov	r0, r6
 8006a5a:	6033      	str	r3, [r6, #0]
 8006a5c:	f000 f80c 	bl	8006a78 <__malloc_unlock>
 8006a60:	e794      	b.n	800698c <_malloc_r+0x20>
 8006a62:	6005      	str	r5, [r0, #0]
 8006a64:	e7d6      	b.n	8006a14 <_malloc_r+0xa8>
 8006a66:	bf00      	nop
 8006a68:	200002cc 	.word	0x200002cc

08006a6c <__malloc_lock>:
 8006a6c:	4801      	ldr	r0, [pc, #4]	@ (8006a74 <__malloc_lock+0x8>)
 8006a6e:	f7ff bf0e 	b.w	800688e <__retarget_lock_acquire_recursive>
 8006a72:	bf00      	nop
 8006a74:	200002c4 	.word	0x200002c4

08006a78 <__malloc_unlock>:
 8006a78:	4801      	ldr	r0, [pc, #4]	@ (8006a80 <__malloc_unlock+0x8>)
 8006a7a:	f7ff bf09 	b.w	8006890 <__retarget_lock_release_recursive>
 8006a7e:	bf00      	nop
 8006a80:	200002c4 	.word	0x200002c4

08006a84 <__sfputc_r>:
 8006a84:	6893      	ldr	r3, [r2, #8]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	6093      	str	r3, [r2, #8]
 8006a8c:	b410      	push	{r4}
 8006a8e:	da08      	bge.n	8006aa2 <__sfputc_r+0x1e>
 8006a90:	6994      	ldr	r4, [r2, #24]
 8006a92:	42a3      	cmp	r3, r4
 8006a94:	db01      	blt.n	8006a9a <__sfputc_r+0x16>
 8006a96:	290a      	cmp	r1, #10
 8006a98:	d103      	bne.n	8006aa2 <__sfputc_r+0x1e>
 8006a9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a9e:	f000 bb71 	b.w	8007184 <__swbuf_r>
 8006aa2:	6813      	ldr	r3, [r2, #0]
 8006aa4:	1c58      	adds	r0, r3, #1
 8006aa6:	6010      	str	r0, [r2, #0]
 8006aa8:	4608      	mov	r0, r1
 8006aaa:	7019      	strb	r1, [r3, #0]
 8006aac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <__sfputs_r>:
 8006ab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab4:	4606      	mov	r6, r0
 8006ab6:	460f      	mov	r7, r1
 8006ab8:	4614      	mov	r4, r2
 8006aba:	18d5      	adds	r5, r2, r3
 8006abc:	42ac      	cmp	r4, r5
 8006abe:	d101      	bne.n	8006ac4 <__sfputs_r+0x12>
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	e007      	b.n	8006ad4 <__sfputs_r+0x22>
 8006ac4:	463a      	mov	r2, r7
 8006ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aca:	4630      	mov	r0, r6
 8006acc:	f7ff ffda 	bl	8006a84 <__sfputc_r>
 8006ad0:	1c43      	adds	r3, r0, #1
 8006ad2:	d1f3      	bne.n	8006abc <__sfputs_r+0xa>
 8006ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ad8 <_vfiprintf_r>:
 8006ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006adc:	460d      	mov	r5, r1
 8006ade:	b09d      	sub	sp, #116	@ 0x74
 8006ae0:	4614      	mov	r4, r2
 8006ae2:	4698      	mov	r8, r3
 8006ae4:	4606      	mov	r6, r0
 8006ae6:	b118      	cbz	r0, 8006af0 <_vfiprintf_r+0x18>
 8006ae8:	6a03      	ldr	r3, [r0, #32]
 8006aea:	b90b      	cbnz	r3, 8006af0 <_vfiprintf_r+0x18>
 8006aec:	f7ff fdca 	bl	8006684 <__sinit>
 8006af0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006af2:	07d9      	lsls	r1, r3, #31
 8006af4:	d405      	bmi.n	8006b02 <_vfiprintf_r+0x2a>
 8006af6:	89ab      	ldrh	r3, [r5, #12]
 8006af8:	059a      	lsls	r2, r3, #22
 8006afa:	d402      	bmi.n	8006b02 <_vfiprintf_r+0x2a>
 8006afc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006afe:	f7ff fec6 	bl	800688e <__retarget_lock_acquire_recursive>
 8006b02:	89ab      	ldrh	r3, [r5, #12]
 8006b04:	071b      	lsls	r3, r3, #28
 8006b06:	d501      	bpl.n	8006b0c <_vfiprintf_r+0x34>
 8006b08:	692b      	ldr	r3, [r5, #16]
 8006b0a:	b99b      	cbnz	r3, 8006b34 <_vfiprintf_r+0x5c>
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	4630      	mov	r0, r6
 8006b10:	f000 fb76 	bl	8007200 <__swsetup_r>
 8006b14:	b170      	cbz	r0, 8006b34 <_vfiprintf_r+0x5c>
 8006b16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b18:	07dc      	lsls	r4, r3, #31
 8006b1a:	d504      	bpl.n	8006b26 <_vfiprintf_r+0x4e>
 8006b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b20:	b01d      	add	sp, #116	@ 0x74
 8006b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b26:	89ab      	ldrh	r3, [r5, #12]
 8006b28:	0598      	lsls	r0, r3, #22
 8006b2a:	d4f7      	bmi.n	8006b1c <_vfiprintf_r+0x44>
 8006b2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b2e:	f7ff feaf 	bl	8006890 <__retarget_lock_release_recursive>
 8006b32:	e7f3      	b.n	8006b1c <_vfiprintf_r+0x44>
 8006b34:	2300      	movs	r3, #0
 8006b36:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b3a:	f04f 0901 	mov.w	r9, #1
 8006b3e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8006cf4 <_vfiprintf_r+0x21c>
 8006b42:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b44:	2320      	movs	r3, #32
 8006b46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b4a:	2330      	movs	r3, #48	@ 0x30
 8006b4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b50:	4623      	mov	r3, r4
 8006b52:	469a      	mov	sl, r3
 8006b54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b58:	b10a      	cbz	r2, 8006b5e <_vfiprintf_r+0x86>
 8006b5a:	2a25      	cmp	r2, #37	@ 0x25
 8006b5c:	d1f9      	bne.n	8006b52 <_vfiprintf_r+0x7a>
 8006b5e:	ebba 0b04 	subs.w	fp, sl, r4
 8006b62:	d00b      	beq.n	8006b7c <_vfiprintf_r+0xa4>
 8006b64:	465b      	mov	r3, fp
 8006b66:	4622      	mov	r2, r4
 8006b68:	4629      	mov	r1, r5
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	f7ff ffa1 	bl	8006ab2 <__sfputs_r>
 8006b70:	3001      	adds	r0, #1
 8006b72:	f000 80a7 	beq.w	8006cc4 <_vfiprintf_r+0x1ec>
 8006b76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b78:	445a      	add	r2, fp
 8006b7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f000 809f 	beq.w	8006cc4 <_vfiprintf_r+0x1ec>
 8006b86:	2300      	movs	r3, #0
 8006b88:	f04f 32ff 	mov.w	r2, #4294967295
 8006b8c:	f10a 0a01 	add.w	sl, sl, #1
 8006b90:	9304      	str	r3, [sp, #16]
 8006b92:	9307      	str	r3, [sp, #28]
 8006b94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b98:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b9e:	4654      	mov	r4, sl
 8006ba0:	2205      	movs	r2, #5
 8006ba2:	4854      	ldr	r0, [pc, #336]	@ (8006cf4 <_vfiprintf_r+0x21c>)
 8006ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ba8:	f000 fb90 	bl	80072cc <memchr>
 8006bac:	9a04      	ldr	r2, [sp, #16]
 8006bae:	b9d8      	cbnz	r0, 8006be8 <_vfiprintf_r+0x110>
 8006bb0:	06d1      	lsls	r1, r2, #27
 8006bb2:	bf44      	itt	mi
 8006bb4:	2320      	movmi	r3, #32
 8006bb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bba:	0713      	lsls	r3, r2, #28
 8006bbc:	bf44      	itt	mi
 8006bbe:	232b      	movmi	r3, #43	@ 0x2b
 8006bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8006bc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bca:	d015      	beq.n	8006bf8 <_vfiprintf_r+0x120>
 8006bcc:	9a07      	ldr	r2, [sp, #28]
 8006bce:	4654      	mov	r4, sl
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	f04f 0c0a 	mov.w	ip, #10
 8006bd6:	4621      	mov	r1, r4
 8006bd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bdc:	3b30      	subs	r3, #48	@ 0x30
 8006bde:	2b09      	cmp	r3, #9
 8006be0:	d94b      	bls.n	8006c7a <_vfiprintf_r+0x1a2>
 8006be2:	b1b0      	cbz	r0, 8006c12 <_vfiprintf_r+0x13a>
 8006be4:	9207      	str	r2, [sp, #28]
 8006be6:	e014      	b.n	8006c12 <_vfiprintf_r+0x13a>
 8006be8:	eba0 0308 	sub.w	r3, r0, r8
 8006bec:	46a2      	mov	sl, r4
 8006bee:	fa09 f303 	lsl.w	r3, r9, r3
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	9304      	str	r3, [sp, #16]
 8006bf6:	e7d2      	b.n	8006b9e <_vfiprintf_r+0xc6>
 8006bf8:	9b03      	ldr	r3, [sp, #12]
 8006bfa:	1d19      	adds	r1, r3, #4
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	9103      	str	r1, [sp, #12]
 8006c02:	bfbb      	ittet	lt
 8006c04:	425b      	neglt	r3, r3
 8006c06:	f042 0202 	orrlt.w	r2, r2, #2
 8006c0a:	9307      	strge	r3, [sp, #28]
 8006c0c:	9307      	strlt	r3, [sp, #28]
 8006c0e:	bfb8      	it	lt
 8006c10:	9204      	strlt	r2, [sp, #16]
 8006c12:	7823      	ldrb	r3, [r4, #0]
 8006c14:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c16:	d10a      	bne.n	8006c2e <_vfiprintf_r+0x156>
 8006c18:	7863      	ldrb	r3, [r4, #1]
 8006c1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c1c:	d132      	bne.n	8006c84 <_vfiprintf_r+0x1ac>
 8006c1e:	9b03      	ldr	r3, [sp, #12]
 8006c20:	3402      	adds	r4, #2
 8006c22:	1d1a      	adds	r2, r3, #4
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c2a:	9203      	str	r2, [sp, #12]
 8006c2c:	9305      	str	r3, [sp, #20]
 8006c2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006d04 <_vfiprintf_r+0x22c>
 8006c32:	2203      	movs	r2, #3
 8006c34:	7821      	ldrb	r1, [r4, #0]
 8006c36:	4650      	mov	r0, sl
 8006c38:	f000 fb48 	bl	80072cc <memchr>
 8006c3c:	b138      	cbz	r0, 8006c4e <_vfiprintf_r+0x176>
 8006c3e:	eba0 000a 	sub.w	r0, r0, sl
 8006c42:	2240      	movs	r2, #64	@ 0x40
 8006c44:	9b04      	ldr	r3, [sp, #16]
 8006c46:	3401      	adds	r4, #1
 8006c48:	4082      	lsls	r2, r0
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	9304      	str	r3, [sp, #16]
 8006c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c52:	2206      	movs	r2, #6
 8006c54:	4828      	ldr	r0, [pc, #160]	@ (8006cf8 <_vfiprintf_r+0x220>)
 8006c56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c5a:	f000 fb37 	bl	80072cc <memchr>
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	d03f      	beq.n	8006ce2 <_vfiprintf_r+0x20a>
 8006c62:	4b26      	ldr	r3, [pc, #152]	@ (8006cfc <_vfiprintf_r+0x224>)
 8006c64:	bb1b      	cbnz	r3, 8006cae <_vfiprintf_r+0x1d6>
 8006c66:	9b03      	ldr	r3, [sp, #12]
 8006c68:	3307      	adds	r3, #7
 8006c6a:	f023 0307 	bic.w	r3, r3, #7
 8006c6e:	3308      	adds	r3, #8
 8006c70:	9303      	str	r3, [sp, #12]
 8006c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c74:	443b      	add	r3, r7
 8006c76:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c78:	e76a      	b.n	8006b50 <_vfiprintf_r+0x78>
 8006c7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c7e:	460c      	mov	r4, r1
 8006c80:	2001      	movs	r0, #1
 8006c82:	e7a8      	b.n	8006bd6 <_vfiprintf_r+0xfe>
 8006c84:	2300      	movs	r3, #0
 8006c86:	3401      	adds	r4, #1
 8006c88:	f04f 0c0a 	mov.w	ip, #10
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	9305      	str	r3, [sp, #20]
 8006c90:	4620      	mov	r0, r4
 8006c92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c96:	3a30      	subs	r2, #48	@ 0x30
 8006c98:	2a09      	cmp	r2, #9
 8006c9a:	d903      	bls.n	8006ca4 <_vfiprintf_r+0x1cc>
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d0c6      	beq.n	8006c2e <_vfiprintf_r+0x156>
 8006ca0:	9105      	str	r1, [sp, #20]
 8006ca2:	e7c4      	b.n	8006c2e <_vfiprintf_r+0x156>
 8006ca4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ca8:	4604      	mov	r4, r0
 8006caa:	2301      	movs	r3, #1
 8006cac:	e7f0      	b.n	8006c90 <_vfiprintf_r+0x1b8>
 8006cae:	ab03      	add	r3, sp, #12
 8006cb0:	462a      	mov	r2, r5
 8006cb2:	a904      	add	r1, sp, #16
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	4b11      	ldr	r3, [pc, #68]	@ (8006d00 <_vfiprintf_r+0x228>)
 8006cba:	f3af 8000 	nop.w
 8006cbe:	4607      	mov	r7, r0
 8006cc0:	1c78      	adds	r0, r7, #1
 8006cc2:	d1d6      	bne.n	8006c72 <_vfiprintf_r+0x19a>
 8006cc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cc6:	07d9      	lsls	r1, r3, #31
 8006cc8:	d405      	bmi.n	8006cd6 <_vfiprintf_r+0x1fe>
 8006cca:	89ab      	ldrh	r3, [r5, #12]
 8006ccc:	059a      	lsls	r2, r3, #22
 8006cce:	d402      	bmi.n	8006cd6 <_vfiprintf_r+0x1fe>
 8006cd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cd2:	f7ff fddd 	bl	8006890 <__retarget_lock_release_recursive>
 8006cd6:	89ab      	ldrh	r3, [r5, #12]
 8006cd8:	065b      	lsls	r3, r3, #25
 8006cda:	f53f af1f 	bmi.w	8006b1c <_vfiprintf_r+0x44>
 8006cde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ce0:	e71e      	b.n	8006b20 <_vfiprintf_r+0x48>
 8006ce2:	ab03      	add	r3, sp, #12
 8006ce4:	462a      	mov	r2, r5
 8006ce6:	a904      	add	r1, sp, #16
 8006ce8:	4630      	mov	r0, r6
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	4b04      	ldr	r3, [pc, #16]	@ (8006d00 <_vfiprintf_r+0x228>)
 8006cee:	f000 f87d 	bl	8006dec <_printf_i>
 8006cf2:	e7e4      	b.n	8006cbe <_vfiprintf_r+0x1e6>
 8006cf4:	08007450 	.word	0x08007450
 8006cf8:	0800745a 	.word	0x0800745a
 8006cfc:	00000000 	.word	0x00000000
 8006d00:	08006ab3 	.word	0x08006ab3
 8006d04:	08007456 	.word	0x08007456

08006d08 <_printf_common>:
 8006d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d0c:	4616      	mov	r6, r2
 8006d0e:	4698      	mov	r8, r3
 8006d10:	688a      	ldr	r2, [r1, #8]
 8006d12:	4607      	mov	r7, r0
 8006d14:	690b      	ldr	r3, [r1, #16]
 8006d16:	460c      	mov	r4, r1
 8006d18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	bfb8      	it	lt
 8006d20:	4613      	movlt	r3, r2
 8006d22:	6033      	str	r3, [r6, #0]
 8006d24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d28:	b10a      	cbz	r2, 8006d2e <_printf_common+0x26>
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	6033      	str	r3, [r6, #0]
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	0699      	lsls	r1, r3, #26
 8006d32:	bf42      	ittt	mi
 8006d34:	6833      	ldrmi	r3, [r6, #0]
 8006d36:	3302      	addmi	r3, #2
 8006d38:	6033      	strmi	r3, [r6, #0]
 8006d3a:	6825      	ldr	r5, [r4, #0]
 8006d3c:	f015 0506 	ands.w	r5, r5, #6
 8006d40:	d106      	bne.n	8006d50 <_printf_common+0x48>
 8006d42:	f104 0a19 	add.w	sl, r4, #25
 8006d46:	68e3      	ldr	r3, [r4, #12]
 8006d48:	6832      	ldr	r2, [r6, #0]
 8006d4a:	1a9b      	subs	r3, r3, r2
 8006d4c:	42ab      	cmp	r3, r5
 8006d4e:	dc2b      	bgt.n	8006da8 <_printf_common+0xa0>
 8006d50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d54:	6822      	ldr	r2, [r4, #0]
 8006d56:	3b00      	subs	r3, #0
 8006d58:	bf18      	it	ne
 8006d5a:	2301      	movne	r3, #1
 8006d5c:	0692      	lsls	r2, r2, #26
 8006d5e:	d430      	bmi.n	8006dc2 <_printf_common+0xba>
 8006d60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d64:	4641      	mov	r1, r8
 8006d66:	4638      	mov	r0, r7
 8006d68:	47c8      	blx	r9
 8006d6a:	3001      	adds	r0, #1
 8006d6c:	d023      	beq.n	8006db6 <_printf_common+0xae>
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	341a      	adds	r4, #26
 8006d72:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8006d76:	f003 0306 	and.w	r3, r3, #6
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	bf0a      	itet	eq
 8006d7e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8006d82:	2500      	movne	r5, #0
 8006d84:	6833      	ldreq	r3, [r6, #0]
 8006d86:	f04f 0600 	mov.w	r6, #0
 8006d8a:	bf08      	it	eq
 8006d8c:	1aed      	subeq	r5, r5, r3
 8006d8e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006d92:	bf08      	it	eq
 8006d94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	bfc4      	itt	gt
 8006d9c:	1a9b      	subgt	r3, r3, r2
 8006d9e:	18ed      	addgt	r5, r5, r3
 8006da0:	42b5      	cmp	r5, r6
 8006da2:	d11a      	bne.n	8006dda <_printf_common+0xd2>
 8006da4:	2000      	movs	r0, #0
 8006da6:	e008      	b.n	8006dba <_printf_common+0xb2>
 8006da8:	2301      	movs	r3, #1
 8006daa:	4652      	mov	r2, sl
 8006dac:	4641      	mov	r1, r8
 8006dae:	4638      	mov	r0, r7
 8006db0:	47c8      	blx	r9
 8006db2:	3001      	adds	r0, #1
 8006db4:	d103      	bne.n	8006dbe <_printf_common+0xb6>
 8006db6:	f04f 30ff 	mov.w	r0, #4294967295
 8006dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dbe:	3501      	adds	r5, #1
 8006dc0:	e7c1      	b.n	8006d46 <_printf_common+0x3e>
 8006dc2:	18e1      	adds	r1, r4, r3
 8006dc4:	1c5a      	adds	r2, r3, #1
 8006dc6:	2030      	movs	r0, #48	@ 0x30
 8006dc8:	3302      	adds	r3, #2
 8006dca:	4422      	add	r2, r4
 8006dcc:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006dd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006dd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006dd8:	e7c2      	b.n	8006d60 <_printf_common+0x58>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	4622      	mov	r2, r4
 8006dde:	4641      	mov	r1, r8
 8006de0:	4638      	mov	r0, r7
 8006de2:	47c8      	blx	r9
 8006de4:	3001      	adds	r0, #1
 8006de6:	d0e6      	beq.n	8006db6 <_printf_common+0xae>
 8006de8:	3601      	adds	r6, #1
 8006dea:	e7d9      	b.n	8006da0 <_printf_common+0x98>

08006dec <_printf_i>:
 8006dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006df0:	7e0f      	ldrb	r7, [r1, #24]
 8006df2:	4691      	mov	r9, r2
 8006df4:	4680      	mov	r8, r0
 8006df6:	460c      	mov	r4, r1
 8006df8:	2f78      	cmp	r7, #120	@ 0x78
 8006dfa:	469a      	mov	sl, r3
 8006dfc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006dfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e02:	d807      	bhi.n	8006e14 <_printf_i+0x28>
 8006e04:	2f62      	cmp	r7, #98	@ 0x62
 8006e06:	d80a      	bhi.n	8006e1e <_printf_i+0x32>
 8006e08:	2f00      	cmp	r7, #0
 8006e0a:	f000 80d2 	beq.w	8006fb2 <_printf_i+0x1c6>
 8006e0e:	2f58      	cmp	r7, #88	@ 0x58
 8006e10:	f000 80b9 	beq.w	8006f86 <_printf_i+0x19a>
 8006e14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e1c:	e03a      	b.n	8006e94 <_printf_i+0xa8>
 8006e1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e22:	2b15      	cmp	r3, #21
 8006e24:	d8f6      	bhi.n	8006e14 <_printf_i+0x28>
 8006e26:	a101      	add	r1, pc, #4	@ (adr r1, 8006e2c <_printf_i+0x40>)
 8006e28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e2c:	08006e85 	.word	0x08006e85
 8006e30:	08006e99 	.word	0x08006e99
 8006e34:	08006e15 	.word	0x08006e15
 8006e38:	08006e15 	.word	0x08006e15
 8006e3c:	08006e15 	.word	0x08006e15
 8006e40:	08006e15 	.word	0x08006e15
 8006e44:	08006e99 	.word	0x08006e99
 8006e48:	08006e15 	.word	0x08006e15
 8006e4c:	08006e15 	.word	0x08006e15
 8006e50:	08006e15 	.word	0x08006e15
 8006e54:	08006e15 	.word	0x08006e15
 8006e58:	08006f99 	.word	0x08006f99
 8006e5c:	08006ec3 	.word	0x08006ec3
 8006e60:	08006f53 	.word	0x08006f53
 8006e64:	08006e15 	.word	0x08006e15
 8006e68:	08006e15 	.word	0x08006e15
 8006e6c:	08006fbb 	.word	0x08006fbb
 8006e70:	08006e15 	.word	0x08006e15
 8006e74:	08006ec3 	.word	0x08006ec3
 8006e78:	08006e15 	.word	0x08006e15
 8006e7c:	08006e15 	.word	0x08006e15
 8006e80:	08006f5b 	.word	0x08006f5b
 8006e84:	6833      	ldr	r3, [r6, #0]
 8006e86:	1d1a      	adds	r2, r3, #4
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6032      	str	r2, [r6, #0]
 8006e8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e94:	2301      	movs	r3, #1
 8006e96:	e09d      	b.n	8006fd4 <_printf_i+0x1e8>
 8006e98:	6833      	ldr	r3, [r6, #0]
 8006e9a:	6820      	ldr	r0, [r4, #0]
 8006e9c:	1d19      	adds	r1, r3, #4
 8006e9e:	6031      	str	r1, [r6, #0]
 8006ea0:	0606      	lsls	r6, r0, #24
 8006ea2:	d501      	bpl.n	8006ea8 <_printf_i+0xbc>
 8006ea4:	681d      	ldr	r5, [r3, #0]
 8006ea6:	e003      	b.n	8006eb0 <_printf_i+0xc4>
 8006ea8:	0645      	lsls	r5, r0, #25
 8006eaa:	d5fb      	bpl.n	8006ea4 <_printf_i+0xb8>
 8006eac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006eb0:	2d00      	cmp	r5, #0
 8006eb2:	da03      	bge.n	8006ebc <_printf_i+0xd0>
 8006eb4:	232d      	movs	r3, #45	@ 0x2d
 8006eb6:	426d      	negs	r5, r5
 8006eb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ebc:	4859      	ldr	r0, [pc, #356]	@ (8007024 <_printf_i+0x238>)
 8006ebe:	230a      	movs	r3, #10
 8006ec0:	e011      	b.n	8006ee6 <_printf_i+0xfa>
 8006ec2:	6821      	ldr	r1, [r4, #0]
 8006ec4:	6833      	ldr	r3, [r6, #0]
 8006ec6:	0608      	lsls	r0, r1, #24
 8006ec8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ecc:	d402      	bmi.n	8006ed4 <_printf_i+0xe8>
 8006ece:	0649      	lsls	r1, r1, #25
 8006ed0:	bf48      	it	mi
 8006ed2:	b2ad      	uxthmi	r5, r5
 8006ed4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ed6:	6033      	str	r3, [r6, #0]
 8006ed8:	4852      	ldr	r0, [pc, #328]	@ (8007024 <_printf_i+0x238>)
 8006eda:	bf14      	ite	ne
 8006edc:	230a      	movne	r3, #10
 8006ede:	2308      	moveq	r3, #8
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ee6:	6866      	ldr	r6, [r4, #4]
 8006ee8:	2e00      	cmp	r6, #0
 8006eea:	60a6      	str	r6, [r4, #8]
 8006eec:	bfa2      	ittt	ge
 8006eee:	6821      	ldrge	r1, [r4, #0]
 8006ef0:	f021 0104 	bicge.w	r1, r1, #4
 8006ef4:	6021      	strge	r1, [r4, #0]
 8006ef6:	b90d      	cbnz	r5, 8006efc <_printf_i+0x110>
 8006ef8:	2e00      	cmp	r6, #0
 8006efa:	d04b      	beq.n	8006f94 <_printf_i+0x1a8>
 8006efc:	4616      	mov	r6, r2
 8006efe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f02:	fb03 5711 	mls	r7, r3, r1, r5
 8006f06:	5dc7      	ldrb	r7, [r0, r7]
 8006f08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f0c:	462f      	mov	r7, r5
 8006f0e:	460d      	mov	r5, r1
 8006f10:	42bb      	cmp	r3, r7
 8006f12:	d9f4      	bls.n	8006efe <_printf_i+0x112>
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d10b      	bne.n	8006f30 <_printf_i+0x144>
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	07df      	lsls	r7, r3, #31
 8006f1c:	d508      	bpl.n	8006f30 <_printf_i+0x144>
 8006f1e:	6923      	ldr	r3, [r4, #16]
 8006f20:	6861      	ldr	r1, [r4, #4]
 8006f22:	4299      	cmp	r1, r3
 8006f24:	bfde      	ittt	le
 8006f26:	2330      	movle	r3, #48	@ 0x30
 8006f28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f30:	1b92      	subs	r2, r2, r6
 8006f32:	6122      	str	r2, [r4, #16]
 8006f34:	464b      	mov	r3, r9
 8006f36:	aa03      	add	r2, sp, #12
 8006f38:	4621      	mov	r1, r4
 8006f3a:	4640      	mov	r0, r8
 8006f3c:	f8cd a000 	str.w	sl, [sp]
 8006f40:	f7ff fee2 	bl	8006d08 <_printf_common>
 8006f44:	3001      	adds	r0, #1
 8006f46:	d14a      	bne.n	8006fde <_printf_i+0x1f2>
 8006f48:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4c:	b004      	add	sp, #16
 8006f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f52:	6823      	ldr	r3, [r4, #0]
 8006f54:	f043 0320 	orr.w	r3, r3, #32
 8006f58:	6023      	str	r3, [r4, #0]
 8006f5a:	2778      	movs	r7, #120	@ 0x78
 8006f5c:	4832      	ldr	r0, [pc, #200]	@ (8007028 <_printf_i+0x23c>)
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f64:	061f      	lsls	r7, r3, #24
 8006f66:	6831      	ldr	r1, [r6, #0]
 8006f68:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f6c:	d402      	bmi.n	8006f74 <_printf_i+0x188>
 8006f6e:	065f      	lsls	r7, r3, #25
 8006f70:	bf48      	it	mi
 8006f72:	b2ad      	uxthmi	r5, r5
 8006f74:	6031      	str	r1, [r6, #0]
 8006f76:	07d9      	lsls	r1, r3, #31
 8006f78:	bf44      	itt	mi
 8006f7a:	f043 0320 	orrmi.w	r3, r3, #32
 8006f7e:	6023      	strmi	r3, [r4, #0]
 8006f80:	b11d      	cbz	r5, 8006f8a <_printf_i+0x19e>
 8006f82:	2310      	movs	r3, #16
 8006f84:	e7ac      	b.n	8006ee0 <_printf_i+0xf4>
 8006f86:	4827      	ldr	r0, [pc, #156]	@ (8007024 <_printf_i+0x238>)
 8006f88:	e7e9      	b.n	8006f5e <_printf_i+0x172>
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	f023 0320 	bic.w	r3, r3, #32
 8006f90:	6023      	str	r3, [r4, #0]
 8006f92:	e7f6      	b.n	8006f82 <_printf_i+0x196>
 8006f94:	4616      	mov	r6, r2
 8006f96:	e7bd      	b.n	8006f14 <_printf_i+0x128>
 8006f98:	6833      	ldr	r3, [r6, #0]
 8006f9a:	6825      	ldr	r5, [r4, #0]
 8006f9c:	1d18      	adds	r0, r3, #4
 8006f9e:	6961      	ldr	r1, [r4, #20]
 8006fa0:	6030      	str	r0, [r6, #0]
 8006fa2:	062e      	lsls	r6, r5, #24
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	d501      	bpl.n	8006fac <_printf_i+0x1c0>
 8006fa8:	6019      	str	r1, [r3, #0]
 8006faa:	e002      	b.n	8006fb2 <_printf_i+0x1c6>
 8006fac:	0668      	lsls	r0, r5, #25
 8006fae:	d5fb      	bpl.n	8006fa8 <_printf_i+0x1bc>
 8006fb0:	8019      	strh	r1, [r3, #0]
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	4616      	mov	r6, r2
 8006fb6:	6123      	str	r3, [r4, #16]
 8006fb8:	e7bc      	b.n	8006f34 <_printf_i+0x148>
 8006fba:	6833      	ldr	r3, [r6, #0]
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	1d1a      	adds	r2, r3, #4
 8006fc0:	6032      	str	r2, [r6, #0]
 8006fc2:	681e      	ldr	r6, [r3, #0]
 8006fc4:	6862      	ldr	r2, [r4, #4]
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	f000 f980 	bl	80072cc <memchr>
 8006fcc:	b108      	cbz	r0, 8006fd2 <_printf_i+0x1e6>
 8006fce:	1b80      	subs	r0, r0, r6
 8006fd0:	6060      	str	r0, [r4, #4]
 8006fd2:	6863      	ldr	r3, [r4, #4]
 8006fd4:	6123      	str	r3, [r4, #16]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fdc:	e7aa      	b.n	8006f34 <_printf_i+0x148>
 8006fde:	6923      	ldr	r3, [r4, #16]
 8006fe0:	4632      	mov	r2, r6
 8006fe2:	4649      	mov	r1, r9
 8006fe4:	4640      	mov	r0, r8
 8006fe6:	47d0      	blx	sl
 8006fe8:	3001      	adds	r0, #1
 8006fea:	d0ad      	beq.n	8006f48 <_printf_i+0x15c>
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	079b      	lsls	r3, r3, #30
 8006ff0:	d413      	bmi.n	800701a <_printf_i+0x22e>
 8006ff2:	68e0      	ldr	r0, [r4, #12]
 8006ff4:	9b03      	ldr	r3, [sp, #12]
 8006ff6:	4298      	cmp	r0, r3
 8006ff8:	bfb8      	it	lt
 8006ffa:	4618      	movlt	r0, r3
 8006ffc:	e7a6      	b.n	8006f4c <_printf_i+0x160>
 8006ffe:	2301      	movs	r3, #1
 8007000:	4632      	mov	r2, r6
 8007002:	4649      	mov	r1, r9
 8007004:	4640      	mov	r0, r8
 8007006:	47d0      	blx	sl
 8007008:	3001      	adds	r0, #1
 800700a:	d09d      	beq.n	8006f48 <_printf_i+0x15c>
 800700c:	3501      	adds	r5, #1
 800700e:	68e3      	ldr	r3, [r4, #12]
 8007010:	9903      	ldr	r1, [sp, #12]
 8007012:	1a5b      	subs	r3, r3, r1
 8007014:	42ab      	cmp	r3, r5
 8007016:	dcf2      	bgt.n	8006ffe <_printf_i+0x212>
 8007018:	e7eb      	b.n	8006ff2 <_printf_i+0x206>
 800701a:	2500      	movs	r5, #0
 800701c:	f104 0619 	add.w	r6, r4, #25
 8007020:	e7f5      	b.n	800700e <_printf_i+0x222>
 8007022:	bf00      	nop
 8007024:	08007461 	.word	0x08007461
 8007028:	08007472 	.word	0x08007472

0800702c <__sflush_r>:
 800702c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007034:	0716      	lsls	r6, r2, #28
 8007036:	4605      	mov	r5, r0
 8007038:	460c      	mov	r4, r1
 800703a:	d454      	bmi.n	80070e6 <__sflush_r+0xba>
 800703c:	684b      	ldr	r3, [r1, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	dc02      	bgt.n	8007048 <__sflush_r+0x1c>
 8007042:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007044:	2b00      	cmp	r3, #0
 8007046:	dd48      	ble.n	80070da <__sflush_r+0xae>
 8007048:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800704a:	2e00      	cmp	r6, #0
 800704c:	d045      	beq.n	80070da <__sflush_r+0xae>
 800704e:	2300      	movs	r3, #0
 8007050:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007054:	682f      	ldr	r7, [r5, #0]
 8007056:	6a21      	ldr	r1, [r4, #32]
 8007058:	602b      	str	r3, [r5, #0]
 800705a:	d030      	beq.n	80070be <__sflush_r+0x92>
 800705c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800705e:	89a3      	ldrh	r3, [r4, #12]
 8007060:	0759      	lsls	r1, r3, #29
 8007062:	d505      	bpl.n	8007070 <__sflush_r+0x44>
 8007064:	6863      	ldr	r3, [r4, #4]
 8007066:	1ad2      	subs	r2, r2, r3
 8007068:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800706a:	b10b      	cbz	r3, 8007070 <__sflush_r+0x44>
 800706c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800706e:	1ad2      	subs	r2, r2, r3
 8007070:	2300      	movs	r3, #0
 8007072:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007074:	6a21      	ldr	r1, [r4, #32]
 8007076:	4628      	mov	r0, r5
 8007078:	47b0      	blx	r6
 800707a:	1c43      	adds	r3, r0, #1
 800707c:	89a3      	ldrh	r3, [r4, #12]
 800707e:	d106      	bne.n	800708e <__sflush_r+0x62>
 8007080:	6829      	ldr	r1, [r5, #0]
 8007082:	291d      	cmp	r1, #29
 8007084:	d82b      	bhi.n	80070de <__sflush_r+0xb2>
 8007086:	4a2a      	ldr	r2, [pc, #168]	@ (8007130 <__sflush_r+0x104>)
 8007088:	410a      	asrs	r2, r1
 800708a:	07d6      	lsls	r6, r2, #31
 800708c:	d427      	bmi.n	80070de <__sflush_r+0xb2>
 800708e:	2200      	movs	r2, #0
 8007090:	04d9      	lsls	r1, r3, #19
 8007092:	6062      	str	r2, [r4, #4]
 8007094:	6922      	ldr	r2, [r4, #16]
 8007096:	6022      	str	r2, [r4, #0]
 8007098:	d504      	bpl.n	80070a4 <__sflush_r+0x78>
 800709a:	1c42      	adds	r2, r0, #1
 800709c:	d101      	bne.n	80070a2 <__sflush_r+0x76>
 800709e:	682b      	ldr	r3, [r5, #0]
 80070a0:	b903      	cbnz	r3, 80070a4 <__sflush_r+0x78>
 80070a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80070a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070a6:	602f      	str	r7, [r5, #0]
 80070a8:	b1b9      	cbz	r1, 80070da <__sflush_r+0xae>
 80070aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80070ae:	4299      	cmp	r1, r3
 80070b0:	d002      	beq.n	80070b8 <__sflush_r+0x8c>
 80070b2:	4628      	mov	r0, r5
 80070b4:	f7ff fbee 	bl	8006894 <_free_r>
 80070b8:	2300      	movs	r3, #0
 80070ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80070bc:	e00d      	b.n	80070da <__sflush_r+0xae>
 80070be:	2301      	movs	r3, #1
 80070c0:	4628      	mov	r0, r5
 80070c2:	47b0      	blx	r6
 80070c4:	4602      	mov	r2, r0
 80070c6:	1c50      	adds	r0, r2, #1
 80070c8:	d1c9      	bne.n	800705e <__sflush_r+0x32>
 80070ca:	682b      	ldr	r3, [r5, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d0c6      	beq.n	800705e <__sflush_r+0x32>
 80070d0:	2b1d      	cmp	r3, #29
 80070d2:	d001      	beq.n	80070d8 <__sflush_r+0xac>
 80070d4:	2b16      	cmp	r3, #22
 80070d6:	d11d      	bne.n	8007114 <__sflush_r+0xe8>
 80070d8:	602f      	str	r7, [r5, #0]
 80070da:	2000      	movs	r0, #0
 80070dc:	e021      	b.n	8007122 <__sflush_r+0xf6>
 80070de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070e2:	b21b      	sxth	r3, r3
 80070e4:	e01a      	b.n	800711c <__sflush_r+0xf0>
 80070e6:	690f      	ldr	r7, [r1, #16]
 80070e8:	2f00      	cmp	r7, #0
 80070ea:	d0f6      	beq.n	80070da <__sflush_r+0xae>
 80070ec:	0793      	lsls	r3, r2, #30
 80070ee:	680e      	ldr	r6, [r1, #0]
 80070f0:	600f      	str	r7, [r1, #0]
 80070f2:	bf0c      	ite	eq
 80070f4:	694b      	ldreq	r3, [r1, #20]
 80070f6:	2300      	movne	r3, #0
 80070f8:	eba6 0807 	sub.w	r8, r6, r7
 80070fc:	608b      	str	r3, [r1, #8]
 80070fe:	f1b8 0f00 	cmp.w	r8, #0
 8007102:	ddea      	ble.n	80070da <__sflush_r+0xae>
 8007104:	4643      	mov	r3, r8
 8007106:	463a      	mov	r2, r7
 8007108:	6a21      	ldr	r1, [r4, #32]
 800710a:	4628      	mov	r0, r5
 800710c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800710e:	47b0      	blx	r6
 8007110:	2800      	cmp	r0, #0
 8007112:	dc08      	bgt.n	8007126 <__sflush_r+0xfa>
 8007114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800711c:	f04f 30ff 	mov.w	r0, #4294967295
 8007120:	81a3      	strh	r3, [r4, #12]
 8007122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007126:	4407      	add	r7, r0
 8007128:	eba8 0800 	sub.w	r8, r8, r0
 800712c:	e7e7      	b.n	80070fe <__sflush_r+0xd2>
 800712e:	bf00      	nop
 8007130:	dfbffffe 	.word	0xdfbffffe

08007134 <_fflush_r>:
 8007134:	b538      	push	{r3, r4, r5, lr}
 8007136:	690b      	ldr	r3, [r1, #16]
 8007138:	4605      	mov	r5, r0
 800713a:	460c      	mov	r4, r1
 800713c:	b913      	cbnz	r3, 8007144 <_fflush_r+0x10>
 800713e:	2500      	movs	r5, #0
 8007140:	4628      	mov	r0, r5
 8007142:	bd38      	pop	{r3, r4, r5, pc}
 8007144:	b118      	cbz	r0, 800714e <_fflush_r+0x1a>
 8007146:	6a03      	ldr	r3, [r0, #32]
 8007148:	b90b      	cbnz	r3, 800714e <_fflush_r+0x1a>
 800714a:	f7ff fa9b 	bl	8006684 <__sinit>
 800714e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d0f3      	beq.n	800713e <_fflush_r+0xa>
 8007156:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007158:	07d0      	lsls	r0, r2, #31
 800715a:	d404      	bmi.n	8007166 <_fflush_r+0x32>
 800715c:	0599      	lsls	r1, r3, #22
 800715e:	d402      	bmi.n	8007166 <_fflush_r+0x32>
 8007160:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007162:	f7ff fb94 	bl	800688e <__retarget_lock_acquire_recursive>
 8007166:	4628      	mov	r0, r5
 8007168:	4621      	mov	r1, r4
 800716a:	f7ff ff5f 	bl	800702c <__sflush_r>
 800716e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007170:	4605      	mov	r5, r0
 8007172:	07da      	lsls	r2, r3, #31
 8007174:	d4e4      	bmi.n	8007140 <_fflush_r+0xc>
 8007176:	89a3      	ldrh	r3, [r4, #12]
 8007178:	059b      	lsls	r3, r3, #22
 800717a:	d4e1      	bmi.n	8007140 <_fflush_r+0xc>
 800717c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800717e:	f7ff fb87 	bl	8006890 <__retarget_lock_release_recursive>
 8007182:	e7dd      	b.n	8007140 <_fflush_r+0xc>

08007184 <__swbuf_r>:
 8007184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007186:	460e      	mov	r6, r1
 8007188:	4614      	mov	r4, r2
 800718a:	4605      	mov	r5, r0
 800718c:	b118      	cbz	r0, 8007196 <__swbuf_r+0x12>
 800718e:	6a03      	ldr	r3, [r0, #32]
 8007190:	b90b      	cbnz	r3, 8007196 <__swbuf_r+0x12>
 8007192:	f7ff fa77 	bl	8006684 <__sinit>
 8007196:	69a3      	ldr	r3, [r4, #24]
 8007198:	60a3      	str	r3, [r4, #8]
 800719a:	89a3      	ldrh	r3, [r4, #12]
 800719c:	071a      	lsls	r2, r3, #28
 800719e:	d501      	bpl.n	80071a4 <__swbuf_r+0x20>
 80071a0:	6923      	ldr	r3, [r4, #16]
 80071a2:	b943      	cbnz	r3, 80071b6 <__swbuf_r+0x32>
 80071a4:	4621      	mov	r1, r4
 80071a6:	4628      	mov	r0, r5
 80071a8:	f000 f82a 	bl	8007200 <__swsetup_r>
 80071ac:	b118      	cbz	r0, 80071b6 <__swbuf_r+0x32>
 80071ae:	f04f 37ff 	mov.w	r7, #4294967295
 80071b2:	4638      	mov	r0, r7
 80071b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071b6:	6823      	ldr	r3, [r4, #0]
 80071b8:	b2f6      	uxtb	r6, r6
 80071ba:	6922      	ldr	r2, [r4, #16]
 80071bc:	4637      	mov	r7, r6
 80071be:	1a98      	subs	r0, r3, r2
 80071c0:	6963      	ldr	r3, [r4, #20]
 80071c2:	4283      	cmp	r3, r0
 80071c4:	dc05      	bgt.n	80071d2 <__swbuf_r+0x4e>
 80071c6:	4621      	mov	r1, r4
 80071c8:	4628      	mov	r0, r5
 80071ca:	f7ff ffb3 	bl	8007134 <_fflush_r>
 80071ce:	2800      	cmp	r0, #0
 80071d0:	d1ed      	bne.n	80071ae <__swbuf_r+0x2a>
 80071d2:	68a3      	ldr	r3, [r4, #8]
 80071d4:	3b01      	subs	r3, #1
 80071d6:	60a3      	str	r3, [r4, #8]
 80071d8:	6823      	ldr	r3, [r4, #0]
 80071da:	1c5a      	adds	r2, r3, #1
 80071dc:	6022      	str	r2, [r4, #0]
 80071de:	701e      	strb	r6, [r3, #0]
 80071e0:	1c43      	adds	r3, r0, #1
 80071e2:	6962      	ldr	r2, [r4, #20]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d004      	beq.n	80071f2 <__swbuf_r+0x6e>
 80071e8:	89a3      	ldrh	r3, [r4, #12]
 80071ea:	07db      	lsls	r3, r3, #31
 80071ec:	d5e1      	bpl.n	80071b2 <__swbuf_r+0x2e>
 80071ee:	2e0a      	cmp	r6, #10
 80071f0:	d1df      	bne.n	80071b2 <__swbuf_r+0x2e>
 80071f2:	4621      	mov	r1, r4
 80071f4:	4628      	mov	r0, r5
 80071f6:	f7ff ff9d 	bl	8007134 <_fflush_r>
 80071fa:	2800      	cmp	r0, #0
 80071fc:	d0d9      	beq.n	80071b2 <__swbuf_r+0x2e>
 80071fe:	e7d6      	b.n	80071ae <__swbuf_r+0x2a>

08007200 <__swsetup_r>:
 8007200:	b538      	push	{r3, r4, r5, lr}
 8007202:	4b29      	ldr	r3, [pc, #164]	@ (80072a8 <__swsetup_r+0xa8>)
 8007204:	4605      	mov	r5, r0
 8007206:	460c      	mov	r4, r1
 8007208:	6818      	ldr	r0, [r3, #0]
 800720a:	b118      	cbz	r0, 8007214 <__swsetup_r+0x14>
 800720c:	6a03      	ldr	r3, [r0, #32]
 800720e:	b90b      	cbnz	r3, 8007214 <__swsetup_r+0x14>
 8007210:	f7ff fa38 	bl	8006684 <__sinit>
 8007214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007218:	0719      	lsls	r1, r3, #28
 800721a:	d422      	bmi.n	8007262 <__swsetup_r+0x62>
 800721c:	06da      	lsls	r2, r3, #27
 800721e:	d407      	bmi.n	8007230 <__swsetup_r+0x30>
 8007220:	2209      	movs	r2, #9
 8007222:	602a      	str	r2, [r5, #0]
 8007224:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007228:	f04f 30ff 	mov.w	r0, #4294967295
 800722c:	81a3      	strh	r3, [r4, #12]
 800722e:	e033      	b.n	8007298 <__swsetup_r+0x98>
 8007230:	0758      	lsls	r0, r3, #29
 8007232:	d512      	bpl.n	800725a <__swsetup_r+0x5a>
 8007234:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007236:	b141      	cbz	r1, 800724a <__swsetup_r+0x4a>
 8007238:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800723c:	4299      	cmp	r1, r3
 800723e:	d002      	beq.n	8007246 <__swsetup_r+0x46>
 8007240:	4628      	mov	r0, r5
 8007242:	f7ff fb27 	bl	8006894 <_free_r>
 8007246:	2300      	movs	r3, #0
 8007248:	6363      	str	r3, [r4, #52]	@ 0x34
 800724a:	89a3      	ldrh	r3, [r4, #12]
 800724c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007250:	81a3      	strh	r3, [r4, #12]
 8007252:	2300      	movs	r3, #0
 8007254:	6063      	str	r3, [r4, #4]
 8007256:	6923      	ldr	r3, [r4, #16]
 8007258:	6023      	str	r3, [r4, #0]
 800725a:	89a3      	ldrh	r3, [r4, #12]
 800725c:	f043 0308 	orr.w	r3, r3, #8
 8007260:	81a3      	strh	r3, [r4, #12]
 8007262:	6923      	ldr	r3, [r4, #16]
 8007264:	b94b      	cbnz	r3, 800727a <__swsetup_r+0x7a>
 8007266:	89a3      	ldrh	r3, [r4, #12]
 8007268:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800726c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007270:	d003      	beq.n	800727a <__swsetup_r+0x7a>
 8007272:	4621      	mov	r1, r4
 8007274:	4628      	mov	r0, r5
 8007276:	f000 f85c 	bl	8007332 <__smakebuf_r>
 800727a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800727e:	f013 0201 	ands.w	r2, r3, #1
 8007282:	d00a      	beq.n	800729a <__swsetup_r+0x9a>
 8007284:	2200      	movs	r2, #0
 8007286:	60a2      	str	r2, [r4, #8]
 8007288:	6962      	ldr	r2, [r4, #20]
 800728a:	4252      	negs	r2, r2
 800728c:	61a2      	str	r2, [r4, #24]
 800728e:	6922      	ldr	r2, [r4, #16]
 8007290:	b942      	cbnz	r2, 80072a4 <__swsetup_r+0xa4>
 8007292:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007296:	d1c5      	bne.n	8007224 <__swsetup_r+0x24>
 8007298:	bd38      	pop	{r3, r4, r5, pc}
 800729a:	0799      	lsls	r1, r3, #30
 800729c:	bf58      	it	pl
 800729e:	6962      	ldrpl	r2, [r4, #20]
 80072a0:	60a2      	str	r2, [r4, #8]
 80072a2:	e7f4      	b.n	800728e <__swsetup_r+0x8e>
 80072a4:	2000      	movs	r0, #0
 80072a6:	e7f7      	b.n	8007298 <__swsetup_r+0x98>
 80072a8:	20000034 	.word	0x20000034

080072ac <_sbrk_r>:
 80072ac:	b538      	push	{r3, r4, r5, lr}
 80072ae:	2300      	movs	r3, #0
 80072b0:	4d05      	ldr	r5, [pc, #20]	@ (80072c8 <_sbrk_r+0x1c>)
 80072b2:	4604      	mov	r4, r0
 80072b4:	4608      	mov	r0, r1
 80072b6:	602b      	str	r3, [r5, #0]
 80072b8:	f7f9 fc48 	bl	8000b4c <_sbrk>
 80072bc:	1c43      	adds	r3, r0, #1
 80072be:	d102      	bne.n	80072c6 <_sbrk_r+0x1a>
 80072c0:	682b      	ldr	r3, [r5, #0]
 80072c2:	b103      	cbz	r3, 80072c6 <_sbrk_r+0x1a>
 80072c4:	6023      	str	r3, [r4, #0]
 80072c6:	bd38      	pop	{r3, r4, r5, pc}
 80072c8:	200002c0 	.word	0x200002c0

080072cc <memchr>:
 80072cc:	b2c9      	uxtb	r1, r1
 80072ce:	4603      	mov	r3, r0
 80072d0:	4402      	add	r2, r0
 80072d2:	b510      	push	{r4, lr}
 80072d4:	4293      	cmp	r3, r2
 80072d6:	4618      	mov	r0, r3
 80072d8:	d101      	bne.n	80072de <memchr+0x12>
 80072da:	2000      	movs	r0, #0
 80072dc:	e003      	b.n	80072e6 <memchr+0x1a>
 80072de:	7804      	ldrb	r4, [r0, #0]
 80072e0:	3301      	adds	r3, #1
 80072e2:	428c      	cmp	r4, r1
 80072e4:	d1f6      	bne.n	80072d4 <memchr+0x8>
 80072e6:	bd10      	pop	{r4, pc}

080072e8 <__swhatbuf_r>:
 80072e8:	b570      	push	{r4, r5, r6, lr}
 80072ea:	460c      	mov	r4, r1
 80072ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f0:	b096      	sub	sp, #88	@ 0x58
 80072f2:	4615      	mov	r5, r2
 80072f4:	2900      	cmp	r1, #0
 80072f6:	461e      	mov	r6, r3
 80072f8:	da0c      	bge.n	8007314 <__swhatbuf_r+0x2c>
 80072fa:	89a3      	ldrh	r3, [r4, #12]
 80072fc:	2100      	movs	r1, #0
 80072fe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007302:	bf14      	ite	ne
 8007304:	2340      	movne	r3, #64	@ 0x40
 8007306:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800730a:	2000      	movs	r0, #0
 800730c:	6031      	str	r1, [r6, #0]
 800730e:	602b      	str	r3, [r5, #0]
 8007310:	b016      	add	sp, #88	@ 0x58
 8007312:	bd70      	pop	{r4, r5, r6, pc}
 8007314:	466a      	mov	r2, sp
 8007316:	f000 f849 	bl	80073ac <_fstat_r>
 800731a:	2800      	cmp	r0, #0
 800731c:	dbed      	blt.n	80072fa <__swhatbuf_r+0x12>
 800731e:	9901      	ldr	r1, [sp, #4]
 8007320:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007324:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007328:	4259      	negs	r1, r3
 800732a:	4159      	adcs	r1, r3
 800732c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007330:	e7eb      	b.n	800730a <__swhatbuf_r+0x22>

08007332 <__smakebuf_r>:
 8007332:	898b      	ldrh	r3, [r1, #12]
 8007334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007336:	079d      	lsls	r5, r3, #30
 8007338:	4606      	mov	r6, r0
 800733a:	460c      	mov	r4, r1
 800733c:	d507      	bpl.n	800734e <__smakebuf_r+0x1c>
 800733e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007342:	6023      	str	r3, [r4, #0]
 8007344:	6123      	str	r3, [r4, #16]
 8007346:	2301      	movs	r3, #1
 8007348:	6163      	str	r3, [r4, #20]
 800734a:	b003      	add	sp, #12
 800734c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800734e:	ab01      	add	r3, sp, #4
 8007350:	466a      	mov	r2, sp
 8007352:	f7ff ffc9 	bl	80072e8 <__swhatbuf_r>
 8007356:	9f00      	ldr	r7, [sp, #0]
 8007358:	4605      	mov	r5, r0
 800735a:	4630      	mov	r0, r6
 800735c:	4639      	mov	r1, r7
 800735e:	f7ff fb05 	bl	800696c <_malloc_r>
 8007362:	b948      	cbnz	r0, 8007378 <__smakebuf_r+0x46>
 8007364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007368:	059a      	lsls	r2, r3, #22
 800736a:	d4ee      	bmi.n	800734a <__smakebuf_r+0x18>
 800736c:	f023 0303 	bic.w	r3, r3, #3
 8007370:	f043 0302 	orr.w	r3, r3, #2
 8007374:	81a3      	strh	r3, [r4, #12]
 8007376:	e7e2      	b.n	800733e <__smakebuf_r+0xc>
 8007378:	89a3      	ldrh	r3, [r4, #12]
 800737a:	6020      	str	r0, [r4, #0]
 800737c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007380:	81a3      	strh	r3, [r4, #12]
 8007382:	9b01      	ldr	r3, [sp, #4]
 8007384:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007388:	b15b      	cbz	r3, 80073a2 <__smakebuf_r+0x70>
 800738a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800738e:	4630      	mov	r0, r6
 8007390:	f000 f81e 	bl	80073d0 <_isatty_r>
 8007394:	b128      	cbz	r0, 80073a2 <__smakebuf_r+0x70>
 8007396:	89a3      	ldrh	r3, [r4, #12]
 8007398:	f023 0303 	bic.w	r3, r3, #3
 800739c:	f043 0301 	orr.w	r3, r3, #1
 80073a0:	81a3      	strh	r3, [r4, #12]
 80073a2:	89a3      	ldrh	r3, [r4, #12]
 80073a4:	431d      	orrs	r5, r3
 80073a6:	81a5      	strh	r5, [r4, #12]
 80073a8:	e7cf      	b.n	800734a <__smakebuf_r+0x18>
	...

080073ac <_fstat_r>:
 80073ac:	b538      	push	{r3, r4, r5, lr}
 80073ae:	2300      	movs	r3, #0
 80073b0:	4d06      	ldr	r5, [pc, #24]	@ (80073cc <_fstat_r+0x20>)
 80073b2:	4604      	mov	r4, r0
 80073b4:	4608      	mov	r0, r1
 80073b6:	4611      	mov	r1, r2
 80073b8:	602b      	str	r3, [r5, #0]
 80073ba:	f7f9 fb9e 	bl	8000afa <_fstat>
 80073be:	1c43      	adds	r3, r0, #1
 80073c0:	d102      	bne.n	80073c8 <_fstat_r+0x1c>
 80073c2:	682b      	ldr	r3, [r5, #0]
 80073c4:	b103      	cbz	r3, 80073c8 <_fstat_r+0x1c>
 80073c6:	6023      	str	r3, [r4, #0]
 80073c8:	bd38      	pop	{r3, r4, r5, pc}
 80073ca:	bf00      	nop
 80073cc:	200002c0 	.word	0x200002c0

080073d0 <_isatty_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	2300      	movs	r3, #0
 80073d4:	4d05      	ldr	r5, [pc, #20]	@ (80073ec <_isatty_r+0x1c>)
 80073d6:	4604      	mov	r4, r0
 80073d8:	4608      	mov	r0, r1
 80073da:	602b      	str	r3, [r5, #0]
 80073dc:	f7f9 fb9d 	bl	8000b1a <_isatty>
 80073e0:	1c43      	adds	r3, r0, #1
 80073e2:	d102      	bne.n	80073ea <_isatty_r+0x1a>
 80073e4:	682b      	ldr	r3, [r5, #0]
 80073e6:	b103      	cbz	r3, 80073ea <_isatty_r+0x1a>
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	200002c0 	.word	0x200002c0

080073f0 <_init>:
 80073f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f2:	bf00      	nop
 80073f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073f6:	bc08      	pop	{r3}
 80073f8:	469e      	mov	lr, r3
 80073fa:	4770      	bx	lr

080073fc <_fini>:
 80073fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fe:	bf00      	nop
 8007400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007402:	bc08      	pop	{r3}
 8007404:	469e      	mov	lr, r3
 8007406:	4770      	bx	lr
