
2_ThreadX_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b468  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800b6b4  0800b6b4  0000c6b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7f0  0800b7f0  0000d06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7f0  0800b7f0  0000c7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7f8  0800b7f8  0000d06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7f8  0800b7f8  0000c7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b7fc  0800b7fc  0000c7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800b800  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af0  2000006c  0800b86c  0000d06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b5c  0800b86c  0000db5c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020cb0  00000000  00000000  0000d0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005401  00000000  00000000  0002dd52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  00033158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd7  00000000  00000000  000346e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000366a5  00000000  00000000  000356bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023c20  00000000  00000000  0006bd64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014af41  00000000  00000000  0008f984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001da8c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005808  00000000  00000000  001da908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000010a  00000000  00000000  001e0110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000006c 	.word	0x2000006c
 8000268:	00000000 	.word	0x00000000
 800026c:	0800b69c 	.word	0x0800b69c

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000070 	.word	0x20000070
 8000288:	0800b69c 	.word	0x0800b69c

0800028c <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 800028c:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800028e:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000292:	4917      	ldr	r1, [pc, #92]	@ (80002f0 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000294:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000298:	4816      	ldr	r0, [pc, #88]	@ (80002f4 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 800029a:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 800029c:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002a0:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002a2:	4815      	ldr	r0, [pc, #84]	@ (80002f8 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002a4:	4912      	ldr	r1, [pc, #72]	@ (80002f0 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002a6:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002a8:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002aa:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002ae:	4913      	ldr	r1, [pc, #76]	@ (80002fc <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002b0:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002b2:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002b6:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002b8:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002bc:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002c0:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002c4:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002c8:	490d      	ldr	r1, [pc, #52]	@ (8000300 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002ca:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ce:	4770      	bx	lr

080002d0 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002d0:	f7ff bffe 	b.w	80002d0 <__tx_BadHandler>

080002d4 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002d4:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002d6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002da:	4770      	bx	lr

080002dc <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002dc:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002de:	f000 f897 	bl	8000410 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002e6:	4770      	bx	lr

080002e8 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002e8:	f7ff bffe 	b.w	80002e8 <__tx_NMIHandler>

080002ec <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002ec:	f7ff bffe 	b.w	80002ec <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002f0:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002f4:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002f8:	20001404 	.word	0x20001404
    LDR     r1, =SYSTICK_CYCLES
 80002fc:	0026259f 	.word	0x0026259f
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000300:	40ff0000 	.word	0x40ff0000

08000304 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000304:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000308:	4a2d      	ldr	r2, [pc, #180]	@ (80003c0 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 800030a:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 800030c:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000310:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000314:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000318:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800031a:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800031e:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000322:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 8000326:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800032a:	f3bf 8f6f 	isb	sy

0800032e <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800032e:	e7fe      	b.n	800032e <__tx_wait_here>

08000330 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000330:	4824      	ldr	r0, [pc, #144]	@ (80003c4 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000332:	4a25      	ldr	r2, [pc, #148]	@ (80003c8 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000334:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000338:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800033a:	b191      	cbz	r1, 8000362 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 800033c:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800033e:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000342:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000346:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 800034a:	d101      	bne.n	8000350 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 800034c:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000350 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000350:	4c1e      	ldr	r4, [pc, #120]	@ (80003cc <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000352:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000356:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800035a:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 800035c:	b10d      	cbz	r5, 8000362 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800035e:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000360:	6023      	str	r3, [r4, #0]

08000362 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000362:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000364:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000366:	b1d1      	cbz	r1, 800039e <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000368:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800036a:	b662      	cpsie	i

0800036c <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 800036c:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800036e:	4c17      	ldr	r4, [pc, #92]	@ (80003cc <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000370:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000372:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000376:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000378:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 800037a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800037e:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000382:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000386:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800038a:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800038e:	d101      	bne.n	8000394 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000390:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000394 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000394:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000398:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 800039c:	4770      	bx	lr

0800039e <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800039e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003a0:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003a2:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003a4:	b909      	cbnz	r1, 80003aa <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a6:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003a8:	e7f9      	b.n	800039e <__tx_ts_wait>

080003aa <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003aa:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003ae:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003b2:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003b6:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003b8:	e7d8      	b.n	800036c <__tx_ts_restore>
 80003ba:	bf00      	nop

080003bc <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003bc:	4770      	bx	lr
 80003be:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003c0:	200014a0 	.word	0x200014a0
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c4:	20001408 	.word	0x20001408
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c8:	2000140c 	.word	0x2000140c
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003cc:	20001a0c 	.word	0x20001a0c

080003d0 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003d0:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003d2:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003d6:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003da:	f06f 0343 	mvn.w	r3, #67	@ 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003de:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003e0:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e4:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003e6:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003e8:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003ea:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003ec:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003ee:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003f0:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003f2:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f4:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003f6:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003fa:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003fc:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003fe:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000402:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000404:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000406:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800040a:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800040c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800040e:	4770      	bx	lr

08000410 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000410:	4922      	ldr	r1, [pc, #136]	@ (800049c <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000412:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000414:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000418:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800041a:	4b21      	ldr	r3, [pc, #132]	@ (80004a0 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800041c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800041e:	b13a      	cbz	r2, 8000430 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000420:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000424:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000426:	b91a      	cbnz	r2, 8000430 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000428:	4b1e      	ldr	r3, [pc, #120]	@ (80004a4 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 800042a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800042e:	6018      	str	r0, [r3, #0]

08000430 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000430:	491d      	ldr	r1, [pc, #116]	@ (80004a8 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000432:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000434:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000436:	b122      	cbz	r2, 8000442 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000438:	4b1c      	ldr	r3, [pc, #112]	@ (80004ac <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 800043a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800043e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000440:	e008      	b.n	8000454 <__tx_timer_done>

08000442 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000442:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000446:	4b1a      	ldr	r3, [pc, #104]	@ (80004b0 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000448:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800044a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800044c:	d101      	bne.n	8000452 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800044e:	4b19      	ldr	r3, [pc, #100]	@ (80004b4 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000450:	6818      	ldr	r0, [r3, #0]

08000452 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000452:	6008      	str	r0, [r1, #0]

08000454 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000454:	4b13      	ldr	r3, [pc, #76]	@ (80004a4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000456:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000458:	b912      	cbnz	r2, 8000460 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800045a:	4914      	ldr	r1, [pc, #80]	@ (80004ac <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800045c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800045e:	b1c8      	cbz	r0, 8000494 <__tx_timer_nothing_expired>

08000460 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000460:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000462:	4912      	ldr	r1, [pc, #72]	@ (80004ac <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000464:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000466:	b108      	cbz	r0, 800046c <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000468:	f009 fd04 	bl	8009e74 <_tx_timer_expiration_process>

0800046c <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800046c:	4b0d      	ldr	r3, [pc, #52]	@ (80004a4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800046e:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000470:	b172      	cbz	r2, 8000490 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000472:	f009 fc71 	bl	8009d58 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000476:	4810      	ldr	r0, [pc, #64]	@ (80004b8 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000478:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800047a:	b949      	cbnz	r1, 8000490 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800047c:	480f      	ldr	r0, [pc, #60]	@ (80004bc <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800047e:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000480:	4a0f      	ldr	r2, [pc, #60]	@ (80004c0 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000482:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000484:	480f      	ldr	r0, [pc, #60]	@ (80004c4 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800048a:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800048c:	d000      	beq.n	8000490 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800048e:	6002      	str	r2, [r0, #0]

08000490 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000490:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000494 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000494:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000498:	4770      	bx	lr
 800049a:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800049c:	200014ac 	.word	0x200014ac
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004a0:	20001a0c 	.word	0x20001a0c
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a4:	200014b0 	.word	0x200014b0
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004a8:	2000153c 	.word	0x2000153c
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004ac:	20001540 	.word	0x20001540
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004b0:	20001538 	.word	0x20001538
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b4:	20001534 	.word	0x20001534
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004b8:	200014a0 	.word	0x200014a0
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004bc:	20001408 	.word	0x20001408
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004c0:	2000140c 	.word	0x2000140c
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c4:	e000ed04 	.word	0xe000ed04

080004c8 <__aeabi_uldivmod>:
 80004c8:	b953      	cbnz	r3, 80004e0 <__aeabi_uldivmod+0x18>
 80004ca:	b94a      	cbnz	r2, 80004e0 <__aeabi_uldivmod+0x18>
 80004cc:	2900      	cmp	r1, #0
 80004ce:	bf08      	it	eq
 80004d0:	2800      	cmpeq	r0, #0
 80004d2:	bf1c      	itt	ne
 80004d4:	f04f 31ff 	movne.w	r1, #4294967295
 80004d8:	f04f 30ff 	movne.w	r0, #4294967295
 80004dc:	f000 b97e 	b.w	80007dc <__aeabi_idiv0>
 80004e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80004e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004e8:	f000 f806 	bl	80004f8 <__udivmoddi4>
 80004ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004f4:	b004      	add	sp, #16
 80004f6:	4770      	bx	lr

080004f8 <__udivmoddi4>:
 80004f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004fc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80004fe:	460c      	mov	r4, r1
 8000500:	2b00      	cmp	r3, #0
 8000502:	d14d      	bne.n	80005a0 <__udivmoddi4+0xa8>
 8000504:	428a      	cmp	r2, r1
 8000506:	460f      	mov	r7, r1
 8000508:	4684      	mov	ip, r0
 800050a:	4696      	mov	lr, r2
 800050c:	fab2 f382 	clz	r3, r2
 8000510:	d960      	bls.n	80005d4 <__udivmoddi4+0xdc>
 8000512:	b14b      	cbz	r3, 8000528 <__udivmoddi4+0x30>
 8000514:	fa02 fe03 	lsl.w	lr, r2, r3
 8000518:	f1c3 0220 	rsb	r2, r3, #32
 800051c:	409f      	lsls	r7, r3
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f202 	lsr.w	r2, r0, r2
 8000526:	4317      	orrs	r7, r2
 8000528:	ea4f 461e 	mov.w	r6, lr, lsr #16
 800052c:	fa1f f48e 	uxth.w	r4, lr
 8000530:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000534:	fbb7 f1f6 	udiv	r1, r7, r6
 8000538:	fb06 7711 	mls	r7, r6, r1, r7
 800053c:	fb01 f004 	mul.w	r0, r1, r4
 8000540:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000544:	4290      	cmp	r0, r2
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x62>
 8000548:	eb1e 0202 	adds.w	r2, lr, r2
 800054c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000550:	d202      	bcs.n	8000558 <__udivmoddi4+0x60>
 8000552:	4290      	cmp	r0, r2
 8000554:	f200 812d 	bhi.w	80007b2 <__udivmoddi4+0x2ba>
 8000558:	4639      	mov	r1, r7
 800055a:	1a12      	subs	r2, r2, r0
 800055c:	fa1f fc8c 	uxth.w	ip, ip
 8000560:	fbb2 f0f6 	udiv	r0, r2, r6
 8000564:	fb06 2210 	mls	r2, r6, r0, r2
 8000568:	fb00 f404 	mul.w	r4, r0, r4
 800056c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000570:	4564      	cmp	r4, ip
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x8e>
 8000574:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000578:	f100 32ff 	add.w	r2, r0, #4294967295
 800057c:	d202      	bcs.n	8000584 <__udivmoddi4+0x8c>
 800057e:	4564      	cmp	r4, ip
 8000580:	f200 811a 	bhi.w	80007b8 <__udivmoddi4+0x2c0>
 8000584:	4610      	mov	r0, r2
 8000586:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800058a:	ebac 0c04 	sub.w	ip, ip, r4
 800058e:	2100      	movs	r1, #0
 8000590:	b125      	cbz	r5, 800059c <__udivmoddi4+0xa4>
 8000592:	fa2c f303 	lsr.w	r3, ip, r3
 8000596:	2200      	movs	r2, #0
 8000598:	e9c5 3200 	strd	r3, r2, [r5]
 800059c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d905      	bls.n	80005b0 <__udivmoddi4+0xb8>
 80005a4:	b10d      	cbz	r5, 80005aa <__udivmoddi4+0xb2>
 80005a6:	e9c5 0100 	strd	r0, r1, [r5]
 80005aa:	2100      	movs	r1, #0
 80005ac:	4608      	mov	r0, r1
 80005ae:	e7f5      	b.n	800059c <__udivmoddi4+0xa4>
 80005b0:	fab3 f183 	clz	r1, r3
 80005b4:	2900      	cmp	r1, #0
 80005b6:	d14d      	bne.n	8000654 <__udivmoddi4+0x15c>
 80005b8:	42a3      	cmp	r3, r4
 80005ba:	f0c0 80f2 	bcc.w	80007a2 <__udivmoddi4+0x2aa>
 80005be:	4290      	cmp	r0, r2
 80005c0:	f080 80ef 	bcs.w	80007a2 <__udivmoddi4+0x2aa>
 80005c4:	4606      	mov	r6, r0
 80005c6:	4623      	mov	r3, r4
 80005c8:	4608      	mov	r0, r1
 80005ca:	2d00      	cmp	r5, #0
 80005cc:	d0e6      	beq.n	800059c <__udivmoddi4+0xa4>
 80005ce:	e9c5 6300 	strd	r6, r3, [r5]
 80005d2:	e7e3      	b.n	800059c <__udivmoddi4+0xa4>
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	f040 80a2 	bne.w	800071e <__udivmoddi4+0x226>
 80005da:	1a8a      	subs	r2, r1, r2
 80005dc:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80005e0:	fa1f f68e 	uxth.w	r6, lr
 80005e4:	2101      	movs	r1, #1
 80005e6:	fbb2 f4f7 	udiv	r4, r2, r7
 80005ea:	fb07 2014 	mls	r0, r7, r4, r2
 80005ee:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80005f2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80005f6:	fb06 f004 	mul.w	r0, r6, r4
 80005fa:	4290      	cmp	r0, r2
 80005fc:	d90f      	bls.n	800061e <__udivmoddi4+0x126>
 80005fe:	eb1e 0202 	adds.w	r2, lr, r2
 8000602:	f104 38ff 	add.w	r8, r4, #4294967295
 8000606:	bf2c      	ite	cs
 8000608:	f04f 0901 	movcs.w	r9, #1
 800060c:	f04f 0900 	movcc.w	r9, #0
 8000610:	4290      	cmp	r0, r2
 8000612:	d903      	bls.n	800061c <__udivmoddi4+0x124>
 8000614:	f1b9 0f00 	cmp.w	r9, #0
 8000618:	f000 80c8 	beq.w	80007ac <__udivmoddi4+0x2b4>
 800061c:	4644      	mov	r4, r8
 800061e:	1a12      	subs	r2, r2, r0
 8000620:	fa1f fc8c 	uxth.w	ip, ip
 8000624:	fbb2 f0f7 	udiv	r0, r2, r7
 8000628:	fb07 2210 	mls	r2, r7, r0, r2
 800062c:	fb00 f606 	mul.w	r6, r0, r6
 8000630:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000634:	4566      	cmp	r6, ip
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x152>
 8000638:	eb1e 0c0c 	adds.w	ip, lr, ip
 800063c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000640:	d202      	bcs.n	8000648 <__udivmoddi4+0x150>
 8000642:	4566      	cmp	r6, ip
 8000644:	f200 80bb 	bhi.w	80007be <__udivmoddi4+0x2c6>
 8000648:	4610      	mov	r0, r2
 800064a:	ebac 0c06 	sub.w	ip, ip, r6
 800064e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000652:	e79d      	b.n	8000590 <__udivmoddi4+0x98>
 8000654:	f1c1 0620 	rsb	r6, r1, #32
 8000658:	408b      	lsls	r3, r1
 800065a:	fa04 fe01 	lsl.w	lr, r4, r1
 800065e:	fa22 f706 	lsr.w	r7, r2, r6
 8000662:	fa20 fc06 	lsr.w	ip, r0, r6
 8000666:	40f4      	lsrs	r4, r6
 8000668:	408a      	lsls	r2, r1
 800066a:	431f      	orrs	r7, r3
 800066c:	ea4e 030c 	orr.w	r3, lr, ip
 8000670:	fa00 fe01 	lsl.w	lr, r0, r1
 8000674:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000678:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800067c:	fa1f fc87 	uxth.w	ip, r7
 8000680:	fbb4 f0f8 	udiv	r0, r4, r8
 8000684:	fb08 4410 	mls	r4, r8, r0, r4
 8000688:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800068c:	fb00 f90c 	mul.w	r9, r0, ip
 8000690:	45a1      	cmp	r9, r4
 8000692:	d90e      	bls.n	80006b2 <__udivmoddi4+0x1ba>
 8000694:	193c      	adds	r4, r7, r4
 8000696:	f100 3aff 	add.w	sl, r0, #4294967295
 800069a:	bf2c      	ite	cs
 800069c:	f04f 0b01 	movcs.w	fp, #1
 80006a0:	f04f 0b00 	movcc.w	fp, #0
 80006a4:	45a1      	cmp	r9, r4
 80006a6:	d903      	bls.n	80006b0 <__udivmoddi4+0x1b8>
 80006a8:	f1bb 0f00 	cmp.w	fp, #0
 80006ac:	f000 8093 	beq.w	80007d6 <__udivmoddi4+0x2de>
 80006b0:	4650      	mov	r0, sl
 80006b2:	eba4 0409 	sub.w	r4, r4, r9
 80006b6:	fa1f f983 	uxth.w	r9, r3
 80006ba:	fbb4 f3f8 	udiv	r3, r4, r8
 80006be:	fb08 4413 	mls	r4, r8, r3, r4
 80006c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80006c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80006ca:	45a4      	cmp	ip, r4
 80006cc:	d906      	bls.n	80006dc <__udivmoddi4+0x1e4>
 80006ce:	193c      	adds	r4, r7, r4
 80006d0:	f103 38ff 	add.w	r8, r3, #4294967295
 80006d4:	d201      	bcs.n	80006da <__udivmoddi4+0x1e2>
 80006d6:	45a4      	cmp	ip, r4
 80006d8:	d87a      	bhi.n	80007d0 <__udivmoddi4+0x2d8>
 80006da:	4643      	mov	r3, r8
 80006dc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80006e0:	eba4 040c 	sub.w	r4, r4, ip
 80006e4:	fba0 9802 	umull	r9, r8, r0, r2
 80006e8:	4544      	cmp	r4, r8
 80006ea:	46cc      	mov	ip, r9
 80006ec:	4643      	mov	r3, r8
 80006ee:	d302      	bcc.n	80006f6 <__udivmoddi4+0x1fe>
 80006f0:	d106      	bne.n	8000700 <__udivmoddi4+0x208>
 80006f2:	45ce      	cmp	lr, r9
 80006f4:	d204      	bcs.n	8000700 <__udivmoddi4+0x208>
 80006f6:	3801      	subs	r0, #1
 80006f8:	ebb9 0c02 	subs.w	ip, r9, r2
 80006fc:	eb68 0307 	sbc.w	r3, r8, r7
 8000700:	b15d      	cbz	r5, 800071a <__udivmoddi4+0x222>
 8000702:	ebbe 020c 	subs.w	r2, lr, ip
 8000706:	eb64 0403 	sbc.w	r4, r4, r3
 800070a:	fa04 f606 	lsl.w	r6, r4, r6
 800070e:	fa22 f301 	lsr.w	r3, r2, r1
 8000712:	40cc      	lsrs	r4, r1
 8000714:	431e      	orrs	r6, r3
 8000716:	e9c5 6400 	strd	r6, r4, [r5]
 800071a:	2100      	movs	r1, #0
 800071c:	e73e      	b.n	800059c <__udivmoddi4+0xa4>
 800071e:	fa02 fe03 	lsl.w	lr, r2, r3
 8000722:	f1c3 0120 	rsb	r1, r3, #32
 8000726:	fa04 f203 	lsl.w	r2, r4, r3
 800072a:	fa00 fc03 	lsl.w	ip, r0, r3
 800072e:	40cc      	lsrs	r4, r1
 8000730:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000734:	fa20 f101 	lsr.w	r1, r0, r1
 8000738:	fa1f f68e 	uxth.w	r6, lr
 800073c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000740:	430a      	orrs	r2, r1
 8000742:	fb07 4410 	mls	r4, r7, r0, r4
 8000746:	0c11      	lsrs	r1, r2, #16
 8000748:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800074c:	fb00 f406 	mul.w	r4, r0, r6
 8000750:	428c      	cmp	r4, r1
 8000752:	d90e      	bls.n	8000772 <__udivmoddi4+0x27a>
 8000754:	eb1e 0101 	adds.w	r1, lr, r1
 8000758:	f100 38ff 	add.w	r8, r0, #4294967295
 800075c:	bf2c      	ite	cs
 800075e:	f04f 0901 	movcs.w	r9, #1
 8000762:	f04f 0900 	movcc.w	r9, #0
 8000766:	428c      	cmp	r4, r1
 8000768:	d902      	bls.n	8000770 <__udivmoddi4+0x278>
 800076a:	f1b9 0f00 	cmp.w	r9, #0
 800076e:	d02c      	beq.n	80007ca <__udivmoddi4+0x2d2>
 8000770:	4640      	mov	r0, r8
 8000772:	1b09      	subs	r1, r1, r4
 8000774:	b292      	uxth	r2, r2
 8000776:	fbb1 f4f7 	udiv	r4, r1, r7
 800077a:	fb07 1114 	mls	r1, r7, r4, r1
 800077e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000782:	fb04 f106 	mul.w	r1, r4, r6
 8000786:	4291      	cmp	r1, r2
 8000788:	d907      	bls.n	800079a <__udivmoddi4+0x2a2>
 800078a:	eb1e 0202 	adds.w	r2, lr, r2
 800078e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000792:	d201      	bcs.n	8000798 <__udivmoddi4+0x2a0>
 8000794:	4291      	cmp	r1, r2
 8000796:	d815      	bhi.n	80007c4 <__udivmoddi4+0x2cc>
 8000798:	4644      	mov	r4, r8
 800079a:	1a52      	subs	r2, r2, r1
 800079c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 80007a0:	e721      	b.n	80005e6 <__udivmoddi4+0xee>
 80007a2:	1a86      	subs	r6, r0, r2
 80007a4:	eb64 0303 	sbc.w	r3, r4, r3
 80007a8:	2001      	movs	r0, #1
 80007aa:	e70e      	b.n	80005ca <__udivmoddi4+0xd2>
 80007ac:	3c02      	subs	r4, #2
 80007ae:	4472      	add	r2, lr
 80007b0:	e735      	b.n	800061e <__udivmoddi4+0x126>
 80007b2:	3902      	subs	r1, #2
 80007b4:	4472      	add	r2, lr
 80007b6:	e6d0      	b.n	800055a <__udivmoddi4+0x62>
 80007b8:	44f4      	add	ip, lr
 80007ba:	3802      	subs	r0, #2
 80007bc:	e6e3      	b.n	8000586 <__udivmoddi4+0x8e>
 80007be:	44f4      	add	ip, lr
 80007c0:	3802      	subs	r0, #2
 80007c2:	e742      	b.n	800064a <__udivmoddi4+0x152>
 80007c4:	3c02      	subs	r4, #2
 80007c6:	4472      	add	r2, lr
 80007c8:	e7e7      	b.n	800079a <__udivmoddi4+0x2a2>
 80007ca:	3802      	subs	r0, #2
 80007cc:	4471      	add	r1, lr
 80007ce:	e7d0      	b.n	8000772 <__udivmoddi4+0x27a>
 80007d0:	3b02      	subs	r3, #2
 80007d2:	443c      	add	r4, r7
 80007d4:	e782      	b.n	80006dc <__udivmoddi4+0x1e4>
 80007d6:	3802      	subs	r0, #2
 80007d8:	443c      	add	r4, r7
 80007da:	e76a      	b.n	80006b2 <__udivmoddi4+0x1ba>

080007dc <__aeabi_idiv0>:
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop

080007e0 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af02      	add	r7, sp, #8
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80007ec:	2334      	movs	r3, #52	@ 0x34
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000824 <tx_application_define+0x44>)
 80007f6:	490c      	ldr	r1, [pc, #48]	@ (8000828 <tx_application_define+0x48>)
 80007f8:	480c      	ldr	r0, [pc, #48]	@ (800082c <tx_application_define+0x4c>)
 80007fa:	f009 fd71 	bl	800a2e0 <_txe_byte_pool_create>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d10a      	bne.n	800081a <tx_application_define+0x3a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000804:	4b09      	ldr	r3, [pc, #36]	@ (800082c <tx_application_define+0x4c>)
 8000806:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000808:	68b8      	ldr	r0, [r7, #8]
 800080a:	f000 f811 	bl	8000830 <App_ThreadX_Init>
 800080e:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000816:	bf00      	nop
 8000818:	e7fd      	b.n	8000816 <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000088 	.word	0x20000088
 8000828:	0800b6b4 	.word	0x0800b6b4
 800082c:	20000488 	.word	0x20000488

08000830 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	@ 0x30
 8000834:	af08      	add	r7, sp, #32
 8000836:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  tx_thread_create(&thread_ptr1, "LD1_thread", LD1_thread_entry, 0x1234, thread_stack1, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);
 800083c:	23b0      	movs	r3, #176	@ 0xb0
 800083e:	9306      	str	r3, [sp, #24]
 8000840:	2301      	movs	r3, #1
 8000842:	9305      	str	r3, [sp, #20]
 8000844:	2301      	movs	r3, #1
 8000846:	9304      	str	r3, [sp, #16]
 8000848:	230f      	movs	r3, #15
 800084a:	9303      	str	r3, [sp, #12]
 800084c:	230f      	movs	r3, #15
 800084e:	9302      	str	r3, [sp, #8]
 8000850:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	4b20      	ldr	r3, [pc, #128]	@ (80008d8 <App_ThreadX_Init+0xa8>)
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	f241 2334 	movw	r3, #4660	@ 0x1234
 800085e:	4a1f      	ldr	r2, [pc, #124]	@ (80008dc <App_ThreadX_Init+0xac>)
 8000860:	491f      	ldr	r1, [pc, #124]	@ (80008e0 <App_ThreadX_Init+0xb0>)
 8000862:	4820      	ldr	r0, [pc, #128]	@ (80008e4 <App_ThreadX_Init+0xb4>)
 8000864:	f009 fed2 	bl	800a60c <_txe_thread_create>
  tx_thread_create(&thread_ptr2, "LD2_thread", LD2_thread_entry, 0x1234, thread_stack2, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);
 8000868:	23b0      	movs	r3, #176	@ 0xb0
 800086a:	9306      	str	r3, [sp, #24]
 800086c:	2301      	movs	r3, #1
 800086e:	9305      	str	r3, [sp, #20]
 8000870:	2301      	movs	r3, #1
 8000872:	9304      	str	r3, [sp, #16]
 8000874:	230f      	movs	r3, #15
 8000876:	9303      	str	r3, [sp, #12]
 8000878:	230f      	movs	r3, #15
 800087a:	9302      	str	r3, [sp, #8]
 800087c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <App_ThreadX_Init+0xb8>)
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	f241 2334 	movw	r3, #4660	@ 0x1234
 800088a:	4a18      	ldr	r2, [pc, #96]	@ (80008ec <App_ThreadX_Init+0xbc>)
 800088c:	4918      	ldr	r1, [pc, #96]	@ (80008f0 <App_ThreadX_Init+0xc0>)
 800088e:	4819      	ldr	r0, [pc, #100]	@ (80008f4 <App_ThreadX_Init+0xc4>)
 8000890:	f009 febc 	bl	800a60c <_txe_thread_create>
  tx_thread_create(&thread_ptr3, "LD3_thread", LD3_thread_entry, 0x1234, thread_stack3, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);
 8000894:	23b0      	movs	r3, #176	@ 0xb0
 8000896:	9306      	str	r3, [sp, #24]
 8000898:	2301      	movs	r3, #1
 800089a:	9305      	str	r3, [sp, #20]
 800089c:	2301      	movs	r3, #1
 800089e:	9304      	str	r3, [sp, #16]
 80008a0:	230f      	movs	r3, #15
 80008a2:	9303      	str	r3, [sp, #12]
 80008a4:	230f      	movs	r3, #15
 80008a6:	9302      	str	r3, [sp, #8]
 80008a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008ac:	9301      	str	r3, [sp, #4]
 80008ae:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <App_ThreadX_Init+0xc8>)
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	f241 2334 	movw	r3, #4660	@ 0x1234
 80008b6:	4a11      	ldr	r2, [pc, #68]	@ (80008fc <App_ThreadX_Init+0xcc>)
 80008b8:	4911      	ldr	r1, [pc, #68]	@ (8000900 <App_ThreadX_Init+0xd0>)
 80008ba:	4812      	ldr	r0, [pc, #72]	@ (8000904 <App_ThreadX_Init+0xd4>)
 80008bc:	f009 fea6 	bl	800a60c <_txe_thread_create>
  tx_semaphore_create(&semaphore_0,"semaphore_0",0);
 80008c0:	231c      	movs	r3, #28
 80008c2:	2200      	movs	r2, #0
 80008c4:	4910      	ldr	r1, [pc, #64]	@ (8000908 <App_ThreadX_Init+0xd8>)
 80008c6:	4811      	ldr	r0, [pc, #68]	@ (800090c <App_ThreadX_Init+0xdc>)
 80008c8:	f009 fdaa 	bl	800a420 <_txe_semaphore_create>
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80008cc:	68fb      	ldr	r3, [r7, #12]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200004bc 	.word	0x200004bc
 80008dc:	0800091d 	.word	0x0800091d
 80008e0:	0800b6c8 	.word	0x0800b6c8
 80008e4:	200008bc 	.word	0x200008bc
 80008e8:	2000096c 	.word	0x2000096c
 80008ec:	0800093d 	.word	0x0800093d
 80008f0:	0800b6d4 	.word	0x0800b6d4
 80008f4:	20000d6c 	.word	0x20000d6c
 80008f8:	20000e1c 	.word	0x20000e1c
 80008fc:	0800095d 	.word	0x0800095d
 8000900:	0800b6e0 	.word	0x0800b6e0
 8000904:	2000121c 	.word	0x2000121c
 8000908:	0800b6ec 	.word	0x0800b6ec
 800090c:	200012cc 	.word	0x200012cc

08000910 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000914:	f008 fbae 	bl	8009074 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}

0800091c <LD1_thread_entry>:

/* USER CODE BEGIN 1 */
VOID LD1_thread_entry (ULONG initial_input){
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000924:	2101      	movs	r1, #1
 8000926:	4804      	ldr	r0, [pc, #16]	@ (8000938 <LD1_thread_entry+0x1c>)
 8000928:	f001 f854 	bl	80019d4 <HAL_GPIO_TogglePin>
		tx_thread_sleep(100);
 800092c:	2064      	movs	r0, #100	@ 0x64
 800092e:	f008 ff41 	bl	80097b4 <_tx_thread_sleep>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000932:	bf00      	nop
 8000934:	e7f6      	b.n	8000924 <LD1_thread_entry+0x8>
 8000936:	bf00      	nop
 8000938:	42020400 	.word	0x42020400

0800093c <LD2_thread_entry>:
	}

}
VOID LD2_thread_entry (ULONG initial_input){
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000944:	2110      	movs	r1, #16
 8000946:	4804      	ldr	r0, [pc, #16]	@ (8000958 <LD2_thread_entry+0x1c>)
 8000948:	f001 f844 	bl	80019d4 <HAL_GPIO_TogglePin>
		tx_thread_sleep(200);
 800094c:	20c8      	movs	r0, #200	@ 0xc8
 800094e:	f008 ff31 	bl	80097b4 <_tx_thread_sleep>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000952:	bf00      	nop
 8000954:	e7f6      	b.n	8000944 <LD2_thread_entry+0x8>
 8000956:	bf00      	nop
 8000958:	42021400 	.word	0x42021400

0800095c <LD3_thread_entry>:
	}

}
VOID LD3_thread_entry (ULONG initial_input){
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	@ 0x28
 8000960:	af02      	add	r7, sp, #8
 8000962:	6078      	str	r0, [r7, #4]
	TX_SEMAPHORE *next_semaphore;


	while(1){

		tx_semaphore_get(&semaphore_0, TX_WAIT_FOREVER);
 8000964:	f04f 31ff 	mov.w	r1, #4294967295
 8000968:	4813      	ldr	r0, [pc, #76]	@ (80009b8 <LD3_thread_entry+0x5c>)
 800096a:	f009 fdef 	bl	800a54c <_txe_semaphore_get>

		printf("User Button Pressed\n\r");
 800096e:	4813      	ldr	r0, [pc, #76]	@ (80009bc <LD3_thread_entry+0x60>)
 8000970:	f00a f8c0 	bl	800aaf4 <iprintf>
		UINT status = _tx_semaphore_info_get(&semaphore_0,
 8000974:	f107 0114 	add.w	r1, r7, #20
 8000978:	f107 0218 	add.w	r2, r7, #24
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	9301      	str	r3, [sp, #4]
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	460b      	mov	r3, r1
 800098a:	2100      	movs	r1, #0
 800098c:	480a      	ldr	r0, [pc, #40]	@ (80009b8 <LD3_thread_entry+0x5c>)
 800098e:	f008 fcfb 	bl	8009388 <_tx_semaphore_info_get>
 8000992:	61f8      	str	r0, [r7, #28]
				&current_value,
				&first_suspended,
				&suspended_count,
				&next_semaphore);

		if (status == TX_SUCCESS){
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d104      	bne.n	80009a4 <LD3_thread_entry+0x48>
			printf("Current Value: %lu\n\r\n\n", current_value);
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	4619      	mov	r1, r3
 800099e:	4808      	ldr	r0, [pc, #32]	@ (80009c0 <LD3_thread_entry+0x64>)
 80009a0:	f00a f8a8 	bl	800aaf4 <iprintf>
		}

		tx_thread_sleep(50);
 80009a4:	2032      	movs	r0, #50	@ 0x32
 80009a6:	f008 ff05 	bl	80097b4 <_tx_thread_sleep>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);	//Turn of LD3
 80009aa:	2200      	movs	r2, #0
 80009ac:	2110      	movs	r1, #16
 80009ae:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <LD3_thread_entry+0x68>)
 80009b0:	f000 fff8 	bl	80019a4 <HAL_GPIO_WritePin>
	while(1){
 80009b4:	e7d6      	b.n	8000964 <LD3_thread_entry+0x8>
 80009b6:	bf00      	nop
 80009b8:	200012cc 	.word	0x200012cc
 80009bc:	0800b6f8 	.word	0x0800b6f8
 80009c0:	0800b710 	.word	0x0800b710
 80009c4:	42021800 	.word	0x42021800

080009c8 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Code for enabling printf -------------------------------------------------*/
#define USE_UART_PRINT
void __io_putchar(char ch) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
#ifdef USE_UART_PRINT
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 10);
 80009d2:	1df9      	adds	r1, r7, #7
 80009d4:	230a      	movs	r3, #10
 80009d6:	2201      	movs	r2, #1
 80009d8:	4803      	ldr	r0, [pc, #12]	@ (80009e8 <__io_putchar+0x20>)
 80009da:	f007 fcc3 	bl	8008364 <HAL_UART_Transmit>
#else
	ITM_SendChar(ch);
#endif
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200012e8 	.word	0x200012e8

080009ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f0:	f000 fd06 	bl	8001400 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f4:	f000 f81c 	bl	8000a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f8:	f000 f8e0 	bl	8000bbc <MX_GPIO_Init>
  MX_ICACHE_Init();
 80009fc:	f000 f87e 	bl	8000afc <MX_ICACHE_Init>
  MX_USART3_UART_Init();
 8000a00:	f000 f890 	bl	8000b24 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  //Clear TerraTerm Terminal
  printf("\033[2J");
 8000a04:	4807      	ldr	r0, [pc, #28]	@ (8000a24 <main+0x38>)
 8000a06:	f00a f875 	bl	800aaf4 <iprintf>
  fflush(stdout);
 8000a0a:	4b07      	ldr	r3, [pc, #28]	@ (8000a28 <main+0x3c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f009 ff99 	bl	800a948 <fflush>

  printf("\r\nWaiting for USER_BTN to be pressed to set Semaphore\n\r");
 8000a16:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <main+0x40>)
 8000a18:	f00a f86c 	bl	800aaf4 <iprintf>
  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000a1c:	f7ff ff78 	bl	8000910 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <main+0x34>
 8000a24:	0800b728 	.word	0x0800b728
 8000a28:	2000001c 	.word	0x2000001c
 8000a2c:	0800b730 	.word	0x0800b730

08000a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b09c      	sub	sp, #112	@ 0x70
 8000a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	f107 0320 	add.w	r3, r7, #32
 8000a3a:	2250      	movs	r2, #80	@ 0x50
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f00a f8ad 	bl	800ab9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a44:	f107 0308 	add.w	r3, r7, #8
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
 8000a54:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a56:	4b28      	ldr	r3, [pc, #160]	@ (8000af8 <SystemClock_Config+0xc8>)
 8000a58:	691b      	ldr	r3, [r3, #16]
 8000a5a:	4a27      	ldr	r2, [pc, #156]	@ (8000af8 <SystemClock_Config+0xc8>)
 8000a5c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000a60:	6113      	str	r3, [r2, #16]
 8000a62:	4b25      	ldr	r3, [pc, #148]	@ (8000af8 <SystemClock_Config+0xc8>)
 8000a64:	691b      	ldr	r3, [r3, #16]
 8000a66:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a6e:	bf00      	nop
 8000a70:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <SystemClock_Config+0xc8>)
 8000a72:	695b      	ldr	r3, [r3, #20]
 8000a74:	f003 0308 	and.w	r3, r3, #8
 8000a78:	2b08      	cmp	r3, #8
 8000a7a:	d1f9      	bne.n	8000a70 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a80:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a86:	2302      	movs	r3, #2
 8000a88:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a8e:	2304      	movs	r3, #4
 8000a90:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8000a92:	23fa      	movs	r3, #250	@ 0xfa
 8000a94:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a96:	2302      	movs	r3, #2
 8000a98:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aae:	f107 0320 	add.w	r3, r7, #32
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 f80a 	bl	8001acc <HAL_RCC_OscConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000abe:	f000 fa15 	bl	8000eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac2:	231f      	movs	r3, #31
 8000ac4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ada:	f107 0308 	add.w	r3, r7, #8
 8000ade:	2105      	movs	r1, #5
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f001 fc2b 	bl	800233c <HAL_RCC_ClockConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000aec:	f000 f9fe 	bl	8000eec <Error_Handler>
  }
}
 8000af0:	bf00      	nop
 8000af2:	3770      	adds	r7, #112	@ 0x70
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	44020800 	.word	0x44020800

08000afc <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000b00:	2000      	movs	r0, #0
 8000b02:	f000 ffb3 	bl	8001a6c <HAL_ICACHE_ConfigAssociativityMode>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000b0c:	f000 f9ee 	bl	8000eec <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000b10:	f000 ffcc 	bl	8001aac <HAL_ICACHE_Enable>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000b1a:	f000 f9e7 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b28:	4b22      	ldr	r3, [pc, #136]	@ (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b2a:	4a23      	ldr	r2, [pc, #140]	@ (8000bb8 <MX_USART3_UART_Init+0x94>)
 8000b2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b2e:	4b21      	ldr	r3, [pc, #132]	@ (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b36:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b42:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b48:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4e:	4b19      	ldr	r3, [pc, #100]	@ (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b54:	4b17      	ldr	r3, [pc, #92]	@ (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5a:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b60:	4b14      	ldr	r3, [pc, #80]	@ (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b66:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b6c:	4811      	ldr	r0, [pc, #68]	@ (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b6e:	f007 fba9 	bl	80082c4 <HAL_UART_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b78:	f000 f9b8 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	480d      	ldr	r0, [pc, #52]	@ (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b80:	f008 f8d4 	bl	8008d2c <HAL_UARTEx_SetTxFifoThreshold>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b8a:	f000 f9af 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4808      	ldr	r0, [pc, #32]	@ (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000b92:	f008 f909 	bl	8008da8 <HAL_UARTEx_SetRxFifoThreshold>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b9c:	f000 f9a6 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ba0:	4804      	ldr	r0, [pc, #16]	@ (8000bb4 <MX_USART3_UART_Init+0x90>)
 8000ba2:	f008 f88a 	bl	8008cba <HAL_UARTEx_DisableFifoMode>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bac:	f000 f99e 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200012e8 	.word	0x200012e8
 8000bb8:	40004800 	.word	0x40004800

08000bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08e      	sub	sp, #56	@ 0x38
 8000bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bd2:	4ba9      	ldr	r3, [pc, #676]	@ (8000e78 <MX_GPIO_Init+0x2bc>)
 8000bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bd8:	4aa7      	ldr	r2, [pc, #668]	@ (8000e78 <MX_GPIO_Init+0x2bc>)
 8000bda:	f043 0310 	orr.w	r3, r3, #16
 8000bde:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000be2:	4ba5      	ldr	r3, [pc, #660]	@ (8000e78 <MX_GPIO_Init+0x2bc>)
 8000be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000be8:	f003 0310 	and.w	r3, r3, #16
 8000bec:	623b      	str	r3, [r7, #32]
 8000bee:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf0:	4ba1      	ldr	r3, [pc, #644]	@ (8000e78 <MX_GPIO_Init+0x2bc>)
 8000bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bf6:	4aa0      	ldr	r2, [pc, #640]	@ (8000e78 <MX_GPIO_Init+0x2bc>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c00:	4b9d      	ldr	r3, [pc, #628]	@ (8000e78 <MX_GPIO_Init+0x2bc>)
 8000c02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	61fb      	str	r3, [r7, #28]
 8000c0c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c0e:	4b9a      	ldr	r3, [pc, #616]	@ (8000e78 <MX_GPIO_Init+0x2bc>)
 8000c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c14:	4a98      	ldr	r2, [pc, #608]	@ (8000e78 <MX_GPIO_Init+0x2bc>)
 8000c16:	f043 0320 	orr.w	r3, r3, #32
 8000c1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c1e:	4b96      	ldr	r3, [pc, #600]	@ (8000e78 <MX_GPIO_Init+0x2bc>)
 8000c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c24:	f003 0320 	and.w	r3, r3, #32
 8000c28:	61bb      	str	r3, [r7, #24]
 8000c2a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2c:	4b92      	ldr	r3, [pc, #584]	@ (8000e78 <MX_GPIO_Init+0x2bc>)
 8000c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c32:	4a91      	ldr	r2, [pc, #580]	@ (8000e78 <MX_GPIO_Init+0x2bc>)
 8000c34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c38:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c3c:	4b8e      	ldr	r3, [pc, #568]	@ (8000e78 <MX_GPIO_Init+0x2bc>)
 8000c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4b8b      	ldr	r3, [pc, #556]	@ (8000e78 <MX_GPIO_Init+0x2bc>)
 8000c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c50:	4a89      	ldr	r2, [pc, #548]	@ (8000e78 <MX_GPIO_Init+0x2bc>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c5a:	4b87      	ldr	r3, [pc, #540]	@ (8000e78 <MX_GPIO_Init+0x2bc>)
 8000c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c68:	4b83      	ldr	r3, [pc, #524]	@ (8000e78 <MX_GPIO_Init+0x2bc>)
 8000c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c6e:	4a82      	ldr	r2, [pc, #520]	@ (8000e78 <MX_GPIO_Init+0x2bc>)
 8000c70:	f043 0302 	orr.w	r3, r3, #2
 8000c74:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c78:	4b7f      	ldr	r3, [pc, #508]	@ (8000e78 <MX_GPIO_Init+0x2bc>)
 8000c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c86:	4b7c      	ldr	r3, [pc, #496]	@ (8000e78 <MX_GPIO_Init+0x2bc>)
 8000c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c8c:	4a7a      	ldr	r2, [pc, #488]	@ (8000e78 <MX_GPIO_Init+0x2bc>)
 8000c8e:	f043 0308 	orr.w	r3, r3, #8
 8000c92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c96:	4b78      	ldr	r3, [pc, #480]	@ (8000e78 <MX_GPIO_Init+0x2bc>)
 8000c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c9c:	f003 0308 	and.w	r3, r3, #8
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ca4:	4b74      	ldr	r3, [pc, #464]	@ (8000e78 <MX_GPIO_Init+0x2bc>)
 8000ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000caa:	4a73      	ldr	r2, [pc, #460]	@ (8000e78 <MX_GPIO_Init+0x2bc>)
 8000cac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cb0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cb4:	4b70      	ldr	r3, [pc, #448]	@ (8000e78 <MX_GPIO_Init+0x2bc>)
 8000cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2110      	movs	r1, #16
 8000cc6:	486d      	ldr	r0, [pc, #436]	@ (8000e7c <MX_GPIO_Init+0x2c0>)
 8000cc8:	f000 fe6c 	bl	80019a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2101      	movs	r1, #1
 8000cd0:	486b      	ldr	r0, [pc, #428]	@ (8000e80 <MX_GPIO_Init+0x2c4>)
 8000cd2:	f000 fe67 	bl	80019a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2110      	movs	r1, #16
 8000cda:	486a      	ldr	r0, [pc, #424]	@ (8000e84 <MX_GPIO_Init+0x2c8>)
 8000cdc:	f000 fe62 	bl	80019a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000ce0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce6:	4b68      	ldr	r3, [pc, #416]	@ (8000e88 <MX_GPIO_Init+0x2cc>)
 8000ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4865      	ldr	r0, [pc, #404]	@ (8000e8c <MX_GPIO_Init+0x2d0>)
 8000cf6:	f000 fd03 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cfa:	2310      	movs	r3, #16
 8000cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d0e:	4619      	mov	r1, r3
 8000d10:	485a      	ldr	r0, [pc, #360]	@ (8000e7c <MX_GPIO_Init+0x2c0>)
 8000d12:	f000 fcf5 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d16:	2332      	movs	r3, #50	@ 0x32
 8000d18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d22:	2302      	movs	r3, #2
 8000d24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d26:	230b      	movs	r3, #11
 8000d28:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4856      	ldr	r0, [pc, #344]	@ (8000e8c <MX_GPIO_Init+0x2d0>)
 8000d32:	f000 fce5 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d36:	2386      	movs	r3, #134	@ 0x86
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d42:	2302      	movs	r3, #2
 8000d44:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d46:	230b      	movs	r3, #11
 8000d48:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	484f      	ldr	r0, [pc, #316]	@ (8000e90 <MX_GPIO_Init+0x2d4>)
 8000d52:	f000 fcd5 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000d56:	2310      	movs	r3, #16
 8000d58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d66:	4619      	mov	r1, r3
 8000d68:	4849      	ldr	r0, [pc, #292]	@ (8000e90 <MX_GPIO_Init+0x2d4>)
 8000d6a:	f000 fcc9 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d82:	4619      	mov	r1, r3
 8000d84:	483e      	ldr	r0, [pc, #248]	@ (8000e80 <MX_GPIO_Init+0x2c4>)
 8000d86:	f000 fcbb 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 8000d8a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d90:	2303      	movs	r3, #3
 8000d92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4838      	ldr	r0, [pc, #224]	@ (8000e80 <MX_GPIO_Init+0x2c4>)
 8000da0:	f000 fcae 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000da4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000db2:	2302      	movs	r3, #2
 8000db4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000db6:	230b      	movs	r3, #11
 8000db8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	482f      	ldr	r0, [pc, #188]	@ (8000e80 <MX_GPIO_Init+0x2c4>)
 8000dc2:	f000 fc9d 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000dc6:	2310      	movs	r3, #16
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4829      	ldr	r0, [pc, #164]	@ (8000e84 <MX_GPIO_Init+0x2c8>)
 8000dde:	f000 fc8f 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000de2:	2380      	movs	r3, #128	@ 0x80
 8000de4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de6:	4b28      	ldr	r3, [pc, #160]	@ (8000e88 <MX_GPIO_Init+0x2cc>)
 8000de8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000df2:	4619      	mov	r1, r3
 8000df4:	4823      	ldr	r0, [pc, #140]	@ (8000e84 <MX_GPIO_Init+0x2c8>)
 8000df6:	f000 fc83 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000dfa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000e0c:	230a      	movs	r3, #10
 8000e0e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e14:	4619      	mov	r1, r3
 8000e16:	481e      	ldr	r0, [pc, #120]	@ (8000e90 <MX_GPIO_Init+0x2d4>)
 8000e18:	f000 fc72 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8000e1c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000e20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e2e:	230b      	movs	r3, #11
 8000e30:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e36:	4619      	mov	r1, r3
 8000e38:	4812      	ldr	r0, [pc, #72]	@ (8000e84 <MX_GPIO_Init+0x2c8>)
 8000e3a:	f000 fc61 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000e3e:	23c0      	movs	r3, #192	@ 0xc0
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000e4e:	2308      	movs	r3, #8
 8000e50:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e56:	4619      	mov	r1, r3
 8000e58:	4809      	ldr	r0, [pc, #36]	@ (8000e80 <MX_GPIO_Init+0x2c4>)
 8000e5a:	f000 fc51 	bl	8001700 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2100      	movs	r1, #0
 8000e62:	2018      	movs	r0, #24
 8000e64:	f000 fbcc 	bl	8001600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000e68:	2018      	movs	r0, #24
 8000e6a:	f000 fbe3 	bl	8001634 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e6e:	bf00      	nop
 8000e70:	3738      	adds	r7, #56	@ 0x38
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	44020c00 	.word	0x44020c00
 8000e7c:	42021400 	.word	0x42021400
 8000e80:	42020400 	.word	0x42020400
 8000e84:	42021800 	.word	0x42021800
 8000e88:	10110000 	.word	0x10110000
 8000e8c:	42020800 	.word	0x42020800
 8000e90:	42020000 	.word	0x42020000

08000e94 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_BTN_Pin){
 8000e9e:	88fb      	ldrh	r3, [r7, #6]
 8000ea0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ea4:	d107      	bne.n	8000eb6 <HAL_GPIO_EXTI_Rising_Callback+0x22>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2110      	movs	r1, #16
 8000eaa:	4805      	ldr	r0, [pc, #20]	@ (8000ec0 <HAL_GPIO_EXTI_Rising_Callback+0x2c>)
 8000eac:	f000 fd7a 	bl	80019a4 <HAL_GPIO_WritePin>
		tx_semaphore_put(&semaphore_0);
 8000eb0:	4804      	ldr	r0, [pc, #16]	@ (8000ec4 <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 8000eb2:	f009 fb8d 	bl	800a5d0 <_txe_semaphore_put>
	}
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	42021800 	.word	0x42021800
 8000ec4:	200012cc 	.word	0x200012cc

08000ec8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	@ (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d101      	bne.n	8000ede <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eda:	f000 fab9 	bl	8001450 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40001000 	.word	0x40001000

08000eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef0:	b672      	cpsid	i
}
 8000ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <Error_Handler+0x8>

08000ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b0cc      	sub	sp, #304	@ 0x130
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000f16:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f2c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000f30:	4618      	mov	r0, r3
 8000f32:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000f36:	461a      	mov	r2, r3
 8000f38:	2100      	movs	r1, #0
 8000f3a:	f009 fe30 	bl	800ab9e <memset>
  if(huart->Instance==USART3)
 8000f3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f42:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a33      	ldr	r2, [pc, #204]	@ (8001018 <HAL_UART_MspInit+0x110>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d15d      	bne.n	800100c <HAL_UART_MspInit+0x104>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f50:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f54:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000f58:	f04f 0204 	mov.w	r2, #4
 8000f5c:	f04f 0300 	mov.w	r3, #0
 8000f60:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f64:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f68:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	665a      	str	r2, [r3, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	4618      	mov	r0, r3
 8000f76:	f001 fd5b 	bl	8002a30 <HAL_RCCEx_PeriphCLKConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8000f80:	f7ff ffb4 	bl	8000eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f84:	4b25      	ldr	r3, [pc, #148]	@ (800101c <HAL_UART_MspInit+0x114>)
 8000f86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f8a:	4a24      	ldr	r2, [pc, #144]	@ (800101c <HAL_UART_MspInit+0x114>)
 8000f8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f90:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000f94:	4b21      	ldr	r3, [pc, #132]	@ (800101c <HAL_UART_MspInit+0x114>)
 8000f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f9a:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8000f9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000fa2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000fac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000fb0:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800101c <HAL_UART_MspInit+0x114>)
 8000fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fb8:	4a18      	ldr	r2, [pc, #96]	@ (800101c <HAL_UART_MspInit+0x114>)
 8000fba:	f043 0308 	orr.w	r3, r3, #8
 8000fbe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fc2:	4b16      	ldr	r3, [pc, #88]	@ (800101c <HAL_UART_MspInit+0x114>)
 8000fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fc8:	f003 0208 	and.w	r2, r3, #8
 8000fcc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000fd0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000fda:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000fde:	681b      	ldr	r3, [r3, #0]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fe0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fe4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001000:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001004:	4619      	mov	r1, r3
 8001006:	4806      	ldr	r0, [pc, #24]	@ (8001020 <HAL_UART_MspInit+0x118>)
 8001008:	f000 fb7a 	bl	8001700 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800100c:	bf00      	nop
 800100e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40004800 	.word	0x40004800
 800101c:	44020c00 	.word	0x44020c00
 8001020:	42020c00 	.word	0x42020c00

08001024 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08e      	sub	sp, #56	@ 0x38
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800102c:	4b33      	ldr	r3, [pc, #204]	@ (80010fc <HAL_InitTick+0xd8>)
 800102e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001032:	4a32      	ldr	r2, [pc, #200]	@ (80010fc <HAL_InitTick+0xd8>)
 8001034:	f043 0310 	orr.w	r3, r3, #16
 8001038:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800103c:	4b2f      	ldr	r3, [pc, #188]	@ (80010fc <HAL_InitTick+0xd8>)
 800103e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001042:	f003 0310 	and.w	r3, r3, #16
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800104a:	f107 020c 	add.w	r2, r7, #12
 800104e:	f107 0310 	add.w	r3, r7, #16
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f001 fcb3 	bl	80029c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800105e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001060:	2b00      	cmp	r3, #0
 8001062:	d103      	bne.n	800106c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001064:	f001 fc6a 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8001068:	6378      	str	r0, [r7, #52]	@ 0x34
 800106a:	e004      	b.n	8001076 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800106c:	f001 fc66 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8001070:	4603      	mov	r3, r0
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8001076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001078:	095b      	lsrs	r3, r3, #5
 800107a:	4a21      	ldr	r2, [pc, #132]	@ (8001100 <HAL_InitTick+0xdc>)
 800107c:	fba2 2303 	umull	r2, r3, r2, r3
 8001080:	09db      	lsrs	r3, r3, #7
 8001082:	3b01      	subs	r3, #1
 8001084:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001086:	4b1f      	ldr	r3, [pc, #124]	@ (8001104 <HAL_InitTick+0xe0>)
 8001088:	4a1f      	ldr	r2, [pc, #124]	@ (8001108 <HAL_InitTick+0xe4>)
 800108a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 800108c:	4b1d      	ldr	r3, [pc, #116]	@ (8001104 <HAL_InitTick+0xe0>)
 800108e:	2263      	movs	r2, #99	@ 0x63
 8001090:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001092:	4a1c      	ldr	r2, [pc, #112]	@ (8001104 <HAL_InitTick+0xe0>)
 8001094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001096:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001098:	4b1a      	ldr	r3, [pc, #104]	@ (8001104 <HAL_InitTick+0xe0>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109e:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <HAL_InitTick+0xe0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80010a4:	4817      	ldr	r0, [pc, #92]	@ (8001104 <HAL_InitTick+0xe0>)
 80010a6:	f006 fd15 	bl	8007ad4 <HAL_TIM_Base_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80010b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d118      	bne.n	80010ea <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80010b8:	4812      	ldr	r0, [pc, #72]	@ (8001104 <HAL_InitTick+0xe0>)
 80010ba:	f006 fd6d 	bl	8007b98 <HAL_TIM_Base_Start_IT>
 80010be:	4603      	mov	r3, r0
 80010c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80010c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10e      	bne.n	80010ea <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b0f      	cmp	r3, #15
 80010d0:	d808      	bhi.n	80010e4 <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80010d2:	2200      	movs	r2, #0
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	2031      	movs	r0, #49	@ 0x31
 80010d8:	f000 fa92 	bl	8001600 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010dc:	4a0b      	ldr	r2, [pc, #44]	@ (800110c <HAL_InitTick+0xe8>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e002      	b.n	80010ea <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80010ea:	2031      	movs	r0, #49	@ 0x31
 80010ec:	f000 faa2 	bl	8001634 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 80010f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3738      	adds	r7, #56	@ 0x38
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	44020c00 	.word	0x44020c00
 8001100:	0a7c5ac5 	.word	0x0a7c5ac5
 8001104:	2000137c 	.word	0x2000137c
 8001108:	40001000 	.word	0x40001000
 800110c:	20000004 	.word	0x20000004

08001110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <NMI_Handler+0x4>

08001118 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <HardFault_Handler+0x4>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <MemManage_Handler+0x4>

08001128 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <BusFault_Handler+0x4>

08001130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <UsageFault_Handler+0x4>

08001138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 800114a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800114e:	f000 fc5b 	bl	8001a08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800115c:	4802      	ldr	r0, [pc, #8]	@ (8001168 <TIM6_IRQHandler+0x10>)
 800115e:	f006 fdc9 	bl	8007cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000137c 	.word	0x2000137c

0800116c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	e00a      	b.n	8001194 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800117e:	f3af 8000 	nop.w
 8001182:	4601      	mov	r1, r0
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	60ba      	str	r2, [r7, #8]
 800118a:	b2ca      	uxtb	r2, r1
 800118c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3301      	adds	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	429a      	cmp	r2, r3
 800119a:	dbf0      	blt.n	800117e <_read+0x12>
  }

  return len;
 800119c:	687b      	ldr	r3, [r7, #4]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	60f8      	str	r0, [r7, #12]
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	e009      	b.n	80011cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	60ba      	str	r2, [r7, #8]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fc01 	bl	80009c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	3301      	adds	r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	dbf1      	blt.n	80011b8 <_write+0x12>
  }
  return len;
 80011d4:	687b      	ldr	r3, [r7, #4]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <_close>:

int _close(int file)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001206:	605a      	str	r2, [r3, #4]
  return 0;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <_isatty>:

int _isatty(int file)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800121e:	2301      	movs	r3, #1
}
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001250:	4a14      	ldr	r2, [pc, #80]	@ (80012a4 <_sbrk+0x5c>)
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <_sbrk+0x60>)
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800125c:	4b13      	ldr	r3, [pc, #76]	@ (80012ac <_sbrk+0x64>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d102      	bne.n	800126a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001264:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <_sbrk+0x64>)
 8001266:	4a12      	ldr	r2, [pc, #72]	@ (80012b0 <_sbrk+0x68>)
 8001268:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800126a:	4b10      	ldr	r3, [pc, #64]	@ (80012ac <_sbrk+0x64>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	429a      	cmp	r2, r3
 8001276:	d207      	bcs.n	8001288 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001278:	f009 fce0 	bl	800ac3c <__errno>
 800127c:	4603      	mov	r3, r0
 800127e:	220c      	movs	r2, #12
 8001280:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	e009      	b.n	800129c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001288:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <_sbrk+0x64>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800128e:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <_sbrk+0x64>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	4a05      	ldr	r2, [pc, #20]	@ (80012ac <_sbrk+0x64>)
 8001298:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800129a:	68fb      	ldr	r3, [r7, #12]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	200a0000 	.word	0x200a0000
 80012a8:	00000400 	.word	0x00000400
 80012ac:	200013c8 	.word	0x200013c8
 80012b0:	20001b60 	.word	0x20001b60

080012b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012ba:	4b35      	ldr	r3, [pc, #212]	@ (8001390 <SystemInit+0xdc>)
 80012bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012c0:	4a33      	ldr	r2, [pc, #204]	@ (8001390 <SystemInit+0xdc>)
 80012c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012c6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80012ca:	4b32      	ldr	r3, [pc, #200]	@ (8001394 <SystemInit+0xe0>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80012d0:	4b30      	ldr	r3, [pc, #192]	@ (8001394 <SystemInit+0xe0>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80012d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001394 <SystemInit+0xe0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80012dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001394 <SystemInit+0xe0>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	492c      	ldr	r1, [pc, #176]	@ (8001394 <SystemInit+0xe0>)
 80012e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001398 <SystemInit+0xe4>)
 80012e4:	4013      	ands	r3, r2
 80012e6:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80012e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001394 <SystemInit+0xe0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80012ee:	4b29      	ldr	r3, [pc, #164]	@ (8001394 <SystemInit+0xe0>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80012f4:	4b27      	ldr	r3, [pc, #156]	@ (8001394 <SystemInit+0xe0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80012fa:	4b26      	ldr	r3, [pc, #152]	@ (8001394 <SystemInit+0xe0>)
 80012fc:	4a27      	ldr	r2, [pc, #156]	@ (800139c <SystemInit+0xe8>)
 80012fe:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001300:	4b24      	ldr	r3, [pc, #144]	@ (8001394 <SystemInit+0xe0>)
 8001302:	2200      	movs	r2, #0
 8001304:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001306:	4b23      	ldr	r3, [pc, #140]	@ (8001394 <SystemInit+0xe0>)
 8001308:	4a24      	ldr	r2, [pc, #144]	@ (800139c <SystemInit+0xe8>)
 800130a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800130c:	4b21      	ldr	r3, [pc, #132]	@ (8001394 <SystemInit+0xe0>)
 800130e:	2200      	movs	r2, #0
 8001310:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001312:	4b20      	ldr	r3, [pc, #128]	@ (8001394 <SystemInit+0xe0>)
 8001314:	4a21      	ldr	r2, [pc, #132]	@ (800139c <SystemInit+0xe8>)
 8001316:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001318:	4b1e      	ldr	r3, [pc, #120]	@ (8001394 <SystemInit+0xe0>)
 800131a:	2200      	movs	r2, #0
 800131c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800131e:	4b1d      	ldr	r3, [pc, #116]	@ (8001394 <SystemInit+0xe0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a1c      	ldr	r2, [pc, #112]	@ (8001394 <SystemInit+0xe0>)
 8001324:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001328:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800132a:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <SystemInit+0xe0>)
 800132c:	2200      	movs	r2, #0
 800132e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001330:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <SystemInit+0xdc>)
 8001332:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001336:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001338:	4b19      	ldr	r3, [pc, #100]	@ (80013a0 <SystemInit+0xec>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001340:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001348:	d003      	beq.n	8001352 <SystemInit+0x9e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001350:	d117      	bne.n	8001382 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001352:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <SystemInit+0xec>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d005      	beq.n	800136a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800135e:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <SystemInit+0xec>)
 8001360:	4a10      	ldr	r2, [pc, #64]	@ (80013a4 <SystemInit+0xf0>)
 8001362:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001364:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <SystemInit+0xec>)
 8001366:	4a10      	ldr	r2, [pc, #64]	@ (80013a8 <SystemInit+0xf4>)
 8001368:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800136a:	4b0d      	ldr	r3, [pc, #52]	@ (80013a0 <SystemInit+0xec>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	4a0c      	ldr	r2, [pc, #48]	@ (80013a0 <SystemInit+0xec>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001376:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <SystemInit+0xec>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	4a09      	ldr	r2, [pc, #36]	@ (80013a0 <SystemInit+0xec>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	61d3      	str	r3, [r2, #28]
  }
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00
 8001394:	44020c00 	.word	0x44020c00
 8001398:	eae2eae3 	.word	0xeae2eae3
 800139c:	01010280 	.word	0x01010280
 80013a0:	40022000 	.word	0x40022000
 80013a4:	08192a3b 	.word	0x08192a3b
 80013a8:	4c5d6e7f 	.word	0x4c5d6e7f

080013ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013ac:	480d      	ldr	r0, [pc, #52]	@ (80013e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013b0:	f7ff ff80 	bl	80012b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b4:	480c      	ldr	r0, [pc, #48]	@ (80013e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80013b6:	490d      	ldr	r1, [pc, #52]	@ (80013ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80013b8:	4a0d      	ldr	r2, [pc, #52]	@ (80013f0 <LoopForever+0xe>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013bc:	e002      	b.n	80013c4 <LoopCopyDataInit>

080013be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c2:	3304      	adds	r3, #4

080013c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c8:	d3f9      	bcc.n	80013be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ca:	4a0a      	ldr	r2, [pc, #40]	@ (80013f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013cc:	4c0a      	ldr	r4, [pc, #40]	@ (80013f8 <LoopForever+0x16>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d0:	e001      	b.n	80013d6 <LoopFillZerobss>

080013d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d4:	3204      	adds	r2, #4

080013d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d8:	d3fb      	bcc.n	80013d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013da:	f009 fc35 	bl	800ac48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013de:	f7ff fb05 	bl	80009ec <main>

080013e2 <LoopForever>:

LoopForever:
    b LoopForever
 80013e2:	e7fe      	b.n	80013e2 <LoopForever>
  ldr   r0, =_estack
 80013e4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80013e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ec:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80013f0:	0800b800 	.word	0x0800b800
  ldr r2, =_sbss
 80013f4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80013f8:	20001b5c 	.word	0x20001b5c

080013fc <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013fc:	e7fe      	b.n	80013fc <ADC1_IRQHandler>
	...

08001400 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001404:	2003      	movs	r0, #3
 8001406:	f000 f8f0 	bl	80015ea <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800140a:	f001 f94f 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 800140e:	4602      	mov	r2, r0
 8001410:	4b0c      	ldr	r3, [pc, #48]	@ (8001444 <HAL_Init+0x44>)
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	f003 030f 	and.w	r3, r3, #15
 8001418:	490b      	ldr	r1, [pc, #44]	@ (8001448 <HAL_Init+0x48>)
 800141a:	5ccb      	ldrb	r3, [r1, r3]
 800141c:	fa22 f303 	lsr.w	r3, r2, r3
 8001420:	4a0a      	ldr	r2, [pc, #40]	@ (800144c <HAL_Init+0x4c>)
 8001422:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001424:	2004      	movs	r0, #4
 8001426:	f000 f913 	bl	8001650 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800142a:	200f      	movs	r0, #15
 800142c:	f7ff fdfa 	bl	8001024 <HAL_InitTick>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e002      	b.n	8001440 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800143a:	f7ff fd5d 	bl	8000ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	bd80      	pop	{r7, pc}
 8001444:	44020c00 	.word	0x44020c00
 8001448:	0800b77c 	.word	0x0800b77c
 800144c:	20000000 	.word	0x20000000

08001450 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <HAL_IncTick+0x20>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_IncTick+0x24>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4413      	add	r3, r2
 8001460:	4a04      	ldr	r2, [pc, #16]	@ (8001474 <HAL_IncTick+0x24>)
 8001462:	6013      	str	r3, [r2, #0]
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000008 	.word	0x20000008
 8001474:	200013cc 	.word	0x200013cc

08001478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return uwTick;
 800147c:	4b03      	ldr	r3, [pc, #12]	@ (800148c <HAL_GetTick+0x14>)
 800147e:	681b      	ldr	r3, [r3, #0]
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	200013cc 	.word	0x200013cc

08001490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a0:	4b0c      	ldr	r3, [pc, #48]	@ (80014d4 <__NVIC_SetPriorityGrouping+0x44>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014ac:	4013      	ands	r3, r2
 80014ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c2:	4a04      	ldr	r2, [pc, #16]	@ (80014d4 <__NVIC_SetPriorityGrouping+0x44>)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	60d3      	str	r3, [r2, #12]
}
 80014c8:	bf00      	nop
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014dc:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <__NVIC_GetPriorityGrouping+0x18>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	f003 0307 	and.w	r3, r3, #7
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001502:	2b00      	cmp	r3, #0
 8001504:	db0b      	blt.n	800151e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	f003 021f 	and.w	r2, r3, #31
 800150c:	4907      	ldr	r1, [pc, #28]	@ (800152c <__NVIC_EnableIRQ+0x38>)
 800150e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001512:	095b      	lsrs	r3, r3, #5
 8001514:	2001      	movs	r0, #1
 8001516:	fa00 f202 	lsl.w	r2, r0, r2
 800151a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	e000e100 	.word	0xe000e100

08001530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800153c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001540:	2b00      	cmp	r3, #0
 8001542:	db0a      	blt.n	800155a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	b2da      	uxtb	r2, r3
 8001548:	490c      	ldr	r1, [pc, #48]	@ (800157c <__NVIC_SetPriority+0x4c>)
 800154a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800154e:	0112      	lsls	r2, r2, #4
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	440b      	add	r3, r1
 8001554:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001558:	e00a      	b.n	8001570 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4908      	ldr	r1, [pc, #32]	@ (8001580 <__NVIC_SetPriority+0x50>)
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	3b04      	subs	r3, #4
 8001568:	0112      	lsls	r2, r2, #4
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	440b      	add	r3, r1
 800156e:	761a      	strb	r2, [r3, #24]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000e100 	.word	0xe000e100
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001584:	b480      	push	{r7}
 8001586:	b089      	sub	sp, #36	@ 0x24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f1c3 0307 	rsb	r3, r3, #7
 800159e:	2b04      	cmp	r3, #4
 80015a0:	bf28      	it	cs
 80015a2:	2304      	movcs	r3, #4
 80015a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3304      	adds	r3, #4
 80015aa:	2b06      	cmp	r3, #6
 80015ac:	d902      	bls.n	80015b4 <NVIC_EncodePriority+0x30>
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3b03      	subs	r3, #3
 80015b2:	e000      	b.n	80015b6 <NVIC_EncodePriority+0x32>
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b8:	f04f 32ff 	mov.w	r2, #4294967295
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43da      	mvns	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	401a      	ands	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015cc:	f04f 31ff 	mov.w	r1, #4294967295
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	43d9      	mvns	r1, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015dc:	4313      	orrs	r3, r2
         );
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3724      	adds	r7, #36	@ 0x24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ff4c 	bl	8001490 <__NVIC_SetPriorityGrouping>
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
 800160c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800160e:	f7ff ff63 	bl	80014d8 <__NVIC_GetPriorityGrouping>
 8001612:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	68b9      	ldr	r1, [r7, #8]
 8001618:	6978      	ldr	r0, [r7, #20]
 800161a:	f7ff ffb3 	bl	8001584 <NVIC_EncodePriority>
 800161e:	4602      	mov	r2, r0
 8001620:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001624:	4611      	mov	r1, r2
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ff82 	bl	8001530 <__NVIC_SetPriority>
}
 800162c:	bf00      	nop
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800163e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff ff56 	bl	80014f4 <__NVIC_EnableIRQ>
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b04      	cmp	r3, #4
 800165c:	d844      	bhi.n	80016e8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800165e:	a201      	add	r2, pc, #4	@ (adr r2, 8001664 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001664:	08001687 	.word	0x08001687
 8001668:	080016a5 	.word	0x080016a5
 800166c:	080016c7 	.word	0x080016c7
 8001670:	080016e9 	.word	0x080016e9
 8001674:	08001679 	.word	0x08001679
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001678:	4b1f      	ldr	r3, [pc, #124]	@ (80016f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a1e      	ldr	r2, [pc, #120]	@ (80016f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800167e:	f043 0304 	orr.w	r3, r3, #4
 8001682:	6013      	str	r3, [r2, #0]
      break;
 8001684:	e031      	b.n	80016ea <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001686:	4b1c      	ldr	r3, [pc, #112]	@ (80016f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a1b      	ldr	r2, [pc, #108]	@ (80016f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800168c:	f023 0304 	bic.w	r3, r3, #4
 8001690:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001692:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001694:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001698:	4a18      	ldr	r2, [pc, #96]	@ (80016fc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800169a:	f023 030c 	bic.w	r3, r3, #12
 800169e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80016a2:	e022      	b.n	80016ea <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80016a4:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a13      	ldr	r2, [pc, #76]	@ (80016f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016aa:	f023 0304 	bic.w	r3, r3, #4
 80016ae:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80016b0:	4b12      	ldr	r3, [pc, #72]	@ (80016fc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80016b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80016b6:	f023 030c 	bic.w	r3, r3, #12
 80016ba:	4a10      	ldr	r2, [pc, #64]	@ (80016fc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80016c4:	e011      	b.n	80016ea <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80016c6:	4b0c      	ldr	r3, [pc, #48]	@ (80016f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a0b      	ldr	r2, [pc, #44]	@ (80016f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016cc:	f023 0304 	bic.w	r3, r3, #4
 80016d0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80016d2:	4b0a      	ldr	r3, [pc, #40]	@ (80016fc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80016d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80016d8:	f023 030c 	bic.w	r3, r3, #12
 80016dc:	4a07      	ldr	r2, [pc, #28]	@ (80016fc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80016de:	f043 0308 	orr.w	r3, r3, #8
 80016e2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80016e6:	e000      	b.n	80016ea <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80016e8:	bf00      	nop
  }
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000e010 	.word	0xe000e010
 80016fc:	44020c00 	.word	0x44020c00

08001700 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001700:	b480      	push	{r7}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800170e:	e136      	b.n	800197e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	2101      	movs	r1, #1
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	4013      	ands	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 8128 	beq.w	8001978 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x38>
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b12      	cmp	r3, #18
 8001736:	d125      	bne.n	8001784 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	08da      	lsrs	r2, r3, #3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3208      	adds	r2, #8
 8001740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001744:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	220f      	movs	r2, #15
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	4013      	ands	r3, r2
 800175a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	f003 020f 	and.w	r2, r3, #15
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	4313      	orrs	r3, r2
 8001774:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	08da      	lsrs	r2, r3, #3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3208      	adds	r2, #8
 800177e:	6979      	ldr	r1, [r7, #20]
 8001780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	2203      	movs	r2, #3
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	4013      	ands	r3, r2
 800179a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 0203 	and.w	r2, r3, #3
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d00b      	beq.n	80017d8 <HAL_GPIO_Init+0xd8>
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d007      	beq.n	80017d8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017cc:	2b11      	cmp	r3, #17
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b12      	cmp	r3, #18
 80017d6:	d130      	bne.n	800183a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2203      	movs	r2, #3
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	4013      	ands	r3, r2
 80017ee:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	4313      	orrs	r3, r2
 8001800:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800180e:	2201      	movs	r2, #1
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	4013      	ands	r3, r2
 800181c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	091b      	lsrs	r3, r3, #4
 8001824:	f003 0201 	and.w	r2, r3, #1
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	4313      	orrs	r3, r2
 8001832:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b03      	cmp	r3, #3
 8001840:	d017      	beq.n	8001872 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	2203      	movs	r2, #3
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	4013      	ands	r3, r2
 8001858:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	4313      	orrs	r3, r2
 800186a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d07c      	beq.n	8001978 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800187e:	4a47      	ldr	r2, [pc, #284]	@ (800199c <HAL_GPIO_Init+0x29c>)
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	089b      	lsrs	r3, r3, #2
 8001884:	3318      	adds	r3, #24
 8001886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	220f      	movs	r2, #15
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	4013      	ands	r3, r2
 80018a0:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	0a9a      	lsrs	r2, r3, #10
 80018a6:	4b3e      	ldr	r3, [pc, #248]	@ (80019a0 <HAL_GPIO_Init+0x2a0>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	f002 0203 	and.w	r2, r2, #3
 80018b0:	00d2      	lsls	r2, r2, #3
 80018b2:	4093      	lsls	r3, r2
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80018ba:	4938      	ldr	r1, [pc, #224]	@ (800199c <HAL_GPIO_Init+0x29c>)
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	089b      	lsrs	r3, r3, #2
 80018c0:	3318      	adds	r3, #24
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80018c8:	4b34      	ldr	r3, [pc, #208]	@ (800199c <HAL_GPIO_Init+0x29c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	4013      	ands	r3, r2
 80018d6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80018ec:	4a2b      	ldr	r2, [pc, #172]	@ (800199c <HAL_GPIO_Init+0x29c>)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80018f2:	4b2a      	ldr	r3, [pc, #168]	@ (800199c <HAL_GPIO_Init+0x29c>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	4013      	ands	r3, r2
 8001900:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4313      	orrs	r3, r2
 8001914:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001916:	4a21      	ldr	r2, [pc, #132]	@ (800199c <HAL_GPIO_Init+0x29c>)
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800191c:	4b1f      	ldr	r3, [pc, #124]	@ (800199c <HAL_GPIO_Init+0x29c>)
 800191e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001922:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	43db      	mvns	r3, r3
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	4013      	ands	r3, r2
 800192c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4313      	orrs	r3, r2
 8001940:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001942:	4a16      	ldr	r2, [pc, #88]	@ (800199c <HAL_GPIO_Init+0x29c>)
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800194a:	4b14      	ldr	r3, [pc, #80]	@ (800199c <HAL_GPIO_Init+0x29c>)
 800194c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001950:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	43db      	mvns	r3, r3
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	4013      	ands	r3, r2
 800195a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4313      	orrs	r3, r2
 800196e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001970:	4a0a      	ldr	r2, [pc, #40]	@ (800199c <HAL_GPIO_Init+0x29c>)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	3301      	adds	r3, #1
 800197c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	fa22 f303 	lsr.w	r3, r2, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	f47f aec1 	bne.w	8001710 <HAL_GPIO_Init+0x10>
  }
}
 800198e:	bf00      	nop
 8001990:	bf00      	nop
 8001992:	371c      	adds	r7, #28
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	44022000 	.word	0x44022000
 80019a0:	002f7f7f 	.word	0x002f7f7f

080019a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	807b      	strh	r3, [r7, #2]
 80019b0:	4613      	mov	r3, r2
 80019b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019b4:	787b      	ldrb	r3, [r7, #1]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019ba:	887a      	ldrh	r2, [r7, #2]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019c0:	e002      	b.n	80019c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019c2:	887a      	ldrh	r2, [r7, #2]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019e6:	887a      	ldrh	r2, [r7, #2]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4013      	ands	r3, r2
 80019ec:	041a      	lsls	r2, r3, #16
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	43d9      	mvns	r1, r3
 80019f2:	887b      	ldrh	r3, [r7, #2]
 80019f4:	400b      	ands	r3, r1
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	619a      	str	r2, [r3, #24]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001a12:	4b0f      	ldr	r3, [pc, #60]	@ (8001a50 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d006      	beq.n	8001a2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001a1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001a50 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001a24:	88fb      	ldrh	r3, [r7, #6]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fa34 	bl	8000e94 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001a2c:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001a2e:	691a      	ldr	r2, [r3, #16]
 8001a30:	88fb      	ldrh	r3, [r7, #6]
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d006      	beq.n	8001a46 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001a38:	4a05      	ldr	r2, [pc, #20]	@ (8001a50 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 f807 	bl	8001a54 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	44022000 	.word	0x44022000

08001a54 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001a78:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d002      	beq.n	8001a8a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
 8001a88:	e007      	b.n	8001a9a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001a8a:	4b07      	ldr	r3, [pc, #28]	@ (8001aa8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 0204 	bic.w	r2, r3, #4
 8001a92:	4905      	ldr	r1, [pc, #20]	@ (8001aa8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	40030400 	.word	0x40030400

08001aac <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001ab0:	4b05      	ldr	r3, [pc, #20]	@ (8001ac8 <HAL_ICACHE_Enable+0x1c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a04      	ldr	r2, [pc, #16]	@ (8001ac8 <HAL_ICACHE_Enable+0x1c>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	40030400 	.word	0x40030400

08001acc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d102      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	f000 bc28 	b.w	8002330 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ae0:	4b94      	ldr	r3, [pc, #592]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	f003 0318 	and.w	r3, r3, #24
 8001ae8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001aea:	4b92      	ldr	r3, [pc, #584]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d05b      	beq.n	8001bb8 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	d005      	beq.n	8001b12 <HAL_RCC_OscConfig+0x46>
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	2b18      	cmp	r3, #24
 8001b0a:	d114      	bne.n	8001b36 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d111      	bne.n	8001b36 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d102      	bne.n	8001b20 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	f000 bc08 	b.w	8002330 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001b20:	4b84      	ldr	r3, [pc, #528]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	041b      	lsls	r3, r3, #16
 8001b2e:	4981      	ldr	r1, [pc, #516]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001b34:	e040      	b.n	8001bb8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d023      	beq.n	8001b86 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b3e:	4b7d      	ldr	r3, [pc, #500]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a7c      	ldr	r2, [pc, #496]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001b44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4a:	f7ff fc95 	bl	8001478 <HAL_GetTick>
 8001b4e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001b52:	f7ff fc91 	bl	8001478 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e3e5      	b.n	8002330 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001b64:	4b73      	ldr	r3, [pc, #460]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0f0      	beq.n	8001b52 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001b70:	4b70      	ldr	r3, [pc, #448]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	041b      	lsls	r3, r3, #16
 8001b7e:	496d      	ldr	r1, [pc, #436]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	618b      	str	r3, [r1, #24]
 8001b84:	e018      	b.n	8001bb8 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b86:	4b6b      	ldr	r3, [pc, #428]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a6a      	ldr	r2, [pc, #424]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001b8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b92:	f7ff fc71 	bl	8001478 <HAL_GetTick>
 8001b96:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001b9a:	f7ff fc6d 	bl	8001478 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e3c1      	b.n	8002330 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001bac:	4b61      	ldr	r3, [pc, #388]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f0      	bne.n	8001b9a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 80a0 	beq.w	8001d06 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	2b10      	cmp	r3, #16
 8001bca:	d005      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x10c>
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	2b18      	cmp	r3, #24
 8001bd0:	d109      	bne.n	8001be6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d106      	bne.n	8001be6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f040 8092 	bne.w	8001d06 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e3a4      	b.n	8002330 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bee:	d106      	bne.n	8001bfe <HAL_RCC_OscConfig+0x132>
 8001bf0:	4b50      	ldr	r3, [pc, #320]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a4f      	ldr	r2, [pc, #316]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001bf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	e058      	b.n	8001cb0 <HAL_RCC_OscConfig+0x1e4>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d112      	bne.n	8001c2c <HAL_RCC_OscConfig+0x160>
 8001c06:	4b4b      	ldr	r3, [pc, #300]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a4a      	ldr	r2, [pc, #296]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001c0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	4b48      	ldr	r3, [pc, #288]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a47      	ldr	r2, [pc, #284]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001c18:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	4b45      	ldr	r3, [pc, #276]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a44      	ldr	r2, [pc, #272]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001c24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	e041      	b.n	8001cb0 <HAL_RCC_OscConfig+0x1e4>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c34:	d112      	bne.n	8001c5c <HAL_RCC_OscConfig+0x190>
 8001c36:	4b3f      	ldr	r3, [pc, #252]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a3e      	ldr	r2, [pc, #248]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001c3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	4b3c      	ldr	r3, [pc, #240]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a3b      	ldr	r2, [pc, #236]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001c48:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	4b39      	ldr	r3, [pc, #228]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a38      	ldr	r2, [pc, #224]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	e029      	b.n	8001cb0 <HAL_RCC_OscConfig+0x1e4>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001c64:	d112      	bne.n	8001c8c <HAL_RCC_OscConfig+0x1c0>
 8001c66:	4b33      	ldr	r3, [pc, #204]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a32      	ldr	r2, [pc, #200]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001c6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4b30      	ldr	r3, [pc, #192]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a2f      	ldr	r2, [pc, #188]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001c78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a2c      	ldr	r2, [pc, #176]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001c84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e011      	b.n	8001cb0 <HAL_RCC_OscConfig+0x1e4>
 8001c8c:	4b29      	ldr	r3, [pc, #164]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a28      	ldr	r2, [pc, #160]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001c92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	4b26      	ldr	r3, [pc, #152]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a25      	ldr	r2, [pc, #148]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001c9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	4b23      	ldr	r3, [pc, #140]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a22      	ldr	r2, [pc, #136]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001caa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d013      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fbde 	bl	8001478 <HAL_GetTick>
 8001cbc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001cc0:	f7ff fbda 	bl	8001478 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	@ 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e32e      	b.n	8002330 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cd2:	4b18      	ldr	r3, [pc, #96]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x1f4>
 8001cde:	e012      	b.n	8001d06 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fbca 	bl	8001478 <HAL_GetTick>
 8001ce4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fbc6 	bl	8001478 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	@ 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e31a      	b.n	8002330 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <HAL_RCC_OscConfig+0x268>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 809a 	beq.w	8001e48 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d005      	beq.n	8001d26 <HAL_RCC_OscConfig+0x25a>
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	2b18      	cmp	r3, #24
 8001d1e:	d149      	bne.n	8001db4 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d146      	bne.n	8001db4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d104      	bne.n	8001d38 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e2fe      	b.n	8002330 <HAL_RCC_OscConfig+0x864>
 8001d32:	bf00      	nop
 8001d34:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d11c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001d3e:	4b9a      	ldr	r3, [pc, #616]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0218 	and.w	r2, r3, #24
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d014      	beq.n	8001d78 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001d4e:	4b96      	ldr	r3, [pc, #600]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f023 0218 	bic.w	r2, r3, #24
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	4993      	ldr	r1, [pc, #588]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001d60:	f000 fdd0 	bl	8002904 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d64:	4b91      	ldr	r3, [pc, #580]	@ (8001fac <HAL_RCC_OscConfig+0x4e0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff f95b 	bl	8001024 <HAL_InitTick>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e2db      	b.n	8002330 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7ff fb7e 	bl	8001478 <HAL_GetTick>
 8001d7c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001d80:	f7ff fb7a 	bl	8001478 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e2ce      	b.n	8002330 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d92:	4b85      	ldr	r3, [pc, #532]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001d9e:	4b82      	ldr	r3, [pc, #520]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	041b      	lsls	r3, r3, #16
 8001dac:	497e      	ldr	r1, [pc, #504]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001db2:	e049      	b.n	8001e48 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d02c      	beq.n	8001e16 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001dbc:	4b7a      	ldr	r3, [pc, #488]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f023 0218 	bic.w	r2, r3, #24
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	4977      	ldr	r1, [pc, #476]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001dce:	4b76      	ldr	r3, [pc, #472]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a75      	ldr	r2, [pc, #468]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dda:	f7ff fb4d 	bl	8001478 <HAL_GetTick>
 8001dde:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001de2:	f7ff fb49 	bl	8001478 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e29d      	b.n	8002330 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001df4:	4b6c      	ldr	r3, [pc, #432]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001e00:	4b69      	ldr	r3, [pc, #420]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	041b      	lsls	r3, r3, #16
 8001e0e:	4966      	ldr	r1, [pc, #408]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	610b      	str	r3, [r1, #16]
 8001e14:	e018      	b.n	8001e48 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e16:	4b64      	ldr	r3, [pc, #400]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a63      	ldr	r2, [pc, #396]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001e1c:	f023 0301 	bic.w	r3, r3, #1
 8001e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e22:	f7ff fb29 	bl	8001478 <HAL_GetTick>
 8001e26:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001e2a:	f7ff fb25 	bl	8001478 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e279      	b.n	8002330 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e3c:	4b5a      	ldr	r3, [pc, #360]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f0      	bne.n	8001e2a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d03c      	beq.n	8001ece <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d01c      	beq.n	8001e96 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5c:	4b52      	ldr	r3, [pc, #328]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001e5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e62:	4a51      	ldr	r2, [pc, #324]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001e64:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001e68:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6c:	f7ff fb04 	bl	8001478 <HAL_GetTick>
 8001e70:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001e74:	f7ff fb00 	bl	8001478 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e254      	b.n	8002330 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001e86:	4b48      	ldr	r3, [pc, #288]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0ef      	beq.n	8001e74 <HAL_RCC_OscConfig+0x3a8>
 8001e94:	e01b      	b.n	8001ece <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e96:	4b44      	ldr	r3, [pc, #272]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e9c:	4a42      	ldr	r2, [pc, #264]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001e9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001ea2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea6:	f7ff fae7 	bl	8001478 <HAL_GetTick>
 8001eaa:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001eae:	f7ff fae3 	bl	8001478 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e237      	b.n	8002330 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001ec0:	4b39      	ldr	r3, [pc, #228]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001ec2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ec6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1ef      	bne.n	8001eae <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 80d2 	beq.w	8002080 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001edc:	4b34      	ldr	r3, [pc, #208]	@ (8001fb0 <HAL_RCC_OscConfig+0x4e4>)
 8001ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d118      	bne.n	8001f1a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001ee8:	4b31      	ldr	r3, [pc, #196]	@ (8001fb0 <HAL_RCC_OscConfig+0x4e4>)
 8001eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eec:	4a30      	ldr	r2, [pc, #192]	@ (8001fb0 <HAL_RCC_OscConfig+0x4e4>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef4:	f7ff fac0 	bl	8001478 <HAL_GetTick>
 8001ef8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efc:	f7ff fabc 	bl	8001478 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e210      	b.n	8002330 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001f0e:	4b28      	ldr	r3, [pc, #160]	@ (8001fb0 <HAL_RCC_OscConfig+0x4e4>)
 8001f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f0      	beq.n	8001efc <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d108      	bne.n	8001f34 <HAL_RCC_OscConfig+0x468>
 8001f22:	4b21      	ldr	r3, [pc, #132]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f28:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f32:	e074      	b.n	800201e <HAL_RCC_OscConfig+0x552>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d118      	bne.n	8001f6e <HAL_RCC_OscConfig+0x4a2>
 8001f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001f3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f42:	4a19      	ldr	r2, [pc, #100]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001f44:	f023 0301 	bic.w	r3, r3, #1
 8001f48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f4c:	4b16      	ldr	r3, [pc, #88]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001f4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f52:	4a15      	ldr	r2, [pc, #84]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001f54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f58:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f5c:	4b12      	ldr	r3, [pc, #72]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001f5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f62:	4a11      	ldr	r2, [pc, #68]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001f64:	f023 0304 	bic.w	r3, r3, #4
 8001f68:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f6c:	e057      	b.n	800201e <HAL_RCC_OscConfig+0x552>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b05      	cmp	r3, #5
 8001f74:	d11e      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x4e8>
 8001f76:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001f78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001f7e:	f043 0304 	orr.w	r3, r3, #4
 8001f82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f86:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001f88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f8c:	4a06      	ldr	r2, [pc, #24]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001f8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f96:	4b04      	ldr	r3, [pc, #16]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f9c:	4a02      	ldr	r2, [pc, #8]	@ (8001fa8 <HAL_RCC_OscConfig+0x4dc>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001fa6:	e03a      	b.n	800201e <HAL_RCC_OscConfig+0x552>
 8001fa8:	44020c00 	.word	0x44020c00
 8001fac:	20000004 	.word	0x20000004
 8001fb0:	44020800 	.word	0x44020800
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b85      	cmp	r3, #133	@ 0x85
 8001fba:	d118      	bne.n	8001fee <HAL_RCC_OscConfig+0x522>
 8001fbc:	4ba2      	ldr	r3, [pc, #648]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 8001fbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fc2:	4aa1      	ldr	r2, [pc, #644]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 8001fc4:	f043 0304 	orr.w	r3, r3, #4
 8001fc8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001fcc:	4b9e      	ldr	r3, [pc, #632]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 8001fce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fd2:	4a9d      	ldr	r2, [pc, #628]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 8001fd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fd8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001fdc:	4b9a      	ldr	r3, [pc, #616]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 8001fde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fe2:	4a99      	ldr	r2, [pc, #612]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001fec:	e017      	b.n	800201e <HAL_RCC_OscConfig+0x552>
 8001fee:	4b96      	ldr	r3, [pc, #600]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 8001ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ff4:	4a94      	ldr	r2, [pc, #592]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 8001ff6:	f023 0301 	bic.w	r3, r3, #1
 8001ffa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ffe:	4b92      	ldr	r3, [pc, #584]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 8002000:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002004:	4a90      	ldr	r2, [pc, #576]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 8002006:	f023 0304 	bic.w	r3, r3, #4
 800200a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800200e:	4b8e      	ldr	r3, [pc, #568]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 8002010:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002014:	4a8c      	ldr	r2, [pc, #560]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 8002016:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800201a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d016      	beq.n	8002054 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002026:	f7ff fa27 	bl	8001478 <HAL_GetTick>
 800202a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800202c:	e00a      	b.n	8002044 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202e:	f7ff fa23 	bl	8001478 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f241 3288 	movw	r2, #5000	@ 0x1388
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e175      	b.n	8002330 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002044:	4b80      	ldr	r3, [pc, #512]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 8002046:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0ed      	beq.n	800202e <HAL_RCC_OscConfig+0x562>
 8002052:	e015      	b.n	8002080 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002054:	f7ff fa10 	bl	8001478 <HAL_GetTick>
 8002058:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800205a:	e00a      	b.n	8002072 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205c:	f7ff fa0c 	bl	8001478 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e15e      	b.n	8002330 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002072:	4b75      	ldr	r3, [pc, #468]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 8002074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1ed      	bne.n	800205c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0320 	and.w	r3, r3, #32
 8002088:	2b00      	cmp	r3, #0
 800208a:	d036      	beq.n	80020fa <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002090:	2b00      	cmp	r3, #0
 8002092:	d019      	beq.n	80020c8 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002094:	4b6c      	ldr	r3, [pc, #432]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a6b      	ldr	r2, [pc, #428]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 800209a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800209e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a0:	f7ff f9ea 	bl	8001478 <HAL_GetTick>
 80020a4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80020a8:	f7ff f9e6 	bl	8001478 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e13a      	b.n	8002330 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80020ba:	4b63      	ldr	r3, [pc, #396]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0x5dc>
 80020c6:	e018      	b.n	80020fa <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020c8:	4b5f      	ldr	r3, [pc, #380]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a5e      	ldr	r2, [pc, #376]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 80020ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d4:	f7ff f9d0 	bl	8001478 <HAL_GetTick>
 80020d8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80020dc:	f7ff f9cc 	bl	8001478 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e120      	b.n	8002330 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80020ee:	4b56      	ldr	r3, [pc, #344]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 8115 	beq.w	800232e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	2b18      	cmp	r3, #24
 8002108:	f000 80af 	beq.w	800226a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002110:	2b02      	cmp	r3, #2
 8002112:	f040 8086 	bne.w	8002222 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002116:	4b4c      	ldr	r3, [pc, #304]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a4b      	ldr	r2, [pc, #300]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 800211c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002122:	f7ff f9a9 	bl	8001478 <HAL_GetTick>
 8002126:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800212a:	f7ff f9a5 	bl	8001478 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e0f9      	b.n	8002330 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800213c:	4b42      	ldr	r3, [pc, #264]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f0      	bne.n	800212a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002148:	4b3f      	ldr	r3, [pc, #252]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 800214a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002150:	f023 0303 	bic.w	r3, r3, #3
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800215c:	0212      	lsls	r2, r2, #8
 800215e:	430a      	orrs	r2, r1
 8002160:	4939      	ldr	r1, [pc, #228]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 8002162:	4313      	orrs	r3, r2
 8002164:	628b      	str	r3, [r1, #40]	@ 0x28
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800216a:	3b01      	subs	r3, #1
 800216c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002174:	3b01      	subs	r3, #1
 8002176:	025b      	lsls	r3, r3, #9
 8002178:	b29b      	uxth	r3, r3
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002180:	3b01      	subs	r3, #1
 8002182:	041b      	lsls	r3, r3, #16
 8002184:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002188:	431a      	orrs	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	3b01      	subs	r3, #1
 8002190:	061b      	lsls	r3, r3, #24
 8002192:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002196:	492c      	ldr	r1, [pc, #176]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 8002198:	4313      	orrs	r3, r2
 800219a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800219c:	4b2a      	ldr	r3, [pc, #168]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 800219e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a0:	4a29      	ldr	r2, [pc, #164]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 80021a2:	f023 0310 	bic.w	r3, r3, #16
 80021a6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ac:	4a26      	ldr	r2, [pc, #152]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80021b2:	4b25      	ldr	r3, [pc, #148]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 80021b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b6:	4a24      	ldr	r2, [pc, #144]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 80021b8:	f043 0310 	orr.w	r3, r3, #16
 80021bc:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80021be:	4b22      	ldr	r3, [pc, #136]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 80021c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c2:	f023 020c 	bic.w	r2, r3, #12
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ca:	491f      	ldr	r1, [pc, #124]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80021d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 80021d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d4:	f023 0220 	bic.w	r2, r3, #32
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021dc:	491a      	ldr	r1, [pc, #104]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80021e2:	4b19      	ldr	r3, [pc, #100]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 80021e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e6:	4a18      	ldr	r2, [pc, #96]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ec:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80021ee:	4b16      	ldr	r3, [pc, #88]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a15      	ldr	r2, [pc, #84]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 80021f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fa:	f7ff f93d 	bl	8001478 <HAL_GetTick>
 80021fe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002202:	f7ff f939 	bl	8001478 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e08d      	b.n	8002330 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002214:	4b0c      	ldr	r3, [pc, #48]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0f0      	beq.n	8002202 <HAL_RCC_OscConfig+0x736>
 8002220:	e085      	b.n	800232e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002222:	4b09      	ldr	r3, [pc, #36]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a08      	ldr	r2, [pc, #32]	@ (8002248 <HAL_RCC_OscConfig+0x77c>)
 8002228:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800222c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222e:	f7ff f923 	bl	8001478 <HAL_GetTick>
 8002232:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002234:	e00a      	b.n	800224c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002236:	f7ff f91f 	bl	8001478 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d903      	bls.n	800224c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e073      	b.n	8002330 <HAL_RCC_OscConfig+0x864>
 8002248:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800224c:	4b3a      	ldr	r3, [pc, #232]	@ (8002338 <HAL_RCC_OscConfig+0x86c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1ee      	bne.n	8002236 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002258:	4b37      	ldr	r3, [pc, #220]	@ (8002338 <HAL_RCC_OscConfig+0x86c>)
 800225a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225c:	4a36      	ldr	r2, [pc, #216]	@ (8002338 <HAL_RCC_OscConfig+0x86c>)
 800225e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002262:	f023 0303 	bic.w	r3, r3, #3
 8002266:	6293      	str	r3, [r2, #40]	@ 0x28
 8002268:	e061      	b.n	800232e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800226a:	4b33      	ldr	r3, [pc, #204]	@ (8002338 <HAL_RCC_OscConfig+0x86c>)
 800226c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002270:	4b31      	ldr	r3, [pc, #196]	@ (8002338 <HAL_RCC_OscConfig+0x86c>)
 8002272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002274:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227a:	2b01      	cmp	r3, #1
 800227c:	d031      	beq.n	80022e2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	f003 0203 	and.w	r2, r3, #3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002288:	429a      	cmp	r2, r3
 800228a:	d12a      	bne.n	80022e2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	0a1b      	lsrs	r3, r3, #8
 8002290:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002298:	429a      	cmp	r2, r3
 800229a:	d122      	bne.n	80022e2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022a6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d11a      	bne.n	80022e2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	0a5b      	lsrs	r3, r3, #9
 80022b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022b8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d111      	bne.n	80022e2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	0c1b      	lsrs	r3, r3, #16
 80022c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ca:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d108      	bne.n	80022e2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	0e1b      	lsrs	r3, r3, #24
 80022d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022dc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80022de:	429a      	cmp	r2, r3
 80022e0:	d001      	beq.n	80022e6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e024      	b.n	8002330 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80022e6:	4b14      	ldr	r3, [pc, #80]	@ (8002338 <HAL_RCC_OscConfig+0x86c>)
 80022e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ea:	08db      	lsrs	r3, r3, #3
 80022ec:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d01a      	beq.n	800232e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80022f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002338 <HAL_RCC_OscConfig+0x86c>)
 80022fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fc:	4a0e      	ldr	r2, [pc, #56]	@ (8002338 <HAL_RCC_OscConfig+0x86c>)
 80022fe:	f023 0310 	bic.w	r3, r3, #16
 8002302:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002304:	f7ff f8b8 	bl	8001478 <HAL_GetTick>
 8002308:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800230a:	bf00      	nop
 800230c:	f7ff f8b4 	bl	8001478 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	4293      	cmp	r3, r2
 8002316:	d0f9      	beq.n	800230c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231c:	4a06      	ldr	r2, [pc, #24]	@ (8002338 <HAL_RCC_OscConfig+0x86c>)
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002322:	4b05      	ldr	r3, [pc, #20]	@ (8002338 <HAL_RCC_OscConfig+0x86c>)
 8002324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002326:	4a04      	ldr	r2, [pc, #16]	@ (8002338 <HAL_RCC_OscConfig+0x86c>)
 8002328:	f043 0310 	orr.w	r3, r3, #16
 800232c:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3720      	adds	r7, #32
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	44020c00 	.word	0x44020c00

0800233c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e19e      	b.n	800268e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002350:	4b83      	ldr	r3, [pc, #524]	@ (8002560 <HAL_RCC_ClockConfig+0x224>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d910      	bls.n	8002380 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235e:	4b80      	ldr	r3, [pc, #512]	@ (8002560 <HAL_RCC_ClockConfig+0x224>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 020f 	bic.w	r2, r3, #15
 8002366:	497e      	ldr	r1, [pc, #504]	@ (8002560 <HAL_RCC_ClockConfig+0x224>)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236e:	4b7c      	ldr	r3, [pc, #496]	@ (8002560 <HAL_RCC_ClockConfig+0x224>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e186      	b.n	800268e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b00      	cmp	r3, #0
 800238a:	d012      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	695a      	ldr	r2, [r3, #20]
 8002390:	4b74      	ldr	r3, [pc, #464]	@ (8002564 <HAL_RCC_ClockConfig+0x228>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800239a:	429a      	cmp	r2, r3
 800239c:	d909      	bls.n	80023b2 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800239e:	4b71      	ldr	r3, [pc, #452]	@ (8002564 <HAL_RCC_ClockConfig+0x228>)
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	021b      	lsls	r3, r3, #8
 80023ac:	496d      	ldr	r1, [pc, #436]	@ (8002564 <HAL_RCC_ClockConfig+0x228>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d012      	beq.n	80023e4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691a      	ldr	r2, [r3, #16]
 80023c2:	4b68      	ldr	r3, [pc, #416]	@ (8002564 <HAL_RCC_ClockConfig+0x228>)
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	091b      	lsrs	r3, r3, #4
 80023c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d909      	bls.n	80023e4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80023d0:	4b64      	ldr	r3, [pc, #400]	@ (8002564 <HAL_RCC_ClockConfig+0x228>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	4961      	ldr	r1, [pc, #388]	@ (8002564 <HAL_RCC_ClockConfig+0x228>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d010      	beq.n	8002412 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	4b5b      	ldr	r3, [pc, #364]	@ (8002564 <HAL_RCC_ClockConfig+0x228>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d908      	bls.n	8002412 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002400:	4b58      	ldr	r3, [pc, #352]	@ (8002564 <HAL_RCC_ClockConfig+0x228>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4955      	ldr	r1, [pc, #340]	@ (8002564 <HAL_RCC_ClockConfig+0x228>)
 800240e:	4313      	orrs	r3, r2
 8002410:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d010      	beq.n	8002440 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	4b50      	ldr	r3, [pc, #320]	@ (8002564 <HAL_RCC_ClockConfig+0x228>)
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	429a      	cmp	r2, r3
 800242c:	d908      	bls.n	8002440 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800242e:	4b4d      	ldr	r3, [pc, #308]	@ (8002564 <HAL_RCC_ClockConfig+0x228>)
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	f023 020f 	bic.w	r2, r3, #15
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	494a      	ldr	r1, [pc, #296]	@ (8002564 <HAL_RCC_ClockConfig+0x228>)
 800243c:	4313      	orrs	r3, r2
 800243e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 8093 	beq.w	8002574 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b03      	cmp	r3, #3
 8002454:	d107      	bne.n	8002466 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002456:	4b43      	ldr	r3, [pc, #268]	@ (8002564 <HAL_RCC_ClockConfig+0x228>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d121      	bne.n	80024a6 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e113      	b.n	800268e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d107      	bne.n	800247e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800246e:	4b3d      	ldr	r3, [pc, #244]	@ (8002564 <HAL_RCC_ClockConfig+0x228>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d115      	bne.n	80024a6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e107      	b.n	800268e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d107      	bne.n	8002496 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002486:	4b37      	ldr	r3, [pc, #220]	@ (8002564 <HAL_RCC_ClockConfig+0x228>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800248e:	2b00      	cmp	r3, #0
 8002490:	d109      	bne.n	80024a6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e0fb      	b.n	800268e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002496:	4b33      	ldr	r3, [pc, #204]	@ (8002564 <HAL_RCC_ClockConfig+0x228>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e0f3      	b.n	800268e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80024a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002564 <HAL_RCC_ClockConfig+0x228>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f023 0203 	bic.w	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	492c      	ldr	r1, [pc, #176]	@ (8002564 <HAL_RCC_ClockConfig+0x228>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b8:	f7fe ffde 	bl	8001478 <HAL_GetTick>
 80024bc:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d112      	bne.n	80024ec <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024c6:	e00a      	b.n	80024de <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80024c8:	f7fe ffd6 	bl	8001478 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e0d7      	b.n	800268e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024de:	4b21      	ldr	r3, [pc, #132]	@ (8002564 <HAL_RCC_ClockConfig+0x228>)
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f003 0318 	and.w	r3, r3, #24
 80024e6:	2b18      	cmp	r3, #24
 80024e8:	d1ee      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x18c>
 80024ea:	e043      	b.n	8002574 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d112      	bne.n	800251a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024f4:	e00a      	b.n	800250c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80024f6:	f7fe ffbf 	bl	8001478 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002504:	4293      	cmp	r3, r2
 8002506:	d901      	bls.n	800250c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e0c0      	b.n	800268e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800250c:	4b15      	ldr	r3, [pc, #84]	@ (8002564 <HAL_RCC_ClockConfig+0x228>)
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	f003 0318 	and.w	r3, r3, #24
 8002514:	2b10      	cmp	r3, #16
 8002516:	d1ee      	bne.n	80024f6 <HAL_RCC_ClockConfig+0x1ba>
 8002518:	e02c      	b.n	8002574 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d122      	bne.n	8002568 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002522:	e00a      	b.n	800253a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002524:	f7fe ffa8 	bl	8001478 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e0a9      	b.n	800268e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800253a:	4b0a      	ldr	r3, [pc, #40]	@ (8002564 <HAL_RCC_ClockConfig+0x228>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f003 0318 	and.w	r3, r3, #24
 8002542:	2b08      	cmp	r3, #8
 8002544:	d1ee      	bne.n	8002524 <HAL_RCC_ClockConfig+0x1e8>
 8002546:	e015      	b.n	8002574 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002548:	f7fe ff96 	bl	8001478 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002556:	4293      	cmp	r3, r2
 8002558:	d906      	bls.n	8002568 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e097      	b.n	800268e <HAL_RCC_ClockConfig+0x352>
 800255e:	bf00      	nop
 8002560:	40022000 	.word	0x40022000
 8002564:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002568:	4b4b      	ldr	r3, [pc, #300]	@ (8002698 <HAL_RCC_ClockConfig+0x35c>)
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	f003 0318 	and.w	r3, r3, #24
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1e9      	bne.n	8002548 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d010      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	4b44      	ldr	r3, [pc, #272]	@ (8002698 <HAL_RCC_ClockConfig+0x35c>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	f003 030f 	and.w	r3, r3, #15
 800258c:	429a      	cmp	r2, r3
 800258e:	d208      	bcs.n	80025a2 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002590:	4b41      	ldr	r3, [pc, #260]	@ (8002698 <HAL_RCC_ClockConfig+0x35c>)
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	f023 020f 	bic.w	r2, r3, #15
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	493e      	ldr	r1, [pc, #248]	@ (8002698 <HAL_RCC_ClockConfig+0x35c>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025a2:	4b3e      	ldr	r3, [pc, #248]	@ (800269c <HAL_RCC_ClockConfig+0x360>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d210      	bcs.n	80025d2 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b0:	4b3a      	ldr	r3, [pc, #232]	@ (800269c <HAL_RCC_ClockConfig+0x360>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f023 020f 	bic.w	r2, r3, #15
 80025b8:	4938      	ldr	r1, [pc, #224]	@ (800269c <HAL_RCC_ClockConfig+0x360>)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	4313      	orrs	r3, r2
 80025be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c0:	4b36      	ldr	r3, [pc, #216]	@ (800269c <HAL_RCC_ClockConfig+0x360>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e05d      	b.n	800268e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d010      	beq.n	8002600 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002698 <HAL_RCC_ClockConfig+0x35c>)
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d208      	bcs.n	8002600 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80025ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002698 <HAL_RCC_ClockConfig+0x35c>)
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	4927      	ldr	r1, [pc, #156]	@ (8002698 <HAL_RCC_ClockConfig+0x35c>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b00      	cmp	r3, #0
 800260a:	d012      	beq.n	8002632 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	4b21      	ldr	r3, [pc, #132]	@ (8002698 <HAL_RCC_ClockConfig+0x35c>)
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800261a:	429a      	cmp	r2, r3
 800261c:	d209      	bcs.n	8002632 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800261e:	4b1e      	ldr	r3, [pc, #120]	@ (8002698 <HAL_RCC_ClockConfig+0x35c>)
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	491a      	ldr	r1, [pc, #104]	@ (8002698 <HAL_RCC_ClockConfig+0x35c>)
 800262e:	4313      	orrs	r3, r2
 8002630:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0310 	and.w	r3, r3, #16
 800263a:	2b00      	cmp	r3, #0
 800263c:	d012      	beq.n	8002664 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695a      	ldr	r2, [r3, #20]
 8002642:	4b15      	ldr	r3, [pc, #84]	@ (8002698 <HAL_RCC_ClockConfig+0x35c>)
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	0a1b      	lsrs	r3, r3, #8
 8002648:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800264c:	429a      	cmp	r2, r3
 800264e:	d209      	bcs.n	8002664 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002650:	4b11      	ldr	r3, [pc, #68]	@ (8002698 <HAL_RCC_ClockConfig+0x35c>)
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	490e      	ldr	r1, [pc, #56]	@ (8002698 <HAL_RCC_ClockConfig+0x35c>)
 8002660:	4313      	orrs	r3, r2
 8002662:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002664:	f000 f822 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 8002668:	4602      	mov	r2, r0
 800266a:	4b0b      	ldr	r3, [pc, #44]	@ (8002698 <HAL_RCC_ClockConfig+0x35c>)
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	490b      	ldr	r1, [pc, #44]	@ (80026a0 <HAL_RCC_ClockConfig+0x364>)
 8002674:	5ccb      	ldrb	r3, [r1, r3]
 8002676:	fa22 f303 	lsr.w	r3, r2, r3
 800267a:	4a0a      	ldr	r2, [pc, #40]	@ (80026a4 <HAL_RCC_ClockConfig+0x368>)
 800267c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800267e:	4b0a      	ldr	r3, [pc, #40]	@ (80026a8 <HAL_RCC_ClockConfig+0x36c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe fcce 	bl	8001024 <HAL_InitTick>
 8002688:	4603      	mov	r3, r0
 800268a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800268c:	7afb      	ldrb	r3, [r7, #11]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	44020c00 	.word	0x44020c00
 800269c:	40022000 	.word	0x40022000
 80026a0:	0800b77c 	.word	0x0800b77c
 80026a4:	20000000 	.word	0x20000000
 80026a8:	20000004 	.word	0x20000004

080026ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b089      	sub	sp, #36	@ 0x24
 80026b0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80026b2:	4b8c      	ldr	r3, [pc, #560]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x238>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f003 0318 	and.w	r3, r3, #24
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d102      	bne.n	80026c4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80026be:	4b8a      	ldr	r3, [pc, #552]	@ (80028e8 <HAL_RCC_GetSysClockFreq+0x23c>)
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	e107      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026c4:	4b87      	ldr	r3, [pc, #540]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x238>)
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	f003 0318 	and.w	r3, r3, #24
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d112      	bne.n	80026f6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80026d0:	4b84      	ldr	r3, [pc, #528]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x238>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0320 	and.w	r3, r3, #32
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d009      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80026dc:	4b81      	ldr	r3, [pc, #516]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x238>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	08db      	lsrs	r3, r3, #3
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	4a81      	ldr	r2, [pc, #516]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x240>)
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
 80026ec:	61fb      	str	r3, [r7, #28]
 80026ee:	e0f1      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80026f0:	4b7e      	ldr	r3, [pc, #504]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x240>)
 80026f2:	61fb      	str	r3, [r7, #28]
 80026f4:	e0ee      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026f6:	4b7b      	ldr	r3, [pc, #492]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x238>)
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	f003 0318 	and.w	r3, r3, #24
 80026fe:	2b10      	cmp	r3, #16
 8002700:	d102      	bne.n	8002708 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002702:	4b7b      	ldr	r3, [pc, #492]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x244>)
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	e0e5      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002708:	4b76      	ldr	r3, [pc, #472]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x238>)
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	f003 0318 	and.w	r3, r3, #24
 8002710:	2b18      	cmp	r3, #24
 8002712:	f040 80dd 	bne.w	80028d0 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002716:	4b73      	ldr	r3, [pc, #460]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002720:	4b70      	ldr	r3, [pc, #448]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002724:	0a1b      	lsrs	r3, r3, #8
 8002726:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800272a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800272c:	4b6d      	ldr	r3, [pc, #436]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x238>)
 800272e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002738:	4b6a      	ldr	r3, [pc, #424]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x238>)
 800273a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800273c:	08db      	lsrs	r3, r3, #3
 800273e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	fb02 f303 	mul.w	r3, r2, r3
 8002748:	ee07 3a90 	vmov	s15, r3
 800274c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002750:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 80b7 	beq.w	80028ca <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d003      	beq.n	800276a <HAL_RCC_GetSysClockFreq+0xbe>
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2b03      	cmp	r3, #3
 8002766:	d056      	beq.n	8002816 <HAL_RCC_GetSysClockFreq+0x16a>
 8002768:	e077      	b.n	800285a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800276a:	4b5e      	ldr	r3, [pc, #376]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x238>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b00      	cmp	r3, #0
 8002774:	d02d      	beq.n	80027d2 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002776:	4b5b      	ldr	r3, [pc, #364]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	08db      	lsrs	r3, r3, #3
 800277c:	f003 0303 	and.w	r3, r3, #3
 8002780:	4a5a      	ldr	r2, [pc, #360]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x240>)
 8002782:	fa22 f303 	lsr.w	r3, r2, r3
 8002786:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	ee07 3a90 	vmov	s15, r3
 800278e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	ee07 3a90 	vmov	s15, r3
 8002798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800279c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027a0:	4b50      	ldr	r3, [pc, #320]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x238>)
 80027a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a8:	ee07 3a90 	vmov	s15, r3
 80027ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80027b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80027b4:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80028f4 <HAL_RCC_GetSysClockFreq+0x248>
 80027b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80027c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027cc:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80027d0:	e065      	b.n	800289e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	ee07 3a90 	vmov	s15, r3
 80027d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027dc:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80028f8 <HAL_RCC_GetSysClockFreq+0x24c>
 80027e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027e4:	4b3f      	ldr	r3, [pc, #252]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x238>)
 80027e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ec:	ee07 3a90 	vmov	s15, r3
 80027f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80027f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80027f8:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80028f4 <HAL_RCC_GetSysClockFreq+0x248>
 80027fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002800:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002804:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002808:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800280c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002810:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002814:	e043      	b.n	800289e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	ee07 3a90 	vmov	s15, r3
 800281c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002820:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80028fc <HAL_RCC_GetSysClockFreq+0x250>
 8002824:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002828:	4b2e      	ldr	r3, [pc, #184]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x238>)
 800282a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800282c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002830:	ee07 3a90 	vmov	s15, r3
 8002834:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002838:	ed97 6a02 	vldr	s12, [r7, #8]
 800283c:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80028f4 <HAL_RCC_GetSysClockFreq+0x248>
 8002840:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002844:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002848:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800284c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002854:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002858:	e021      	b.n	800289e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	ee07 3a90 	vmov	s15, r3
 8002860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002864:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002900 <HAL_RCC_GetSysClockFreq+0x254>
 8002868:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800286c:	4b1d      	ldr	r3, [pc, #116]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x238>)
 800286e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002874:	ee07 3a90 	vmov	s15, r3
 8002878:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800287c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002880:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80028f4 <HAL_RCC_GetSysClockFreq+0x248>
 8002884:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002888:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800288c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002890:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002898:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800289c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800289e:	4b11      	ldr	r3, [pc, #68]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x238>)
 80028a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028a2:	0a5b      	lsrs	r3, r3, #9
 80028a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028a8:	3301      	adds	r3, #1
 80028aa:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	ee07 3a90 	vmov	s15, r3
 80028b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028b6:	edd7 6a06 	vldr	s13, [r7, #24]
 80028ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028c2:	ee17 3a90 	vmov	r3, s15
 80028c6:	61fb      	str	r3, [r7, #28]
 80028c8:	e004      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	e001      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80028d0:	4b06      	ldr	r3, [pc, #24]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x240>)
 80028d2:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80028d4:	69fb      	ldr	r3, [r7, #28]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3724      	adds	r7, #36	@ 0x24
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	44020c00 	.word	0x44020c00
 80028e8:	003d0900 	.word	0x003d0900
 80028ec:	03d09000 	.word	0x03d09000
 80028f0:	007a1200 	.word	0x007a1200
 80028f4:	46000000 	.word	0x46000000
 80028f8:	4c742400 	.word	0x4c742400
 80028fc:	4af42400 	.word	0x4af42400
 8002900:	4a742400 	.word	0x4a742400

08002904 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002908:	f7ff fed0 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 800290c:	4602      	mov	r2, r0
 800290e:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002910:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002912:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002916:	4907      	ldr	r1, [pc, #28]	@ (8002934 <HAL_RCC_GetHCLKFreq+0x30>)
 8002918:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800291a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800291e:	fa22 f303 	lsr.w	r3, r2, r3
 8002922:	4a05      	ldr	r2, [pc, #20]	@ (8002938 <HAL_RCC_GetHCLKFreq+0x34>)
 8002924:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002926:	4b04      	ldr	r3, [pc, #16]	@ (8002938 <HAL_RCC_GetHCLKFreq+0x34>)
 8002928:	681b      	ldr	r3, [r3, #0]
}
 800292a:	4618      	mov	r0, r3
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	44020c00 	.word	0x44020c00
 8002934:	0800b77c 	.word	0x0800b77c
 8002938:	20000000 	.word	0x20000000

0800293c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002940:	f7ff ffe0 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 8002944:	4602      	mov	r2, r0
 8002946:	4b06      	ldr	r3, [pc, #24]	@ (8002960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	091b      	lsrs	r3, r3, #4
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	4904      	ldr	r1, [pc, #16]	@ (8002964 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002952:	5ccb      	ldrb	r3, [r1, r3]
 8002954:	f003 031f 	and.w	r3, r3, #31
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800295c:	4618      	mov	r0, r3
 800295e:	bd80      	pop	{r7, pc}
 8002960:	44020c00 	.word	0x44020c00
 8002964:	0800b78c 	.word	0x0800b78c

08002968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 800296c:	f7ff ffca 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 8002970:	4602      	mov	r2, r0
 8002972:	4b06      	ldr	r3, [pc, #24]	@ (800298c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	4904      	ldr	r1, [pc, #16]	@ (8002990 <HAL_RCC_GetPCLK2Freq+0x28>)
 800297e:	5ccb      	ldrb	r3, [r1, r3]
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002988:	4618      	mov	r0, r3
 800298a:	bd80      	pop	{r7, pc}
 800298c:	44020c00 	.word	0x44020c00
 8002990:	0800b78c 	.word	0x0800b78c

08002994 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002998:	f7ff ffb4 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 800299c:	4602      	mov	r2, r0
 800299e:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <HAL_RCC_GetPCLK3Freq+0x24>)
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	0b1b      	lsrs	r3, r3, #12
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	4904      	ldr	r1, [pc, #16]	@ (80029bc <HAL_RCC_GetPCLK3Freq+0x28>)
 80029aa:	5ccb      	ldrb	r3, [r1, r3]
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	44020c00 	.word	0x44020c00
 80029bc:	0800b78c 	.word	0x0800b78c

080029c0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	221f      	movs	r2, #31
 80029ce:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80029d0:	4b15      	ldr	r3, [pc, #84]	@ (8002a28 <HAL_RCC_GetClockConfig+0x68>)
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	f003 0203 	and.w	r2, r3, #3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 80029dc:	4b12      	ldr	r3, [pc, #72]	@ (8002a28 <HAL_RCC_GetClockConfig+0x68>)
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f003 020f 	and.w	r2, r3, #15
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	0a1b      	lsrs	r3, r3, #8
 8002a06:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a0e:	4b07      	ldr	r3, [pc, #28]	@ (8002a2c <HAL_RCC_GetClockConfig+0x6c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 020f 	and.w	r2, r3, #15
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	601a      	str	r2, [r3, #0]
}
 8002a1a:	bf00      	nop
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	44020c00 	.word	0x44020c00
 8002a2c:	40022000 	.word	0x40022000

08002a30 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a34:	b0d8      	sub	sp, #352	@ 0x160
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a42:	2300      	movs	r3, #0
 8002a44:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002a48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a50:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8002a54:	2500      	movs	r5, #0
 8002a56:	ea54 0305 	orrs.w	r3, r4, r5
 8002a5a:	d00b      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002a5c:	4bcd      	ldr	r3, [pc, #820]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002a5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a62:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8002a66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a6c:	4ac9      	ldr	r2, [pc, #804]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002a6e:	430b      	orrs	r3, r1
 8002a70:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7c:	f002 0801 	and.w	r8, r2, #1
 8002a80:	f04f 0900 	mov.w	r9, #0
 8002a84:	ea58 0309 	orrs.w	r3, r8, r9
 8002a88:	d042      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002a8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a90:	2b05      	cmp	r3, #5
 8002a92:	d823      	bhi.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xac>
 8002a94:	a201      	add	r2, pc, #4	@ (adr r2, 8002a9c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9a:	bf00      	nop
 8002a9c:	08002ae5 	.word	0x08002ae5
 8002aa0:	08002ab5 	.word	0x08002ab5
 8002aa4:	08002ac9 	.word	0x08002ac9
 8002aa8:	08002ae5 	.word	0x08002ae5
 8002aac:	08002ae5 	.word	0x08002ae5
 8002ab0:	08002ae5 	.word	0x08002ae5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002ab4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002ab8:	3308      	adds	r3, #8
 8002aba:	4618      	mov	r0, r3
 8002abc:	f004 feda 	bl	8007874 <RCCEx_PLL2_Config>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8002ac6:	e00e      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002ac8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002acc:	3330      	adds	r3, #48	@ 0x30
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f004 ff68 	bl	80079a4 <RCCEx_PLL3_Config>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8002ada:	e004      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8002ae2:	e000      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8002ae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ae6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10c      	bne.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002aee:	4ba9      	ldr	r3, [pc, #676]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002af0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002af4:	f023 0107 	bic.w	r1, r3, #7
 8002af8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afe:	4aa5      	ldr	r2, [pc, #660]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002b00:	430b      	orrs	r3, r1
 8002b02:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002b06:	e003      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b08:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002b0c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b18:	f002 0a02 	and.w	sl, r2, #2
 8002b1c:	f04f 0b00 	mov.w	fp, #0
 8002b20:	ea5a 030b 	orrs.w	r3, sl, fp
 8002b24:	f000 8088 	beq.w	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002b28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b2e:	2b28      	cmp	r3, #40	@ 0x28
 8002b30:	d868      	bhi.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002b32:	a201      	add	r2, pc, #4	@ (adr r2, 8002b38 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b38:	08002c0d 	.word	0x08002c0d
 8002b3c:	08002c05 	.word	0x08002c05
 8002b40:	08002c05 	.word	0x08002c05
 8002b44:	08002c05 	.word	0x08002c05
 8002b48:	08002c05 	.word	0x08002c05
 8002b4c:	08002c05 	.word	0x08002c05
 8002b50:	08002c05 	.word	0x08002c05
 8002b54:	08002c05 	.word	0x08002c05
 8002b58:	08002bdd 	.word	0x08002bdd
 8002b5c:	08002c05 	.word	0x08002c05
 8002b60:	08002c05 	.word	0x08002c05
 8002b64:	08002c05 	.word	0x08002c05
 8002b68:	08002c05 	.word	0x08002c05
 8002b6c:	08002c05 	.word	0x08002c05
 8002b70:	08002c05 	.word	0x08002c05
 8002b74:	08002c05 	.word	0x08002c05
 8002b78:	08002bf1 	.word	0x08002bf1
 8002b7c:	08002c05 	.word	0x08002c05
 8002b80:	08002c05 	.word	0x08002c05
 8002b84:	08002c05 	.word	0x08002c05
 8002b88:	08002c05 	.word	0x08002c05
 8002b8c:	08002c05 	.word	0x08002c05
 8002b90:	08002c05 	.word	0x08002c05
 8002b94:	08002c05 	.word	0x08002c05
 8002b98:	08002c0d 	.word	0x08002c0d
 8002b9c:	08002c05 	.word	0x08002c05
 8002ba0:	08002c05 	.word	0x08002c05
 8002ba4:	08002c05 	.word	0x08002c05
 8002ba8:	08002c05 	.word	0x08002c05
 8002bac:	08002c05 	.word	0x08002c05
 8002bb0:	08002c05 	.word	0x08002c05
 8002bb4:	08002c05 	.word	0x08002c05
 8002bb8:	08002c0d 	.word	0x08002c0d
 8002bbc:	08002c05 	.word	0x08002c05
 8002bc0:	08002c05 	.word	0x08002c05
 8002bc4:	08002c05 	.word	0x08002c05
 8002bc8:	08002c05 	.word	0x08002c05
 8002bcc:	08002c05 	.word	0x08002c05
 8002bd0:	08002c05 	.word	0x08002c05
 8002bd4:	08002c05 	.word	0x08002c05
 8002bd8:	08002c0d 	.word	0x08002c0d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002bdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002be0:	3308      	adds	r3, #8
 8002be2:	4618      	mov	r0, r3
 8002be4:	f004 fe46 	bl	8007874 <RCCEx_PLL2_Config>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8002bee:	e00e      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002bf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002bf4:	3330      	adds	r3, #48	@ 0x30
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f004 fed4 	bl	80079a4 <RCCEx_PLL3_Config>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8002c02:	e004      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8002c0a:	e000      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8002c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c0e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002c16:	4b5f      	ldr	r3, [pc, #380]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002c18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002c1c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002c20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c26:	4a5b      	ldr	r2, [pc, #364]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002c28:	430b      	orrs	r3, r1
 8002c2a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002c2e:	e003      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c30:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002c34:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c40:	f002 0304 	and.w	r3, r2, #4
 8002c44:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8002c4e:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8002c52:	460b      	mov	r3, r1
 8002c54:	4313      	orrs	r3, r2
 8002c56:	d04e      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002c58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002c5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c5e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002c62:	d02c      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8002c64:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002c68:	d825      	bhi.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002c6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c6e:	d028      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002c70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c74:	d81f      	bhi.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002c76:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c78:	d025      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002c7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c7c:	d81b      	bhi.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002c7e:	2b80      	cmp	r3, #128	@ 0x80
 8002c80:	d00f      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8002c82:	2b80      	cmp	r3, #128	@ 0x80
 8002c84:	d817      	bhi.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d01f      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8002c8a:	2b40      	cmp	r3, #64	@ 0x40
 8002c8c:	d113      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002c8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002c92:	3308      	adds	r3, #8
 8002c94:	4618      	mov	r0, r3
 8002c96:	f004 fded 	bl	8007874 <RCCEx_PLL2_Config>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8002ca0:	e014      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002ca2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002ca6:	3330      	adds	r3, #48	@ 0x30
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f004 fe7b 	bl	80079a4 <RCCEx_PLL3_Config>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8002cb4:	e00a      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8002cbc:	e006      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002cbe:	bf00      	nop
 8002cc0:	e004      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002cc2:	bf00      	nop
 8002cc4:	e002      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002cc6:	bf00      	nop
 8002cc8:	e000      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002cca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ccc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10c      	bne.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002cd4:	4b2f      	ldr	r3, [pc, #188]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002cd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002cda:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002cde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002ce2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ce4:	4a2b      	ldr	r2, [pc, #172]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002ce6:	430b      	orrs	r3, r1
 8002ce8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002cec:	e003      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002cf2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cf6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfe:	f002 0308 	and.w	r3, r2, #8
 8002d02:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002d06:	2300      	movs	r3, #0
 8002d08:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002d0c:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8002d10:	460b      	mov	r3, r1
 8002d12:	4313      	orrs	r3, r2
 8002d14:	d056      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8002d16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002d1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d1c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002d20:	d031      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002d22:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002d26:	d82a      	bhi.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002d28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d2c:	d02d      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002d2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d32:	d824      	bhi.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002d34:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002d38:	d029      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8002d3a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002d3e:	d81e      	bhi.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002d40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d44:	d011      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002d46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d4a:	d818      	bhi.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d023      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d54:	d113      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002d56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002d5a:	3308      	adds	r3, #8
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f004 fd89 	bl	8007874 <RCCEx_PLL2_Config>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8002d68:	e017      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002d6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002d6e:	3330      	adds	r3, #48	@ 0x30
 8002d70:	4618      	mov	r0, r3
 8002d72:	f004 fe17 	bl	80079a4 <RCCEx_PLL3_Config>
 8002d76:	4603      	mov	r3, r0
 8002d78:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8002d7c:	e00d      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8002d84:	e009      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002d86:	bf00      	nop
 8002d88:	e007      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002d8a:	bf00      	nop
 8002d8c:	e005      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002d8e:	bf00      	nop
 8002d90:	e003      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002d92:	bf00      	nop
 8002d94:	44020c00 	.word	0x44020c00
        break;
 8002d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002da2:	4bbb      	ldr	r3, [pc, #748]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002da4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002da8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8002dac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002db0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002db2:	4ab7      	ldr	r2, [pc, #732]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002db4:	430b      	orrs	r3, r1
 8002db6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002dba:	e003      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dbc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002dc0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dcc:	f002 0310 	and.w	r3, r2, #16
 8002dd0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8002dda:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8002dde:	460b      	mov	r3, r1
 8002de0:	4313      	orrs	r3, r2
 8002de2:	d053      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8002de4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002de8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dea:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002dee:	d031      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002df0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002df4:	d82a      	bhi.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002df6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002dfa:	d02d      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8002dfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e00:	d824      	bhi.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002e02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e06:	d029      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002e08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e0c:	d81e      	bhi.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002e0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e12:	d011      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002e14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e18:	d818      	bhi.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d020      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8002e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e22:	d113      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002e28:	3308      	adds	r3, #8
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f004 fd22 	bl	8007874 <RCCEx_PLL2_Config>
 8002e30:	4603      	mov	r3, r0
 8002e32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8002e36:	e014      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002e3c:	3330      	adds	r3, #48	@ 0x30
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f004 fdb0 	bl	80079a4 <RCCEx_PLL3_Config>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8002e4a:	e00a      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8002e52:	e006      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002e54:	bf00      	nop
 8002e56:	e004      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002e58:	bf00      	nop
 8002e5a:	e002      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002e5c:	bf00      	nop
 8002e5e:	e000      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e62:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10c      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002e6a:	4b89      	ldr	r3, [pc, #548]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002e6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002e70:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002e74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002e78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e7a:	4a85      	ldr	r2, [pc, #532]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002e82:	e003      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e84:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002e88:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	f002 0320 	and.w	r3, r2, #32
 8002e98:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002ea2:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	d053      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8002eac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8002eb6:	d031      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8002eb8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8002ebc:	d82a      	bhi.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002ebe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ec2:	d02d      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002ec4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ec8:	d824      	bhi.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002eca:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8002ece:	d029      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8002ed0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8002ed4:	d81e      	bhi.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002ed6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eda:	d011      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002edc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee0:	d818      	bhi.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d020      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8002ee6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002eea:	d113      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002eec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002ef0:	3308      	adds	r3, #8
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f004 fcbe 	bl	8007874 <RCCEx_PLL2_Config>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8002efe:	e014      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f04:	3330      	adds	r3, #48	@ 0x30
 8002f06:	4618      	mov	r0, r3
 8002f08:	f004 fd4c 	bl	80079a4 <RCCEx_PLL3_Config>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8002f12:	e00a      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8002f1a:	e006      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002f1c:	bf00      	nop
 8002f1e:	e004      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002f20:	bf00      	nop
 8002f22:	e002      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002f24:	bf00      	nop
 8002f26:	e000      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f2a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8002f32:	4b57      	ldr	r3, [pc, #348]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002f34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002f38:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8002f3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f42:	4a53      	ldr	r2, [pc, #332]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002f44:	430b      	orrs	r3, r1
 8002f46:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002f4a:	e003      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f4c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002f50:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002f54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002f60:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002f64:	2300      	movs	r3, #0
 8002f66:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002f6a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4313      	orrs	r3, r2
 8002f72:	d053      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8002f74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f7a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002f7e:	d031      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8002f80:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002f84:	d82a      	bhi.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002f86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f8a:	d02d      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8002f8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f90:	d824      	bhi.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002f92:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f96:	d029      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002f98:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f9c:	d81e      	bhi.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002f9e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002fa2:	d011      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8002fa4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002fa8:	d818      	bhi.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d020      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002fae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002fb2:	d113      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002fb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002fb8:	3308      	adds	r3, #8
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f004 fc5a 	bl	8007874 <RCCEx_PLL2_Config>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8002fc6:	e014      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002fc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002fcc:	3330      	adds	r3, #48	@ 0x30
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f004 fce8 	bl	80079a4 <RCCEx_PLL3_Config>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8002fda:	e00a      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8002fe2:	e006      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002fe4:	bf00      	nop
 8002fe6:	e004      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002fe8:	bf00      	nop
 8002fea:	e002      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002fec:	bf00      	nop
 8002fee:	e000      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ff2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10c      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8002ffa:	4b25      	ldr	r3, [pc, #148]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002ffc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003000:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8003004:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800300a:	4a21      	ldr	r2, [pc, #132]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800300c:	430b      	orrs	r3, r1
 800300e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003012:	e003      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003014:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003018:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800301c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003024:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003028:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800302c:	2300      	movs	r3, #0
 800302e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003032:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8003036:	460b      	mov	r3, r1
 8003038:	4313      	orrs	r3, r2
 800303a:	d055      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 800303c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003040:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003042:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003046:	d033      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8003048:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800304c:	d82c      	bhi.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800304e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003052:	d02f      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003054:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003058:	d826      	bhi.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800305a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800305e:	d02b      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8003060:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003064:	d820      	bhi.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003066:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800306a:	d013      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800306c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003070:	d81a      	bhi.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003072:	2b00      	cmp	r3, #0
 8003074:	d022      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8003076:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800307a:	d115      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800307c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003080:	3308      	adds	r3, #8
 8003082:	4618      	mov	r0, r3
 8003084:	f004 fbf6 	bl	8007874 <RCCEx_PLL2_Config>
 8003088:	4603      	mov	r3, r0
 800308a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800308e:	e016      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003090:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003094:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003098:	3330      	adds	r3, #48	@ 0x30
 800309a:	4618      	mov	r0, r3
 800309c:	f004 fc82 	bl	80079a4 <RCCEx_PLL3_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80030a6:	e00a      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80030ae:	e006      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80030b0:	bf00      	nop
 80030b2:	e004      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80030b4:	bf00      	nop
 80030b6:	e002      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80030b8:	bf00      	nop
 80030ba:	e000      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80030bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10c      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80030c6:	4bbb      	ldr	r3, [pc, #748]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80030c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80030cc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80030d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030d6:	4ab7      	ldr	r2, [pc, #732]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80030d8:	430b      	orrs	r3, r1
 80030da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80030de:	e003      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80030e4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80030e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80030f4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80030f8:	2300      	movs	r3, #0
 80030fa:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80030fe:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8003102:	460b      	mov	r3, r1
 8003104:	4313      	orrs	r3, r2
 8003106:	d053      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8003108:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800310c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800310e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003112:	d031      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003114:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003118:	d82a      	bhi.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800311a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800311e:	d02d      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003120:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003124:	d824      	bhi.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003126:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800312a:	d029      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x750>
 800312c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003130:	d81e      	bhi.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003132:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003136:	d011      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8003138:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800313c:	d818      	bhi.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800313e:	2b00      	cmp	r3, #0
 8003140:	d020      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8003142:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003146:	d113      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003148:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800314c:	3308      	adds	r3, #8
 800314e:	4618      	mov	r0, r3
 8003150:	f004 fb90 	bl	8007874 <RCCEx_PLL2_Config>
 8003154:	4603      	mov	r3, r0
 8003156:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800315a:	e014      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800315c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003160:	3330      	adds	r3, #48	@ 0x30
 8003162:	4618      	mov	r0, r3
 8003164:	f004 fc1e 	bl	80079a4 <RCCEx_PLL3_Config>
 8003168:	4603      	mov	r3, r0
 800316a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800316e:	e00a      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003176:	e006      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003178:	bf00      	nop
 800317a:	e004      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800317c:	bf00      	nop
 800317e:	e002      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003180:	bf00      	nop
 8003182:	e000      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003186:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10c      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800318e:	4b89      	ldr	r3, [pc, #548]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003190:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003194:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003198:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800319c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800319e:	4a85      	ldr	r2, [pc, #532]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80031a0:	430b      	orrs	r3, r1
 80031a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80031a6:	e003      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80031ac:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80031b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80031b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b8:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80031bc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80031c0:	2300      	movs	r3, #0
 80031c2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80031c6:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80031ca:	460b      	mov	r3, r1
 80031cc:	4313      	orrs	r3, r2
 80031ce:	d055      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80031d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80031d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031d8:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80031dc:	d031      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x812>
 80031de:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80031e2:	d82a      	bhi.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80031e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031e8:	d02d      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80031ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031ee:	d824      	bhi.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80031f0:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80031f4:	d029      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80031f6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80031fa:	d81e      	bhi.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80031fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003200:	d011      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8003202:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003206:	d818      	bhi.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003208:	2b00      	cmp	r3, #0
 800320a:	d020      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800320c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003210:	d113      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003212:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003216:	3308      	adds	r3, #8
 8003218:	4618      	mov	r0, r3
 800321a:	f004 fb2b 	bl	8007874 <RCCEx_PLL2_Config>
 800321e:	4603      	mov	r3, r0
 8003220:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003224:	e014      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003226:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800322a:	3330      	adds	r3, #48	@ 0x30
 800322c:	4618      	mov	r0, r3
 800322e:	f004 fbb9 	bl	80079a4 <RCCEx_PLL3_Config>
 8003232:	4603      	mov	r3, r0
 8003234:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003238:	e00a      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003240:	e006      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003242:	bf00      	nop
 8003244:	e004      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003246:	bf00      	nop
 8003248:	e002      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800324a:	bf00      	nop
 800324c:	e000      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800324e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003250:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10d      	bne.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8003258:	4b56      	ldr	r3, [pc, #344]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800325a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800325e:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8003262:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800326a:	4a52      	ldr	r2, [pc, #328]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800326c:	430b      	orrs	r3, r1
 800326e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003272:	e003      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003274:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003278:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800327c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003284:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003288:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800328c:	2300      	movs	r3, #0
 800328e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003292:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003296:	460b      	mov	r3, r1
 8003298:	4313      	orrs	r3, r2
 800329a:	d044      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 800329c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032a4:	2b05      	cmp	r3, #5
 80032a6:	d823      	bhi.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80032a8:	a201      	add	r2, pc, #4	@ (adr r2, 80032b0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80032aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ae:	bf00      	nop
 80032b0:	080032f9 	.word	0x080032f9
 80032b4:	080032c9 	.word	0x080032c9
 80032b8:	080032dd 	.word	0x080032dd
 80032bc:	080032f9 	.word	0x080032f9
 80032c0:	080032f9 	.word	0x080032f9
 80032c4:	080032f9 	.word	0x080032f9
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032cc:	3308      	adds	r3, #8
 80032ce:	4618      	mov	r0, r3
 80032d0:	f004 fad0 	bl	8007874 <RCCEx_PLL2_Config>
 80032d4:	4603      	mov	r3, r0
 80032d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80032da:	e00e      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80032dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032e0:	3330      	adds	r3, #48	@ 0x30
 80032e2:	4618      	mov	r0, r3
 80032e4:	f004 fb5e 	bl	80079a4 <RCCEx_PLL3_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80032ee:	e004      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80032f6:	e000      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 80032f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10d      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8003302:	4b2c      	ldr	r3, [pc, #176]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003304:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003308:	f023 0107 	bic.w	r1, r3, #7
 800330c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003310:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003314:	4a27      	ldr	r2, [pc, #156]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003316:	430b      	orrs	r3, r1
 8003318:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800331c:	e003      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003322:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8003326:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800332a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003332:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003336:	2300      	movs	r3, #0
 8003338:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800333c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003340:	460b      	mov	r3, r1
 8003342:	4313      	orrs	r3, r2
 8003344:	d04f      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8003346:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800334a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800334e:	2b50      	cmp	r3, #80	@ 0x50
 8003350:	d029      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003352:	2b50      	cmp	r3, #80	@ 0x50
 8003354:	d823      	bhi.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003356:	2b40      	cmp	r3, #64	@ 0x40
 8003358:	d027      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800335a:	2b40      	cmp	r3, #64	@ 0x40
 800335c:	d81f      	bhi.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800335e:	2b30      	cmp	r3, #48	@ 0x30
 8003360:	d025      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8003362:	2b30      	cmp	r3, #48	@ 0x30
 8003364:	d81b      	bhi.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003366:	2b20      	cmp	r3, #32
 8003368:	d00f      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800336a:	2b20      	cmp	r3, #32
 800336c:	d817      	bhi.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800336e:	2b00      	cmp	r3, #0
 8003370:	d022      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003372:	2b10      	cmp	r3, #16
 8003374:	d113      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003376:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800337a:	3308      	adds	r3, #8
 800337c:	4618      	mov	r0, r3
 800337e:	f004 fa79 	bl	8007874 <RCCEx_PLL2_Config>
 8003382:	4603      	mov	r3, r0
 8003384:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003388:	e017      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800338a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800338e:	3330      	adds	r3, #48	@ 0x30
 8003390:	4618      	mov	r0, r3
 8003392:	f004 fb07 	bl	80079a4 <RCCEx_PLL3_Config>
 8003396:	4603      	mov	r3, r0
 8003398:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800339c:	e00d      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80033a4:	e009      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80033a6:	bf00      	nop
 80033a8:	e007      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80033aa:	bf00      	nop
 80033ac:	e005      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80033ae:	bf00      	nop
 80033b0:	e003      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80033b2:	bf00      	nop
 80033b4:	44020c00 	.word	0x44020c00
        break;
 80033b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10d      	bne.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80033c2:	4baf      	ldr	r3, [pc, #700]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80033c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80033c8:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80033cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d4:	4aaa      	ldr	r2, [pc, #680]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80033d6:	430b      	orrs	r3, r1
 80033d8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80033dc:	e003      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80033e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ee:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80033f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80033f6:	2300      	movs	r3, #0
 80033f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80033fc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003400:	460b      	mov	r3, r1
 8003402:	4313      	orrs	r3, r2
 8003404:	d055      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003406:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800340a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800340e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003412:	d031      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8003414:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003418:	d82a      	bhi.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800341a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800341e:	d02d      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003420:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003424:	d824      	bhi.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003426:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800342a:	d029      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800342c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003430:	d81e      	bhi.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003432:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003436:	d011      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8003438:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800343c:	d818      	bhi.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800343e:	2b00      	cmp	r3, #0
 8003440:	d020      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8003442:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003446:	d113      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003448:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800344c:	3308      	adds	r3, #8
 800344e:	4618      	mov	r0, r3
 8003450:	f004 fa10 	bl	8007874 <RCCEx_PLL2_Config>
 8003454:	4603      	mov	r3, r0
 8003456:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800345a:	e014      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800345c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003460:	3330      	adds	r3, #48	@ 0x30
 8003462:	4618      	mov	r0, r3
 8003464:	f004 fa9e 	bl	80079a4 <RCCEx_PLL3_Config>
 8003468:	4603      	mov	r3, r0
 800346a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800346e:	e00a      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003476:	e006      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003478:	bf00      	nop
 800347a:	e004      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800347c:	bf00      	nop
 800347e:	e002      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003480:	bf00      	nop
 8003482:	e000      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003484:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003486:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10d      	bne.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800348e:	4b7c      	ldr	r3, [pc, #496]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003494:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003498:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800349c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034a0:	4a77      	ldr	r2, [pc, #476]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80034a2:	430b      	orrs	r3, r1
 80034a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034a8:	e003      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80034ae:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80034be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80034c2:	2300      	movs	r3, #0
 80034c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80034c8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80034cc:	460b      	mov	r3, r1
 80034ce:	4313      	orrs	r3, r2
 80034d0:	d03d      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80034d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80034de:	d01b      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 80034e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80034e4:	d814      	bhi.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80034e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034ea:	d017      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80034ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034f0:	d80e      	bhi.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d014      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 80034f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034fa:	d109      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80034fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003500:	3330      	adds	r3, #48	@ 0x30
 8003502:	4618      	mov	r0, r3
 8003504:	f004 fa4e 	bl	80079a4 <RCCEx_PLL3_Config>
 8003508:	4603      	mov	r3, r0
 800350a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800350e:	e008      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003516:	e004      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003518:	bf00      	nop
 800351a:	e002      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800351c:	bf00      	nop
 800351e:	e000      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003520:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003522:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10d      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800352a:	4b55      	ldr	r3, [pc, #340]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800352c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003530:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003534:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800353c:	4a50      	ldr	r2, [pc, #320]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800353e:	430b      	orrs	r3, r1
 8003540:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003544:	e003      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003546:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800354a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800354e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003556:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800355a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800355e:	2300      	movs	r3, #0
 8003560:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003564:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003568:	460b      	mov	r3, r1
 800356a:	4313      	orrs	r3, r2
 800356c:	d03d      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800356e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003572:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003576:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800357a:	d01b      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 800357c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003580:	d814      	bhi.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003582:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003586:	d017      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8003588:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800358c:	d80e      	bhi.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800358e:	2b00      	cmp	r3, #0
 8003590:	d014      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8003592:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003596:	d109      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003598:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800359c:	3330      	adds	r3, #48	@ 0x30
 800359e:	4618      	mov	r0, r3
 80035a0:	f004 fa00 	bl	80079a4 <RCCEx_PLL3_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80035aa:	e008      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80035b2:	e004      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80035b4:	bf00      	nop
 80035b6:	e002      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80035b8:	bf00      	nop
 80035ba:	e000      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80035bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10d      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80035c6:	4b2e      	ldr	r3, [pc, #184]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80035c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80035cc:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80035d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035d8:	4a29      	ldr	r2, [pc, #164]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80035da:	430b      	orrs	r3, r1
 80035dc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80035e0:	e003      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80035e6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80035f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80035fa:	2300      	movs	r3, #0
 80035fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003600:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003604:	460b      	mov	r3, r1
 8003606:	4313      	orrs	r3, r2
 8003608:	d040      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800360a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800360e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003612:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003616:	d01b      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003618:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800361c:	d814      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800361e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003622:	d017      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003624:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003628:	d80e      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800362a:	2b00      	cmp	r3, #0
 800362c:	d014      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800362e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003632:	d109      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003634:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003638:	3330      	adds	r3, #48	@ 0x30
 800363a:	4618      	mov	r0, r3
 800363c:	f004 f9b2 	bl	80079a4 <RCCEx_PLL3_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003646:	e008      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800364e:	e004      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003650:	bf00      	nop
 8003652:	e002      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003654:	bf00      	nop
 8003656:	e000      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800365a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800365e:	2b00      	cmp	r3, #0
 8003660:	d110      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003662:	4b07      	ldr	r3, [pc, #28]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003664:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003668:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800366c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003670:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003674:	4a02      	ldr	r2, [pc, #8]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003676:	430b      	orrs	r3, r1
 8003678:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800367c:	e006      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800367e:	bf00      	nop
 8003680:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003684:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003688:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800368c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003694:	2100      	movs	r1, #0
 8003696:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800369a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800369e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80036a2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4313      	orrs	r3, r2
 80036aa:	d03d      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80036ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80036b4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036b8:	d01b      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80036ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036be:	d814      	bhi.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80036c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036c4:	d017      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80036c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036ca:	d80e      	bhi.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d014      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xcca>
 80036d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036d4:	d109      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80036d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036da:	3330      	adds	r3, #48	@ 0x30
 80036dc:	4618      	mov	r0, r3
 80036de:	f004 f961 	bl	80079a4 <RCCEx_PLL3_Config>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 80036e8:	e008      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80036f0:	e004      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80036f2:	bf00      	nop
 80036f4:	e002      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80036f6:	bf00      	nop
 80036f8:	e000      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80036fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10d      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003704:	4bbe      	ldr	r3, [pc, #760]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003706:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800370a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800370e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003712:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003716:	4aba      	ldr	r2, [pc, #744]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003718:	430b      	orrs	r3, r1
 800371a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800371e:	e003      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003720:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003724:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003728:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800372c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003730:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003734:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003738:	2300      	movs	r3, #0
 800373a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800373e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003742:	460b      	mov	r3, r1
 8003744:	4313      	orrs	r3, r2
 8003746:	d035      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003748:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800374c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003750:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003754:	d015      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8003756:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800375a:	d80e      	bhi.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800375c:	2b00      	cmp	r3, #0
 800375e:	d012      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003760:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003764:	d109      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003766:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800376a:	3330      	adds	r3, #48	@ 0x30
 800376c:	4618      	mov	r0, r3
 800376e:	f004 f919 	bl	80079a4 <RCCEx_PLL3_Config>
 8003772:	4603      	mov	r3, r0
 8003774:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003778:	e006      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003780:	e002      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003782:	bf00      	nop
 8003784:	e000      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003786:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003788:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10d      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003790:	4b9b      	ldr	r3, [pc, #620]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003792:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003796:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800379a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800379e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80037a2:	4a97      	ldr	r2, [pc, #604]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80037a4:	430b      	orrs	r3, r1
 80037a6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80037aa:	e003      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80037b0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80037b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037bc:	2100      	movs	r1, #0
 80037be:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 80037c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80037ca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4313      	orrs	r3, r2
 80037d2:	d00e      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80037d4:	4b8a      	ldr	r3, [pc, #552]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	4a89      	ldr	r2, [pc, #548]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80037da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80037de:	61d3      	str	r3, [r2, #28]
 80037e0:	4b87      	ldr	r3, [pc, #540]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80037e2:	69d9      	ldr	r1, [r3, #28]
 80037e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037e8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80037ec:	4a84      	ldr	r2, [pc, #528]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80037ee:	430b      	orrs	r3, r1
 80037f0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80037fe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003802:	2300      	movs	r3, #0
 8003804:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003808:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800380c:	460b      	mov	r3, r1
 800380e:	4313      	orrs	r3, r2
 8003810:	d055      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003812:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003816:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800381a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800381e:	d031      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8003820:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003824:	d82a      	bhi.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800382a:	d02d      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800382c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003830:	d824      	bhi.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003832:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003836:	d029      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003838:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800383c:	d81e      	bhi.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800383e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003842:	d011      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8003844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003848:	d818      	bhi.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800384a:	2b00      	cmp	r3, #0
 800384c:	d020      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800384e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003852:	d113      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003854:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003858:	3308      	adds	r3, #8
 800385a:	4618      	mov	r0, r3
 800385c:	f004 f80a 	bl	8007874 <RCCEx_PLL2_Config>
 8003860:	4603      	mov	r3, r0
 8003862:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003866:	e014      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003868:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800386c:	3330      	adds	r3, #48	@ 0x30
 800386e:	4618      	mov	r0, r3
 8003870:	f004 f898 	bl	80079a4 <RCCEx_PLL3_Config>
 8003874:	4603      	mov	r3, r0
 8003876:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800387a:	e00a      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003882:	e006      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003884:	bf00      	nop
 8003886:	e004      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003888:	bf00      	nop
 800388a:	e002      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800388c:	bf00      	nop
 800388e:	e000      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003892:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10d      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800389a:	4b59      	ldr	r3, [pc, #356]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800389c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80038a0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80038a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80038ac:	4a54      	ldr	r2, [pc, #336]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80038ae:	430b      	orrs	r3, r1
 80038b0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80038b4:	e003      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80038ba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80038be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80038ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038ce:	2300      	movs	r3, #0
 80038d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038d4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80038d8:	460b      	mov	r3, r1
 80038da:	4313      	orrs	r3, r2
 80038dc:	d055      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80038de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80038e6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80038ea:	d031      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80038ec:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80038f0:	d82a      	bhi.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80038f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038f6:	d02d      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 80038f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038fc:	d824      	bhi.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80038fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003902:	d029      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8003904:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003908:	d81e      	bhi.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800390a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800390e:	d011      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8003910:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003914:	d818      	bhi.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003916:	2b00      	cmp	r3, #0
 8003918:	d020      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800391a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800391e:	d113      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003920:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003924:	3308      	adds	r3, #8
 8003926:	4618      	mov	r0, r3
 8003928:	f003 ffa4 	bl	8007874 <RCCEx_PLL2_Config>
 800392c:	4603      	mov	r3, r0
 800392e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003932:	e014      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003934:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003938:	3330      	adds	r3, #48	@ 0x30
 800393a:	4618      	mov	r0, r3
 800393c:	f004 f832 	bl	80079a4 <RCCEx_PLL3_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003946:	e00a      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800394e:	e006      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003950:	bf00      	nop
 8003952:	e004      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003954:	bf00      	nop
 8003956:	e002      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003958:	bf00      	nop
 800395a:	e000      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800395c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800395e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10d      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003966:	4b26      	ldr	r3, [pc, #152]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003968:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800396c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003970:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003974:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003978:	4a21      	ldr	r2, [pc, #132]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800397a:	430b      	orrs	r3, r1
 800397c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003980:	e003      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003982:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003986:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800398a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800398e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003992:	2100      	movs	r1, #0
 8003994:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8003998:	f003 0320 	and.w	r3, r3, #32
 800399c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039a4:	460b      	mov	r3, r1
 80039a6:	4313      	orrs	r3, r2
 80039a8:	d057      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 80039aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80039b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039b6:	d033      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 80039b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039bc:	d82c      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80039be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039c2:	d02f      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 80039c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039c8:	d826      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80039ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039ce:	d02b      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 80039d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039d4:	d820      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80039d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039da:	d013      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80039dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039e0:	d81a      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d022      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80039e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039ea:	d115      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039f0:	3308      	adds	r3, #8
 80039f2:	4618      	mov	r0, r3
 80039f4:	f003 ff3e 	bl	8007874 <RCCEx_PLL2_Config>
 80039f8:	4603      	mov	r3, r0
 80039fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80039fe:	e016      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8003a00:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a08:	3330      	adds	r3, #48	@ 0x30
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f003 ffca 	bl	80079a4 <RCCEx_PLL3_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003a16:	e00a      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003a1e:	e006      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003a20:	bf00      	nop
 8003a22:	e004      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003a24:	bf00      	nop
 8003a26:	e002      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003a28:	bf00      	nop
 8003a2a:	e000      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003a2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a2e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10d      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8003a36:	4bbb      	ldr	r3, [pc, #748]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003a38:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003a3c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003a40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a48:	4ab6      	ldr	r2, [pc, #728]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003a4a:	430b      	orrs	r3, r1
 8003a4c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003a50:	e003      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a52:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a56:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8003a5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a62:	2100      	movs	r1, #0
 8003a64:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8003a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003a70:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003a74:	460b      	mov	r3, r1
 8003a76:	4313      	orrs	r3, r2
 8003a78:	d055      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8003a7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a82:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8003a86:	d031      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003a88:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8003a8c:	d82a      	bhi.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003a8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a92:	d02d      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8003a94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a98:	d824      	bhi.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003a9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a9e:	d029      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8003aa0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003aa4:	d81e      	bhi.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003aa6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003aaa:	d011      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8003aac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ab0:	d818      	bhi.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d020      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8003ab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003aba:	d113      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003abc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ac0:	3308      	adds	r3, #8
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f003 fed6 	bl	8007874 <RCCEx_PLL2_Config>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003ace:	e014      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ad0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ad4:	3330      	adds	r3, #48	@ 0x30
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f003 ff64 	bl	80079a4 <RCCEx_PLL3_Config>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003ae2:	e00a      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003aea:	e006      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003aec:	bf00      	nop
 8003aee:	e004      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003af0:	bf00      	nop
 8003af2:	e002      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003af4:	bf00      	nop
 8003af6:	e000      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003af8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003afa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10d      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8003b02:	4b88      	ldr	r3, [pc, #544]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003b04:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003b08:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8003b0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b14:	4a83      	ldr	r2, [pc, #524]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003b16:	430b      	orrs	r3, r1
 8003b18:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003b1c:	e003      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b22:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8003b26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2e:	2100      	movs	r1, #0
 8003b30:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8003b34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b3c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003b40:	460b      	mov	r3, r1
 8003b42:	4313      	orrs	r3, r2
 8003b44:	d055      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8003b46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b4e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003b52:	d031      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8003b54:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003b58:	d82a      	bhi.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003b5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b5e:	d02d      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8003b60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b64:	d824      	bhi.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003b66:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b6a:	d029      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8003b6c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b70:	d81e      	bhi.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003b72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b76:	d011      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8003b78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b7c:	d818      	bhi.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d020      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8003b82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b86:	d113      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b8c:	3308      	adds	r3, #8
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f003 fe70 	bl	8007874 <RCCEx_PLL2_Config>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8003b9a:	e014      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ba0:	3330      	adds	r3, #48	@ 0x30
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f003 fefe 	bl	80079a4 <RCCEx_PLL3_Config>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8003bae:	e00a      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003bb6:	e006      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003bb8:	bf00      	nop
 8003bba:	e004      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003bbc:	bf00      	nop
 8003bbe:	e002      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003bc0:	bf00      	nop
 8003bc2:	e000      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10d      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8003bce:	4b55      	ldr	r3, [pc, #340]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003bd0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003bd4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003bd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bdc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003be0:	4a50      	ldr	r2, [pc, #320]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003be2:	430b      	orrs	r3, r1
 8003be4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003be8:	e003      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003bee:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8003bf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8003c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c08:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	d055      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8003c12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c16:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003c1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c1e:	d031      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8003c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c24:	d82a      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c2a:	d02d      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8003c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c30:	d824      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003c32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c36:	d029      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8003c38:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c3c:	d81e      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003c3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c42:	d011      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8003c44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c48:	d818      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d020      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8003c4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c52:	d113      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c58:	3308      	adds	r3, #8
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f003 fe0a 	bl	8007874 <RCCEx_PLL2_Config>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8003c66:	e014      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c6c:	3330      	adds	r3, #48	@ 0x30
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f003 fe98 	bl	80079a4 <RCCEx_PLL3_Config>
 8003c74:	4603      	mov	r3, r0
 8003c76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8003c7a:	e00a      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003c82:	e006      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003c84:	bf00      	nop
 8003c86:	e004      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003c88:	bf00      	nop
 8003c8a:	e002      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003c8c:	bf00      	nop
 8003c8e:	e000      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003c90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c92:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10d      	bne.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8003c9a:	4b22      	ldr	r3, [pc, #136]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003c9c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003ca0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ca4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ca8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003cac:	4a1d      	ldr	r2, [pc, #116]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003cae:	430b      	orrs	r3, r1
 8003cb0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003cb4:	e003      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003cba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003cbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003cca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003cd4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	d055      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003cde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ce2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003ce6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cea:	d035      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8003cec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cf0:	d82e      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003cf2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cf6:	d031      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8003cf8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cfc:	d828      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003cfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d02:	d01b      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8003d04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d08:	d822      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8003d0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d12:	d009      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8003d14:	e01c      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d16:	4b03      	ldr	r3, [pc, #12]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1a:	4a02      	ldr	r2, [pc, #8]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d20:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d22:	e01c      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8003d24:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f003 fda0 	bl	8007874 <RCCEx_PLL2_Config>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d3a:	e010      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d40:	3330      	adds	r3, #48	@ 0x30
 8003d42:	4618      	mov	r0, r3
 8003d44:	f003 fe2e 	bl	80079a4 <RCCEx_PLL3_Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d4e:	e006      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003d56:	e002      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8003d58:	bf00      	nop
 8003d5a:	e000      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8003d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d5e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10d      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003d66:	4bc3      	ldr	r3, [pc, #780]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003d68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003d6c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003d70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003d78:	4abe      	ldr	r2, [pc, #760]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003d7a:	430b      	orrs	r3, r1
 8003d7c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003d80:	e003      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d82:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d86:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8003d8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d92:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003d96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003da0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003da4:	460b      	mov	r3, r1
 8003da6:	4313      	orrs	r3, r2
 8003da8:	d051      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003daa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003dae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003db2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003db6:	d033      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8003db8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dbc:	d82c      	bhi.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003dbe:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003dc2:	d02d      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8003dc4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003dc8:	d826      	bhi.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003dca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dce:	d019      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8003dd0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dd4:	d820      	bhi.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8003dda:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003dde:	d007      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8003de0:	e01a      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de2:	4ba4      	ldr	r3, [pc, #656]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de6:	4aa3      	ldr	r2, [pc, #652]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003de8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dec:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003dee:	e018      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003df0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003df4:	3308      	adds	r3, #8
 8003df6:	4618      	mov	r0, r3
 8003df8:	f003 fd3c 	bl	8007874 <RCCEx_PLL2_Config>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003e02:	e00e      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e08:	3330      	adds	r3, #48	@ 0x30
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f003 fdca 	bl	80079a4 <RCCEx_PLL3_Config>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003e16:	e004      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003e1e:	e000      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8003e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10d      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003e2a:	4b92      	ldr	r3, [pc, #584]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003e2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e30:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8003e34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e38:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003e3c:	4a8d      	ldr	r2, [pc, #564]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003e3e:	430b      	orrs	r3, r1
 8003e40:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003e44:	e003      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e46:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e4a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003e4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e56:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003e5a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e60:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003e64:	460b      	mov	r3, r1
 8003e66:	4313      	orrs	r3, r2
 8003e68:	d032      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003e6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e6e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003e72:	2b05      	cmp	r3, #5
 8003e74:	d80f      	bhi.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d211      	bcs.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d911      	bls.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d109      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e86:	3308      	adds	r3, #8
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f003 fcf3 	bl	8007874 <RCCEx_PLL2_Config>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003e94:	e006      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003e9c:	e002      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8003e9e:	bf00      	nop
 8003ea0:	e000      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8003ea2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10d      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003eac:	4b71      	ldr	r3, [pc, #452]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003eae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003eb2:	f023 0107 	bic.w	r1, r3, #7
 8003eb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003eba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003ebe:	4a6d      	ldr	r2, [pc, #436]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003ec0:	430b      	orrs	r3, r1
 8003ec2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003ec6:	e003      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ecc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003ed0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed8:	2100      	movs	r1, #0
 8003eda:	6739      	str	r1, [r7, #112]	@ 0x70
 8003edc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ee0:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ee2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	d024      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003eec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ef0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d005      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003f02:	e002      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8003f04:	bf00      	nop
 8003f06:	e000      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8003f08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10d      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8003f12:	4b58      	ldr	r3, [pc, #352]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003f14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003f18:	f023 0108 	bic.w	r1, r3, #8
 8003f1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003f24:	4a53      	ldr	r2, [pc, #332]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003f26:	430b      	orrs	r3, r1
 8003f28:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003f2c:	e003      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f32:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003f42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f44:	2300      	movs	r3, #0
 8003f46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f48:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f000 80b9 	beq.w	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003f54:	4b48      	ldr	r3, [pc, #288]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f58:	4a47      	ldr	r2, [pc, #284]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003f5a:	f043 0301 	orr.w	r3, r3, #1
 8003f5e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f60:	f7fd fa8a 	bl	8001478 <HAL_GetTick>
 8003f64:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003f68:	e00b      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f6a:	f7fd fa85 	bl	8001478 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d903      	bls.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003f80:	e005      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003f82:	4b3d      	ldr	r3, [pc, #244]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0ed      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8003f8e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f040 8093 	bne.w	80040be <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f98:	4b36      	ldr	r3, [pc, #216]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003f9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fa2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003fa6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d023      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8003fae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fb2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8003fb6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d01b      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fbe:	4b2d      	ldr	r3, [pc, #180]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003fc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fc8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fcc:	4b29      	ldr	r3, [pc, #164]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003fce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fd2:	4a28      	ldr	r2, [pc, #160]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fd8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fdc:	4b25      	ldr	r3, [pc, #148]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003fde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fe2:	4a24      	ldr	r2, [pc, #144]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003fe4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fe8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fec:	4a21      	ldr	r2, [pc, #132]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003fee:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003ff2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ff6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d019      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004002:	f7fd fa39 	bl	8001478 <HAL_GetTick>
 8004006:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800400a:	e00d      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800400c:	f7fd fa34 	bl	8001478 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004016:	1ad2      	subs	r2, r2, r3
 8004018:	f241 3388 	movw	r3, #5000	@ 0x1388
 800401c:	429a      	cmp	r2, r3
 800401e:	d903      	bls.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8004026:	e006      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004028:	4b12      	ldr	r3, [pc, #72]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800402a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0ea      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8004036:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800403a:	2b00      	cmp	r3, #0
 800403c:	d13a      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800403e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004042:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8004046:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800404a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800404e:	d115      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8004050:	4b08      	ldr	r3, [pc, #32]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004058:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800405c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8004060:	091b      	lsrs	r3, r3, #4
 8004062:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004066:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800406a:	4a02      	ldr	r2, [pc, #8]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800406c:	430b      	orrs	r3, r1
 800406e:	61d3      	str	r3, [r2, #28]
 8004070:	e00a      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8004072:	bf00      	nop
 8004074:	44020c00 	.word	0x44020c00
 8004078:	44020800 	.word	0x44020800
 800407c:	4b9f      	ldr	r3, [pc, #636]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	4a9e      	ldr	r2, [pc, #632]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004082:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004086:	61d3      	str	r3, [r2, #28]
 8004088:	4b9c      	ldr	r3, [pc, #624]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800408a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800408e:	4a9b      	ldr	r2, [pc, #620]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004090:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004094:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004098:	4b98      	ldr	r3, [pc, #608]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800409a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 800409e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040a2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80040a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040aa:	4a94      	ldr	r2, [pc, #592]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80040ac:	430b      	orrs	r3, r1
 80040ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80040b2:	e008      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040b4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80040b8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 80040bc:	e003      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80040c2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80040c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ce:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80040d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80040d4:	2300      	movs	r3, #0
 80040d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80040d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80040dc:	460b      	mov	r3, r1
 80040de:	4313      	orrs	r3, r2
 80040e0:	d035      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80040e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040e6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80040ea:	2b30      	cmp	r3, #48	@ 0x30
 80040ec:	d014      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80040ee:	2b30      	cmp	r3, #48	@ 0x30
 80040f0:	d80e      	bhi.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80040f2:	2b20      	cmp	r3, #32
 80040f4:	d012      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 80040f6:	2b20      	cmp	r3, #32
 80040f8:	d80a      	bhi.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d010      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 80040fe:	2b10      	cmp	r3, #16
 8004100:	d106      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004102:	4b7e      	ldr	r3, [pc, #504]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004106:	4a7d      	ldr	r2, [pc, #500]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800410c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800410e:	e008      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004116:	e004      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004118:	bf00      	nop
 800411a:	e002      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800411c:	bf00      	nop
 800411e:	e000      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004120:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004122:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10d      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800412a:	4b74      	ldr	r3, [pc, #464]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800412c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004130:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004134:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004138:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800413c:	4a6f      	ldr	r2, [pc, #444]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800413e:	430b      	orrs	r3, r1
 8004140:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004144:	e003      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004146:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800414a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800414e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004156:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800415a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800415c:	2300      	movs	r3, #0
 800415e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004160:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004164:	460b      	mov	r3, r1
 8004166:	4313      	orrs	r3, r2
 8004168:	d033      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800416a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800416e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8004176:	2b40      	cmp	r3, #64	@ 0x40
 8004178:	d007      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800417a:	e010      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800417c:	4b5f      	ldr	r3, [pc, #380]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800417e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004180:	4a5e      	ldr	r2, [pc, #376]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004182:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004186:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004188:	e00d      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800418a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800418e:	3308      	adds	r3, #8
 8004190:	4618      	mov	r0, r3
 8004192:	f003 fb6f 	bl	8007874 <RCCEx_PLL2_Config>
 8004196:	4603      	mov	r3, r0
 8004198:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800419c:	e003      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80041a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10d      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80041ae:	4b53      	ldr	r3, [pc, #332]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80041b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80041b4:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80041b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041bc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80041c0:	4a4e      	ldr	r2, [pc, #312]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80041c2:	430b      	orrs	r3, r1
 80041c4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80041c8:	e003      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80041ce:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80041d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041da:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80041de:	653b      	str	r3, [r7, #80]	@ 0x50
 80041e0:	2300      	movs	r3, #0
 80041e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80041e4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80041e8:	460b      	mov	r3, r1
 80041ea:	4313      	orrs	r3, r2
 80041ec:	d033      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80041ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041f2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 80041fa:	2b80      	cmp	r3, #128	@ 0x80
 80041fc:	d007      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x17de>
 80041fe:	e010      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004200:	4b3e      	ldr	r3, [pc, #248]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004204:	4a3d      	ldr	r2, [pc, #244]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004206:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800420a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800420c:	e00d      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800420e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004212:	3308      	adds	r3, #8
 8004214:	4618      	mov	r0, r3
 8004216:	f003 fb2d 	bl	8007874 <RCCEx_PLL2_Config>
 800421a:	4603      	mov	r3, r0
 800421c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004220:	e003      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800422a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10d      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8004232:	4b32      	ldr	r3, [pc, #200]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004234:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004238:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800423c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004240:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004244:	4a2d      	ldr	r2, [pc, #180]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004246:	430b      	orrs	r3, r1
 8004248:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800424c:	e003      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004252:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004256:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800425a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004262:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004264:	2300      	movs	r3, #0
 8004266:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004268:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800426c:	460b      	mov	r3, r1
 800426e:	4313      	orrs	r3, r2
 8004270:	d04a      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8004272:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800427a:	2b04      	cmp	r3, #4
 800427c:	d827      	bhi.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800427e:	a201      	add	r2, pc, #4	@ (adr r2, 8004284 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8004280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004284:	08004299 	.word	0x08004299
 8004288:	080042a7 	.word	0x080042a7
 800428c:	080042bb 	.word	0x080042bb
 8004290:	080042d7 	.word	0x080042d7
 8004294:	080042d7 	.word	0x080042d7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004298:	4b18      	ldr	r3, [pc, #96]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800429a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429c:	4a17      	ldr	r2, [pc, #92]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800429e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042a2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80042a4:	e018      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042aa:	3308      	adds	r3, #8
 80042ac:	4618      	mov	r0, r3
 80042ae:	f003 fae1 	bl	8007874 <RCCEx_PLL2_Config>
 80042b2:	4603      	mov	r3, r0
 80042b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80042b8:	e00e      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042be:	3330      	adds	r3, #48	@ 0x30
 80042c0:	4618      	mov	r0, r3
 80042c2:	f003 fb6f 	bl	80079a4 <RCCEx_PLL3_Config>
 80042c6:	4603      	mov	r3, r0
 80042c8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80042cc:	e004      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80042d4:	e000      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80042d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042d8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10f      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80042e0:	4b06      	ldr	r3, [pc, #24]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80042e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042e6:	f023 0107 	bic.w	r1, r3, #7
 80042ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042f2:	4a02      	ldr	r2, [pc, #8]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80042f4:	430b      	orrs	r3, r1
 80042f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80042fa:	e005      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 80042fc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004300:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004304:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004308:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800430c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004310:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004314:	643b      	str	r3, [r7, #64]	@ 0x40
 8004316:	2300      	movs	r3, #0
 8004318:	647b      	str	r3, [r7, #68]	@ 0x44
 800431a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800431e:	460b      	mov	r3, r1
 8004320:	4313      	orrs	r3, r2
 8004322:	f000 8081 	beq.w	8004428 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8004326:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800432a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800432e:	2b20      	cmp	r3, #32
 8004330:	d85f      	bhi.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8004332:	a201      	add	r2, pc, #4	@ (adr r2, 8004338 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8004334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004338:	080043bd 	.word	0x080043bd
 800433c:	080043f3 	.word	0x080043f3
 8004340:	080043f3 	.word	0x080043f3
 8004344:	080043f3 	.word	0x080043f3
 8004348:	080043f3 	.word	0x080043f3
 800434c:	080043f3 	.word	0x080043f3
 8004350:	080043f3 	.word	0x080043f3
 8004354:	080043f3 	.word	0x080043f3
 8004358:	080043cb 	.word	0x080043cb
 800435c:	080043f3 	.word	0x080043f3
 8004360:	080043f3 	.word	0x080043f3
 8004364:	080043f3 	.word	0x080043f3
 8004368:	080043f3 	.word	0x080043f3
 800436c:	080043f3 	.word	0x080043f3
 8004370:	080043f3 	.word	0x080043f3
 8004374:	080043f3 	.word	0x080043f3
 8004378:	080043df 	.word	0x080043df
 800437c:	080043f3 	.word	0x080043f3
 8004380:	080043f3 	.word	0x080043f3
 8004384:	080043f3 	.word	0x080043f3
 8004388:	080043f3 	.word	0x080043f3
 800438c:	080043f3 	.word	0x080043f3
 8004390:	080043f3 	.word	0x080043f3
 8004394:	080043f3 	.word	0x080043f3
 8004398:	080043fb 	.word	0x080043fb
 800439c:	080043f3 	.word	0x080043f3
 80043a0:	080043f3 	.word	0x080043f3
 80043a4:	080043f3 	.word	0x080043f3
 80043a8:	080043f3 	.word	0x080043f3
 80043ac:	080043f3 	.word	0x080043f3
 80043b0:	080043f3 	.word	0x080043f3
 80043b4:	080043f3 	.word	0x080043f3
 80043b8:	080043fb 	.word	0x080043fb
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043bc:	4bab      	ldr	r3, [pc, #684]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80043be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c0:	4aaa      	ldr	r2, [pc, #680]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80043c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043c6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80043c8:	e018      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043ce:	3308      	adds	r3, #8
 80043d0:	4618      	mov	r0, r3
 80043d2:	f003 fa4f 	bl	8007874 <RCCEx_PLL2_Config>
 80043d6:	4603      	mov	r3, r0
 80043d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80043dc:	e00e      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043e2:	3330      	adds	r3, #48	@ 0x30
 80043e4:	4618      	mov	r0, r3
 80043e6:	f003 fadd 	bl	80079a4 <RCCEx_PLL3_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80043f0:	e004      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80043f8:	e000      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 80043fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10d      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004404:	4b99      	ldr	r3, [pc, #612]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800440a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800440e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004412:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004416:	4a95      	ldr	r2, [pc, #596]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004418:	430b      	orrs	r3, r1
 800441a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800441e:	e003      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004420:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004424:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004428:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004430:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004434:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004436:	2300      	movs	r3, #0
 8004438:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800443a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800443e:	460b      	mov	r3, r1
 8004440:	4313      	orrs	r3, r2
 8004442:	d04e      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004444:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004448:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800444c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004450:	d02e      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8004452:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004456:	d827      	bhi.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004458:	2bc0      	cmp	r3, #192	@ 0xc0
 800445a:	d02b      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 800445c:	2bc0      	cmp	r3, #192	@ 0xc0
 800445e:	d823      	bhi.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004460:	2b80      	cmp	r3, #128	@ 0x80
 8004462:	d017      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8004464:	2b80      	cmp	r3, #128	@ 0x80
 8004466:	d81f      	bhi.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 800446c:	2b40      	cmp	r3, #64	@ 0x40
 800446e:	d007      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8004470:	e01a      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004472:	4b7e      	ldr	r3, [pc, #504]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004476:	4a7d      	ldr	r2, [pc, #500]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004478:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800447c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800447e:	e01a      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004480:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004484:	3308      	adds	r3, #8
 8004486:	4618      	mov	r0, r3
 8004488:	f003 f9f4 	bl	8007874 <RCCEx_PLL2_Config>
 800448c:	4603      	mov	r3, r0
 800448e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004492:	e010      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004494:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004498:	3330      	adds	r3, #48	@ 0x30
 800449a:	4618      	mov	r0, r3
 800449c:	f003 fa82 	bl	80079a4 <RCCEx_PLL3_Config>
 80044a0:	4603      	mov	r3, r0
 80044a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80044a6:	e006      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80044ae:	e002      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80044b0:	bf00      	nop
 80044b2:	e000      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80044b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10d      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80044be:	4b6b      	ldr	r3, [pc, #428]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80044c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044c4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80044c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80044d0:	4a66      	ldr	r2, [pc, #408]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80044d2:	430b      	orrs	r3, r1
 80044d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80044d8:	e003      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80044de:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80044e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ea:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80044ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80044f0:	2300      	movs	r3, #0
 80044f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80044f4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80044f8:	460b      	mov	r3, r1
 80044fa:	4313      	orrs	r3, r2
 80044fc:	d055      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80044fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004502:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004506:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800450a:	d031      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 800450c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004510:	d82a      	bhi.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004512:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004516:	d02d      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8004518:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800451c:	d824      	bhi.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800451e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004522:	d029      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8004524:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004528:	d81e      	bhi.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800452a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800452e:	d011      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8004530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004534:	d818      	bhi.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004536:	2b00      	cmp	r3, #0
 8004538:	d020      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800453a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800453e:	d113      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004540:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004544:	3308      	adds	r3, #8
 8004546:	4618      	mov	r0, r3
 8004548:	f003 f994 	bl	8007874 <RCCEx_PLL2_Config>
 800454c:	4603      	mov	r3, r0
 800454e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004552:	e014      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004554:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004558:	3330      	adds	r3, #48	@ 0x30
 800455a:	4618      	mov	r0, r3
 800455c:	f003 fa22 	bl	80079a4 <RCCEx_PLL3_Config>
 8004560:	4603      	mov	r3, r0
 8004562:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004566:	e00a      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800456e:	e006      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004570:	bf00      	nop
 8004572:	e004      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004574:	bf00      	nop
 8004576:	e002      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004578:	bf00      	nop
 800457a:	e000      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800457c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800457e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10d      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8004586:	4b39      	ldr	r3, [pc, #228]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800458c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004590:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004594:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004598:	4a34      	ldr	r2, [pc, #208]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800459a:	430b      	orrs	r3, r1
 800459c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80045a0:	e003      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80045a6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80045aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80045b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045b8:	2300      	movs	r3, #0
 80045ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045bc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80045c0:	460b      	mov	r3, r1
 80045c2:	4313      	orrs	r3, r2
 80045c4:	d058      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 80045c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045ce:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80045d2:	d031      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 80045d4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80045d8:	d82a      	bhi.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80045da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045de:	d02d      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 80045e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045e4:	d824      	bhi.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80045e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045ea:	d029      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 80045ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045f0:	d81e      	bhi.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80045f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045f6:	d011      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 80045f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045fc:	d818      	bhi.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d020      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8004602:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004606:	d113      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004608:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800460c:	3308      	adds	r3, #8
 800460e:	4618      	mov	r0, r3
 8004610:	f003 f930 	bl	8007874 <RCCEx_PLL2_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800461a:	e014      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800461c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004620:	3330      	adds	r3, #48	@ 0x30
 8004622:	4618      	mov	r0, r3
 8004624:	f003 f9be 	bl	80079a4 <RCCEx_PLL3_Config>
 8004628:	4603      	mov	r3, r0
 800462a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800462e:	e00a      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004636:	e006      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004638:	bf00      	nop
 800463a:	e004      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800463c:	bf00      	nop
 800463e:	e002      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004640:	bf00      	nop
 8004642:	e000      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004644:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004646:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800464a:	2b00      	cmp	r3, #0
 800464c:	d110      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800464e:	4b07      	ldr	r3, [pc, #28]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004654:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004658:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800465c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004660:	4902      	ldr	r1, [pc, #8]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004668:	e006      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800466a:	bf00      	nop
 800466c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004670:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004674:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004678:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	2100      	movs	r1, #0
 8004682:	6239      	str	r1, [r7, #32]
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	627b      	str	r3, [r7, #36]	@ 0x24
 800468a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800468e:	460b      	mov	r3, r1
 8004690:	4313      	orrs	r3, r2
 8004692:	d055      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8004694:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004698:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800469c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80046a0:	d031      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 80046a2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80046a6:	d82a      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80046a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046ac:	d02d      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 80046ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046b2:	d824      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80046b4:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80046b8:	d029      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 80046ba:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80046be:	d81e      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80046c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046c4:	d011      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 80046c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046ca:	d818      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d020      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 80046d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046d4:	d113      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046da:	3308      	adds	r3, #8
 80046dc:	4618      	mov	r0, r3
 80046de:	f003 f8c9 	bl	8007874 <RCCEx_PLL2_Config>
 80046e2:	4603      	mov	r3, r0
 80046e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80046e8:	e014      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80046ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046ee:	3330      	adds	r3, #48	@ 0x30
 80046f0:	4618      	mov	r0, r3
 80046f2:	f003 f957 	bl	80079a4 <RCCEx_PLL3_Config>
 80046f6:	4603      	mov	r3, r0
 80046f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80046fc:	e00a      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004704:	e006      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004706:	bf00      	nop
 8004708:	e004      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800470a:	bf00      	nop
 800470c:	e002      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800470e:	bf00      	nop
 8004710:	e000      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004712:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004714:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10d      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800471c:	4b88      	ldr	r3, [pc, #544]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800471e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004722:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8004726:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800472a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800472e:	4984      	ldr	r1, [pc, #528]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004736:	e003      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004738:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800473c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004740:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004748:	2100      	movs	r1, #0
 800474a:	61b9      	str	r1, [r7, #24]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	61fb      	str	r3, [r7, #28]
 8004752:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004756:	460b      	mov	r3, r1
 8004758:	4313      	orrs	r3, r2
 800475a:	d03d      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800475c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004760:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004764:	2b03      	cmp	r3, #3
 8004766:	d81c      	bhi.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8004768:	a201      	add	r2, pc, #4	@ (adr r2, 8004770 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800476a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476e:	bf00      	nop
 8004770:	080047ab 	.word	0x080047ab
 8004774:	08004781 	.word	0x08004781
 8004778:	0800478f 	.word	0x0800478f
 800477c:	080047ab 	.word	0x080047ab
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004780:	4b6f      	ldr	r3, [pc, #444]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004784:	4a6e      	ldr	r2, [pc, #440]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800478a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800478c:	e00e      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800478e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004792:	3308      	adds	r3, #8
 8004794:	4618      	mov	r0, r3
 8004796:	f003 f86d 	bl	8007874 <RCCEx_PLL2_Config>
 800479a:	4603      	mov	r3, r0
 800479c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80047a0:	e004      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80047a8:	e000      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 80047aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10d      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80047b4:	4b62      	ldr	r3, [pc, #392]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80047b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80047ba:	f023 0203 	bic.w	r2, r3, #3
 80047be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047c2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80047c6:	495e      	ldr	r1, [pc, #376]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80047ce:	e003      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80047d4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80047d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e0:	2100      	movs	r1, #0
 80047e2:	6139      	str	r1, [r7, #16]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	617b      	str	r3, [r7, #20]
 80047ea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80047ee:	460b      	mov	r3, r1
 80047f0:	4313      	orrs	r3, r2
 80047f2:	d03a      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80047f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80047fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004800:	d00e      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8004802:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004806:	d815      	bhi.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8004808:	2b00      	cmp	r3, #0
 800480a:	d017      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 800480c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004810:	d110      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004812:	4b4b      	ldr	r3, [pc, #300]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004816:	4a4a      	ldr	r2, [pc, #296]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800481c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800481e:	e00e      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004820:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004824:	3308      	adds	r3, #8
 8004826:	4618      	mov	r0, r3
 8004828:	f003 f824 	bl	8007874 <RCCEx_PLL2_Config>
 800482c:	4603      	mov	r3, r0
 800482e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004832:	e004      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800483a:	e000      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 800483c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800483e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10d      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004846:	4b3e      	ldr	r3, [pc, #248]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004848:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800484c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004850:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004854:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004858:	4939      	ldr	r1, [pc, #228]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8004860:	e003      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004862:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004866:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800486a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800486e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004872:	2100      	movs	r1, #0
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	f003 0310 	and.w	r3, r3, #16
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004880:	460b      	mov	r3, r1
 8004882:	4313      	orrs	r3, r2
 8004884:	d038      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004886:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800488a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800488e:	2b30      	cmp	r3, #48	@ 0x30
 8004890:	d01b      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8004892:	2b30      	cmp	r3, #48	@ 0x30
 8004894:	d815      	bhi.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8004896:	2b10      	cmp	r3, #16
 8004898:	d002      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800489a:	2b20      	cmp	r3, #32
 800489c:	d007      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800489e:	e010      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a0:	4b27      	ldr	r3, [pc, #156]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80048a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a4:	4a26      	ldr	r2, [pc, #152]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80048a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048aa:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80048ac:	e00e      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048b2:	3330      	adds	r3, #48	@ 0x30
 80048b4:	4618      	mov	r0, r3
 80048b6:	f003 f875 	bl	80079a4 <RCCEx_PLL3_Config>
 80048ba:	4603      	mov	r3, r0
 80048bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80048c0:	e004      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80048c8:	e000      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 80048ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048cc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10d      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80048d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80048d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80048da:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80048de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80048e6:	4916      	ldr	r1, [pc, #88]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80048ee:	e003      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80048f4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004900:	2100      	movs	r1, #0
 8004902:	6039      	str	r1, [r7, #0]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	607b      	str	r3, [r7, #4]
 800490a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800490e:	460b      	mov	r3, r1
 8004910:	4313      	orrs	r3, r2
 8004912:	d00c      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8004914:	4b0a      	ldr	r3, [pc, #40]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004916:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800491a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800491e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004922:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8004926:	4906      	ldr	r1, [pc, #24]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800492e:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8004932:	4618      	mov	r0, r3
 8004934:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8004938:	46bd      	mov	sp, r7
 800493a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800493e:	bf00      	nop
 8004940:	44020c00 	.word	0x44020c00

08004944 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8004944:	b480      	push	{r7}
 8004946:	b08b      	sub	sp, #44	@ 0x2c
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800494c:	4bad      	ldr	r3, [pc, #692]	@ (8004c04 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800494e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004954:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004956:	4bab      	ldr	r3, [pc, #684]	@ (8004c04 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004960:	4ba8      	ldr	r3, [pc, #672]	@ (8004c04 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004964:	0a1b      	lsrs	r3, r3, #8
 8004966:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800496a:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800496c:	4ba5      	ldr	r3, [pc, #660]	@ (8004c04 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800496e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004976:	4ba3      	ldr	r3, [pc, #652]	@ (8004c04 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497a:	08db      	lsrs	r3, r3, #3
 800497c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	fb02 f303 	mul.w	r3, r2, r3
 8004986:	ee07 3a90 	vmov	s15, r3
 800498a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 8126 	beq.w	8004be6 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	2b03      	cmp	r3, #3
 800499e:	d053      	beq.n	8004a48 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	2b03      	cmp	r3, #3
 80049a4:	d86f      	bhi.n	8004a86 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d003      	beq.n	80049b4 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d02b      	beq.n	8004a0a <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 80049b2:	e068      	b.n	8004a86 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80049b4:	4b93      	ldr	r3, [pc, #588]	@ (8004c04 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	08db      	lsrs	r3, r3, #3
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	4a92      	ldr	r2, [pc, #584]	@ (8004c08 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80049c0:	fa22 f303 	lsr.w	r3, r2, r3
 80049c4:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	ee07 3a90 	vmov	s15, r3
 80049e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e8:	ed97 6a04 	vldr	s12, [r7, #16]
 80049ec:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8004c0c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80049f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a04:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004a08:	e068      	b.n	8004adc <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	ee07 3a90 	vmov	s15, r3
 8004a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a14:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8004c10 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004a18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	ee07 3a90 	vmov	s15, r3
 8004a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a26:	ed97 6a04 	vldr	s12, [r7, #16]
 8004a2a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c0c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a42:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004a46:	e049      	b.n	8004adc <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	ee07 3a90 	vmov	s15, r3
 8004a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a52:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004c14 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8004a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	ee07 3a90 	vmov	s15, r3
 8004a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a64:	ed97 6a04 	vldr	s12, [r7, #16]
 8004a68:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8004c0c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004a6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a80:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004a84:	e02a      	b.n	8004adc <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a86:	4b5f      	ldr	r3, [pc, #380]	@ (8004c04 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	08db      	lsrs	r3, r3, #3
 8004a8c:	f003 0303 	and.w	r3, r3, #3
 8004a90:	4a5d      	ldr	r2, [pc, #372]	@ (8004c08 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004a92:	fa22 f303 	lsr.w	r3, r2, r3
 8004a96:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	ee07 3a90 	vmov	s15, r3
 8004aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aba:	ed97 6a04 	vldr	s12, [r7, #16]
 8004abe:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8004c0c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004ada:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004adc:	4b49      	ldr	r3, [pc, #292]	@ (8004c04 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ae8:	d121      	bne.n	8004b2e <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004aea:	4b46      	ldr	r3, [pc, #280]	@ (8004c04 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d017      	beq.n	8004b26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004af6:	4b43      	ldr	r3, [pc, #268]	@ (8004c04 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004afa:	0a5b      	lsrs	r3, r3, #9
 8004afc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b00:	ee07 3a90 	vmov	s15, r3
 8004b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8004b08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b0c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004b10:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b1c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	e006      	b.n	8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	e002      	b.n	8004b34 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b34:	4b33      	ldr	r3, [pc, #204]	@ (8004c04 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b40:	d121      	bne.n	8004b86 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004b42:	4b30      	ldr	r3, [pc, #192]	@ (8004c04 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d017      	beq.n	8004b7e <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8004c04 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b52:	0c1b      	lsrs	r3, r3, #16
 8004b54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b58:	ee07 3a90 	vmov	s15, r3
 8004b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004b60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b64:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004b68:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b74:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	605a      	str	r2, [r3, #4]
 8004b7c:	e006      	b.n	8004b8c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	605a      	str	r2, [r3, #4]
 8004b84:	e002      	b.n	8004b8c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004c04 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b98:	d121      	bne.n	8004bde <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8004c04 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d017      	beq.n	8004bd6 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004ba6:	4b17      	ldr	r3, [pc, #92]	@ (8004c04 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004baa:	0e1b      	lsrs	r3, r3, #24
 8004bac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bb0:	ee07 3a90 	vmov	s15, r3
 8004bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8004bb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bbc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004bc0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bcc:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004bd4:	e010      	b.n	8004bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	609a      	str	r2, [r3, #8]
}
 8004bdc:	e00c      	b.n	8004bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	609a      	str	r2, [r3, #8]
}
 8004be4:	e008      	b.n	8004bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	609a      	str	r2, [r3, #8]
}
 8004bf8:	bf00      	nop
 8004bfa:	372c      	adds	r7, #44	@ 0x2c
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	44020c00 	.word	0x44020c00
 8004c08:	03d09000 	.word	0x03d09000
 8004c0c:	46000000 	.word	0x46000000
 8004c10:	4a742400 	.word	0x4a742400
 8004c14:	4af42400 	.word	0x4af42400

08004c18 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b08b      	sub	sp, #44	@ 0x2c
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004c20:	4bad      	ldr	r3, [pc, #692]	@ (8004ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c28:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004c2a:	4bab      	ldr	r3, [pc, #684]	@ (8004ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8004c34:	4ba8      	ldr	r3, [pc, #672]	@ (8004ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c38:	0a1b      	lsrs	r3, r3, #8
 8004c3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c3e:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8004c40:	4ba5      	ldr	r3, [pc, #660]	@ (8004ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c44:	f003 0310 	and.w	r3, r3, #16
 8004c48:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004c4a:	4ba3      	ldr	r3, [pc, #652]	@ (8004ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4e:	08db      	lsrs	r3, r3, #3
 8004c50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	fb02 f303 	mul.w	r3, r2, r3
 8004c5a:	ee07 3a90 	vmov	s15, r3
 8004c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c62:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 8126 	beq.w	8004eba <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d053      	beq.n	8004d1c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d86f      	bhi.n	8004d5a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d003      	beq.n	8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d02b      	beq.n	8004cde <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8004c86:	e068      	b.n	8004d5a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c88:	4b93      	ldr	r3, [pc, #588]	@ (8004ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	08db      	lsrs	r3, r3, #3
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	4a92      	ldr	r2, [pc, #584]	@ (8004edc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004c94:	fa22 f303 	lsr.w	r3, r2, r3
 8004c98:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	ee07 3a90 	vmov	s15, r3
 8004ca0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	ee07 3a90 	vmov	s15, r3
 8004caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	ee07 3a90 	vmov	s15, r3
 8004cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cbc:	ed97 6a04 	vldr	s12, [r7, #16]
 8004cc0:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8004ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004cc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ccc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cd8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004cdc:	e068      	b.n	8004db0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	ee07 3a90 	vmov	s15, r3
 8004ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce8:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8004ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004cec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cfa:	ed97 6a04 	vldr	s12, [r7, #16]
 8004cfe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d16:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004d1a:	e049      	b.n	8004db0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d26:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8004d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	ee07 3a90 	vmov	s15, r3
 8004d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d38:	ed97 6a04 	vldr	s12, [r7, #16]
 8004d3c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8004ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004d40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d54:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004d58:	e02a      	b.n	8004db0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d5a:	4b5f      	ldr	r3, [pc, #380]	@ (8004ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	08db      	lsrs	r3, r3, #3
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	4a5d      	ldr	r2, [pc, #372]	@ (8004edc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004d66:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	ee07 3a90 	vmov	s15, r3
 8004d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	ee07 3a90 	vmov	s15, r3
 8004d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	ee07 3a90 	vmov	s15, r3
 8004d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d8e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004d92:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8004ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004daa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004dae:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004db0:	4b49      	ldr	r3, [pc, #292]	@ (8004ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004db8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dbc:	d121      	bne.n	8004e02 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004dbe:	4b46      	ldr	r3, [pc, #280]	@ (8004ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d017      	beq.n	8004dfa <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004dca:	4b43      	ldr	r3, [pc, #268]	@ (8004ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dce:	0a5b      	lsrs	r3, r3, #9
 8004dd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dd4:	ee07 3a90 	vmov	s15, r3
 8004dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8004ddc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004de0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004de4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004df0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	e006      	b.n	8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	e002      	b.n	8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e08:	4b33      	ldr	r3, [pc, #204]	@ (8004ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e14:	d121      	bne.n	8004e5a <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004e16:	4b30      	ldr	r3, [pc, #192]	@ (8004ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d017      	beq.n	8004e52 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004e22:	4b2d      	ldr	r3, [pc, #180]	@ (8004ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e26:	0c1b      	lsrs	r3, r3, #16
 8004e28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e2c:	ee07 3a90 	vmov	s15, r3
 8004e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004e34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e38:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004e3c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e48:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	605a      	str	r2, [r3, #4]
 8004e50:	e006      	b.n	8004e60 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	605a      	str	r2, [r3, #4]
 8004e58:	e002      	b.n	8004e60 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e60:	4b1d      	ldr	r3, [pc, #116]	@ (8004ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e6c:	d121      	bne.n	8004eb2 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d017      	beq.n	8004eaa <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004e7a:	4b17      	ldr	r3, [pc, #92]	@ (8004ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7e:	0e1b      	lsrs	r3, r3, #24
 8004e80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e84:	ee07 3a90 	vmov	s15, r3
 8004e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8004e8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e90:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004e94:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004e98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ea0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004ea8:	e010      	b.n	8004ecc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	609a      	str	r2, [r3, #8]
}
 8004eb0:	e00c      	b.n	8004ecc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	609a      	str	r2, [r3, #8]
}
 8004eb8:	e008      	b.n	8004ecc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	609a      	str	r2, [r3, #8]
}
 8004ecc:	bf00      	nop
 8004ece:	372c      	adds	r7, #44	@ 0x2c
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	44020c00 	.word	0x44020c00
 8004edc:	03d09000 	.word	0x03d09000
 8004ee0:	46000000 	.word	0x46000000
 8004ee4:	4a742400 	.word	0x4a742400
 8004ee8:	4af42400 	.word	0x4af42400

08004eec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b08b      	sub	sp, #44	@ 0x2c
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004ef4:	4bad      	ldr	r3, [pc, #692]	@ (80051ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004efc:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004efe:	4bab      	ldr	r3, [pc, #684]	@ (80051ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8004f08:	4ba8      	ldr	r3, [pc, #672]	@ (80051ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0c:	0a1b      	lsrs	r3, r3, #8
 8004f0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f12:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8004f14:	4ba5      	ldr	r3, [pc, #660]	@ (80051ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f18:	f003 0310 	and.w	r3, r3, #16
 8004f1c:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004f1e:	4ba3      	ldr	r3, [pc, #652]	@ (80051ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f22:	08db      	lsrs	r3, r3, #3
 8004f24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	fb02 f303 	mul.w	r3, r2, r3
 8004f2e:	ee07 3a90 	vmov	s15, r3
 8004f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f36:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 8126 	beq.w	800518e <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	2b03      	cmp	r3, #3
 8004f46:	d053      	beq.n	8004ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	d86f      	bhi.n	800502e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d003      	beq.n	8004f5c <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d02b      	beq.n	8004fb2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8004f5a:	e068      	b.n	800502e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f5c:	4b93      	ldr	r3, [pc, #588]	@ (80051ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	08db      	lsrs	r3, r3, #3
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	4a92      	ldr	r2, [pc, #584]	@ (80051b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004f68:	fa22 f303 	lsr.w	r3, r2, r3
 8004f6c:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	ee07 3a90 	vmov	s15, r3
 8004f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	ee07 3a90 	vmov	s15, r3
 8004f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	ee07 3a90 	vmov	s15, r3
 8004f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f90:	ed97 6a04 	vldr	s12, [r7, #16]
 8004f94:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80051b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004f98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fa0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fac:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004fb0:	e068      	b.n	8005084 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	ee07 3a90 	vmov	s15, r3
 8004fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fbc:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80051b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8004fc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fce:	ed97 6a04 	vldr	s12, [r7, #16]
 8004fd2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80051b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fea:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004fee:	e049      	b.n	8005084 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	ee07 3a90 	vmov	s15, r3
 8004ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ffa:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80051bc <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8004ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	ee07 3a90 	vmov	s15, r3
 8005008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800500c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005010:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80051b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005014:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005018:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800501c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005020:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005028:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800502c:	e02a      	b.n	8005084 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800502e:	4b5f      	ldr	r3, [pc, #380]	@ (80051ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	08db      	lsrs	r3, r3, #3
 8005034:	f003 0303 	and.w	r3, r3, #3
 8005038:	4a5d      	ldr	r2, [pc, #372]	@ (80051b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800503a:	fa22 f303 	lsr.w	r3, r2, r3
 800503e:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	ee07 3a90 	vmov	s15, r3
 8005050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005054:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	ee07 3a90 	vmov	s15, r3
 800505e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005062:	ed97 6a04 	vldr	s12, [r7, #16]
 8005066:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80051b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800506a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800506e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005072:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800507a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800507e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005082:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005084:	4b49      	ldr	r3, [pc, #292]	@ (80051ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800508c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005090:	d121      	bne.n	80050d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005092:	4b46      	ldr	r3, [pc, #280]	@ (80051ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005096:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d017      	beq.n	80050ce <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800509e:	4b43      	ldr	r3, [pc, #268]	@ (80051ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80050a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a2:	0a5b      	lsrs	r3, r3, #9
 80050a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050a8:	ee07 3a90 	vmov	s15, r3
 80050ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80050b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050b4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80050b8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80050bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050c4:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	e006      	b.n	80050dc <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	e002      	b.n	80050dc <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80050dc:	4b33      	ldr	r3, [pc, #204]	@ (80051ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050e8:	d121      	bne.n	800512e <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80050ea:	4b30      	ldr	r3, [pc, #192]	@ (80051ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80050ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d017      	beq.n	8005126 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80050f6:	4b2d      	ldr	r3, [pc, #180]	@ (80051ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80050f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fa:	0c1b      	lsrs	r3, r3, #16
 80050fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005100:	ee07 3a90 	vmov	s15, r3
 8005104:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005108:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800510c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005110:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800511c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	605a      	str	r2, [r3, #4]
 8005124:	e006      	b.n	8005134 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	605a      	str	r2, [r3, #4]
 800512c:	e002      	b.n	8005134 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005134:	4b1d      	ldr	r3, [pc, #116]	@ (80051ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800513c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005140:	d121      	bne.n	8005186 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005142:	4b1a      	ldr	r3, [pc, #104]	@ (80051ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005146:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d017      	beq.n	800517e <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800514e:	4b17      	ldr	r3, [pc, #92]	@ (80051ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005152:	0e1b      	lsrs	r3, r3, #24
 8005154:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005158:	ee07 3a90 	vmov	s15, r3
 800515c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8005160:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005164:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005168:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800516c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005174:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800517c:	e010      	b.n	80051a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	609a      	str	r2, [r3, #8]
}
 8005184:	e00c      	b.n	80051a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	609a      	str	r2, [r3, #8]
}
 800518c:	e008      	b.n	80051a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	609a      	str	r2, [r3, #8]
}
 80051a0:	bf00      	nop
 80051a2:	372c      	adds	r7, #44	@ 0x2c
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	44020c00 	.word	0x44020c00
 80051b0:	03d09000 	.word	0x03d09000
 80051b4:	46000000 	.word	0x46000000
 80051b8:	4a742400 	.word	0x4a742400
 80051bc:	4af42400 	.word	0x4af42400

080051c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80051c0:	b590      	push	{r4, r7, lr}
 80051c2:	b08f      	sub	sp, #60	@ 0x3c
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80051ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051ce:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80051d2:	4321      	orrs	r1, r4
 80051d4:	d150      	bne.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80051d6:	4b26      	ldr	r3, [pc, #152]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051e0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80051e2:	4b23      	ldr	r3, [pc, #140]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d108      	bne.n	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80051f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051f6:	d104      	bne.n	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80051f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80051fe:	f002 bb2a 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005202:	4b1b      	ldr	r3, [pc, #108]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005208:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800520c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005210:	d108      	bne.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8005212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005218:	d104      	bne.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800521a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800521e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005220:	f002 bb19 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8005224:	4b12      	ldr	r3, [pc, #72]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800522c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005230:	d119      	bne.n	8005266 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8005232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005234:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005238:	d115      	bne.n	8005266 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800523a:	4b0d      	ldr	r3, [pc, #52]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8005242:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005246:	d30a      	bcc.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005248:	4b09      	ldr	r3, [pc, #36]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	0a1b      	lsrs	r3, r3, #8
 800524e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005252:	4a08      	ldr	r2, [pc, #32]	@ (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005254:	fbb2 f3f3 	udiv	r3, r2, r3
 8005258:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800525a:	f002 bafc 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005262:	f002 baf8 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	637b      	str	r3, [r7, #52]	@ 0x34
 800526a:	f002 baf4 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800526e:	bf00      	nop
 8005270:	44020c00 	.word	0x44020c00
 8005274:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8005278:	e9d7 0100 	ldrd	r0, r1, [r7]
 800527c:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8005280:	ea50 0104 	orrs.w	r1, r0, r4
 8005284:	f001 8275 	beq.w	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8005288:	e9d7 0100 	ldrd	r0, r1, [r7]
 800528c:	2801      	cmp	r0, #1
 800528e:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8005292:	f082 82dd 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005296:	e9d7 0100 	ldrd	r0, r1, [r7]
 800529a:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800529e:	ea50 0104 	orrs.w	r1, r0, r4
 80052a2:	f001 816c 	beq.w	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 80052a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052aa:	2801      	cmp	r0, #1
 80052ac:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 80052b0:	f082 82ce 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80052b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052b8:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 80052bc:	ea50 0104 	orrs.w	r1, r0, r4
 80052c0:	f001 8602 	beq.w	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80052c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052c8:	2801      	cmp	r0, #1
 80052ca:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 80052ce:	f082 82bf 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80052d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052d6:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 80052da:	ea50 0104 	orrs.w	r1, r0, r4
 80052de:	f001 854c 	beq.w	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 80052e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052e6:	2801      	cmp	r0, #1
 80052e8:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 80052ec:	f082 82b0 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80052f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052f4:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 80052f8:	ea50 0104 	orrs.w	r1, r0, r4
 80052fc:	f001 849e 	beq.w	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8005300:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005304:	2801      	cmp	r0, #1
 8005306:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 800530a:	f082 82a1 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800530e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005312:	f1a1 0420 	sub.w	r4, r1, #32
 8005316:	ea50 0104 	orrs.w	r1, r0, r4
 800531a:	f001 83e8 	beq.w	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800531e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005322:	2801      	cmp	r0, #1
 8005324:	f171 0120 	sbcs.w	r1, r1, #32
 8005328:	f082 8292 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800532c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005330:	f1a1 0410 	sub.w	r4, r1, #16
 8005334:	ea50 0104 	orrs.w	r1, r0, r4
 8005338:	f002 8256 	beq.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800533c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005340:	2801      	cmp	r0, #1
 8005342:	f171 0110 	sbcs.w	r1, r1, #16
 8005346:	f082 8283 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800534a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800534e:	f1a1 0408 	sub.w	r4, r1, #8
 8005352:	ea50 0104 	orrs.w	r1, r0, r4
 8005356:	f002 81cc 	beq.w	80076f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800535a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800535e:	2801      	cmp	r0, #1
 8005360:	f171 0108 	sbcs.w	r1, r1, #8
 8005364:	f082 8274 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005368:	e9d7 0100 	ldrd	r0, r1, [r7]
 800536c:	1f0c      	subs	r4, r1, #4
 800536e:	ea50 0104 	orrs.w	r1, r0, r4
 8005372:	f001 8648 	beq.w	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8005376:	e9d7 0100 	ldrd	r0, r1, [r7]
 800537a:	2801      	cmp	r0, #1
 800537c:	f171 0104 	sbcs.w	r1, r1, #4
 8005380:	f082 8266 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005384:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005388:	1e8c      	subs	r4, r1, #2
 800538a:	ea50 0104 	orrs.w	r1, r0, r4
 800538e:	f002 8143 	beq.w	8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8005392:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005396:	2801      	cmp	r0, #1
 8005398:	f171 0102 	sbcs.w	r1, r1, #2
 800539c:	f082 8258 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80053a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053a4:	1e4c      	subs	r4, r1, #1
 80053a6:	ea50 0104 	orrs.w	r1, r0, r4
 80053aa:	f002 80ce 	beq.w	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 80053ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053b2:	2801      	cmp	r0, #1
 80053b4:	f171 0101 	sbcs.w	r1, r1, #1
 80053b8:	f082 824a 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80053bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053c0:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80053c4:	4321      	orrs	r1, r4
 80053c6:	f002 8059 	beq.w	800747c <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80053ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053ce:	4cd9      	ldr	r4, [pc, #868]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80053d0:	42a0      	cmp	r0, r4
 80053d2:	f171 0100 	sbcs.w	r1, r1, #0
 80053d6:	f082 823b 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80053da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053de:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80053e2:	4321      	orrs	r1, r4
 80053e4:	f001 87d9 	beq.w	800739a <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 80053e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053ec:	4cd2      	ldr	r4, [pc, #840]	@ (8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80053ee:	42a0      	cmp	r0, r4
 80053f0:	f171 0100 	sbcs.w	r1, r1, #0
 80053f4:	f082 822c 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80053f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053fc:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8005400:	4321      	orrs	r1, r4
 8005402:	f001 8751 	beq.w	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8005406:	e9d7 0100 	ldrd	r0, r1, [r7]
 800540a:	4ccc      	ldr	r4, [pc, #816]	@ (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800540c:	42a0      	cmp	r0, r4
 800540e:	f171 0100 	sbcs.w	r1, r1, #0
 8005412:	f082 821d 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005416:	e9d7 0100 	ldrd	r0, r1, [r7]
 800541a:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 800541e:	4321      	orrs	r1, r4
 8005420:	f001 869a 	beq.w	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8005424:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005428:	4cc5      	ldr	r4, [pc, #788]	@ (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800542a:	42a0      	cmp	r0, r4
 800542c:	f171 0100 	sbcs.w	r1, r1, #0
 8005430:	f082 820e 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005434:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005438:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 800543c:	4321      	orrs	r1, r4
 800543e:	f001 8612 	beq.w	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8005442:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005446:	4cbf      	ldr	r4, [pc, #764]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8005448:	42a0      	cmp	r0, r4
 800544a:	f171 0100 	sbcs.w	r1, r1, #0
 800544e:	f082 81ff 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005452:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005456:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 800545a:	4321      	orrs	r1, r4
 800545c:	f002 817e 	beq.w	800775c <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8005460:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005464:	4cb8      	ldr	r4, [pc, #736]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005466:	42a0      	cmp	r0, r4
 8005468:	f171 0100 	sbcs.w	r1, r1, #0
 800546c:	f082 81f0 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005470:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005474:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8005478:	4321      	orrs	r1, r4
 800547a:	f000 829e 	beq.w	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800547e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005482:	4cb2      	ldr	r4, [pc, #712]	@ (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005484:	42a0      	cmp	r0, r4
 8005486:	f171 0100 	sbcs.w	r1, r1, #0
 800548a:	f082 81e1 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800548e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005492:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8005496:	4321      	orrs	r1, r4
 8005498:	f000 826d 	beq.w	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800549c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054a0:	4cab      	ldr	r4, [pc, #684]	@ (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80054a2:	42a0      	cmp	r0, r4
 80054a4:	f171 0100 	sbcs.w	r1, r1, #0
 80054a8:	f082 81d2 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80054ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054b0:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80054b4:	4321      	orrs	r1, r4
 80054b6:	f001 800d 	beq.w	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 80054ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054be:	4ca5      	ldr	r4, [pc, #660]	@ (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80054c0:	42a0      	cmp	r0, r4
 80054c2:	f171 0100 	sbcs.w	r1, r1, #0
 80054c6:	f082 81c3 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80054ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054ce:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 80054d2:	4321      	orrs	r1, r4
 80054d4:	f000 81d0 	beq.w	8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 80054d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054dc:	4c9e      	ldr	r4, [pc, #632]	@ (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80054de:	42a0      	cmp	r0, r4
 80054e0:	f171 0100 	sbcs.w	r1, r1, #0
 80054e4:	f082 81b4 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80054e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054ec:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 80054f0:	4321      	orrs	r1, r4
 80054f2:	f000 8142 	beq.w	800577a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 80054f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054fa:	4c98      	ldr	r4, [pc, #608]	@ (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80054fc:	42a0      	cmp	r0, r4
 80054fe:	f171 0100 	sbcs.w	r1, r1, #0
 8005502:	f082 81a5 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005506:	e9d7 0100 	ldrd	r0, r1, [r7]
 800550a:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 800550e:	4321      	orrs	r1, r4
 8005510:	f001 824e 	beq.w	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8005514:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005518:	4c91      	ldr	r4, [pc, #580]	@ (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800551a:	42a0      	cmp	r0, r4
 800551c:	f171 0100 	sbcs.w	r1, r1, #0
 8005520:	f082 8196 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005524:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005528:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 800552c:	4321      	orrs	r1, r4
 800552e:	f001 8197 	beq.w	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8005532:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005536:	4c8b      	ldr	r4, [pc, #556]	@ (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005538:	42a0      	cmp	r0, r4
 800553a:	f171 0100 	sbcs.w	r1, r1, #0
 800553e:	f082 8187 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005542:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005546:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 800554a:	4321      	orrs	r1, r4
 800554c:	f001 8154 	beq.w	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8005550:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005554:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8005558:	f171 0100 	sbcs.w	r1, r1, #0
 800555c:	f082 8178 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005560:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005564:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8005568:	4321      	orrs	r1, r4
 800556a:	f001 80b7 	beq.w	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800556e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005572:	f248 0401 	movw	r4, #32769	@ 0x8001
 8005576:	42a0      	cmp	r0, r4
 8005578:	f171 0100 	sbcs.w	r1, r1, #0
 800557c:	f082 8168 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005580:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005584:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8005588:	4321      	orrs	r1, r4
 800558a:	f001 8064 	beq.w	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 800558e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005592:	f244 0401 	movw	r4, #16385	@ 0x4001
 8005596:	42a0      	cmp	r0, r4
 8005598:	f171 0100 	sbcs.w	r1, r1, #0
 800559c:	f082 8158 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80055a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055a4:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 80055a8:	4321      	orrs	r1, r4
 80055aa:	f001 8011 	beq.w	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 80055ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055b2:	f242 0401 	movw	r4, #8193	@ 0x2001
 80055b6:	42a0      	cmp	r0, r4
 80055b8:	f171 0100 	sbcs.w	r1, r1, #0
 80055bc:	f082 8148 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80055c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055c4:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 80055c8:	4321      	orrs	r1, r4
 80055ca:	f000 871e 	beq.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 80055ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055d2:	f241 0401 	movw	r4, #4097	@ 0x1001
 80055d6:	42a0      	cmp	r0, r4
 80055d8:	f171 0100 	sbcs.w	r1, r1, #0
 80055dc:	f082 8138 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80055e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055e4:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 80055e8:	4321      	orrs	r1, r4
 80055ea:	f000 86a8 	beq.w	800633e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 80055ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055f2:	f640 0401 	movw	r4, #2049	@ 0x801
 80055f6:	42a0      	cmp	r0, r4
 80055f8:	f171 0100 	sbcs.w	r1, r1, #0
 80055fc:	f082 8128 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005600:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005604:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8005608:	4321      	orrs	r1, r4
 800560a:	f000 8632 	beq.w	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800560e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005612:	f240 4401 	movw	r4, #1025	@ 0x401
 8005616:	42a0      	cmp	r0, r4
 8005618:	f171 0100 	sbcs.w	r1, r1, #0
 800561c:	f082 8118 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005620:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005624:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8005628:	4321      	orrs	r1, r4
 800562a:	f000 85b0 	beq.w	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800562e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005632:	f240 2401 	movw	r4, #513	@ 0x201
 8005636:	42a0      	cmp	r0, r4
 8005638:	f171 0100 	sbcs.w	r1, r1, #0
 800563c:	f082 8108 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005640:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005644:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8005648:	4321      	orrs	r1, r4
 800564a:	f000 8535 	beq.w	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800564e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005652:	f240 1401 	movw	r4, #257	@ 0x101
 8005656:	42a0      	cmp	r0, r4
 8005658:	f171 0100 	sbcs.w	r1, r1, #0
 800565c:	f082 80f8 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005660:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005664:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8005668:	4321      	orrs	r1, r4
 800566a:	f000 84ba 	beq.w	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800566e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005672:	2881      	cmp	r0, #129	@ 0x81
 8005674:	f171 0100 	sbcs.w	r1, r1, #0
 8005678:	f082 80ea 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800567c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005680:	2821      	cmp	r0, #33	@ 0x21
 8005682:	f171 0100 	sbcs.w	r1, r1, #0
 8005686:	d26f      	bcs.n	8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005688:	e9d7 0100 	ldrd	r0, r1, [r7]
 800568c:	4301      	orrs	r1, r0
 800568e:	f002 80df 	beq.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005692:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005696:	1e42      	subs	r2, r0, #1
 8005698:	f141 33ff 	adc.w	r3, r1, #4294967295
 800569c:	2a20      	cmp	r2, #32
 800569e:	f173 0100 	sbcs.w	r1, r3, #0
 80056a2:	f082 80d5 	bcs.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80056a6:	2a1f      	cmp	r2, #31
 80056a8:	f202 80d2 	bhi.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80056ac:	a101      	add	r1, pc, #4	@ (adr r1, 80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 80056ae:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80056b2:	bf00      	nop
 80056b4:	08005a15 	.word	0x08005a15
 80056b8:	08005ae1 	.word	0x08005ae1
 80056bc:	08007851 	.word	0x08007851
 80056c0:	08005ba1 	.word	0x08005ba1
 80056c4:	08007851 	.word	0x08007851
 80056c8:	08007851 	.word	0x08007851
 80056cc:	08007851 	.word	0x08007851
 80056d0:	08005c71 	.word	0x08005c71
 80056d4:	08007851 	.word	0x08007851
 80056d8:	08007851 	.word	0x08007851
 80056dc:	08007851 	.word	0x08007851
 80056e0:	08007851 	.word	0x08007851
 80056e4:	08007851 	.word	0x08007851
 80056e8:	08007851 	.word	0x08007851
 80056ec:	08007851 	.word	0x08007851
 80056f0:	08005d53 	.word	0x08005d53
 80056f4:	08007851 	.word	0x08007851
 80056f8:	08007851 	.word	0x08007851
 80056fc:	08007851 	.word	0x08007851
 8005700:	08007851 	.word	0x08007851
 8005704:	08007851 	.word	0x08007851
 8005708:	08007851 	.word	0x08007851
 800570c:	08007851 	.word	0x08007851
 8005710:	08007851 	.word	0x08007851
 8005714:	08007851 	.word	0x08007851
 8005718:	08007851 	.word	0x08007851
 800571c:	08007851 	.word	0x08007851
 8005720:	08007851 	.word	0x08007851
 8005724:	08007851 	.word	0x08007851
 8005728:	08007851 	.word	0x08007851
 800572c:	08007851 	.word	0x08007851
 8005730:	08005e29 	.word	0x08005e29
 8005734:	80000001 	.word	0x80000001
 8005738:	40000001 	.word	0x40000001
 800573c:	20000001 	.word	0x20000001
 8005740:	10000001 	.word	0x10000001
 8005744:	08000001 	.word	0x08000001
 8005748:	04000001 	.word	0x04000001
 800574c:	00800001 	.word	0x00800001
 8005750:	00400001 	.word	0x00400001
 8005754:	00200001 	.word	0x00200001
 8005758:	00100001 	.word	0x00100001
 800575c:	00080001 	.word	0x00080001
 8005760:	00040001 	.word	0x00040001
 8005764:	00020001 	.word	0x00020001
 8005768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800576c:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8005770:	430b      	orrs	r3, r1
 8005772:	f000 83c4 	beq.w	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005776:	f002 b86b 	b.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800577a:	4ba1      	ldr	r3, [pc, #644]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800577c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005780:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005784:	633b      	str	r3, [r7, #48]	@ 0x30
 8005786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005788:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800578c:	d036      	beq.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800578e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005790:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005794:	d86b      	bhi.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005798:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800579c:	d02b      	beq.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800579e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80057a4:	d863      	bhi.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80057a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057ac:	d01b      	beq.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80057ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057b4:	d85b      	bhi.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80057b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d004      	beq.n	80057c6 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 80057bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057c2:	d008      	beq.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 80057c4:	e053      	b.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057c6:	f107 0320 	add.w	r3, r7, #32
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7ff f8ba 	bl	8004944 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80057d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80057d4:	e04e      	b.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057d6:	f107 0314 	add.w	r3, r7, #20
 80057da:	4618      	mov	r0, r3
 80057dc:	f7ff fa1c 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80057e4:	e046      	b.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057e6:	f107 0308 	add.w	r3, r7, #8
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff fb7e 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80057f4:	e03e      	b.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80057f6:	4b83      	ldr	r3, [pc, #524]	@ (8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80057f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80057fa:	e03b      	b.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80057fc:	4b80      	ldr	r3, [pc, #512]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80057fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005802:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005806:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005808:	4b7d      	ldr	r3, [pc, #500]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b02      	cmp	r3, #2
 8005812:	d10c      	bne.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8005814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005816:	2b00      	cmp	r3, #0
 8005818:	d109      	bne.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800581a:	4b79      	ldr	r3, [pc, #484]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	08db      	lsrs	r3, r3, #3
 8005820:	f003 0303 	and.w	r3, r3, #3
 8005824:	4a78      	ldr	r2, [pc, #480]	@ (8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005826:	fa22 f303 	lsr.w	r3, r2, r3
 800582a:	637b      	str	r3, [r7, #52]	@ 0x34
 800582c:	e01e      	b.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800582e:	4b74      	ldr	r3, [pc, #464]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005836:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800583a:	d106      	bne.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800583c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800583e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005842:	d102      	bne.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005844:	4b71      	ldr	r3, [pc, #452]	@ (8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005846:	637b      	str	r3, [r7, #52]	@ 0x34
 8005848:	e010      	b.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800584a:	4b6d      	ldr	r3, [pc, #436]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005852:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005856:	d106      	bne.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8005858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800585a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800585e:	d102      	bne.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005860:	4b6b      	ldr	r3, [pc, #428]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005862:	637b      	str	r3, [r7, #52]	@ 0x34
 8005864:	e002      	b.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005866:	2300      	movs	r3, #0
 8005868:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800586a:	e003      	b.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800586c:	e002      	b.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005872:	bf00      	nop
          }
        }
        break;
 8005874:	f001 bfef 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005878:	4b61      	ldr	r3, [pc, #388]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800587a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800587e:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8005882:	633b      	str	r3, [r7, #48]	@ 0x30
 8005884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005886:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800588a:	d036      	beq.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800588c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005892:	d86b      	bhi.n	800596c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005896:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800589a:	d02b      	beq.n	80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800589c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80058a2:	d863      	bhi.n	800596c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80058a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058aa:	d01b      	beq.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80058ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058b2:	d85b      	bhi.n	800596c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80058b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d004      	beq.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80058ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058bc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80058c0:	d008      	beq.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 80058c2:	e053      	b.n	800596c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058c4:	f107 0320 	add.w	r3, r7, #32
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7ff f83b 	bl	8004944 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80058ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80058d2:	e04e      	b.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058d4:	f107 0314 	add.w	r3, r7, #20
 80058d8:	4618      	mov	r0, r3
 80058da:	f7ff f99d 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80058e2:	e046      	b.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058e4:	f107 0308 	add.w	r3, r7, #8
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7ff faff 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80058f2:	e03e      	b.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80058f4:	4b43      	ldr	r3, [pc, #268]	@ (8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80058f6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80058f8:	e03b      	b.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80058fa:	4b41      	ldr	r3, [pc, #260]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80058fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005900:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005904:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005906:	4b3e      	ldr	r3, [pc, #248]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b02      	cmp	r3, #2
 8005910:	d10c      	bne.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8005912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005914:	2b00      	cmp	r3, #0
 8005916:	d109      	bne.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005918:	4b39      	ldr	r3, [pc, #228]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	08db      	lsrs	r3, r3, #3
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	4a39      	ldr	r2, [pc, #228]	@ (8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005924:	fa22 f303 	lsr.w	r3, r2, r3
 8005928:	637b      	str	r3, [r7, #52]	@ 0x34
 800592a:	e01e      	b.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800592c:	4b34      	ldr	r3, [pc, #208]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005938:	d106      	bne.n	8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800593a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800593c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005940:	d102      	bne.n	8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005942:	4b32      	ldr	r3, [pc, #200]	@ (8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005944:	637b      	str	r3, [r7, #52]	@ 0x34
 8005946:	e010      	b.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005948:	4b2d      	ldr	r3, [pc, #180]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005950:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005954:	d106      	bne.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8005956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005958:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800595c:	d102      	bne.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800595e:	4b2c      	ldr	r3, [pc, #176]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005960:	637b      	str	r3, [r7, #52]	@ 0x34
 8005962:	e002      	b.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005968:	e003      	b.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800596a:	e002      	b.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 800596c:	2300      	movs	r3, #0
 800596e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005970:	bf00      	nop
          }
        }
        break;
 8005972:	f001 bf70 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005976:	4b22      	ldr	r3, [pc, #136]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005978:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800597c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005980:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8005982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005984:	2b00      	cmp	r3, #0
 8005986:	d108      	bne.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005988:	f107 0320 	add.w	r3, r7, #32
 800598c:	4618      	mov	r0, r3
 800598e:	f7fe ffd9 	bl	8004944 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005994:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005996:	f001 bf5e 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800599a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599c:	2b40      	cmp	r3, #64	@ 0x40
 800599e:	d108      	bne.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059a0:	f107 0314 	add.w	r3, r7, #20
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7ff f937 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059ae:	f001 bf52 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059b6:	f001 bf4e 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 80059ba:	4b11      	ldr	r3, [pc, #68]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80059bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80059c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059c4:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 80059c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d108      	bne.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059cc:	f107 0320 	add.w	r3, r7, #32
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fe ffb7 	bl	8004944 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80059da:	f001 bf3c 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 80059de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e0:	2b80      	cmp	r3, #128	@ 0x80
 80059e2:	d108      	bne.n	80059f6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059e4:	f107 0314 	add.w	r3, r7, #20
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7ff f915 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059f2:	f001 bf30 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059fa:	f001 bf2c 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80059fe:	bf00      	nop
 8005a00:	44020c00 	.word	0x44020c00
 8005a04:	00bb8000 	.word	0x00bb8000
 8005a08:	03d09000 	.word	0x03d09000
 8005a0c:	003d0900 	.word	0x003d0900
 8005a10:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005a14:	4b9d      	ldr	r3, [pc, #628]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005a16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d104      	bne.n	8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005a26:	f7fc ff9f 	bl	8002968 <HAL_RCC_GetPCLK2Freq>
 8005a2a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005a2c:	f001 bf13 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8005a30:	4b96      	ldr	r3, [pc, #600]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a3c:	d10a      	bne.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d107      	bne.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a44:	f107 0314 	add.w	r3, r7, #20
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7ff f8e5 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a52:	e043      	b.n	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8005a54:	4b8d      	ldr	r3, [pc, #564]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a60:	d10a      	bne.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8005a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d107      	bne.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a68:	f107 0308 	add.w	r3, r7, #8
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff fa3d 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a76:	e031      	b.n	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005a78:	4b84      	ldr	r3, [pc, #528]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d10c      	bne.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8005a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d109      	bne.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005a8a:	4b80      	ldr	r3, [pc, #512]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	08db      	lsrs	r3, r3, #3
 8005a90:	f003 0303 	and.w	r3, r3, #3
 8005a94:	4a7e      	ldr	r2, [pc, #504]	@ (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005a96:	fa22 f303 	lsr.w	r3, r2, r3
 8005a9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a9c:	e01e      	b.n	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8005a9e:	4b7b      	ldr	r3, [pc, #492]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005aa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005aaa:	d105      	bne.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8005aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d102      	bne.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8005ab2:	4b78      	ldr	r3, [pc, #480]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005ab4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ab6:	e011      	b.n	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005ab8:	4b74      	ldr	r3, [pc, #464]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005aba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d106      	bne.n	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac8:	2b05      	cmp	r3, #5
 8005aca:	d103      	bne.n	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8005acc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ad0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ad2:	e003      	b.n	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ad8:	f001 bebd 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005adc:	f001 bebb 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005ae0:	4b6a      	ldr	r3, [pc, #424]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005ae2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005ae6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005aea:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d104      	bne.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005af2:	f7fc ff23 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8005af6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8005af8:	f001 bead 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8005afc:	4b63      	ldr	r3, [pc, #396]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b08:	d10a      	bne.n	8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d107      	bne.n	8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b10:	f107 0314 	add.w	r3, r7, #20
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff f87f 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b1e:	e03d      	b.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8005b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b22:	2b10      	cmp	r3, #16
 8005b24:	d108      	bne.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b26:	f107 0308 	add.w	r3, r7, #8
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7ff f9de 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b34:	f001 be8f 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005b38:	4b54      	ldr	r3, [pc, #336]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0302 	and.w	r3, r3, #2
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d10c      	bne.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b46:	2b18      	cmp	r3, #24
 8005b48:	d109      	bne.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005b4a:	4b50      	ldr	r3, [pc, #320]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	08db      	lsrs	r3, r3, #3
 8005b50:	f003 0303 	and.w	r3, r3, #3
 8005b54:	4a4e      	ldr	r2, [pc, #312]	@ (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005b56:	fa22 f303 	lsr.w	r3, r2, r3
 8005b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b5c:	e01e      	b.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8005b5e:	4b4b      	ldr	r3, [pc, #300]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b6a:	d105      	bne.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6e:	2b20      	cmp	r3, #32
 8005b70:	d102      	bne.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8005b72:	4b48      	ldr	r3, [pc, #288]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005b74:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b76:	e011      	b.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005b78:	4b44      	ldr	r3, [pc, #272]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005b7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d106      	bne.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8005b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b88:	2b28      	cmp	r3, #40	@ 0x28
 8005b8a:	d103      	bne.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8005b8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b92:	e003      	b.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8005b94:	2300      	movs	r3, #0
 8005b96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b98:	f001 be5d 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005b9c:	f001 be5b 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005ba0:	4b3a      	ldr	r3, [pc, #232]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005ba2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005ba6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005baa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d104      	bne.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005bb2:	f7fc fec3 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8005bb6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8005bb8:	f001 be4d 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8005bbc:	4b33      	ldr	r3, [pc, #204]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bc8:	d10a      	bne.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bcc:	2b40      	cmp	r3, #64	@ 0x40
 8005bce:	d107      	bne.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bd0:	f107 0314 	add.w	r3, r7, #20
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7ff f81f 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bde:	e045      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8005be0:	4b2a      	ldr	r3, [pc, #168]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005be8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bec:	d10a      	bne.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8005bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf0:	2b80      	cmp	r3, #128	@ 0x80
 8005bf2:	d107      	bne.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bf4:	f107 0308 	add.w	r3, r7, #8
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7ff f977 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c02:	e033      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005c04:	4b21      	ldr	r3, [pc, #132]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d10c      	bne.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8005c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c12:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c14:	d109      	bne.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005c16:	4b1d      	ldr	r3, [pc, #116]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	08db      	lsrs	r3, r3, #3
 8005c1c:	f003 0303 	and.w	r3, r3, #3
 8005c20:	4a1b      	ldr	r2, [pc, #108]	@ (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005c22:	fa22 f303 	lsr.w	r3, r2, r3
 8005c26:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c28:	e020      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8005c2a:	4b18      	ldr	r3, [pc, #96]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c36:	d106      	bne.n	8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8005c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c3e:	d102      	bne.n	8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8005c40:	4b14      	ldr	r3, [pc, #80]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005c42:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c44:	e012      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005c46:	4b11      	ldr	r3, [pc, #68]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005c48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d107      	bne.n	8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8005c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c56:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005c5a:	d103      	bne.n	8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8005c5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c60:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c62:	e003      	b.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8005c64:	2300      	movs	r3, #0
 8005c66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005c68:	f001 bdf5 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005c6c:	f001 bdf3 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005c70:	4b06      	ldr	r3, [pc, #24]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005c72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005c76:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8005c7a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10a      	bne.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c82:	f7fc fe5b 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8005c86:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8005c88:	f001 bde5 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005c8c:	44020c00 	.word	0x44020c00
 8005c90:	03d09000 	.word	0x03d09000
 8005c94:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8005c98:	4ba0      	ldr	r3, [pc, #640]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ca0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ca4:	d10b      	bne.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cac:	d107      	bne.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cae:	f107 0314 	add.w	r3, r7, #20
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fe ffb0 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cbc:	e047      	b.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8005cbe:	4b97      	ldr	r3, [pc, #604]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cca:	d10b      	bne.n	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8005ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cd2:	d107      	bne.n	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cd4:	f107 0308 	add.w	r3, r7, #8
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff f907 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ce2:	e034      	b.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005ce4:	4b8d      	ldr	r3, [pc, #564]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0302 	and.w	r3, r3, #2
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d10d      	bne.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005cf6:	d109      	bne.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005cf8:	4b88      	ldr	r3, [pc, #544]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	08db      	lsrs	r3, r3, #3
 8005cfe:	f003 0303 	and.w	r3, r3, #3
 8005d02:	4a87      	ldr	r2, [pc, #540]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005d04:	fa22 f303 	lsr.w	r3, r2, r3
 8005d08:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d0a:	e020      	b.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8005d0c:	4b83      	ldr	r3, [pc, #524]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d18:	d106      	bne.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d20:	d102      	bne.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8005d22:	4b80      	ldr	r3, [pc, #512]	@ (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d26:	e012      	b.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005d28:	4b7c      	ldr	r3, [pc, #496]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005d2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d107      	bne.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8005d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d38:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005d3c:	d103      	bne.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8005d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d44:	e003      	b.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d4a:	f001 bd84 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005d4e:	f001 bd82 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005d52:	4b72      	ldr	r3, [pc, #456]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005d54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005d58:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005d5c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d104      	bne.n	8005d6e <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d64:	f7fc fdea 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8005d68:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8005d6a:	f001 bd74 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8005d6e:	4b6b      	ldr	r3, [pc, #428]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d7a:	d10b      	bne.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d82:	d107      	bne.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d84:	f107 0314 	add.w	r3, r7, #20
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7fe ff45 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d92:	e047      	b.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8005d94:	4b61      	ldr	r3, [pc, #388]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005da0:	d10b      	bne.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8005da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005da8:	d107      	bne.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005daa:	f107 0308 	add.w	r3, r7, #8
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7ff f89c 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005db8:	e034      	b.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005dba:	4b58      	ldr	r3, [pc, #352]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d10d      	bne.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8005dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005dcc:	d109      	bne.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005dce:	4b53      	ldr	r3, [pc, #332]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	08db      	lsrs	r3, r3, #3
 8005dd4:	f003 0303 	and.w	r3, r3, #3
 8005dd8:	4a51      	ldr	r2, [pc, #324]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005dda:	fa22 f303 	lsr.w	r3, r2, r3
 8005dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8005de0:	e020      	b.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8005de2:	4b4e      	ldr	r3, [pc, #312]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005dea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dee:	d106      	bne.n	8005dfe <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8005df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005df6:	d102      	bne.n	8005dfe <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8005df8:	4b4a      	ldr	r3, [pc, #296]	@ (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005dfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dfc:	e012      	b.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005dfe:	4b47      	ldr	r3, [pc, #284]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d107      	bne.n	8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005e12:	d103      	bne.n	8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8005e14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e1a:	e003      	b.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e20:	f001 bd19 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005e24:	f001 bd17 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8005e28:	4b3c      	ldr	r3, [pc, #240]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005e2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005e2e:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8005e32:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8005e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d104      	bne.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e3a:	f7fc fd7f 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8005e3e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8005e40:	f001 bd09 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8005e44:	4b35      	ldr	r3, [pc, #212]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e50:	d10b      	bne.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8005e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e58:	d107      	bne.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e5a:	f107 0314 	add.w	r3, r7, #20
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fe feda 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e68:	e047      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8005e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e76:	d10b      	bne.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8005e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e7e:	d107      	bne.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e80:	f107 0308 	add.w	r3, r7, #8
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff f831 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e8e:	e034      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8005e90:	4b22      	ldr	r3, [pc, #136]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d10d      	bne.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8005e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005ea2:	d109      	bne.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	08db      	lsrs	r3, r3, #3
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	4a1c      	ldr	r2, [pc, #112]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005eb6:	e020      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8005eb8:	4b18      	ldr	r3, [pc, #96]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ec4:	d106      	bne.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ecc:	d102      	bne.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8005ece:	4b15      	ldr	r3, [pc, #84]	@ (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005ed0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ed2:	e012      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8005ed4:	4b11      	ldr	r3, [pc, #68]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005ed6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d107      	bne.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee4:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005ee8:	d103      	bne.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8005eea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ef0:	e003      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ef6:	f001 bcae 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005efa:	f001 bcac 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8005efe:	4b07      	ldr	r3, [pc, #28]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005f00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005f04:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8005f08:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10b      	bne.n	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f10:	f7fc fd14 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8005f14:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8005f16:	f001 bc9e 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005f1a:	bf00      	nop
 8005f1c:	44020c00 	.word	0x44020c00
 8005f20:	03d09000 	.word	0x03d09000
 8005f24:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8005f28:	4ba0      	ldr	r3, [pc, #640]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f34:	d10b      	bne.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8005f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f3c:	d107      	bne.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f3e:	f107 0314 	add.w	r3, r7, #20
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fe fe68 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f4c:	e047      	b.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8005f4e:	4b97      	ldr	r3, [pc, #604]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f5a:	d10b      	bne.n	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005f62:	d107      	bne.n	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f64:	f107 0308 	add.w	r3, r7, #8
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7fe ffbf 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f72:	e034      	b.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8005f74:	4b8d      	ldr	r3, [pc, #564]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0302 	and.w	r3, r3, #2
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d10d      	bne.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8005f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f82:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005f86:	d109      	bne.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f88:	4b88      	ldr	r3, [pc, #544]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	08db      	lsrs	r3, r3, #3
 8005f8e:	f003 0303 	and.w	r3, r3, #3
 8005f92:	4a87      	ldr	r2, [pc, #540]	@ (80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8005f94:	fa22 f303 	lsr.w	r3, r2, r3
 8005f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f9a:	e020      	b.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8005f9c:	4b83      	ldr	r3, [pc, #524]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fa8:	d106      	bne.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8005faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fb0:	d102      	bne.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8005fb2:	4b80      	ldr	r3, [pc, #512]	@ (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8005fb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fb6:	e012      	b.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8005fb8:	4b7c      	ldr	r3, [pc, #496]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005fba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d107      	bne.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005fcc:	d103      	bne.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8005fce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fd4:	e003      	b.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fda:	f001 bc3c 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005fde:	f001 bc3a 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8005fe2:	4b72      	ldr	r3, [pc, #456]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005fe4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005fe8:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8005fec:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8005fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d104      	bne.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ff4:	f7fc fca2 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8005ff8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8005ffa:	f001 bc2c 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8005ffe:	4b6b      	ldr	r3, [pc, #428]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006006:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800600a:	d10b      	bne.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800600c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006012:	d107      	bne.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006014:	f107 0314 	add.w	r3, r7, #20
 8006018:	4618      	mov	r0, r3
 800601a:	f7fe fdfd 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	637b      	str	r3, [r7, #52]	@ 0x34
 8006022:	e047      	b.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8006024:	4b61      	ldr	r3, [pc, #388]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800602c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006030:	d10b      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8006032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006034:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006038:	d107      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800603a:	f107 0308 	add.w	r3, r7, #8
 800603e:	4618      	mov	r0, r3
 8006040:	f7fe ff54 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	637b      	str	r3, [r7, #52]	@ 0x34
 8006048:	e034      	b.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800604a:	4b58      	ldr	r3, [pc, #352]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b02      	cmp	r3, #2
 8006054:	d10d      	bne.n	8006072 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8006056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006058:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800605c:	d109      	bne.n	8006072 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800605e:	4b53      	ldr	r3, [pc, #332]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	08db      	lsrs	r3, r3, #3
 8006064:	f003 0303 	and.w	r3, r3, #3
 8006068:	4a51      	ldr	r2, [pc, #324]	@ (80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800606a:	fa22 f303 	lsr.w	r3, r2, r3
 800606e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006070:	e020      	b.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8006072:	4b4e      	ldr	r3, [pc, #312]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800607a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800607e:	d106      	bne.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8006080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006082:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006086:	d102      	bne.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8006088:	4b4a      	ldr	r3, [pc, #296]	@ (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800608a:	637b      	str	r3, [r7, #52]	@ 0x34
 800608c:	e012      	b.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800608e:	4b47      	ldr	r3, [pc, #284]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b02      	cmp	r3, #2
 800609a:	d107      	bne.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800609c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80060a2:	d103      	bne.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 80060a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80060aa:	e003      	b.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060b0:	f001 bbd1 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80060b4:	f001 bbcf 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80060b8:	4b3c      	ldr	r3, [pc, #240]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80060ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80060be:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80060c2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80060c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d104      	bne.n	80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80060ca:	f7fc fc37 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 80060ce:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 80060d0:	f001 bbc1 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 80060d4:	4b35      	ldr	r3, [pc, #212]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060e0:	d10b      	bne.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 80060e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060e8:	d107      	bne.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060ea:	f107 0314 	add.w	r3, r7, #20
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fe fd92 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80060f8:	e047      	b.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80060fa:	4b2c      	ldr	r3, [pc, #176]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006102:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006106:	d10b      	bne.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8006108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800610e:	d107      	bne.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006110:	f107 0308 	add.w	r3, r7, #8
 8006114:	4618      	mov	r0, r3
 8006116:	f7fe fee9 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	637b      	str	r3, [r7, #52]	@ 0x34
 800611e:	e034      	b.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8006120:	4b22      	ldr	r3, [pc, #136]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	2b02      	cmp	r3, #2
 800612a:	d10d      	bne.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800612c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006132:	d109      	bne.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006134:	4b1d      	ldr	r3, [pc, #116]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	08db      	lsrs	r3, r3, #3
 800613a:	f003 0303 	and.w	r3, r3, #3
 800613e:	4a1c      	ldr	r2, [pc, #112]	@ (80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8006140:	fa22 f303 	lsr.w	r3, r2, r3
 8006144:	637b      	str	r3, [r7, #52]	@ 0x34
 8006146:	e020      	b.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8006148:	4b18      	ldr	r3, [pc, #96]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006150:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006154:	d106      	bne.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8006156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006158:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800615c:	d102      	bne.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800615e:	4b15      	ldr	r3, [pc, #84]	@ (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8006160:	637b      	str	r3, [r7, #52]	@ 0x34
 8006162:	e012      	b.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8006164:	4b11      	ldr	r3, [pc, #68]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006166:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b02      	cmp	r3, #2
 8006170:	d107      	bne.n	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8006172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006174:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006178:	d103      	bne.n	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800617a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800617e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006180:	e003      	b.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006186:	f001 bb66 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800618a:	f001 bb64 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800618e:	4b07      	ldr	r3, [pc, #28]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006190:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006194:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8006198:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800619a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10b      	bne.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80061a0:	f7fc fbcc 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 80061a4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80061a6:	f001 bb56 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80061aa:	bf00      	nop
 80061ac:	44020c00 	.word	0x44020c00
 80061b0:	03d09000 	.word	0x03d09000
 80061b4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80061b8:	4ba1      	ldr	r3, [pc, #644]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061c4:	d10b      	bne.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80061c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061cc:	d107      	bne.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061ce:	f107 0314 	add.w	r3, r7, #20
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7fe fd20 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	637b      	str	r3, [r7, #52]	@ 0x34
 80061dc:	e047      	b.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 80061de:	4b98      	ldr	r3, [pc, #608]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061ea:	d10b      	bne.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 80061ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061f2:	d107      	bne.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061f4:	f107 0308 	add.w	r3, r7, #8
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fe fe77 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	637b      	str	r3, [r7, #52]	@ 0x34
 8006202:	e034      	b.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8006204:	4b8e      	ldr	r3, [pc, #568]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b02      	cmp	r3, #2
 800620e:	d10d      	bne.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8006210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006212:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8006216:	d109      	bne.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006218:	4b89      	ldr	r3, [pc, #548]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	08db      	lsrs	r3, r3, #3
 800621e:	f003 0303 	and.w	r3, r3, #3
 8006222:	4a88      	ldr	r2, [pc, #544]	@ (8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006224:	fa22 f303 	lsr.w	r3, r2, r3
 8006228:	637b      	str	r3, [r7, #52]	@ 0x34
 800622a:	e020      	b.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800622c:	4b84      	ldr	r3, [pc, #528]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006238:	d106      	bne.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800623a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006240:	d102      	bne.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8006242:	4b81      	ldr	r3, [pc, #516]	@ (8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006244:	637b      	str	r3, [r7, #52]	@ 0x34
 8006246:	e012      	b.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8006248:	4b7d      	ldr	r3, [pc, #500]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800624a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b02      	cmp	r3, #2
 8006254:	d107      	bne.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8006256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006258:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800625c:	d103      	bne.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800625e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006262:	637b      	str	r3, [r7, #52]	@ 0x34
 8006264:	e003      	b.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800626a:	f001 baf4 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800626e:	f001 baf2 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8006272:	4b73      	ldr	r3, [pc, #460]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006274:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800627e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006280:	2b00      	cmp	r3, #0
 8006282:	d104      	bne.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006284:	f7fc fb5a 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8006288:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800628a:	f001 bae4 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800628e:	4b6c      	ldr	r3, [pc, #432]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006296:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800629a:	d10a      	bne.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800629c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d107      	bne.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062a2:	f107 0314 	add.w	r3, r7, #20
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fe fcb6 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80062b0:	e043      	b.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80062b2:	4b63      	ldr	r3, [pc, #396]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062be:	d10a      	bne.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 80062c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d107      	bne.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062c6:	f107 0308 	add.w	r3, r7, #8
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fe fe0e 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80062d4:	e031      	b.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 80062d6:	4b5a      	ldr	r3, [pc, #360]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d10c      	bne.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 80062e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e4:	2b03      	cmp	r3, #3
 80062e6:	d109      	bne.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80062e8:	4b55      	ldr	r3, [pc, #340]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	08db      	lsrs	r3, r3, #3
 80062ee:	f003 0303 	and.w	r3, r3, #3
 80062f2:	4a54      	ldr	r2, [pc, #336]	@ (8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80062f4:	fa22 f303 	lsr.w	r3, r2, r3
 80062f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80062fa:	e01e      	b.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80062fc:	4b50      	ldr	r3, [pc, #320]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006308:	d105      	bne.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800630a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630c:	2b04      	cmp	r3, #4
 800630e:	d102      	bne.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8006310:	4b4d      	ldr	r3, [pc, #308]	@ (8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006312:	637b      	str	r3, [r7, #52]	@ 0x34
 8006314:	e011      	b.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8006316:	4b4a      	ldr	r3, [pc, #296]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006318:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b02      	cmp	r3, #2
 8006322:	d106      	bne.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8006324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006326:	2b05      	cmp	r3, #5
 8006328:	d103      	bne.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800632a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800632e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006330:	e003      	b.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006336:	f001 ba8e 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800633a:	f001 ba8c 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800633e:	4b40      	ldr	r3, [pc, #256]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006340:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006344:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006348:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800634a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634c:	2b00      	cmp	r3, #0
 800634e:	d104      	bne.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006350:	f7fc faf4 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8006354:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8006356:	f001 ba7e 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800635a:	4b39      	ldr	r3, [pc, #228]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006362:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006366:	d10a      	bne.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8006368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636a:	2b10      	cmp	r3, #16
 800636c:	d107      	bne.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800636e:	f107 0314 	add.w	r3, r7, #20
 8006372:	4618      	mov	r0, r3
 8006374:	f7fe fc50 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	637b      	str	r3, [r7, #52]	@ 0x34
 800637c:	e043      	b.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800637e:	4b30      	ldr	r3, [pc, #192]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006386:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800638a:	d10a      	bne.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800638c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638e:	2b20      	cmp	r3, #32
 8006390:	d107      	bne.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006392:	f107 0308 	add.w	r3, r7, #8
 8006396:	4618      	mov	r0, r3
 8006398:	f7fe fda8 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	637b      	str	r3, [r7, #52]	@ 0x34
 80063a0:	e031      	b.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80063a2:	4b27      	ldr	r3, [pc, #156]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d10c      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80063ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b0:	2b30      	cmp	r3, #48	@ 0x30
 80063b2:	d109      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80063b4:	4b22      	ldr	r3, [pc, #136]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	08db      	lsrs	r3, r3, #3
 80063ba:	f003 0303 	and.w	r3, r3, #3
 80063be:	4a21      	ldr	r2, [pc, #132]	@ (8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80063c0:	fa22 f303 	lsr.w	r3, r2, r3
 80063c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80063c6:	e01e      	b.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80063c8:	4b1d      	ldr	r3, [pc, #116]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063d4:	d105      	bne.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 80063d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d8:	2b40      	cmp	r3, #64	@ 0x40
 80063da:	d102      	bne.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 80063dc:	4b1a      	ldr	r3, [pc, #104]	@ (8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80063de:	637b      	str	r3, [r7, #52]	@ 0x34
 80063e0:	e011      	b.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 80063e2:	4b17      	ldr	r3, [pc, #92]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80063e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063e8:	f003 0302 	and.w	r3, r3, #2
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d106      	bne.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 80063f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f2:	2b50      	cmp	r3, #80	@ 0x50
 80063f4:	d103      	bne.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 80063f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80063fc:	e003      	b.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006402:	f001 ba28 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006406:	f001 ba26 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800640a:	4b0d      	ldr	r3, [pc, #52]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800640c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006410:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006414:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006418:	2b00      	cmp	r3, #0
 800641a:	d104      	bne.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800641c:	f7fc faba 	bl	8002994 <HAL_RCC_GetPCLK3Freq>
 8006420:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006422:	f001 ba18 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006428:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800642c:	d10e      	bne.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800642e:	f107 0314 	add.w	r3, r7, #20
 8006432:	4618      	mov	r0, r3
 8006434:	f7fe fbf0 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800643c:	f001 ba0b 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006440:	44020c00 	.word	0x44020c00
 8006444:	03d09000 	.word	0x03d09000
 8006448:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800644c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006452:	d108      	bne.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006454:	f107 0308 	add.w	r3, r7, #8
 8006458:	4618      	mov	r0, r3
 800645a:	f7fe fd47 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006462:	f001 b9f8 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006466:	4ba4      	ldr	r3, [pc, #656]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b02      	cmp	r3, #2
 8006470:	d10d      	bne.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8006472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006474:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006478:	d109      	bne.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800647a:	4b9f      	ldr	r3, [pc, #636]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	08db      	lsrs	r3, r3, #3
 8006480:	f003 0303 	and.w	r3, r3, #3
 8006484:	4a9d      	ldr	r2, [pc, #628]	@ (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006486:	fa22 f303 	lsr.w	r3, r2, r3
 800648a:	637b      	str	r3, [r7, #52]	@ 0x34
 800648c:	e020      	b.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800648e:	4b9a      	ldr	r3, [pc, #616]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006496:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800649a:	d106      	bne.n	80064aa <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800649c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064a2:	d102      	bne.n	80064aa <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 80064a4:	4b96      	ldr	r3, [pc, #600]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80064a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80064a8:	e012      	b.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80064aa:	4b93      	ldr	r3, [pc, #588]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80064ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064b0:	f003 0302 	and.w	r3, r3, #2
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d107      	bne.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 80064b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ba:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80064be:	d103      	bne.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 80064c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80064c6:	e003      	b.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064cc:	f001 b9c3 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80064d0:	f001 b9c1 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80064d4:	4b88      	ldr	r3, [pc, #544]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80064d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80064da:	f003 0307 	and.w	r3, r3, #7
 80064de:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80064e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d104      	bne.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80064e6:	f7fc fa0d 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 80064ea:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80064ec:	f001 b9b3 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80064f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d104      	bne.n	8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 80064f6:	f7fc f8d9 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 80064fa:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80064fc:	f001 b9ab 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006502:	2b02      	cmp	r3, #2
 8006504:	d108      	bne.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006506:	f107 0314 	add.w	r3, r7, #20
 800650a:	4618      	mov	r0, r3
 800650c:	f7fe fb84 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006514:	f001 b99f 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006518:	4b77      	ldr	r3, [pc, #476]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006520:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006524:	d105      	bne.n	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8006526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006528:	2b03      	cmp	r3, #3
 800652a:	d102      	bne.n	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800652c:	4b75      	ldr	r3, [pc, #468]	@ (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800652e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006530:	e023      	b.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006532:	4b71      	ldr	r3, [pc, #452]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b02      	cmp	r3, #2
 800653c:	d10c      	bne.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800653e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006540:	2b04      	cmp	r3, #4
 8006542:	d109      	bne.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006544:	4b6c      	ldr	r3, [pc, #432]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	08db      	lsrs	r3, r3, #3
 800654a:	f003 0303 	and.w	r3, r3, #3
 800654e:	4a6b      	ldr	r2, [pc, #428]	@ (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006550:	fa22 f303 	lsr.w	r3, r2, r3
 8006554:	637b      	str	r3, [r7, #52]	@ 0x34
 8006556:	e010      	b.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006558:	4b67      	ldr	r3, [pc, #412]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006560:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006564:	d105      	bne.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8006566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006568:	2b05      	cmp	r3, #5
 800656a:	d102      	bne.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800656c:	4b64      	ldr	r3, [pc, #400]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800656e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006570:	e003      	b.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8006572:	2300      	movs	r3, #0
 8006574:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006576:	f001 b96e 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800657a:	f001 b96c 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800657e:	4b5e      	ldr	r3, [pc, #376]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006580:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006584:	f003 0308 	and.w	r3, r3, #8
 8006588:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800658a:	4b5b      	ldr	r3, [pc, #364]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800658c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b02      	cmp	r3, #2
 8006596:	d106      	bne.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8006598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659a:	2b00      	cmp	r3, #0
 800659c:	d103      	bne.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800659e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80065a4:	e012      	b.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80065a6:	4b54      	ldr	r3, [pc, #336]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80065a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065b4:	d106      	bne.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 80065b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b8:	2b08      	cmp	r3, #8
 80065ba:	d103      	bne.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 80065bc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80065c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80065c2:	e003      	b.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80065c8:	f001 b945 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80065cc:	f001 b943 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80065d0:	4b49      	ldr	r3, [pc, #292]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80065d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80065d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80065da:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80065dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d104      	bne.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80065e2:	f7fc f9ab 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 80065e6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80065e8:	f001 b935 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 80065ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065f2:	d108      	bne.n	8006606 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065f4:	f107 0308 	add.w	r3, r7, #8
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7fe fc77 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006602:	f001 b928 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006606:	4b3c      	ldr	r3, [pc, #240]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0302 	and.w	r3, r3, #2
 800660e:	2b02      	cmp	r3, #2
 8006610:	d10d      	bne.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8006612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006614:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006618:	d109      	bne.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800661a:	4b37      	ldr	r3, [pc, #220]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	08db      	lsrs	r3, r3, #3
 8006620:	f003 0303 	and.w	r3, r3, #3
 8006624:	4a35      	ldr	r2, [pc, #212]	@ (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006626:	fa22 f303 	lsr.w	r3, r2, r3
 800662a:	637b      	str	r3, [r7, #52]	@ 0x34
 800662c:	e011      	b.n	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800662e:	4b32      	ldr	r3, [pc, #200]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006636:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800663a:	d106      	bne.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800663c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800663e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006642:	d102      	bne.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8006644:	4b2e      	ldr	r3, [pc, #184]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006646:	637b      	str	r3, [r7, #52]	@ 0x34
 8006648:	e003      	b.n	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800664e:	f001 b902 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006652:	f001 b900 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006656:	4b28      	ldr	r3, [pc, #160]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006658:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800665c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006660:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006664:	2b00      	cmp	r3, #0
 8006666:	d104      	bne.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006668:	f7fc f968 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 800666c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800666e:	f001 b8f2 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006674:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006678:	d108      	bne.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800667a:	f107 0308 	add.w	r3, r7, #8
 800667e:	4618      	mov	r0, r3
 8006680:	f7fe fc34 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006688:	f001 b8e5 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800668c:	4b1a      	ldr	r3, [pc, #104]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b02      	cmp	r3, #2
 8006696:	d10d      	bne.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8006698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800669a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800669e:	d109      	bne.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80066a0:	4b15      	ldr	r3, [pc, #84]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	08db      	lsrs	r3, r3, #3
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	4a14      	ldr	r2, [pc, #80]	@ (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80066ac:	fa22 f303 	lsr.w	r3, r2, r3
 80066b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80066b2:	e011      	b.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80066b4:	4b10      	ldr	r3, [pc, #64]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066c0:	d106      	bne.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 80066c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80066c8:	d102      	bne.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 80066ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80066cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80066ce:	e003      	b.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 80066d0:	2300      	movs	r3, #0
 80066d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066d4:	f001 b8bf 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80066d8:	f001 b8bd 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80066dc:	4b06      	ldr	r3, [pc, #24]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80066de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80066e2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80066e6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80066e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10c      	bne.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80066ee:	f7fc f951 	bl	8002994 <HAL_RCC_GetPCLK3Freq>
 80066f2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 80066f4:	f001 b8af 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80066f8:	44020c00 	.word	0x44020c00
 80066fc:	03d09000 	.word	0x03d09000
 8006700:	003d0900 	.word	0x003d0900
 8006704:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800670e:	d108      	bne.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006710:	f107 0308 	add.w	r3, r7, #8
 8006714:	4618      	mov	r0, r3
 8006716:	f7fe fbe9 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800671e:	f001 b89a 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006722:	4b9f      	ldr	r3, [pc, #636]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b02      	cmp	r3, #2
 800672c:	d10d      	bne.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800672e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006730:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006734:	d109      	bne.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006736:	4b9a      	ldr	r3, [pc, #616]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	08db      	lsrs	r3, r3, #3
 800673c:	f003 0303 	and.w	r3, r3, #3
 8006740:	4a98      	ldr	r2, [pc, #608]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006742:	fa22 f303 	lsr.w	r3, r2, r3
 8006746:	637b      	str	r3, [r7, #52]	@ 0x34
 8006748:	e011      	b.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800674a:	4b95      	ldr	r3, [pc, #596]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006752:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006756:	d106      	bne.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8006758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800675e:	d102      	bne.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8006760:	4b91      	ldr	r3, [pc, #580]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006762:	637b      	str	r3, [r7, #52]	@ 0x34
 8006764:	e003      	b.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800676a:	f001 b874 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800676e:	f001 b872 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006772:	4b8b      	ldr	r3, [pc, #556]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006774:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006778:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800677c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800677e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006780:	2b00      	cmp	r3, #0
 8006782:	d104      	bne.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006784:	f7fc f906 	bl	8002994 <HAL_RCC_GetPCLK3Freq>
 8006788:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800678a:	f001 b864 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800678e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006790:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006794:	d108      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006796:	f107 0308 	add.w	r3, r7, #8
 800679a:	4618      	mov	r0, r3
 800679c:	f7fe fba6 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067a4:	f001 b857 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80067a8:	4b7d      	ldr	r3, [pc, #500]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0302 	and.w	r3, r3, #2
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d10d      	bne.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 80067b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80067ba:	d109      	bne.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80067bc:	4b78      	ldr	r3, [pc, #480]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	08db      	lsrs	r3, r3, #3
 80067c2:	f003 0303 	and.w	r3, r3, #3
 80067c6:	4a77      	ldr	r2, [pc, #476]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80067c8:	fa22 f303 	lsr.w	r3, r2, r3
 80067cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ce:	e011      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 80067d0:	4b73      	ldr	r3, [pc, #460]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067dc:	d106      	bne.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 80067de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80067e4:	d102      	bne.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 80067e6:	4b70      	ldr	r3, [pc, #448]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80067e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ea:	e003      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067f0:	f001 b831 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80067f4:	f001 b82f 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80067f8:	4b69      	ldr	r3, [pc, #420]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80067fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80067fe:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006802:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006806:	2b00      	cmp	r3, #0
 8006808:	d104      	bne.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800680a:	f7fc f897 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 800680e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006810:	f001 b821 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8006814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006816:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800681a:	d108      	bne.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800681c:	f107 0308 	add.w	r3, r7, #8
 8006820:	4618      	mov	r0, r3
 8006822:	f7fe fb63 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800682a:	f001 b814 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800682e:	4b5c      	ldr	r3, [pc, #368]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b02      	cmp	r3, #2
 8006838:	d10e      	bne.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800683a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006840:	d10a      	bne.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006842:	4b57      	ldr	r3, [pc, #348]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	08db      	lsrs	r3, r3, #3
 8006848:	f003 0303 	and.w	r3, r3, #3
 800684c:	4a55      	ldr	r2, [pc, #340]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800684e:	fa22 f303 	lsr.w	r3, r2, r3
 8006852:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006854:	f000 bfff 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800685c:	f000 bffb 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006860:	4b4f      	ldr	r3, [pc, #316]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006862:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006866:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800686a:	633b      	str	r3, [r7, #48]	@ 0x30
 800686c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006872:	d056      	beq.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8006874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006876:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800687a:	f200 808b 	bhi.w	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800687e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006880:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006884:	d03e      	beq.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8006886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006888:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800688c:	f200 8082 	bhi.w	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006892:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006896:	d027      	beq.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8006898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800689e:	d879      	bhi.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80068a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068a6:	d017      	beq.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 80068a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068ae:	d871      	bhi.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80068b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d004      	beq.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 80068b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068bc:	d004      	beq.n	80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 80068be:	e069      	b.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80068c0:	f7fc f868 	bl	8002994 <HAL_RCC_GetPCLK3Freq>
 80068c4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80068c6:	e068      	b.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068c8:	f107 0314 	add.w	r3, r7, #20
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7fe f9a3 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80068d6:	e060      	b.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068d8:	f107 0308 	add.w	r3, r7, #8
 80068dc:	4618      	mov	r0, r3
 80068de:	f7fe fb05 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80068e6:	e058      	b.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80068e8:	4b2d      	ldr	r3, [pc, #180]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80068ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d103      	bne.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 80068f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068fa:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80068fc:	e04d      	b.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80068fe:	2300      	movs	r3, #0
 8006900:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006902:	e04a      	b.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006904:	4b26      	ldr	r3, [pc, #152]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006906:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800690a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800690e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006912:	d103      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8006914:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006918:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800691a:	e03e      	b.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800691c:	2300      	movs	r3, #0
 800691e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006920:	e03b      	b.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006922:	4b1f      	ldr	r3, [pc, #124]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006924:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006928:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800692c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800692e:	4b1c      	ldr	r3, [pc, #112]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0302 	and.w	r3, r3, #2
 8006936:	2b02      	cmp	r3, #2
 8006938:	d10c      	bne.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800693a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800693c:	2b00      	cmp	r3, #0
 800693e:	d109      	bne.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006940:	4b17      	ldr	r3, [pc, #92]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	08db      	lsrs	r3, r3, #3
 8006946:	f003 0303 	and.w	r3, r3, #3
 800694a:	4a16      	ldr	r2, [pc, #88]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800694c:	fa22 f303 	lsr.w	r3, r2, r3
 8006950:	637b      	str	r3, [r7, #52]	@ 0x34
 8006952:	e01e      	b.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006954:	4b12      	ldr	r3, [pc, #72]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800695c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006960:	d106      	bne.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8006962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006964:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006968:	d102      	bne.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800696a:	4b0f      	ldr	r3, [pc, #60]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800696c:	637b      	str	r3, [r7, #52]	@ 0x34
 800696e:	e010      	b.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006970:	4b0b      	ldr	r3, [pc, #44]	@ (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006978:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800697c:	d106      	bne.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800697e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006980:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006984:	d102      	bne.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006986:	4b09      	ldr	r3, [pc, #36]	@ (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8006988:	637b      	str	r3, [r7, #52]	@ 0x34
 800698a:	e002      	b.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800698c:	2300      	movs	r3, #0
 800698e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006990:	e003      	b.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8006992:	e002      	b.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006998:	bf00      	nop
          }
        }
        break;
 800699a:	f000 bf5c 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800699e:	bf00      	nop
 80069a0:	44020c00 	.word	0x44020c00
 80069a4:	03d09000 	.word	0x03d09000
 80069a8:	003d0900 	.word	0x003d0900
 80069ac:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80069b0:	4b9e      	ldr	r3, [pc, #632]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80069b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80069b6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80069ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80069bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069be:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80069c2:	d056      	beq.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 80069c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80069ca:	f200 808b 	bhi.w	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80069ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069d4:	d03e      	beq.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 80069d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069dc:	f200 8082 	bhi.w	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80069e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069e6:	d027      	beq.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 80069e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069ee:	d879      	bhi.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80069f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069f6:	d017      	beq.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 80069f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069fe:	d871      	bhi.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d004      	beq.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8006a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a0c:	d004      	beq.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8006a0e:	e069      	b.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8006a10:	f7fb ff94 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8006a14:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006a16:	e068      	b.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a18:	f107 0314 	add.w	r3, r7, #20
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7fe f8fb 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006a26:	e060      	b.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a28:	f107 0308 	add.w	r3, r7, #8
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7fe fa5d 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006a36:	e058      	b.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a38:	4b7c      	ldr	r3, [pc, #496]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006a3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d103      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8006a46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a4a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006a4c:	e04d      	b.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006a52:	e04a      	b.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006a54:	4b75      	ldr	r3, [pc, #468]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006a56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a62:	d103      	bne.n	8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8006a64:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006a68:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006a6a:	e03e      	b.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006a70:	e03b      	b.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a72:	4b6e      	ldr	r3, [pc, #440]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006a74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a78:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a7e:	4b6b      	ldr	r3, [pc, #428]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d10c      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8006a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d109      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a90:	4b66      	ldr	r3, [pc, #408]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	08db      	lsrs	r3, r3, #3
 8006a96:	f003 0303 	and.w	r3, r3, #3
 8006a9a:	4a65      	ldr	r2, [pc, #404]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8006a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aa2:	e01e      	b.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006aa4:	4b61      	ldr	r3, [pc, #388]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ab0:	d106      	bne.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8006ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ab8:	d102      	bne.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006aba:	4b5e      	ldr	r3, [pc, #376]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8006abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006abe:	e010      	b.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ac0:	4b5a      	ldr	r3, [pc, #360]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ac8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006acc:	d106      	bne.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8006ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ad4:	d102      	bne.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006ad6:	4b58      	ldr	r3, [pc, #352]	@ (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8006ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ada:	e002      	b.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006adc:	2300      	movs	r3, #0
 8006ade:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006ae0:	e003      	b.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8006ae2:	e002      	b.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006ae8:	bf00      	nop
          }
        }
        break;
 8006aea:	f000 beb4 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8006aee:	4b4f      	ldr	r3, [pc, #316]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006af0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006af4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006af8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b00:	d056      	beq.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8006b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b08:	f200 808b 	bhi.w	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b12:	d03e      	beq.n	8006b92 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8006b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b1a:	f200 8082 	bhi.w	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b24:	d027      	beq.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8006b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b2c:	d879      	bhi.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b34:	d017      	beq.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8006b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b3c:	d871      	bhi.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d004      	beq.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8006b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b4a:	d004      	beq.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8006b4c:	e069      	b.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006b4e:	f7fb ff21 	bl	8002994 <HAL_RCC_GetPCLK3Freq>
 8006b52:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006b54:	e068      	b.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b56:	f107 0314 	add.w	r3, r7, #20
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fe f85c 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006b64:	e060      	b.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b66:	f107 0308 	add.w	r3, r7, #8
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fe f9be 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006b74:	e058      	b.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b76:	4b2d      	ldr	r3, [pc, #180]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006b78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b7c:	f003 0302 	and.w	r3, r3, #2
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d103      	bne.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8006b84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b88:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006b8a:	e04d      	b.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006b90:	e04a      	b.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006b92:	4b26      	ldr	r3, [pc, #152]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006b94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ba0:	d103      	bne.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8006ba2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006ba6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006ba8:	e03e      	b.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8006baa:	2300      	movs	r3, #0
 8006bac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006bae:	e03b      	b.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006bb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006bb6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006bba:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0302 	and.w	r3, r3, #2
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d10c      	bne.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8006bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d109      	bne.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006bce:	4b17      	ldr	r3, [pc, #92]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	08db      	lsrs	r3, r3, #3
 8006bd4:	f003 0303 	and.w	r3, r3, #3
 8006bd8:	4a15      	ldr	r2, [pc, #84]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8006bda:	fa22 f303 	lsr.w	r3, r2, r3
 8006bde:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be0:	e01e      	b.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006be2:	4b12      	ldr	r3, [pc, #72]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bee:	d106      	bne.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8006bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bf6:	d102      	bne.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8006bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bfc:	e010      	b.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c0a:	d106      	bne.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8006c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c12:	d102      	bne.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006c14:	4b08      	ldr	r3, [pc, #32]	@ (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8006c16:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c18:	e002      	b.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006c1e:	e003      	b.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8006c20:	e002      	b.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8006c22:	2300      	movs	r3, #0
 8006c24:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006c26:	bf00      	nop
          }
        }
        break;
 8006c28:	f000 be15 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006c2c:	44020c00 	.word	0x44020c00
 8006c30:	03d09000 	.word	0x03d09000
 8006c34:	003d0900 	.word	0x003d0900
 8006c38:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8006c3c:	4b9e      	ldr	r3, [pc, #632]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006c3e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006c42:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8006c46:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8006c4e:	d056      	beq.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8006c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c52:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8006c56:	f200 808b 	bhi.w	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c60:	d03e      	beq.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8006c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c68:	f200 8082 	bhi.w	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c72:	d027      	beq.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8006c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c76:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c7a:	d879      	bhi.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c82:	d017      	beq.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8006c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c8a:	d871      	bhi.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d004      	beq.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8006c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c98:	d004      	beq.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8006c9a:	e069      	b.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006c9c:	f7fb fe7a 	bl	8002994 <HAL_RCC_GetPCLK3Freq>
 8006ca0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006ca2:	e068      	b.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ca4:	f107 0314 	add.w	r3, r7, #20
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7fd ffb5 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006cb2:	e060      	b.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cb4:	f107 0308 	add.w	r3, r7, #8
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fe f917 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006cc2:	e058      	b.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006cc4:	4b7c      	ldr	r3, [pc, #496]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006cc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d103      	bne.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8006cd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cd6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006cd8:	e04d      	b.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006cde:	e04a      	b.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006ce0:	4b75      	ldr	r3, [pc, #468]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006ce2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ce6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cee:	d103      	bne.n	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8006cf0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006cf4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006cf6:	e03e      	b.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006cfc:	e03b      	b.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cfe:	4b6e      	ldr	r3, [pc, #440]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006d00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d04:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006d08:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d0a:	4b6b      	ldr	r3, [pc, #428]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d10c      	bne.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8006d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d109      	bne.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d1c:	4b66      	ldr	r3, [pc, #408]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	08db      	lsrs	r3, r3, #3
 8006d22:	f003 0303 	and.w	r3, r3, #3
 8006d26:	4a65      	ldr	r2, [pc, #404]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8006d28:	fa22 f303 	lsr.w	r3, r2, r3
 8006d2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d2e:	e01e      	b.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d30:	4b61      	ldr	r3, [pc, #388]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d3c:	d106      	bne.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8006d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d44:	d102      	bne.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006d46:	4b5e      	ldr	r3, [pc, #376]	@ (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8006d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d4a:	e010      	b.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d4c:	4b5a      	ldr	r3, [pc, #360]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d58:	d106      	bne.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8006d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d60:	d102      	bne.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006d62:	4b58      	ldr	r3, [pc, #352]	@ (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8006d64:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d66:	e002      	b.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006d6c:	e003      	b.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8006d6e:	e002      	b.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8006d70:	2300      	movs	r3, #0
 8006d72:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006d74:	bf00      	nop
          }
        }
        break;
 8006d76:	f000 bd6e 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8006d7a:	4b4f      	ldr	r3, [pc, #316]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006d7c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006d80:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006d84:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d88:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006d8c:	d056      	beq.n	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d90:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006d94:	f200 808b 	bhi.w	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8006d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d9e:	d03e      	beq.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8006da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006da6:	f200 8082 	bhi.w	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8006daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006db0:	d027      	beq.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8006db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006db8:	d879      	bhi.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8006dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006dc0:	d017      	beq.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006dc8:	d871      	bhi.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8006dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d004      	beq.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006dd6:	d004      	beq.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8006dd8:	e069      	b.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006dda:	f7fb fddb 	bl	8002994 <HAL_RCC_GetPCLK3Freq>
 8006dde:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006de0:	e068      	b.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006de2:	f107 0314 	add.w	r3, r7, #20
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fd ff16 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006df0:	e060      	b.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006df2:	f107 0308 	add.w	r3, r7, #8
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fe f878 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006e00:	e058      	b.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006e02:	4b2d      	ldr	r3, [pc, #180]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006e04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e08:	f003 0302 	and.w	r3, r3, #2
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d103      	bne.n	8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8006e10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e14:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006e16:	e04d      	b.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006e1c:	e04a      	b.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006e1e:	4b26      	ldr	r3, [pc, #152]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006e20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e2c:	d103      	bne.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8006e2e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006e32:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006e34:	e03e      	b.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8006e36:	2300      	movs	r3, #0
 8006e38:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006e3a:	e03b      	b.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006e3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e42:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006e46:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e48:	4b1b      	ldr	r3, [pc, #108]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0302 	and.w	r3, r3, #2
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d10c      	bne.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8006e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d109      	bne.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e5a:	4b17      	ldr	r3, [pc, #92]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	08db      	lsrs	r3, r3, #3
 8006e60:	f003 0303 	and.w	r3, r3, #3
 8006e64:	4a15      	ldr	r2, [pc, #84]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8006e66:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e6c:	e01e      	b.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e6e:	4b12      	ldr	r3, [pc, #72]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e7a:	d106      	bne.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8006e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e82:	d102      	bne.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006e84:	4b0e      	ldr	r3, [pc, #56]	@ (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8006e86:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e88:	e010      	b.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e96:	d106      	bne.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8006e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e9e:	d102      	bne.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006ea0:	4b08      	ldr	r3, [pc, #32]	@ (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8006ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ea4:	e002      	b.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006eaa:	e003      	b.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8006eac:	e002      	b.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006eb2:	bf00      	nop
          }
        }
        break;
 8006eb4:	f000 bccf 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006eb8:	44020c00 	.word	0x44020c00
 8006ebc:	03d09000 	.word	0x03d09000
 8006ec0:	003d0900 	.word	0x003d0900
 8006ec4:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8006ec8:	4b9e      	ldr	r3, [pc, #632]	@ (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006eca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006ece:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006ed2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006eda:	d056      	beq.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8006edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ede:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ee2:	f200 808b 	bhi.w	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eec:	d03e      	beq.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8006eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ef4:	f200 8082 	bhi.w	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006efe:	d027      	beq.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8006f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f02:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006f06:	d879      	bhi.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8006f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f0e:	d017      	beq.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8006f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f16:	d871      	bhi.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8006f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d004      	beq.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f24:	d004      	beq.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8006f26:	e069      	b.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006f28:	f7fb fd34 	bl	8002994 <HAL_RCC_GetPCLK3Freq>
 8006f2c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006f2e:	e068      	b.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f30:	f107 0314 	add.w	r3, r7, #20
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7fd fe6f 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f3e:	e060      	b.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f40:	f107 0308 	add.w	r3, r7, #8
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fd ffd1 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f4e:	e058      	b.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006f50:	4b7c      	ldr	r3, [pc, #496]	@ (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006f52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f56:	f003 0302 	and.w	r3, r3, #2
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d103      	bne.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8006f5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f62:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006f64:	e04d      	b.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8006f66:	2300      	movs	r3, #0
 8006f68:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f6a:	e04a      	b.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006f6c:	4b75      	ldr	r3, [pc, #468]	@ (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006f6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f7a:	d103      	bne.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8006f7c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006f80:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006f82:	e03e      	b.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8006f84:	2300      	movs	r3, #0
 8006f86:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f88:	e03b      	b.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f8a:	4b6e      	ldr	r3, [pc, #440]	@ (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006f8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f90:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006f94:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f96:	4b6b      	ldr	r3, [pc, #428]	@ (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0302 	and.w	r3, r3, #2
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d10c      	bne.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8006fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d109      	bne.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006fa8:	4b66      	ldr	r3, [pc, #408]	@ (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	08db      	lsrs	r3, r3, #3
 8006fae:	f003 0303 	and.w	r3, r3, #3
 8006fb2:	4a65      	ldr	r2, [pc, #404]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8006fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fba:	e01e      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fbc:	4b61      	ldr	r3, [pc, #388]	@ (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fc8:	d106      	bne.n	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8006fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fd0:	d102      	bne.n	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006fd2:	4b5e      	ldr	r3, [pc, #376]	@ (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8006fd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fd6:	e010      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006fd8:	4b5a      	ldr	r3, [pc, #360]	@ (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fe0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fe4:	d106      	bne.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8006fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fec:	d102      	bne.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006fee:	4b58      	ldr	r3, [pc, #352]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8006ff0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ff2:	e002      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006ff8:	e003      	b.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8006ffa:	e002      	b.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007000:	bf00      	nop
          }
        }
        break;
 8007002:	f000 bc28 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007006:	4b4f      	ldr	r3, [pc, #316]	@ (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007008:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800700c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007010:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8007012:	4b4c      	ldr	r3, [pc, #304]	@ (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800701a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800701e:	d106      	bne.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8007020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007022:	2b00      	cmp	r3, #0
 8007024:	d103      	bne.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8007026:	4b4a      	ldr	r3, [pc, #296]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007028:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800702a:	f000 bc14 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800702e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007030:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007034:	d108      	bne.n	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007036:	f107 0320 	add.w	r3, r7, #32
 800703a:	4618      	mov	r0, r3
 800703c:	f7fd fc82 	bl	8004944 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007042:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007044:	f000 bc07 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8007048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800704e:	d107      	bne.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007050:	f107 0314 	add.w	r3, r7, #20
 8007054:	4618      	mov	r0, r3
 8007056:	f7fd fddf 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800705e:	e3fa      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007060:	2300      	movs	r3, #0
 8007062:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007064:	e3f7      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007066:	4b37      	ldr	r3, [pc, #220]	@ (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800706c:	f003 0307 	and.w	r3, r3, #7
 8007070:	633b      	str	r3, [r7, #48]	@ 0x30
 8007072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007074:	2b04      	cmp	r3, #4
 8007076:	d861      	bhi.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8007078:	a201      	add	r2, pc, #4	@ (adr r2, 8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800707a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707e:	bf00      	nop
 8007080:	08007095 	.word	0x08007095
 8007084:	080070a5 	.word	0x080070a5
 8007088:	080070b5 	.word	0x080070b5
 800708c:	080070c5 	.word	0x080070c5
 8007090:	080070cb 	.word	0x080070cb
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007094:	f107 0320 	add.w	r3, r7, #32
 8007098:	4618      	mov	r0, r3
 800709a:	f7fd fc53 	bl	8004944 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800709e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070a2:	e04e      	b.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070a4:	f107 0314 	add.w	r3, r7, #20
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7fd fdb5 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070b2:	e046      	b.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070b4:	f107 0308 	add.w	r3, r7, #8
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fd ff17 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070c2:	e03e      	b.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80070c4:	4b23      	ldr	r3, [pc, #140]	@ (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 80070c6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070c8:	e03b      	b.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070ca:	4b1e      	ldr	r3, [pc, #120]	@ (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80070cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80070d0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80070d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80070d6:	4b1b      	ldr	r3, [pc, #108]	@ (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d10c      	bne.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 80070e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d109      	bne.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80070e8:	4b16      	ldr	r3, [pc, #88]	@ (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	08db      	lsrs	r3, r3, #3
 80070ee:	f003 0303 	and.w	r3, r3, #3
 80070f2:	4a15      	ldr	r2, [pc, #84]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80070f4:	fa22 f303 	lsr.w	r3, r2, r3
 80070f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80070fa:	e01e      	b.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80070fc:	4b11      	ldr	r3, [pc, #68]	@ (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007108:	d106      	bne.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800710a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007110:	d102      	bne.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007112:	4b0e      	ldr	r3, [pc, #56]	@ (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8007114:	637b      	str	r3, [r7, #52]	@ 0x34
 8007116:	e010      	b.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007118:	4b0a      	ldr	r3, [pc, #40]	@ (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007120:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007124:	d106      	bne.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8007126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007128:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800712c:	d102      	bne.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800712e:	4b08      	ldr	r3, [pc, #32]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007130:	637b      	str	r3, [r7, #52]	@ 0x34
 8007132:	e002      	b.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007134:	2300      	movs	r3, #0
 8007136:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007138:	e003      	b.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800713a:	e002      	b.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800713c:	2300      	movs	r3, #0
 800713e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007140:	bf00      	nop
          }
        }
        break;
 8007142:	e388      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007144:	44020c00 	.word	0x44020c00
 8007148:	03d09000 	.word	0x03d09000
 800714c:	003d0900 	.word	0x003d0900
 8007150:	007a1200 	.word	0x007a1200
 8007154:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007158:	4ba9      	ldr	r3, [pc, #676]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800715a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800715e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007162:	633b      	str	r3, [r7, #48]	@ 0x30
 8007164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007166:	2b20      	cmp	r3, #32
 8007168:	f200 809a 	bhi.w	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800716c:	a201      	add	r2, pc, #4	@ (adr r2, 8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800716e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007172:	bf00      	nop
 8007174:	080071f9 	.word	0x080071f9
 8007178:	080072a1 	.word	0x080072a1
 800717c:	080072a1 	.word	0x080072a1
 8007180:	080072a1 	.word	0x080072a1
 8007184:	080072a1 	.word	0x080072a1
 8007188:	080072a1 	.word	0x080072a1
 800718c:	080072a1 	.word	0x080072a1
 8007190:	080072a1 	.word	0x080072a1
 8007194:	08007209 	.word	0x08007209
 8007198:	080072a1 	.word	0x080072a1
 800719c:	080072a1 	.word	0x080072a1
 80071a0:	080072a1 	.word	0x080072a1
 80071a4:	080072a1 	.word	0x080072a1
 80071a8:	080072a1 	.word	0x080072a1
 80071ac:	080072a1 	.word	0x080072a1
 80071b0:	080072a1 	.word	0x080072a1
 80071b4:	08007219 	.word	0x08007219
 80071b8:	080072a1 	.word	0x080072a1
 80071bc:	080072a1 	.word	0x080072a1
 80071c0:	080072a1 	.word	0x080072a1
 80071c4:	080072a1 	.word	0x080072a1
 80071c8:	080072a1 	.word	0x080072a1
 80071cc:	080072a1 	.word	0x080072a1
 80071d0:	080072a1 	.word	0x080072a1
 80071d4:	08007229 	.word	0x08007229
 80071d8:	080072a1 	.word	0x080072a1
 80071dc:	080072a1 	.word	0x080072a1
 80071e0:	080072a1 	.word	0x080072a1
 80071e4:	080072a1 	.word	0x080072a1
 80071e8:	080072a1 	.word	0x080072a1
 80071ec:	080072a1 	.word	0x080072a1
 80071f0:	080072a1 	.word	0x080072a1
 80071f4:	0800722f 	.word	0x0800722f
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071f8:	f107 0320 	add.w	r3, r7, #32
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7fd fba1 	bl	8004944 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007204:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007206:	e04e      	b.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007208:	f107 0314 	add.w	r3, r7, #20
 800720c:	4618      	mov	r0, r3
 800720e:	f7fd fd03 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007216:	e046      	b.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007218:	f107 0308 	add.w	r3, r7, #8
 800721c:	4618      	mov	r0, r3
 800721e:	f7fd fe65 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007226:	e03e      	b.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007228:	4b76      	ldr	r3, [pc, #472]	@ (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800722a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800722c:	e03b      	b.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800722e:	4b74      	ldr	r3, [pc, #464]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007230:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007234:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007238:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800723a:	4b71      	ldr	r3, [pc, #452]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b02      	cmp	r3, #2
 8007244:	d10c      	bne.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8007246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007248:	2b00      	cmp	r3, #0
 800724a:	d109      	bne.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800724c:	4b6c      	ldr	r3, [pc, #432]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	08db      	lsrs	r3, r3, #3
 8007252:	f003 0303 	and.w	r3, r3, #3
 8007256:	4a6c      	ldr	r2, [pc, #432]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8007258:	fa22 f303 	lsr.w	r3, r2, r3
 800725c:	637b      	str	r3, [r7, #52]	@ 0x34
 800725e:	e01e      	b.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007260:	4b67      	ldr	r3, [pc, #412]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800726c:	d106      	bne.n	800727c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800726e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007274:	d102      	bne.n	800727c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007276:	4b65      	ldr	r3, [pc, #404]	@ (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8007278:	637b      	str	r3, [r7, #52]	@ 0x34
 800727a:	e010      	b.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800727c:	4b60      	ldr	r3, [pc, #384]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007284:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007288:	d106      	bne.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800728a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800728c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007290:	d102      	bne.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007292:	4b5f      	ldr	r3, [pc, #380]	@ (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8007294:	637b      	str	r3, [r7, #52]	@ 0x34
 8007296:	e002      	b.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007298:	2300      	movs	r3, #0
 800729a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800729c:	e003      	b.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800729e:	e002      	b.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 80072a0:	2300      	movs	r3, #0
 80072a2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80072a4:	bf00      	nop
          }
        }
        break;
 80072a6:	e2d6      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80072a8:	4b55      	ldr	r3, [pc, #340]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80072aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80072ae:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80072b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80072b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072ba:	d031      	beq.n	8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 80072bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072c2:	d866      	bhi.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80072c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80072c8:	d027      	beq.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 80072ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072cc:	2bc0      	cmp	r3, #192	@ 0xc0
 80072ce:	d860      	bhi.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80072d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d2:	2b80      	cmp	r3, #128	@ 0x80
 80072d4:	d019      	beq.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 80072d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d8:	2b80      	cmp	r3, #128	@ 0x80
 80072da:	d85a      	bhi.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80072dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d003      	beq.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 80072e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e4:	2b40      	cmp	r3, #64	@ 0x40
 80072e6:	d008      	beq.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 80072e8:	e053      	b.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072ea:	f107 0320 	add.w	r3, r7, #32
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7fd fb28 	bl	8004944 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80072f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80072f8:	e04e      	b.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072fa:	f107 0314 	add.w	r3, r7, #20
 80072fe:	4618      	mov	r0, r3
 8007300:	f7fd fc8a 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007308:	e046      	b.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800730a:	f107 0308 	add.w	r3, r7, #8
 800730e:	4618      	mov	r0, r3
 8007310:	f7fd fdec 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007318:	e03e      	b.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800731a:	4b3a      	ldr	r3, [pc, #232]	@ (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800731c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800731e:	e03b      	b.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007320:	4b37      	ldr	r3, [pc, #220]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007322:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007326:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800732a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800732c:	4b34      	ldr	r3, [pc, #208]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0302 	and.w	r3, r3, #2
 8007334:	2b02      	cmp	r3, #2
 8007336:	d10c      	bne.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8007338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733a:	2b00      	cmp	r3, #0
 800733c:	d109      	bne.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800733e:	4b30      	ldr	r3, [pc, #192]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	08db      	lsrs	r3, r3, #3
 8007344:	f003 0303 	and.w	r3, r3, #3
 8007348:	4a2f      	ldr	r2, [pc, #188]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800734a:	fa22 f303 	lsr.w	r3, r2, r3
 800734e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007350:	e01e      	b.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007352:	4b2b      	ldr	r3, [pc, #172]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800735a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800735e:	d106      	bne.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8007360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007366:	d102      	bne.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007368:	4b28      	ldr	r3, [pc, #160]	@ (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800736a:	637b      	str	r3, [r7, #52]	@ 0x34
 800736c:	e010      	b.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800736e:	4b24      	ldr	r3, [pc, #144]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007376:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800737a:	d106      	bne.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800737c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800737e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007382:	d102      	bne.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007384:	4b22      	ldr	r3, [pc, #136]	@ (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8007386:	637b      	str	r3, [r7, #52]	@ 0x34
 8007388:	e002      	b.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800738a:	2300      	movs	r3, #0
 800738c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800738e:	e003      	b.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8007390:	e002      	b.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8007392:	2300      	movs	r3, #0
 8007394:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007396:	bf00      	nop
          }
        }
        break;
 8007398:	e25d      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800739a:	4b19      	ldr	r3, [pc, #100]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800739c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073a0:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80073a4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80073a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d103      	bne.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80073ac:	f7fb fadc 	bl	8002968 <HAL_RCC_GetPCLK2Freq>
 80073b0:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80073b2:	e250      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80073b4:	4b12      	ldr	r3, [pc, #72]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073c0:	d10b      	bne.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 80073c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073c8:	d107      	bne.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073ca:	f107 0314 	add.w	r3, r7, #20
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fd fc22 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80073d8:	e04f      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 80073da:	4b09      	ldr	r3, [pc, #36]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073e6:	d115      	bne.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 80073e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073ee:	d111      	bne.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073f0:	f107 0308 	add.w	r3, r7, #8
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7fd fd79 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80073fe:	e03c      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8007400:	44020c00 	.word	0x44020c00
 8007404:	00bb8000 	.word	0x00bb8000
 8007408:	03d09000 	.word	0x03d09000
 800740c:	003d0900 	.word	0x003d0900
 8007410:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8007414:	4b94      	ldr	r3, [pc, #592]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0302 	and.w	r3, r3, #2
 800741c:	2b02      	cmp	r3, #2
 800741e:	d10d      	bne.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8007420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007422:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007426:	d109      	bne.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007428:	4b8f      	ldr	r3, [pc, #572]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	08db      	lsrs	r3, r3, #3
 800742e:	f003 0303 	and.w	r3, r3, #3
 8007432:	4a8e      	ldr	r2, [pc, #568]	@ (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007434:	fa22 f303 	lsr.w	r3, r2, r3
 8007438:	637b      	str	r3, [r7, #52]	@ 0x34
 800743a:	e01e      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800743c:	4b8a      	ldr	r3, [pc, #552]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007444:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007448:	d106      	bne.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800744a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007450:	d102      	bne.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8007452:	4b87      	ldr	r3, [pc, #540]	@ (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007454:	637b      	str	r3, [r7, #52]	@ 0x34
 8007456:	e010      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8007458:	4b83      	ldr	r3, [pc, #524]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007460:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007464:	d106      	bne.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8007466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007468:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800746c:	d102      	bne.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800746e:	4b81      	ldr	r3, [pc, #516]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007470:	637b      	str	r3, [r7, #52]	@ 0x34
 8007472:	e002      	b.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8007474:	2300      	movs	r3, #0
 8007476:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007478:	e1ed      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800747a:	e1ec      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800747c:	4b7a      	ldr	r3, [pc, #488]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800747e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007482:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007486:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8007488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748a:	2b00      	cmp	r3, #0
 800748c:	d103      	bne.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800748e:	f7fb fa81 	bl	8002994 <HAL_RCC_GetPCLK3Freq>
 8007492:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007494:	e1df      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8007496:	4b74      	ldr	r3, [pc, #464]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800749e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074a2:	d10b      	bne.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 80074a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074aa:	d107      	bne.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074ac:	f107 0314 	add.w	r3, r7, #20
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7fd fbb1 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ba:	e045      	b.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 80074bc:	4b6a      	ldr	r3, [pc, #424]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074c8:	d10b      	bne.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 80074ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074d0:	d107      	bne.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074d2:	f107 0308 	add.w	r3, r7, #8
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fd fd08 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	637b      	str	r3, [r7, #52]	@ 0x34
 80074e0:	e032      	b.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 80074e2:	4b61      	ldr	r3, [pc, #388]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d10d      	bne.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 80074ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80074f4:	d109      	bne.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80074f6:	4b5c      	ldr	r3, [pc, #368]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	08db      	lsrs	r3, r3, #3
 80074fc:	f003 0303 	and.w	r3, r3, #3
 8007500:	4a5a      	ldr	r2, [pc, #360]	@ (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007502:	fa22 f303 	lsr.w	r3, r2, r3
 8007506:	637b      	str	r3, [r7, #52]	@ 0x34
 8007508:	e01e      	b.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800750a:	4b57      	ldr	r3, [pc, #348]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007512:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007516:	d106      	bne.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8007518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800751e:	d102      	bne.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8007520:	4b53      	ldr	r3, [pc, #332]	@ (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007522:	637b      	str	r3, [r7, #52]	@ 0x34
 8007524:	e010      	b.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8007526:	4b50      	ldr	r3, [pc, #320]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800752e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007532:	d106      	bne.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8007534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007536:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800753a:	d102      	bne.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800753c:	4b4d      	ldr	r3, [pc, #308]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800753e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007540:	e002      	b.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8007542:	2300      	movs	r3, #0
 8007544:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007546:	e186      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007548:	e185      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800754a:	4b47      	ldr	r3, [pc, #284]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800754c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007550:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8007554:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8007556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007558:	2b00      	cmp	r3, #0
 800755a:	d103      	bne.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800755c:	f7fb fa04 	bl	8002968 <HAL_RCC_GetPCLK2Freq>
 8007560:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007562:	e178      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8007564:	4b40      	ldr	r3, [pc, #256]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800756c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007570:	d10b      	bne.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8007572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007574:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007578:	d107      	bne.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800757a:	f107 0314 	add.w	r3, r7, #20
 800757e:	4618      	mov	r0, r3
 8007580:	f7fd fb4a 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	637b      	str	r3, [r7, #52]	@ 0x34
 8007588:	e045      	b.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800758a:	4b37      	ldr	r3, [pc, #220]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007592:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007596:	d10b      	bne.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8007598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800759e:	d107      	bne.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075a0:	f107 0308 	add.w	r3, r7, #8
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fd fca1 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80075ae:	e032      	b.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 80075b0:	4b2d      	ldr	r3, [pc, #180]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0302 	and.w	r3, r3, #2
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d10d      	bne.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 80075bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075be:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80075c2:	d109      	bne.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80075c4:	4b28      	ldr	r3, [pc, #160]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	08db      	lsrs	r3, r3, #3
 80075ca:	f003 0303 	and.w	r3, r3, #3
 80075ce:	4a27      	ldr	r2, [pc, #156]	@ (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80075d0:	fa22 f303 	lsr.w	r3, r2, r3
 80075d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80075d6:	e01e      	b.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 80075d8:	4b23      	ldr	r3, [pc, #140]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075e4:	d106      	bne.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 80075e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075ec:	d102      	bne.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 80075ee:	4b20      	ldr	r3, [pc, #128]	@ (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80075f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80075f2:	e010      	b.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 80075f4:	4b1c      	ldr	r3, [pc, #112]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007600:	d106      	bne.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8007602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007604:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007608:	d102      	bne.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800760a:	4b1a      	ldr	r3, [pc, #104]	@ (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800760c:	637b      	str	r3, [r7, #52]	@ 0x34
 800760e:	e002      	b.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8007610:	2300      	movs	r3, #0
 8007612:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007614:	e11f      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007616:	e11e      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007618:	4b13      	ldr	r3, [pc, #76]	@ (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800761a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800761e:	f003 0303 	and.w	r3, r3, #3
 8007622:	633b      	str	r3, [r7, #48]	@ 0x30
 8007624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007626:	2b03      	cmp	r3, #3
 8007628:	d85f      	bhi.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800762a:	a201      	add	r2, pc, #4	@ (adr r2, 8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800762c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007630:	08007641 	.word	0x08007641
 8007634:	08007649 	.word	0x08007649
 8007638:	08007659 	.word	0x08007659
 800763c:	08007679 	.word	0x08007679

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007640:	f7fb f960 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 8007644:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007646:	e053      	b.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007648:	f107 0320 	add.w	r3, r7, #32
 800764c:	4618      	mov	r0, r3
 800764e:	f7fd f979 	bl	8004944 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007654:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007656:	e04b      	b.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007658:	f107 0314 	add.w	r3, r7, #20
 800765c:	4618      	mov	r0, r3
 800765e:	f7fd fadb 	bl	8004c18 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007666:	e043      	b.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007668:	44020c00 	.word	0x44020c00
 800766c:	03d09000 	.word	0x03d09000
 8007670:	003d0900 	.word	0x003d0900
 8007674:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007678:	4b79      	ldr	r3, [pc, #484]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800767a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800767e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007682:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007684:	4b76      	ldr	r3, [pc, #472]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0302 	and.w	r3, r3, #2
 800768c:	2b02      	cmp	r3, #2
 800768e:	d10c      	bne.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8007690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007692:	2b00      	cmp	r3, #0
 8007694:	d109      	bne.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007696:	4b72      	ldr	r3, [pc, #456]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	08db      	lsrs	r3, r3, #3
 800769c:	f003 0303 	and.w	r3, r3, #3
 80076a0:	4a70      	ldr	r2, [pc, #448]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 80076a2:	fa22 f303 	lsr.w	r3, r2, r3
 80076a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80076a8:	e01e      	b.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80076aa:	4b6d      	ldr	r3, [pc, #436]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076b6:	d106      	bne.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 80076b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076be:	d102      	bne.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80076c0:	4b69      	ldr	r3, [pc, #420]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 80076c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80076c4:	e010      	b.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80076c6:	4b66      	ldr	r3, [pc, #408]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076d2:	d106      	bne.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 80076d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076da:	d102      	bne.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80076dc:	4b63      	ldr	r3, [pc, #396]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 80076de:	637b      	str	r3, [r7, #52]	@ 0x34
 80076e0:	e002      	b.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80076e2:	2300      	movs	r3, #0
 80076e4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80076e6:	e003      	b.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 80076e8:	e002      	b.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 80076ea:	2300      	movs	r3, #0
 80076ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80076ee:	bf00      	nop
          }
        }
        break;
 80076f0:	e0b1      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80076f2:	4b5b      	ldr	r3, [pc, #364]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80076f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80076f8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80076fc:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80076fe:	4b58      	ldr	r3, [pc, #352]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007700:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007704:	f003 0302 	and.w	r3, r3, #2
 8007708:	2b02      	cmp	r3, #2
 800770a:	d106      	bne.n	800771a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800770c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800770e:	2b00      	cmp	r3, #0
 8007710:	d103      	bne.n	800771a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8007712:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007716:	637b      	str	r3, [r7, #52]	@ 0x34
 8007718:	e01f      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800771a:	4b51      	ldr	r3, [pc, #324]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800771c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007720:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007724:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007728:	d106      	bne.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800772a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772c:	2b40      	cmp	r3, #64	@ 0x40
 800772e:	d103      	bne.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8007730:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007734:	637b      	str	r3, [r7, #52]	@ 0x34
 8007736:	e010      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007738:	4b49      	ldr	r3, [pc, #292]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007740:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007744:	d106      	bne.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8007746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007748:	2b80      	cmp	r3, #128	@ 0x80
 800774a:	d103      	bne.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800774c:	f248 0312 	movw	r3, #32786	@ 0x8012
 8007750:	637b      	str	r3, [r7, #52]	@ 0x34
 8007752:	e002      	b.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8007754:	2300      	movs	r3, #0
 8007756:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007758:	e07d      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800775a:	e07c      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800775c:	4b40      	ldr	r3, [pc, #256]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800775e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007762:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007766:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007768:	4b3d      	ldr	r3, [pc, #244]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007770:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007774:	d105      	bne.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8007776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007778:	2b00      	cmp	r3, #0
 800777a:	d102      	bne.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800777c:	4b3c      	ldr	r3, [pc, #240]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800777e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007780:	e031      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8007782:	4b37      	ldr	r3, [pc, #220]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800778a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800778e:	d10a      	bne.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8007790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007792:	2b10      	cmp	r3, #16
 8007794:	d107      	bne.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007796:	f107 0320 	add.w	r3, r7, #32
 800779a:	4618      	mov	r0, r3
 800779c:	f7fd f8d2 	bl	8004944 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80077a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80077a4:	e01f      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80077a6:	4b2e      	ldr	r3, [pc, #184]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80077a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077ac:	f003 0302 	and.w	r3, r3, #2
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d106      	bne.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 80077b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	d103      	bne.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 80077ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077be:	637b      	str	r3, [r7, #52]	@ 0x34
 80077c0:	e011      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80077c2:	4b27      	ldr	r3, [pc, #156]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80077c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077d0:	d106      	bne.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 80077d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d4:	2b30      	cmp	r3, #48	@ 0x30
 80077d6:	d103      	bne.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 80077d8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80077dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80077de:	e002      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80077e0:	2300      	movs	r3, #0
 80077e2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80077e4:	e037      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80077e6:	e036      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80077e8:	4b1d      	ldr	r3, [pc, #116]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80077ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80077ee:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80077f2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80077f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f6:	2b10      	cmp	r3, #16
 80077f8:	d107      	bne.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077fa:	f107 0320 	add.w	r3, r7, #32
 80077fe:	4618      	mov	r0, r3
 8007800:	f7fd f8a0 	bl	8004944 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007806:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007808:	e025      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800780a:	4b15      	ldr	r3, [pc, #84]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007812:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007816:	d10a      	bne.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8007818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781a:	2b20      	cmp	r3, #32
 800781c:	d107      	bne.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800781e:	f107 0308 	add.w	r3, r7, #8
 8007822:	4618      	mov	r0, r3
 8007824:	f7fd fb62 	bl	8004eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	637b      	str	r3, [r7, #52]	@ 0x34
 800782c:	e00f      	b.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800782e:	4b0c      	ldr	r3, [pc, #48]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007836:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800783a:	d105      	bne.n	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800783c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783e:	2b30      	cmp	r3, #48	@ 0x30
 8007840:	d102      	bne.n	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8007842:	4b0b      	ldr	r3, [pc, #44]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007844:	637b      	str	r3, [r7, #52]	@ 0x34
 8007846:	e002      	b.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8007848:	2300      	movs	r3, #0
 800784a:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800784c:	e003      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800784e:	e002      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8007850:	2300      	movs	r3, #0
 8007852:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007854:	bf00      	nop
    }
  }

  return (frequency);
 8007856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007858:	4618      	mov	r0, r3
 800785a:	373c      	adds	r7, #60	@ 0x3c
 800785c:	46bd      	mov	sp, r7
 800785e:	bd90      	pop	{r4, r7, pc}
 8007860:	44020c00 	.word	0x44020c00
 8007864:	03d09000 	.word	0x03d09000
 8007868:	003d0900 	.word	0x003d0900
 800786c:	007a1200 	.word	0x007a1200
 8007870:	02dc6c00 	.word	0x02dc6c00

08007874 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800787c:	4b48      	ldr	r3, [pc, #288]	@ (80079a0 <RCCEx_PLL2_Config+0x12c>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a47      	ldr	r2, [pc, #284]	@ (80079a0 <RCCEx_PLL2_Config+0x12c>)
 8007882:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007886:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007888:	f7f9 fdf6 	bl	8001478 <HAL_GetTick>
 800788c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800788e:	e008      	b.n	80078a2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007890:	f7f9 fdf2 	bl	8001478 <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	2b02      	cmp	r3, #2
 800789c:	d901      	bls.n	80078a2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e07a      	b.n	8007998 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078a2:	4b3f      	ldr	r3, [pc, #252]	@ (80079a0 <RCCEx_PLL2_Config+0x12c>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1f0      	bne.n	8007890 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80078ae:	4b3c      	ldr	r3, [pc, #240]	@ (80079a0 <RCCEx_PLL2_Config+0x12c>)
 80078b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80078b6:	f023 0303 	bic.w	r3, r3, #3
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	6811      	ldr	r1, [r2, #0]
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	6852      	ldr	r2, [r2, #4]
 80078c2:	0212      	lsls	r2, r2, #8
 80078c4:	430a      	orrs	r2, r1
 80078c6:	4936      	ldr	r1, [pc, #216]	@ (80079a0 <RCCEx_PLL2_Config+0x12c>)
 80078c8:	4313      	orrs	r3, r2
 80078ca:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	3b01      	subs	r3, #1
 80078d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	3b01      	subs	r3, #1
 80078dc:	025b      	lsls	r3, r3, #9
 80078de:	b29b      	uxth	r3, r3
 80078e0:	431a      	orrs	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	3b01      	subs	r3, #1
 80078e8:	041b      	lsls	r3, r3, #16
 80078ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80078ee:	431a      	orrs	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	695b      	ldr	r3, [r3, #20]
 80078f4:	3b01      	subs	r3, #1
 80078f6:	061b      	lsls	r3, r3, #24
 80078f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80078fc:	4928      	ldr	r1, [pc, #160]	@ (80079a0 <RCCEx_PLL2_Config+0x12c>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007902:	4b27      	ldr	r3, [pc, #156]	@ (80079a0 <RCCEx_PLL2_Config+0x12c>)
 8007904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007906:	f023 020c 	bic.w	r2, r3, #12
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	4924      	ldr	r1, [pc, #144]	@ (80079a0 <RCCEx_PLL2_Config+0x12c>)
 8007910:	4313      	orrs	r3, r2
 8007912:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007914:	4b22      	ldr	r3, [pc, #136]	@ (80079a0 <RCCEx_PLL2_Config+0x12c>)
 8007916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007918:	f023 0220 	bic.w	r2, r3, #32
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	491f      	ldr	r1, [pc, #124]	@ (80079a0 <RCCEx_PLL2_Config+0x12c>)
 8007922:	4313      	orrs	r3, r2
 8007924:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007926:	4b1e      	ldr	r3, [pc, #120]	@ (80079a0 <RCCEx_PLL2_Config+0x12c>)
 8007928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792e:	491c      	ldr	r1, [pc, #112]	@ (80079a0 <RCCEx_PLL2_Config+0x12c>)
 8007930:	4313      	orrs	r3, r2
 8007932:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8007934:	4b1a      	ldr	r3, [pc, #104]	@ (80079a0 <RCCEx_PLL2_Config+0x12c>)
 8007936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007938:	4a19      	ldr	r2, [pc, #100]	@ (80079a0 <RCCEx_PLL2_Config+0x12c>)
 800793a:	f023 0310 	bic.w	r3, r3, #16
 800793e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8007940:	4b17      	ldr	r3, [pc, #92]	@ (80079a0 <RCCEx_PLL2_Config+0x12c>)
 8007942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007944:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007948:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	6a12      	ldr	r2, [r2, #32]
 8007950:	00d2      	lsls	r2, r2, #3
 8007952:	4913      	ldr	r1, [pc, #76]	@ (80079a0 <RCCEx_PLL2_Config+0x12c>)
 8007954:	4313      	orrs	r3, r2
 8007956:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8007958:	4b11      	ldr	r3, [pc, #68]	@ (80079a0 <RCCEx_PLL2_Config+0x12c>)
 800795a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800795c:	4a10      	ldr	r2, [pc, #64]	@ (80079a0 <RCCEx_PLL2_Config+0x12c>)
 800795e:	f043 0310 	orr.w	r3, r3, #16
 8007962:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8007964:	4b0e      	ldr	r3, [pc, #56]	@ (80079a0 <RCCEx_PLL2_Config+0x12c>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a0d      	ldr	r2, [pc, #52]	@ (80079a0 <RCCEx_PLL2_Config+0x12c>)
 800796a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800796e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007970:	f7f9 fd82 	bl	8001478 <HAL_GetTick>
 8007974:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007976:	e008      	b.n	800798a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007978:	f7f9 fd7e 	bl	8001478 <HAL_GetTick>
 800797c:	4602      	mov	r2, r0
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	2b02      	cmp	r3, #2
 8007984:	d901      	bls.n	800798a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	e006      	b.n	8007998 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800798a:	4b05      	ldr	r3, [pc, #20]	@ (80079a0 <RCCEx_PLL2_Config+0x12c>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d0f0      	beq.n	8007978 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8007996:	2300      	movs	r3, #0

}
 8007998:	4618      	mov	r0, r3
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	44020c00 	.word	0x44020c00

080079a4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 80079ac:	4b48      	ldr	r3, [pc, #288]	@ (8007ad0 <RCCEx_PLL3_Config+0x12c>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a47      	ldr	r2, [pc, #284]	@ (8007ad0 <RCCEx_PLL3_Config+0x12c>)
 80079b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079b6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80079b8:	f7f9 fd5e 	bl	8001478 <HAL_GetTick>
 80079bc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80079be:	e008      	b.n	80079d2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80079c0:	f7f9 fd5a 	bl	8001478 <HAL_GetTick>
 80079c4:	4602      	mov	r2, r0
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d901      	bls.n	80079d2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e07a      	b.n	8007ac8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80079d2:	4b3f      	ldr	r3, [pc, #252]	@ (8007ad0 <RCCEx_PLL3_Config+0x12c>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1f0      	bne.n	80079c0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80079de:	4b3c      	ldr	r3, [pc, #240]	@ (8007ad0 <RCCEx_PLL3_Config+0x12c>)
 80079e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079e2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80079e6:	f023 0303 	bic.w	r3, r3, #3
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	6811      	ldr	r1, [r2, #0]
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	6852      	ldr	r2, [r2, #4]
 80079f2:	0212      	lsls	r2, r2, #8
 80079f4:	430a      	orrs	r2, r1
 80079f6:	4936      	ldr	r1, [pc, #216]	@ (8007ad0 <RCCEx_PLL3_Config+0x12c>)
 80079f8:	4313      	orrs	r3, r2
 80079fa:	630b      	str	r3, [r1, #48]	@ 0x30
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	3b01      	subs	r3, #1
 8007a02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	025b      	lsls	r3, r3, #9
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	431a      	orrs	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	3b01      	subs	r3, #1
 8007a18:	041b      	lsls	r3, r3, #16
 8007a1a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007a1e:	431a      	orrs	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	3b01      	subs	r3, #1
 8007a26:	061b      	lsls	r3, r3, #24
 8007a28:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007a2c:	4928      	ldr	r1, [pc, #160]	@ (8007ad0 <RCCEx_PLL3_Config+0x12c>)
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007a32:	4b27      	ldr	r3, [pc, #156]	@ (8007ad0 <RCCEx_PLL3_Config+0x12c>)
 8007a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a36:	f023 020c 	bic.w	r2, r3, #12
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	4924      	ldr	r1, [pc, #144]	@ (8007ad0 <RCCEx_PLL3_Config+0x12c>)
 8007a40:	4313      	orrs	r3, r2
 8007a42:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8007a44:	4b22      	ldr	r3, [pc, #136]	@ (8007ad0 <RCCEx_PLL3_Config+0x12c>)
 8007a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a48:	f023 0220 	bic.w	r2, r3, #32
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	69db      	ldr	r3, [r3, #28]
 8007a50:	491f      	ldr	r1, [pc, #124]	@ (8007ad0 <RCCEx_PLL3_Config+0x12c>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007a56:	4b1e      	ldr	r3, [pc, #120]	@ (8007ad0 <RCCEx_PLL3_Config+0x12c>)
 8007a58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a5e:	491c      	ldr	r1, [pc, #112]	@ (8007ad0 <RCCEx_PLL3_Config+0x12c>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8007a64:	4b1a      	ldr	r3, [pc, #104]	@ (8007ad0 <RCCEx_PLL3_Config+0x12c>)
 8007a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a68:	4a19      	ldr	r2, [pc, #100]	@ (8007ad0 <RCCEx_PLL3_Config+0x12c>)
 8007a6a:	f023 0310 	bic.w	r3, r3, #16
 8007a6e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8007a70:	4b17      	ldr	r3, [pc, #92]	@ (8007ad0 <RCCEx_PLL3_Config+0x12c>)
 8007a72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a74:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a78:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	6a12      	ldr	r2, [r2, #32]
 8007a80:	00d2      	lsls	r2, r2, #3
 8007a82:	4913      	ldr	r1, [pc, #76]	@ (8007ad0 <RCCEx_PLL3_Config+0x12c>)
 8007a84:	4313      	orrs	r3, r2
 8007a86:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8007a88:	4b11      	ldr	r3, [pc, #68]	@ (8007ad0 <RCCEx_PLL3_Config+0x12c>)
 8007a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a8c:	4a10      	ldr	r2, [pc, #64]	@ (8007ad0 <RCCEx_PLL3_Config+0x12c>)
 8007a8e:	f043 0310 	orr.w	r3, r3, #16
 8007a92:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8007a94:	4b0e      	ldr	r3, [pc, #56]	@ (8007ad0 <RCCEx_PLL3_Config+0x12c>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a0d      	ldr	r2, [pc, #52]	@ (8007ad0 <RCCEx_PLL3_Config+0x12c>)
 8007a9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a9e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007aa0:	f7f9 fcea 	bl	8001478 <HAL_GetTick>
 8007aa4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007aa6:	e008      	b.n	8007aba <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007aa8:	f7f9 fce6 	bl	8001478 <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d901      	bls.n	8007aba <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e006      	b.n	8007ac8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007aba:	4b05      	ldr	r3, [pc, #20]	@ (8007ad0 <RCCEx_PLL3_Config+0x12c>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d0f0      	beq.n	8007aa8 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	44020c00 	.word	0x44020c00

08007ad4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d101      	bne.n	8007ae6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e049      	b.n	8007b7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d106      	bne.n	8007b00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f841 	bl	8007b82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2202      	movs	r2, #2
 8007b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	3304      	adds	r3, #4
 8007b10:	4619      	mov	r1, r3
 8007b12:	4610      	mov	r0, r2
 8007b14:	f000 fa66 	bl	8007fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007b82:	b480      	push	{r7}
 8007b84:	b083      	sub	sp, #12
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007b8a:	bf00      	nop
 8007b8c:	370c      	adds	r7, #12
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
	...

08007b98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d001      	beq.n	8007bb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e07c      	b.n	8007caa <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68da      	ldr	r2, [r3, #12]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f042 0201 	orr.w	r2, r2, #1
 8007bc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a3a      	ldr	r2, [pc, #232]	@ (8007cb8 <HAL_TIM_Base_Start_IT+0x120>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d04a      	beq.n	8007c68 <HAL_TIM_Base_Start_IT+0xd0>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a39      	ldr	r2, [pc, #228]	@ (8007cbc <HAL_TIM_Base_Start_IT+0x124>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d045      	beq.n	8007c68 <HAL_TIM_Base_Start_IT+0xd0>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007be4:	d040      	beq.n	8007c68 <HAL_TIM_Base_Start_IT+0xd0>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007bee:	d03b      	beq.n	8007c68 <HAL_TIM_Base_Start_IT+0xd0>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a32      	ldr	r2, [pc, #200]	@ (8007cc0 <HAL_TIM_Base_Start_IT+0x128>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d036      	beq.n	8007c68 <HAL_TIM_Base_Start_IT+0xd0>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a31      	ldr	r2, [pc, #196]	@ (8007cc4 <HAL_TIM_Base_Start_IT+0x12c>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d031      	beq.n	8007c68 <HAL_TIM_Base_Start_IT+0xd0>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a2f      	ldr	r2, [pc, #188]	@ (8007cc8 <HAL_TIM_Base_Start_IT+0x130>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d02c      	beq.n	8007c68 <HAL_TIM_Base_Start_IT+0xd0>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a2e      	ldr	r2, [pc, #184]	@ (8007ccc <HAL_TIM_Base_Start_IT+0x134>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d027      	beq.n	8007c68 <HAL_TIM_Base_Start_IT+0xd0>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a2c      	ldr	r2, [pc, #176]	@ (8007cd0 <HAL_TIM_Base_Start_IT+0x138>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d022      	beq.n	8007c68 <HAL_TIM_Base_Start_IT+0xd0>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a2b      	ldr	r2, [pc, #172]	@ (8007cd4 <HAL_TIM_Base_Start_IT+0x13c>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d01d      	beq.n	8007c68 <HAL_TIM_Base_Start_IT+0xd0>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a29      	ldr	r2, [pc, #164]	@ (8007cd8 <HAL_TIM_Base_Start_IT+0x140>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d018      	beq.n	8007c68 <HAL_TIM_Base_Start_IT+0xd0>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a28      	ldr	r2, [pc, #160]	@ (8007cdc <HAL_TIM_Base_Start_IT+0x144>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d013      	beq.n	8007c68 <HAL_TIM_Base_Start_IT+0xd0>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a26      	ldr	r2, [pc, #152]	@ (8007ce0 <HAL_TIM_Base_Start_IT+0x148>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d00e      	beq.n	8007c68 <HAL_TIM_Base_Start_IT+0xd0>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a25      	ldr	r2, [pc, #148]	@ (8007ce4 <HAL_TIM_Base_Start_IT+0x14c>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d009      	beq.n	8007c68 <HAL_TIM_Base_Start_IT+0xd0>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a23      	ldr	r2, [pc, #140]	@ (8007ce8 <HAL_TIM_Base_Start_IT+0x150>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d004      	beq.n	8007c68 <HAL_TIM_Base_Start_IT+0xd0>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a22      	ldr	r2, [pc, #136]	@ (8007cec <HAL_TIM_Base_Start_IT+0x154>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d115      	bne.n	8007c94 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689a      	ldr	r2, [r3, #8]
 8007c6e:	4b20      	ldr	r3, [pc, #128]	@ (8007cf0 <HAL_TIM_Base_Start_IT+0x158>)
 8007c70:	4013      	ands	r3, r2
 8007c72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2b06      	cmp	r3, #6
 8007c78:	d015      	beq.n	8007ca6 <HAL_TIM_Base_Start_IT+0x10e>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c80:	d011      	beq.n	8007ca6 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f042 0201 	orr.w	r2, r2, #1
 8007c90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c92:	e008      	b.n	8007ca6 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f042 0201 	orr.w	r2, r2, #1
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	e000      	b.n	8007ca8 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ca6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	40012c00 	.word	0x40012c00
 8007cbc:	50012c00 	.word	0x50012c00
 8007cc0:	40000400 	.word	0x40000400
 8007cc4:	50000400 	.word	0x50000400
 8007cc8:	40000800 	.word	0x40000800
 8007ccc:	50000800 	.word	0x50000800
 8007cd0:	40000c00 	.word	0x40000c00
 8007cd4:	50000c00 	.word	0x50000c00
 8007cd8:	40013400 	.word	0x40013400
 8007cdc:	50013400 	.word	0x50013400
 8007ce0:	40001800 	.word	0x40001800
 8007ce4:	50001800 	.word	0x50001800
 8007ce8:	40014000 	.word	0x40014000
 8007cec:	50014000 	.word	0x50014000
 8007cf0:	00010007 	.word	0x00010007

08007cf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	f003 0302 	and.w	r3, r3, #2
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d020      	beq.n	8007d58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f003 0302 	and.w	r3, r3, #2
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d01b      	beq.n	8007d58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f06f 0202 	mvn.w	r2, #2
 8007d28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	f003 0303 	and.w	r3, r3, #3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f931 	bl	8007fa6 <HAL_TIM_IC_CaptureCallback>
 8007d44:	e005      	b.n	8007d52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f923 	bl	8007f92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f934 	bl	8007fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	f003 0304 	and.w	r3, r3, #4
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d020      	beq.n	8007da4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f003 0304 	and.w	r3, r3, #4
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d01b      	beq.n	8007da4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f06f 0204 	mvn.w	r2, #4
 8007d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2202      	movs	r2, #2
 8007d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d003      	beq.n	8007d92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f90b 	bl	8007fa6 <HAL_TIM_IC_CaptureCallback>
 8007d90:	e005      	b.n	8007d9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f8fd 	bl	8007f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 f90e 	bl	8007fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	f003 0308 	and.w	r3, r3, #8
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d020      	beq.n	8007df0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f003 0308 	and.w	r3, r3, #8
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d01b      	beq.n	8007df0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f06f 0208 	mvn.w	r2, #8
 8007dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2204      	movs	r2, #4
 8007dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	f003 0303 	and.w	r3, r3, #3
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d003      	beq.n	8007dde <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f8e5 	bl	8007fa6 <HAL_TIM_IC_CaptureCallback>
 8007ddc:	e005      	b.n	8007dea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f8d7 	bl	8007f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f8e8 	bl	8007fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	f003 0310 	and.w	r3, r3, #16
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d020      	beq.n	8007e3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f003 0310 	and.w	r3, r3, #16
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d01b      	beq.n	8007e3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f06f 0210 	mvn.w	r2, #16
 8007e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2208      	movs	r2, #8
 8007e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	69db      	ldr	r3, [r3, #28]
 8007e1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d003      	beq.n	8007e2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f8bf 	bl	8007fa6 <HAL_TIM_IC_CaptureCallback>
 8007e28:	e005      	b.n	8007e36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f8b1 	bl	8007f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f8c2 	bl	8007fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00c      	beq.n	8007e60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d007      	beq.n	8007e60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f06f 0201 	mvn.w	r2, #1
 8007e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7f9 f834 	bl	8000ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d104      	bne.n	8007e74 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00c      	beq.n	8007e8e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d007      	beq.n	8007e8e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f9df 	bl	800824c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00c      	beq.n	8007eb2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d007      	beq.n	8007eb2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f9d7 	bl	8008260 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00c      	beq.n	8007ed6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d007      	beq.n	8007ed6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f87c 	bl	8007fce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	f003 0320 	and.w	r3, r3, #32
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00c      	beq.n	8007efa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f003 0320 	and.w	r3, r3, #32
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d007      	beq.n	8007efa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f06f 0220 	mvn.w	r2, #32
 8007ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f99f 	bl	8008238 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00c      	beq.n	8007f1e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d007      	beq.n	8007f1e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f9ab 	bl	8008274 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00c      	beq.n	8007f42 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d007      	beq.n	8007f42 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f9a3 	bl	8008288 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00c      	beq.n	8007f66 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d007      	beq.n	8007f66 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f99b 	bl	800829c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00c      	beq.n	8007f8a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d007      	beq.n	8007f8a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f993 	bl	80082b0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f8a:	bf00      	nop
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b083      	sub	sp, #12
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f9a:	bf00      	nop
 8007f9c:	370c      	adds	r7, #12
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b083      	sub	sp, #12
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fae:	bf00      	nop
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fba:	b480      	push	{r7}
 8007fbc:	b083      	sub	sp, #12
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007fc2:	bf00      	nop
 8007fc4:	370c      	adds	r7, #12
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b083      	sub	sp, #12
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007fd6:	bf00      	nop
 8007fd8:	370c      	adds	r7, #12
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
	...

08007fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a7a      	ldr	r2, [pc, #488]	@ (80081e0 <TIM_Base_SetConfig+0x1fc>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d02b      	beq.n	8008054 <TIM_Base_SetConfig+0x70>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a79      	ldr	r2, [pc, #484]	@ (80081e4 <TIM_Base_SetConfig+0x200>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d027      	beq.n	8008054 <TIM_Base_SetConfig+0x70>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800800a:	d023      	beq.n	8008054 <TIM_Base_SetConfig+0x70>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008012:	d01f      	beq.n	8008054 <TIM_Base_SetConfig+0x70>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a74      	ldr	r2, [pc, #464]	@ (80081e8 <TIM_Base_SetConfig+0x204>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d01b      	beq.n	8008054 <TIM_Base_SetConfig+0x70>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a73      	ldr	r2, [pc, #460]	@ (80081ec <TIM_Base_SetConfig+0x208>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d017      	beq.n	8008054 <TIM_Base_SetConfig+0x70>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a72      	ldr	r2, [pc, #456]	@ (80081f0 <TIM_Base_SetConfig+0x20c>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d013      	beq.n	8008054 <TIM_Base_SetConfig+0x70>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a71      	ldr	r2, [pc, #452]	@ (80081f4 <TIM_Base_SetConfig+0x210>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d00f      	beq.n	8008054 <TIM_Base_SetConfig+0x70>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a70      	ldr	r2, [pc, #448]	@ (80081f8 <TIM_Base_SetConfig+0x214>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d00b      	beq.n	8008054 <TIM_Base_SetConfig+0x70>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a6f      	ldr	r2, [pc, #444]	@ (80081fc <TIM_Base_SetConfig+0x218>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d007      	beq.n	8008054 <TIM_Base_SetConfig+0x70>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a6e      	ldr	r2, [pc, #440]	@ (8008200 <TIM_Base_SetConfig+0x21c>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d003      	beq.n	8008054 <TIM_Base_SetConfig+0x70>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a6d      	ldr	r2, [pc, #436]	@ (8008204 <TIM_Base_SetConfig+0x220>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d108      	bne.n	8008066 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800805a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	4313      	orrs	r3, r2
 8008064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a5d      	ldr	r2, [pc, #372]	@ (80081e0 <TIM_Base_SetConfig+0x1fc>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d05b      	beq.n	8008126 <TIM_Base_SetConfig+0x142>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a5c      	ldr	r2, [pc, #368]	@ (80081e4 <TIM_Base_SetConfig+0x200>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d057      	beq.n	8008126 <TIM_Base_SetConfig+0x142>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800807c:	d053      	beq.n	8008126 <TIM_Base_SetConfig+0x142>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008084:	d04f      	beq.n	8008126 <TIM_Base_SetConfig+0x142>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a57      	ldr	r2, [pc, #348]	@ (80081e8 <TIM_Base_SetConfig+0x204>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d04b      	beq.n	8008126 <TIM_Base_SetConfig+0x142>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a56      	ldr	r2, [pc, #344]	@ (80081ec <TIM_Base_SetConfig+0x208>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d047      	beq.n	8008126 <TIM_Base_SetConfig+0x142>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a55      	ldr	r2, [pc, #340]	@ (80081f0 <TIM_Base_SetConfig+0x20c>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d043      	beq.n	8008126 <TIM_Base_SetConfig+0x142>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a54      	ldr	r2, [pc, #336]	@ (80081f4 <TIM_Base_SetConfig+0x210>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d03f      	beq.n	8008126 <TIM_Base_SetConfig+0x142>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a53      	ldr	r2, [pc, #332]	@ (80081f8 <TIM_Base_SetConfig+0x214>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d03b      	beq.n	8008126 <TIM_Base_SetConfig+0x142>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a52      	ldr	r2, [pc, #328]	@ (80081fc <TIM_Base_SetConfig+0x218>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d037      	beq.n	8008126 <TIM_Base_SetConfig+0x142>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a51      	ldr	r2, [pc, #324]	@ (8008200 <TIM_Base_SetConfig+0x21c>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d033      	beq.n	8008126 <TIM_Base_SetConfig+0x142>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a50      	ldr	r2, [pc, #320]	@ (8008204 <TIM_Base_SetConfig+0x220>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d02f      	beq.n	8008126 <TIM_Base_SetConfig+0x142>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a4f      	ldr	r2, [pc, #316]	@ (8008208 <TIM_Base_SetConfig+0x224>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d02b      	beq.n	8008126 <TIM_Base_SetConfig+0x142>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a4e      	ldr	r2, [pc, #312]	@ (800820c <TIM_Base_SetConfig+0x228>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d027      	beq.n	8008126 <TIM_Base_SetConfig+0x142>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a4d      	ldr	r2, [pc, #308]	@ (8008210 <TIM_Base_SetConfig+0x22c>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d023      	beq.n	8008126 <TIM_Base_SetConfig+0x142>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a4c      	ldr	r2, [pc, #304]	@ (8008214 <TIM_Base_SetConfig+0x230>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d01f      	beq.n	8008126 <TIM_Base_SetConfig+0x142>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a4b      	ldr	r2, [pc, #300]	@ (8008218 <TIM_Base_SetConfig+0x234>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d01b      	beq.n	8008126 <TIM_Base_SetConfig+0x142>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a4a      	ldr	r2, [pc, #296]	@ (800821c <TIM_Base_SetConfig+0x238>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d017      	beq.n	8008126 <TIM_Base_SetConfig+0x142>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a49      	ldr	r2, [pc, #292]	@ (8008220 <TIM_Base_SetConfig+0x23c>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d013      	beq.n	8008126 <TIM_Base_SetConfig+0x142>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a48      	ldr	r2, [pc, #288]	@ (8008224 <TIM_Base_SetConfig+0x240>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d00f      	beq.n	8008126 <TIM_Base_SetConfig+0x142>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a47      	ldr	r2, [pc, #284]	@ (8008228 <TIM_Base_SetConfig+0x244>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d00b      	beq.n	8008126 <TIM_Base_SetConfig+0x142>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a46      	ldr	r2, [pc, #280]	@ (800822c <TIM_Base_SetConfig+0x248>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d007      	beq.n	8008126 <TIM_Base_SetConfig+0x142>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a45      	ldr	r2, [pc, #276]	@ (8008230 <TIM_Base_SetConfig+0x24c>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d003      	beq.n	8008126 <TIM_Base_SetConfig+0x142>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a44      	ldr	r2, [pc, #272]	@ (8008234 <TIM_Base_SetConfig+0x250>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d108      	bne.n	8008138 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800812c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	4313      	orrs	r3, r2
 8008136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	4313      	orrs	r3, r2
 8008144:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	689a      	ldr	r2, [r3, #8]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a20      	ldr	r2, [pc, #128]	@ (80081e0 <TIM_Base_SetConfig+0x1fc>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d023      	beq.n	80081ac <TIM_Base_SetConfig+0x1c8>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a1f      	ldr	r2, [pc, #124]	@ (80081e4 <TIM_Base_SetConfig+0x200>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d01f      	beq.n	80081ac <TIM_Base_SetConfig+0x1c8>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a24      	ldr	r2, [pc, #144]	@ (8008200 <TIM_Base_SetConfig+0x21c>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d01b      	beq.n	80081ac <TIM_Base_SetConfig+0x1c8>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a23      	ldr	r2, [pc, #140]	@ (8008204 <TIM_Base_SetConfig+0x220>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d017      	beq.n	80081ac <TIM_Base_SetConfig+0x1c8>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a28      	ldr	r2, [pc, #160]	@ (8008220 <TIM_Base_SetConfig+0x23c>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d013      	beq.n	80081ac <TIM_Base_SetConfig+0x1c8>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a27      	ldr	r2, [pc, #156]	@ (8008224 <TIM_Base_SetConfig+0x240>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d00f      	beq.n	80081ac <TIM_Base_SetConfig+0x1c8>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a26      	ldr	r2, [pc, #152]	@ (8008228 <TIM_Base_SetConfig+0x244>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d00b      	beq.n	80081ac <TIM_Base_SetConfig+0x1c8>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a25      	ldr	r2, [pc, #148]	@ (800822c <TIM_Base_SetConfig+0x248>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d007      	beq.n	80081ac <TIM_Base_SetConfig+0x1c8>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a24      	ldr	r2, [pc, #144]	@ (8008230 <TIM_Base_SetConfig+0x24c>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d003      	beq.n	80081ac <TIM_Base_SetConfig+0x1c8>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a23      	ldr	r2, [pc, #140]	@ (8008234 <TIM_Base_SetConfig+0x250>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d103      	bne.n	80081b4 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	691a      	ldr	r2, [r3, #16]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	f003 0301 	and.w	r3, r3, #1
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d105      	bne.n	80081d2 <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	f023 0201 	bic.w	r2, r3, #1
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	611a      	str	r2, [r3, #16]
  }
}
 80081d2:	bf00      	nop
 80081d4:	3714      	adds	r7, #20
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	40012c00 	.word	0x40012c00
 80081e4:	50012c00 	.word	0x50012c00
 80081e8:	40000400 	.word	0x40000400
 80081ec:	50000400 	.word	0x50000400
 80081f0:	40000800 	.word	0x40000800
 80081f4:	50000800 	.word	0x50000800
 80081f8:	40000c00 	.word	0x40000c00
 80081fc:	50000c00 	.word	0x50000c00
 8008200:	40013400 	.word	0x40013400
 8008204:	50013400 	.word	0x50013400
 8008208:	40001800 	.word	0x40001800
 800820c:	50001800 	.word	0x50001800
 8008210:	40001c00 	.word	0x40001c00
 8008214:	50001c00 	.word	0x50001c00
 8008218:	40002000 	.word	0x40002000
 800821c:	50002000 	.word	0x50002000
 8008220:	40014000 	.word	0x40014000
 8008224:	50014000 	.word	0x50014000
 8008228:	40014400 	.word	0x40014400
 800822c:	50014400 	.word	0x50014400
 8008230:	40014800 	.word	0x40014800
 8008234:	50014800 	.word	0x50014800

08008238 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800827c:	bf00      	nop
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d101      	bne.n	80082d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e042      	b.n	800835c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d106      	bne.n	80082ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f7f8 fe0d 	bl	8000f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2224      	movs	r2, #36	@ 0x24
 80082f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f022 0201 	bic.w	r2, r2, #1
 8008304:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800830a:	2b00      	cmp	r3, #0
 800830c:	d002      	beq.n	8008314 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fab4 	bl	800887c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f8c3 	bl	80084a0 <UART_SetConfig>
 800831a:	4603      	mov	r3, r0
 800831c:	2b01      	cmp	r3, #1
 800831e:	d101      	bne.n	8008324 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e01b      	b.n	800835c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685a      	ldr	r2, [r3, #4]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008332:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	689a      	ldr	r2, [r3, #8]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008342:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f042 0201 	orr.w	r2, r2, #1
 8008352:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fb33 	bl	80089c0 <UART_CheckIdleState>
 800835a:	4603      	mov	r3, r0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3708      	adds	r7, #8
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b08a      	sub	sp, #40	@ 0x28
 8008368:	af02      	add	r7, sp, #8
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	603b      	str	r3, [r7, #0]
 8008370:	4613      	mov	r3, r2
 8008372:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800837a:	2b20      	cmp	r3, #32
 800837c:	f040 808b 	bne.w	8008496 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d002      	beq.n	800838c <HAL_UART_Transmit+0x28>
 8008386:	88fb      	ldrh	r3, [r7, #6]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d101      	bne.n	8008390 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	e083      	b.n	8008498 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800839a:	2b80      	cmp	r3, #128	@ 0x80
 800839c:	d107      	bne.n	80083ae <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	689a      	ldr	r2, [r3, #8]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80083ac:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2221      	movs	r2, #33	@ 0x21
 80083ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80083be:	f7f9 f85b 	bl	8001478 <HAL_GetTick>
 80083c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	88fa      	ldrh	r2, [r7, #6]
 80083c8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	88fa      	ldrh	r2, [r7, #6]
 80083d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083dc:	d108      	bne.n	80083f0 <HAL_UART_Transmit+0x8c>
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d104      	bne.n	80083f0 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80083e6:	2300      	movs	r3, #0
 80083e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	61bb      	str	r3, [r7, #24]
 80083ee:	e003      	b.n	80083f8 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083f4:	2300      	movs	r3, #0
 80083f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80083f8:	e030      	b.n	800845c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	2200      	movs	r2, #0
 8008402:	2180      	movs	r1, #128	@ 0x80
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f000 fb85 	bl	8008b14 <UART_WaitOnFlagUntilTimeout>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d005      	beq.n	800841c <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2220      	movs	r2, #32
 8008414:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	e03d      	b.n	8008498 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d10b      	bne.n	800843a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	881b      	ldrh	r3, [r3, #0]
 8008426:	461a      	mov	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008430:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	3302      	adds	r3, #2
 8008436:	61bb      	str	r3, [r7, #24]
 8008438:	e007      	b.n	800844a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	781a      	ldrb	r2, [r3, #0]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	3301      	adds	r3, #1
 8008448:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008450:	b29b      	uxth	r3, r3
 8008452:	3b01      	subs	r3, #1
 8008454:	b29a      	uxth	r2, r3
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008462:	b29b      	uxth	r3, r3
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1c8      	bne.n	80083fa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	2200      	movs	r2, #0
 8008470:	2140      	movs	r1, #64	@ 0x40
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f000 fb4e 	bl	8008b14 <UART_WaitOnFlagUntilTimeout>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d005      	beq.n	800848a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2220      	movs	r2, #32
 8008482:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e006      	b.n	8008498 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2220      	movs	r2, #32
 800848e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008492:	2300      	movs	r3, #0
 8008494:	e000      	b.n	8008498 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8008496:	2302      	movs	r3, #2
  }
}
 8008498:	4618      	mov	r0, r3
 800849a:	3720      	adds	r7, #32
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084a4:	b094      	sub	sp, #80	@ 0x50
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084aa:	2300      	movs	r3, #0
 80084ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80084b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	4b78      	ldr	r3, [pc, #480]	@ (8008698 <UART_SetConfig+0x1f8>)
 80084b6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ba:	689a      	ldr	r2, [r3, #8]
 80084bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	431a      	orrs	r2, r3
 80084c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c4:	695b      	ldr	r3, [r3, #20]
 80084c6:	431a      	orrs	r2, r3
 80084c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ca:	69db      	ldr	r3, [r3, #28]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80084d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4971      	ldr	r1, [pc, #452]	@ (800869c <UART_SetConfig+0x1fc>)
 80084d8:	4019      	ands	r1, r3
 80084da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084e0:	430b      	orrs	r3, r1
 80084e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80084ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f0:	68d9      	ldr	r1, [r3, #12]
 80084f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	ea40 0301 	orr.w	r3, r0, r1
 80084fa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80084fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	4b64      	ldr	r3, [pc, #400]	@ (8008698 <UART_SetConfig+0x1f8>)
 8008508:	429a      	cmp	r2, r3
 800850a:	d009      	beq.n	8008520 <UART_SetConfig+0x80>
 800850c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	4b63      	ldr	r3, [pc, #396]	@ (80086a0 <UART_SetConfig+0x200>)
 8008512:	429a      	cmp	r2, r3
 8008514:	d004      	beq.n	8008520 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008518:	6a1a      	ldr	r2, [r3, #32]
 800851a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800851c:	4313      	orrs	r3, r2
 800851e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800852a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800852e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008534:	430b      	orrs	r3, r1
 8008536:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800853e:	f023 000f 	bic.w	r0, r3, #15
 8008542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008544:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	ea40 0301 	orr.w	r3, r0, r1
 800854e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	4b53      	ldr	r3, [pc, #332]	@ (80086a4 <UART_SetConfig+0x204>)
 8008556:	429a      	cmp	r2, r3
 8008558:	d102      	bne.n	8008560 <UART_SetConfig+0xc0>
 800855a:	2301      	movs	r3, #1
 800855c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800855e:	e066      	b.n	800862e <UART_SetConfig+0x18e>
 8008560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	4b50      	ldr	r3, [pc, #320]	@ (80086a8 <UART_SetConfig+0x208>)
 8008566:	429a      	cmp	r2, r3
 8008568:	d102      	bne.n	8008570 <UART_SetConfig+0xd0>
 800856a:	2302      	movs	r3, #2
 800856c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800856e:	e05e      	b.n	800862e <UART_SetConfig+0x18e>
 8008570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	4b4d      	ldr	r3, [pc, #308]	@ (80086ac <UART_SetConfig+0x20c>)
 8008576:	429a      	cmp	r2, r3
 8008578:	d102      	bne.n	8008580 <UART_SetConfig+0xe0>
 800857a:	2304      	movs	r3, #4
 800857c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800857e:	e056      	b.n	800862e <UART_SetConfig+0x18e>
 8008580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	4b4a      	ldr	r3, [pc, #296]	@ (80086b0 <UART_SetConfig+0x210>)
 8008586:	429a      	cmp	r2, r3
 8008588:	d102      	bne.n	8008590 <UART_SetConfig+0xf0>
 800858a:	2308      	movs	r3, #8
 800858c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800858e:	e04e      	b.n	800862e <UART_SetConfig+0x18e>
 8008590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	4b47      	ldr	r3, [pc, #284]	@ (80086b4 <UART_SetConfig+0x214>)
 8008596:	429a      	cmp	r2, r3
 8008598:	d102      	bne.n	80085a0 <UART_SetConfig+0x100>
 800859a:	2310      	movs	r3, #16
 800859c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800859e:	e046      	b.n	800862e <UART_SetConfig+0x18e>
 80085a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	4b44      	ldr	r3, [pc, #272]	@ (80086b8 <UART_SetConfig+0x218>)
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d102      	bne.n	80085b0 <UART_SetConfig+0x110>
 80085aa:	2320      	movs	r3, #32
 80085ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085ae:	e03e      	b.n	800862e <UART_SetConfig+0x18e>
 80085b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	4b41      	ldr	r3, [pc, #260]	@ (80086bc <UART_SetConfig+0x21c>)
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d102      	bne.n	80085c0 <UART_SetConfig+0x120>
 80085ba:	2340      	movs	r3, #64	@ 0x40
 80085bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085be:	e036      	b.n	800862e <UART_SetConfig+0x18e>
 80085c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	4b3e      	ldr	r3, [pc, #248]	@ (80086c0 <UART_SetConfig+0x220>)
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d102      	bne.n	80085d0 <UART_SetConfig+0x130>
 80085ca:	2380      	movs	r3, #128	@ 0x80
 80085cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085ce:	e02e      	b.n	800862e <UART_SetConfig+0x18e>
 80085d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	4b3b      	ldr	r3, [pc, #236]	@ (80086c4 <UART_SetConfig+0x224>)
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d103      	bne.n	80085e2 <UART_SetConfig+0x142>
 80085da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80085de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085e0:	e025      	b.n	800862e <UART_SetConfig+0x18e>
 80085e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	4b38      	ldr	r3, [pc, #224]	@ (80086c8 <UART_SetConfig+0x228>)
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d103      	bne.n	80085f4 <UART_SetConfig+0x154>
 80085ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80085f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085f2:	e01c      	b.n	800862e <UART_SetConfig+0x18e>
 80085f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	4b34      	ldr	r3, [pc, #208]	@ (80086cc <UART_SetConfig+0x22c>)
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d103      	bne.n	8008606 <UART_SetConfig+0x166>
 80085fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008602:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008604:	e013      	b.n	800862e <UART_SetConfig+0x18e>
 8008606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	4b31      	ldr	r3, [pc, #196]	@ (80086d0 <UART_SetConfig+0x230>)
 800860c:	429a      	cmp	r2, r3
 800860e:	d103      	bne.n	8008618 <UART_SetConfig+0x178>
 8008610:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008614:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008616:	e00a      	b.n	800862e <UART_SetConfig+0x18e>
 8008618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	4b1e      	ldr	r3, [pc, #120]	@ (8008698 <UART_SetConfig+0x1f8>)
 800861e:	429a      	cmp	r2, r3
 8008620:	d103      	bne.n	800862a <UART_SetConfig+0x18a>
 8008622:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008626:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008628:	e001      	b.n	800862e <UART_SetConfig+0x18e>
 800862a:	2300      	movs	r3, #0
 800862c:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800862e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	4b19      	ldr	r3, [pc, #100]	@ (8008698 <UART_SetConfig+0x1f8>)
 8008634:	429a      	cmp	r2, r3
 8008636:	d005      	beq.n	8008644 <UART_SetConfig+0x1a4>
 8008638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	4b18      	ldr	r3, [pc, #96]	@ (80086a0 <UART_SetConfig+0x200>)
 800863e:	429a      	cmp	r2, r3
 8008640:	f040 8094 	bne.w	800876c <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008644:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008646:	2200      	movs	r2, #0
 8008648:	623b      	str	r3, [r7, #32]
 800864a:	627a      	str	r2, [r7, #36]	@ 0x24
 800864c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008650:	f7fc fdb6 	bl	80051c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008654:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008658:	2b00      	cmp	r3, #0
 800865a:	f000 80f7 	beq.w	800884c <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800865e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008662:	4a1c      	ldr	r2, [pc, #112]	@ (80086d4 <UART_SetConfig+0x234>)
 8008664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008668:	461a      	mov	r2, r3
 800866a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800866c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008670:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008674:	685a      	ldr	r2, [r3, #4]
 8008676:	4613      	mov	r3, r2
 8008678:	005b      	lsls	r3, r3, #1
 800867a:	4413      	add	r3, r2
 800867c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800867e:	429a      	cmp	r2, r3
 8008680:	d305      	bcc.n	800868e <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008688:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800868a:	429a      	cmp	r2, r3
 800868c:	d924      	bls.n	80086d8 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008694:	e069      	b.n	800876a <UART_SetConfig+0x2ca>
 8008696:	bf00      	nop
 8008698:	44002400 	.word	0x44002400
 800869c:	cfff69f3 	.word	0xcfff69f3
 80086a0:	54002400 	.word	0x54002400
 80086a4:	40013800 	.word	0x40013800
 80086a8:	40004400 	.word	0x40004400
 80086ac:	40004800 	.word	0x40004800
 80086b0:	40004c00 	.word	0x40004c00
 80086b4:	40005000 	.word	0x40005000
 80086b8:	40006400 	.word	0x40006400
 80086bc:	40007800 	.word	0x40007800
 80086c0:	40007c00 	.word	0x40007c00
 80086c4:	40008000 	.word	0x40008000
 80086c8:	40006800 	.word	0x40006800
 80086cc:	40006c00 	.word	0x40006c00
 80086d0:	40008400 	.word	0x40008400
 80086d4:	0800b794 	.word	0x0800b794
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086da:	2200      	movs	r2, #0
 80086dc:	61bb      	str	r3, [r7, #24]
 80086de:	61fa      	str	r2, [r7, #28]
 80086e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e4:	4a64      	ldr	r2, [pc, #400]	@ (8008878 <UART_SetConfig+0x3d8>)
 80086e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	2200      	movs	r2, #0
 80086ee:	613b      	str	r3, [r7, #16]
 80086f0:	617a      	str	r2, [r7, #20]
 80086f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80086f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80086fa:	f7f7 fee5 	bl	80004c8 <__aeabi_uldivmod>
 80086fe:	4602      	mov	r2, r0
 8008700:	460b      	mov	r3, r1
 8008702:	4610      	mov	r0, r2
 8008704:	4619      	mov	r1, r3
 8008706:	f04f 0200 	mov.w	r2, #0
 800870a:	f04f 0300 	mov.w	r3, #0
 800870e:	020b      	lsls	r3, r1, #8
 8008710:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008714:	0202      	lsls	r2, r0, #8
 8008716:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008718:	6849      	ldr	r1, [r1, #4]
 800871a:	0849      	lsrs	r1, r1, #1
 800871c:	2000      	movs	r0, #0
 800871e:	460c      	mov	r4, r1
 8008720:	4605      	mov	r5, r0
 8008722:	eb12 0804 	adds.w	r8, r2, r4
 8008726:	eb43 0905 	adc.w	r9, r3, r5
 800872a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	60bb      	str	r3, [r7, #8]
 8008732:	60fa      	str	r2, [r7, #12]
 8008734:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008738:	4640      	mov	r0, r8
 800873a:	4649      	mov	r1, r9
 800873c:	f7f7 fec4 	bl	80004c8 <__aeabi_uldivmod>
 8008740:	4602      	mov	r2, r0
 8008742:	460b      	mov	r3, r1
 8008744:	4613      	mov	r3, r2
 8008746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800874a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800874e:	d308      	bcc.n	8008762 <UART_SetConfig+0x2c2>
 8008750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008752:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008756:	d204      	bcs.n	8008762 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8008758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800875e:	60da      	str	r2, [r3, #12]
 8008760:	e003      	b.n	800876a <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008768:	e070      	b.n	800884c <UART_SetConfig+0x3ac>
 800876a:	e06f      	b.n	800884c <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800876c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800876e:	69db      	ldr	r3, [r3, #28]
 8008770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008774:	d13c      	bne.n	80087f0 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008778:	2200      	movs	r2, #0
 800877a:	603b      	str	r3, [r7, #0]
 800877c:	607a      	str	r2, [r7, #4]
 800877e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008782:	f7fc fd1d 	bl	80051c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008786:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008788:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800878a:	2b00      	cmp	r3, #0
 800878c:	d05e      	beq.n	800884c <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800878e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008792:	4a39      	ldr	r2, [pc, #228]	@ (8008878 <UART_SetConfig+0x3d8>)
 8008794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008798:	461a      	mov	r2, r3
 800879a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800879c:	fbb3 f3f2 	udiv	r3, r3, r2
 80087a0:	005a      	lsls	r2, r3, #1
 80087a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	085b      	lsrs	r3, r3, #1
 80087a8:	441a      	add	r2, r3
 80087aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087b6:	2b0f      	cmp	r3, #15
 80087b8:	d916      	bls.n	80087e8 <UART_SetConfig+0x348>
 80087ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087c0:	d212      	bcs.n	80087e8 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	f023 030f 	bic.w	r3, r3, #15
 80087ca:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087ce:	085b      	lsrs	r3, r3, #1
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	f003 0307 	and.w	r3, r3, #7
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80087da:	4313      	orrs	r3, r2
 80087dc:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80087de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80087e4:	60da      	str	r2, [r3, #12]
 80087e6:	e031      	b.n	800884c <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80087ee:	e02d      	b.n	800884c <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80087f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087f2:	2200      	movs	r2, #0
 80087f4:	469a      	mov	sl, r3
 80087f6:	4693      	mov	fp, r2
 80087f8:	4650      	mov	r0, sl
 80087fa:	4659      	mov	r1, fp
 80087fc:	f7fc fce0 	bl	80051c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008800:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8008802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008804:	2b00      	cmp	r3, #0
 8008806:	d021      	beq.n	800884c <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800880a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800880c:	4a1a      	ldr	r2, [pc, #104]	@ (8008878 <UART_SetConfig+0x3d8>)
 800880e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008812:	461a      	mov	r2, r3
 8008814:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008816:	fbb3 f2f2 	udiv	r2, r3, r2
 800881a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	085b      	lsrs	r3, r3, #1
 8008820:	441a      	add	r2, r3
 8008822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	fbb2 f3f3 	udiv	r3, r2, r3
 800882a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800882c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800882e:	2b0f      	cmp	r3, #15
 8008830:	d909      	bls.n	8008846 <UART_SetConfig+0x3a6>
 8008832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008838:	d205      	bcs.n	8008846 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800883a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800883c:	b29a      	uxth	r2, r3
 800883e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	60da      	str	r2, [r3, #12]
 8008844:	e002      	b.n	800884c <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800884c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800884e:	2201      	movs	r2, #1
 8008850:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008856:	2201      	movs	r2, #1
 8008858:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800885c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800885e:	2200      	movs	r2, #0
 8008860:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008864:	2200      	movs	r2, #0
 8008866:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008868:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800886c:	4618      	mov	r0, r3
 800886e:	3750      	adds	r7, #80	@ 0x50
 8008870:	46bd      	mov	sp, r7
 8008872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008876:	bf00      	nop
 8008878:	0800b794 	.word	0x0800b794

0800887c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008888:	f003 0308 	and.w	r3, r3, #8
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00a      	beq.n	80088a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	430a      	orrs	r2, r1
 80088a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088aa:	f003 0301 	and.w	r3, r3, #1
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00a      	beq.n	80088c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	430a      	orrs	r2, r1
 80088c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088cc:	f003 0302 	and.w	r3, r3, #2
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00a      	beq.n	80088ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	430a      	orrs	r2, r1
 80088e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ee:	f003 0304 	and.w	r3, r3, #4
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d00a      	beq.n	800890c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	430a      	orrs	r2, r1
 800890a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008910:	f003 0310 	and.w	r3, r3, #16
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00a      	beq.n	800892e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	430a      	orrs	r2, r1
 800892c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008932:	f003 0320 	and.w	r3, r3, #32
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00a      	beq.n	8008950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	430a      	orrs	r2, r1
 800894e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008958:	2b00      	cmp	r3, #0
 800895a:	d01a      	beq.n	8008992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	430a      	orrs	r2, r1
 8008970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800897a:	d10a      	bne.n	8008992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00a      	beq.n	80089b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	430a      	orrs	r2, r1
 80089b2:	605a      	str	r2, [r3, #4]
  }
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b098      	sub	sp, #96	@ 0x60
 80089c4:	af02      	add	r7, sp, #8
 80089c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089d0:	f7f8 fd52 	bl	8001478 <HAL_GetTick>
 80089d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0308 	and.w	r3, r3, #8
 80089e0:	2b08      	cmp	r3, #8
 80089e2:	d12f      	bne.n	8008a44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089ec:	2200      	movs	r2, #0
 80089ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f88e 	bl	8008b14 <UART_WaitOnFlagUntilTimeout>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d022      	beq.n	8008a44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a06:	e853 3f00 	ldrex	r3, [r3]
 8008a0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a12:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a24:	e841 2300 	strex	r3, r2, [r1]
 8008a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1e6      	bne.n	80089fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2220      	movs	r2, #32
 8008a34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e063      	b.n	8008b0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 0304 	and.w	r3, r3, #4
 8008a4e:	2b04      	cmp	r3, #4
 8008a50:	d149      	bne.n	8008ae6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a52:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f857 	bl	8008b14 <UART_WaitOnFlagUntilTimeout>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d03c      	beq.n	8008ae6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a74:	e853 3f00 	ldrex	r3, [r3]
 8008a78:	623b      	str	r3, [r7, #32]
   return(result);
 8008a7a:	6a3b      	ldr	r3, [r7, #32]
 8008a7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	461a      	mov	r2, r3
 8008a88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a92:	e841 2300 	strex	r3, r2, [r1]
 8008a96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1e6      	bne.n	8008a6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3308      	adds	r3, #8
 8008aa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	e853 3f00 	ldrex	r3, [r3]
 8008aac:	60fb      	str	r3, [r7, #12]
   return(result);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f023 0301 	bic.w	r3, r3, #1
 8008ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	3308      	adds	r3, #8
 8008abc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008abe:	61fa      	str	r2, [r7, #28]
 8008ac0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac2:	69b9      	ldr	r1, [r7, #24]
 8008ac4:	69fa      	ldr	r2, [r7, #28]
 8008ac6:	e841 2300 	strex	r3, r2, [r1]
 8008aca:	617b      	str	r3, [r7, #20]
   return(result);
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1e5      	bne.n	8008a9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2220      	movs	r2, #32
 8008ad6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	e012      	b.n	8008b0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2220      	movs	r2, #32
 8008aea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2220      	movs	r2, #32
 8008af2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3758      	adds	r7, #88	@ 0x58
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	603b      	str	r3, [r7, #0]
 8008b20:	4613      	mov	r3, r2
 8008b22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b24:	e04f      	b.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b2c:	d04b      	beq.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b2e:	f7f8 fca3 	bl	8001478 <HAL_GetTick>
 8008b32:	4602      	mov	r2, r0
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	69ba      	ldr	r2, [r7, #24]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d302      	bcc.n	8008b44 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d101      	bne.n	8008b48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e04e      	b.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0304 	and.w	r3, r3, #4
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d037      	beq.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	2b80      	cmp	r3, #128	@ 0x80
 8008b5a:	d034      	beq.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	2b40      	cmp	r3, #64	@ 0x40
 8008b60:	d031      	beq.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	69db      	ldr	r3, [r3, #28]
 8008b68:	f003 0308 	and.w	r3, r3, #8
 8008b6c:	2b08      	cmp	r3, #8
 8008b6e:	d110      	bne.n	8008b92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2208      	movs	r2, #8
 8008b76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f000 f838 	bl	8008bee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2208      	movs	r2, #8
 8008b82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e029      	b.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	69db      	ldr	r3, [r3, #28]
 8008b98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ba0:	d111      	bne.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008baa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f000 f81e 	bl	8008bee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2220      	movs	r2, #32
 8008bb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	e00f      	b.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	69da      	ldr	r2, [r3, #28]
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	4013      	ands	r3, r2
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	bf0c      	ite	eq
 8008bd6:	2301      	moveq	r3, #1
 8008bd8:	2300      	movne	r3, #0
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	461a      	mov	r2, r3
 8008bde:	79fb      	ldrb	r3, [r7, #7]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d0a0      	beq.n	8008b26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bee:	b480      	push	{r7}
 8008bf0:	b095      	sub	sp, #84	@ 0x54
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bfe:	e853 3f00 	ldrex	r3, [r3]
 8008c02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	461a      	mov	r2, r3
 8008c12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c14:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c16:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c1c:	e841 2300 	strex	r3, r2, [r1]
 8008c20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d1e6      	bne.n	8008bf6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	3308      	adds	r3, #8
 8008c2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c30:	6a3b      	ldr	r3, [r7, #32]
 8008c32:	e853 3f00 	ldrex	r3, [r3]
 8008c36:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c3e:	f023 0301 	bic.w	r3, r3, #1
 8008c42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	3308      	adds	r3, #8
 8008c4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c54:	e841 2300 	strex	r3, r2, [r1]
 8008c58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1e3      	bne.n	8008c28 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d118      	bne.n	8008c9a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	e853 3f00 	ldrex	r3, [r3]
 8008c74:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	f023 0310 	bic.w	r3, r3, #16
 8008c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	461a      	mov	r2, r3
 8008c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c86:	61bb      	str	r3, [r7, #24]
 8008c88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8a:	6979      	ldr	r1, [r7, #20]
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	e841 2300 	strex	r3, r2, [r1]
 8008c92:	613b      	str	r3, [r7, #16]
   return(result);
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1e6      	bne.n	8008c68 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2220      	movs	r2, #32
 8008c9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008cae:	bf00      	nop
 8008cb0:	3754      	adds	r7, #84	@ 0x54
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr

08008cba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008cba:	b480      	push	{r7}
 8008cbc:	b085      	sub	sp, #20
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d101      	bne.n	8008cd0 <HAL_UARTEx_DisableFifoMode+0x16>
 8008ccc:	2302      	movs	r3, #2
 8008cce:	e027      	b.n	8008d20 <HAL_UARTEx_DisableFifoMode+0x66>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2224      	movs	r2, #36	@ 0x24
 8008cdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f022 0201 	bic.w	r2, r2, #1
 8008cf6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008cfe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2220      	movs	r2, #32
 8008d12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3714      	adds	r7, #20
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d101      	bne.n	8008d44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d40:	2302      	movs	r3, #2
 8008d42:	e02d      	b.n	8008da0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2224      	movs	r2, #36	@ 0x24
 8008d50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f022 0201 	bic.w	r2, r2, #1
 8008d6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	683a      	ldr	r2, [r7, #0]
 8008d7c:	430a      	orrs	r2, r1
 8008d7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f84f 	bl	8008e24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2220      	movs	r2, #32
 8008d92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d101      	bne.n	8008dc0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008dbc:	2302      	movs	r3, #2
 8008dbe:	e02d      	b.n	8008e1c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2224      	movs	r2, #36	@ 0x24
 8008dcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f022 0201 	bic.w	r2, r2, #1
 8008de6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	683a      	ldr	r2, [r7, #0]
 8008df8:	430a      	orrs	r2, r1
 8008dfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f811 	bl	8008e24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2220      	movs	r2, #32
 8008e0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d108      	bne.n	8008e46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e44:	e031      	b.n	8008eaa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e46:	2308      	movs	r3, #8
 8008e48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e4a:	2308      	movs	r3, #8
 8008e4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	0e5b      	lsrs	r3, r3, #25
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	f003 0307 	and.w	r3, r3, #7
 8008e5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	0f5b      	lsrs	r3, r3, #29
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	f003 0307 	and.w	r3, r3, #7
 8008e6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e6e:	7bbb      	ldrb	r3, [r7, #14]
 8008e70:	7b3a      	ldrb	r2, [r7, #12]
 8008e72:	4911      	ldr	r1, [pc, #68]	@ (8008eb8 <UARTEx_SetNbDataToProcess+0x94>)
 8008e74:	5c8a      	ldrb	r2, [r1, r2]
 8008e76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e7a:	7b3a      	ldrb	r2, [r7, #12]
 8008e7c:	490f      	ldr	r1, [pc, #60]	@ (8008ebc <UARTEx_SetNbDataToProcess+0x98>)
 8008e7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e80:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e8c:	7bfb      	ldrb	r3, [r7, #15]
 8008e8e:	7b7a      	ldrb	r2, [r7, #13]
 8008e90:	4909      	ldr	r1, [pc, #36]	@ (8008eb8 <UARTEx_SetNbDataToProcess+0x94>)
 8008e92:	5c8a      	ldrb	r2, [r1, r2]
 8008e94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e98:	7b7a      	ldrb	r2, [r7, #13]
 8008e9a:	4908      	ldr	r1, [pc, #32]	@ (8008ebc <UARTEx_SetNbDataToProcess+0x98>)
 8008e9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008eaa:	bf00      	nop
 8008eac:	3714      	adds	r7, #20
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	0800b7ac 	.word	0x0800b7ac
 8008ebc:	0800b7b4 	.word	0x0800b7b4

08008ec0 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b08e      	sub	sp, #56	@ 0x38
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	607a      	str	r2, [r7, #4]
 8008ecc:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8008ece:	2234      	movs	r2, #52	@ 0x34
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	f001 fe63 	bl	800ab9e <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	f023 0303 	bic.w	r3, r3, #3
 8008ede:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	683a      	ldr	r2, [r7, #0]
 8008ef0:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	f1a3 0208 	sub.w	r2, r3, #8
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2202      	movs	r2, #2
 8008f0c:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8008f12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	4413      	add	r3, r2
 8008f18:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8008f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f1c:	3b04      	subs	r3, #4
 8008f1e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8008f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 8008f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f2c:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8008f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f30:	3b04      	subs	r3, #4
 8008f32:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8008f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8008f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 8008f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f4a:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8008f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f52:	3304      	adds	r3, #4
 8008f54:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8008f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f58:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8008f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f5c:	4a1f      	ldr	r2, [pc, #124]	@ (8008fdc <_tx_byte_pool_create+0x11c>)
 8008f5e:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2200      	movs	r2, #0
 8008f64:	621a      	str	r2, [r3, #32]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008f66:	f3ef 8310 	mrs	r3, PRIMASK
 8008f6a:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 8008f6c:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 8008f6e:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8008f70:	b672      	cpsid	i
#endif
    return(int_posture);
 8008f72:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8008f74:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	4a19      	ldr	r2, [pc, #100]	@ (8008fe0 <_tx_byte_pool_create+0x120>)
 8008f7a:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8008f7c:	4b19      	ldr	r3, [pc, #100]	@ (8008fe4 <_tx_byte_pool_create+0x124>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d109      	bne.n	8008f98 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8008f84:	4a18      	ldr	r2, [pc, #96]	@ (8008fe8 <_tx_byte_pool_create+0x128>)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	631a      	str	r2, [r3, #48]	@ 0x30
 8008f96:	e011      	b.n	8008fbc <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8008f98:	4b13      	ldr	r3, [pc, #76]	@ (8008fe8 <_tx_byte_pool_create+0x128>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8008f9e:	6a3b      	ldr	r3, [r7, #32]
 8008fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fa2:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8008fa4:	6a3b      	ldr	r3, [r7, #32]
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	69fa      	ldr	r2, [r7, #28]
 8008fb4:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6a3a      	ldr	r2, [r7, #32]
 8008fba:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8008fbc:	4b09      	ldr	r3, [pc, #36]	@ (8008fe4 <_tx_byte_pool_create+0x124>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	4a08      	ldr	r2, [pc, #32]	@ (8008fe4 <_tx_byte_pool_create+0x124>)
 8008fc4:	6013      	str	r3, [r2, #0]
 8008fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	f383 8810 	msr	PRIMASK, r3
}
 8008fd0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3738      	adds	r7, #56	@ 0x38
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	ffffeeee 	.word	0xffffeeee
 8008fe0:	42595445 	.word	0x42595445
 8008fe4:	200013fc 	.word	0x200013fc
 8008fe8:	200013f8 	.word	0x200013f8

08008fec <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8008ff0:	f000 fb58 	bl	80096a4 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8008ff4:	f000 ff60 	bl	8009eb8 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8008ff8:	4b12      	ldr	r3, [pc, #72]	@ (8009044 <_tx_initialize_high_level+0x58>)
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	601a      	str	r2, [r3, #0]
 8008ffe:	4b12      	ldr	r3, [pc, #72]	@ (8009048 <_tx_initialize_high_level+0x5c>)
 8009000:	2200      	movs	r2, #0
 8009002:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8009004:	4b11      	ldr	r3, [pc, #68]	@ (800904c <_tx_initialize_high_level+0x60>)
 8009006:	2200      	movs	r2, #0
 8009008:	601a      	str	r2, [r3, #0]
 800900a:	4b11      	ldr	r3, [pc, #68]	@ (8009050 <_tx_initialize_high_level+0x64>)
 800900c:	2200      	movs	r2, #0
 800900e:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8009010:	4b10      	ldr	r3, [pc, #64]	@ (8009054 <_tx_initialize_high_level+0x68>)
 8009012:	2200      	movs	r2, #0
 8009014:	601a      	str	r2, [r3, #0]
 8009016:	4b10      	ldr	r3, [pc, #64]	@ (8009058 <_tx_initialize_high_level+0x6c>)
 8009018:	2200      	movs	r2, #0
 800901a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800901c:	4b0f      	ldr	r3, [pc, #60]	@ (800905c <_tx_initialize_high_level+0x70>)
 800901e:	2200      	movs	r2, #0
 8009020:	601a      	str	r2, [r3, #0]
 8009022:	4b0f      	ldr	r3, [pc, #60]	@ (8009060 <_tx_initialize_high_level+0x74>)
 8009024:	2200      	movs	r2, #0
 8009026:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8009028:	4b0e      	ldr	r3, [pc, #56]	@ (8009064 <_tx_initialize_high_level+0x78>)
 800902a:	2200      	movs	r2, #0
 800902c:	601a      	str	r2, [r3, #0]
 800902e:	4b0e      	ldr	r3, [pc, #56]	@ (8009068 <_tx_initialize_high_level+0x7c>)
 8009030:	2200      	movs	r2, #0
 8009032:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8009034:	4b0d      	ldr	r3, [pc, #52]	@ (800906c <_tx_initialize_high_level+0x80>)
 8009036:	2200      	movs	r2, #0
 8009038:	601a      	str	r2, [r3, #0]
 800903a:	4b0d      	ldr	r3, [pc, #52]	@ (8009070 <_tx_initialize_high_level+0x84>)
 800903c:	2200      	movs	r2, #0
 800903e:	601a      	str	r2, [r3, #0]
#endif
}
 8009040:	bf00      	nop
 8009042:	bd80      	pop	{r7, pc}
 8009044:	200013d0 	.word	0x200013d0
 8009048:	200013d4 	.word	0x200013d4
 800904c:	200013d8 	.word	0x200013d8
 8009050:	200013dc 	.word	0x200013dc
 8009054:	200013e0 	.word	0x200013e0
 8009058:	200013e4 	.word	0x200013e4
 800905c:	200013f0 	.word	0x200013f0
 8009060:	200013f4 	.word	0x200013f4
 8009064:	200013f8 	.word	0x200013f8
 8009068:	200013fc 	.word	0x200013fc
 800906c:	200013e8 	.word	0x200013e8
 8009070:	200013ec 	.word	0x200013ec

08009074 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8009078:	4b10      	ldr	r3, [pc, #64]	@ (80090bc <_tx_initialize_kernel_enter+0x48>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 8009080:	d00c      	beq.n	800909c <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8009082:	4b0e      	ldr	r3, [pc, #56]	@ (80090bc <_tx_initialize_kernel_enter+0x48>)
 8009084:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8009088:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800908a:	f7f7 f8ff 	bl	800028c <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800908e:	f7ff ffad 	bl	8008fec <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8009092:	4b0b      	ldr	r3, [pc, #44]	@ (80090c0 <_tx_initialize_kernel_enter+0x4c>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	3301      	adds	r3, #1
 8009098:	4a09      	ldr	r2, [pc, #36]	@ (80090c0 <_tx_initialize_kernel_enter+0x4c>)
 800909a:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800909c:	4b07      	ldr	r3, [pc, #28]	@ (80090bc <_tx_initialize_kernel_enter+0x48>)
 800909e:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 80090a2:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 80090a4:	4b07      	ldr	r3, [pc, #28]	@ (80090c4 <_tx_initialize_kernel_enter+0x50>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7f7 fb99 	bl	80007e0 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80090ae:	4b03      	ldr	r3, [pc, #12]	@ (80090bc <_tx_initialize_kernel_enter+0x48>)
 80090b0:	2200      	movs	r2, #0
 80090b2:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80090b4:	f7f7 f926 	bl	8000304 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80090b8:	bf00      	nop
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	2000000c 	.word	0x2000000c
 80090c0:	200014a0 	.word	0x200014a0
 80090c4:	20001400 	.word	0x20001400

080090c8 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b08e      	sub	sp, #56	@ 0x38
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80090d2:	f3ef 8310 	mrs	r3, PRIMASK
 80090d6:	623b      	str	r3, [r7, #32]
    return(posture);
 80090d8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80090da:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80090dc:	b672      	cpsid	i
    return(int_posture);
 80090de:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 80090e0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090e6:	4a33      	ldr	r2, [pc, #204]	@ (80091b4 <_tx_semaphore_cleanup+0xec>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d158      	bne.n	800919e <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80090f2:	683a      	ldr	r2, [r7, #0]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d152      	bne.n	800919e <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090fc:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 80090fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009100:	2b00      	cmp	r3, #0
 8009102:	d04c      	beq.n	800919e <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8009104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a2b      	ldr	r2, [pc, #172]	@ (80091b8 <_tx_semaphore_cleanup+0xf0>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d147      	bne.n	800919e <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800910e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d043      	beq.n	800919e <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800911c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	1e5a      	subs	r2, r3, #1
 8009122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009124:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8009126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800912c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800912e:	2b00      	cmp	r3, #0
 8009130:	d103      	bne.n	800913a <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8009132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009134:	2200      	movs	r2, #0
 8009136:	60da      	str	r2, [r3, #12]
 8009138:	e013      	b.n	8009162 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800913e:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009144:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8009146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800914a:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800914c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009150:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8009152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	429a      	cmp	r2, r3
 800915a:	d102      	bne.n	8009162 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800915c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009160:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009166:	2b06      	cmp	r3, #6
 8009168:	d119      	bne.n	800919e <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	220d      	movs	r2, #13
 800916e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8009172:	4b12      	ldr	r3, [pc, #72]	@ (80091bc <_tx_semaphore_cleanup+0xf4>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	3301      	adds	r3, #1
 8009178:	4a10      	ldr	r2, [pc, #64]	@ (80091bc <_tx_semaphore_cleanup+0xf4>)
 800917a:	6013      	str	r3, [r2, #0]
 800917c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800917e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	f383 8810 	msr	PRIMASK, r3
}
 8009186:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fbcd 	bl	8009928 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800918e:	f3ef 8310 	mrs	r3, PRIMASK
 8009192:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009194:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009196:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009198:	b672      	cpsid	i
    return(int_posture);
 800919a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800919c:	637b      	str	r3, [r7, #52]	@ 0x34
 800919e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091a0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f383 8810 	msr	PRIMASK, r3
}
 80091a8:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80091aa:	bf00      	nop
 80091ac:	3738      	adds	r7, #56	@ 0x38
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	080090c9 	.word	0x080090c9
 80091b8:	53454d41 	.word	0x53454d41
 80091bc:	200014a0 	.word	0x200014a0

080091c0 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b08a      	sub	sp, #40	@ 0x28
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 80091cc:	221c      	movs	r2, #28
 80091ce:	2100      	movs	r1, #0
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f001 fce4 	bl	800ab9e <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	68ba      	ldr	r2, [r7, #8]
 80091da:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80091e2:	f3ef 8310 	mrs	r3, PRIMASK
 80091e6:	61bb      	str	r3, [r7, #24]
    return(posture);
 80091e8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80091ea:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80091ec:	b672      	cpsid	i
    return(int_posture);
 80091ee:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 80091f0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	4a18      	ldr	r2, [pc, #96]	@ (8009258 <_tx_semaphore_create+0x98>)
 80091f6:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 80091f8:	4b18      	ldr	r3, [pc, #96]	@ (800925c <_tx_semaphore_create+0x9c>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d109      	bne.n	8009214 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8009200:	4a17      	ldr	r2, [pc, #92]	@ (8009260 <_tx_semaphore_create+0xa0>)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	619a      	str	r2, [r3, #24]
 8009212:	e011      	b.n	8009238 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8009214:	4b12      	ldr	r3, [pc, #72]	@ (8009260 <_tx_semaphore_create+0xa0>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800921a:	6a3b      	ldr	r3, [r7, #32]
 800921c:	699b      	ldr	r3, [r3, #24]
 800921e:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8009220:	6a3b      	ldr	r3, [r7, #32]
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8009226:	69fb      	ldr	r3, [r7, #28]
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	69fa      	ldr	r2, [r7, #28]
 8009230:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6a3a      	ldr	r2, [r7, #32]
 8009236:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8009238:	4b08      	ldr	r3, [pc, #32]	@ (800925c <_tx_semaphore_create+0x9c>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	3301      	adds	r3, #1
 800923e:	4a07      	ldr	r2, [pc, #28]	@ (800925c <_tx_semaphore_create+0x9c>)
 8009240:	6013      	str	r3, [r2, #0]
 8009242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009244:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	f383 8810 	msr	PRIMASK, r3
}
 800924c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800924e:	2300      	movs	r3, #0
}
 8009250:	4618      	mov	r0, r3
 8009252:	3728      	adds	r7, #40	@ 0x28
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	53454d41 	.word	0x53454d41
 800925c:	200013d4 	.word	0x200013d4
 8009260:	200013d0 	.word	0x200013d0

08009264 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b08e      	sub	sp, #56	@ 0x38
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800926e:	2300      	movs	r3, #0
 8009270:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009272:	f3ef 8310 	mrs	r3, PRIMASK
 8009276:	623b      	str	r3, [r7, #32]
    return(posture);
 8009278:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800927a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800927c:	b672      	cpsid	i
    return(int_posture);
 800927e:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8009280:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00a      	beq.n	80092a0 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	1e5a      	subs	r2, r3, #1
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	609a      	str	r2, [r3, #8]
 8009294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009296:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	f383 8810 	msr	PRIMASK, r3
}
 800929e:	e068      	b.n	8009372 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d05d      	beq.n	8009362 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80092a6:	4b35      	ldr	r3, [pc, #212]	@ (800937c <_tx_semaphore_get+0x118>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d008      	beq.n	80092c0 <_tx_semaphore_get+0x5c>
 80092ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	f383 8810 	msr	PRIMASK, r3
}
 80092b8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 80092ba:	230d      	movs	r3, #13
 80092bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80092be:	e058      	b.n	8009372 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80092c0:	4b2f      	ldr	r3, [pc, #188]	@ (8009380 <_tx_semaphore_get+0x11c>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 80092c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092c8:	4a2e      	ldr	r2, [pc, #184]	@ (8009384 <_tx_semaphore_get+0x120>)
 80092ca:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 80092cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80092d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80092d8:	1c5a      	adds	r2, r3, #1
 80092da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092dc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d109      	bne.n	80092fc <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092ec:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 80092ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092f2:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 80092f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092f8:	675a      	str	r2, [r3, #116]	@ 0x74
 80092fa:	e011      	b.n	8009320 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	62bb      	str	r3, [r7, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8009302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009304:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009306:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8009308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800930a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800930c:	627b      	str	r3, [r7, #36]	@ 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800930e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009312:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8009314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009316:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009318:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800931a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800931c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800931e:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	1c5a      	adds	r2, r3, #1
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800932a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800932c:	2206      	movs	r2, #6
 800932e:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009332:	2201      	movs	r2, #1
 8009334:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8009336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800933c:	4b0f      	ldr	r3, [pc, #60]	@ (800937c <_tx_semaphore_get+0x118>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	3301      	adds	r3, #1
 8009342:	4a0e      	ldr	r2, [pc, #56]	@ (800937c <_tx_semaphore_get+0x118>)
 8009344:	6013      	str	r3, [r2, #0]
 8009346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009348:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	f383 8810 	msr	PRIMASK, r3
}
 8009350:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8009352:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009354:	f000 fbe8 	bl	8009b28 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8009358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800935a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800935e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009360:	e007      	b.n	8009372 <_tx_semaphore_get+0x10e>
 8009362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009364:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f383 8810 	msr	PRIMASK, r3
}
 800936c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800936e:	230d      	movs	r3, #13
 8009370:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    /* Return completion status.  */
    return(status);
 8009372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009374:	4618      	mov	r0, r3
 8009376:	3738      	adds	r7, #56	@ 0x38
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	200014a0 	.word	0x200014a0
 8009380:	20001408 	.word	0x20001408
 8009384:	080090c9 	.word	0x080090c9

08009388 <_tx_semaphore_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_info_get(TX_SEMAPHORE *semaphore_ptr, CHAR **name, ULONG *current_value,
                    TX_THREAD **first_suspended, ULONG *suspended_count,
                    TX_SEMAPHORE **next_semaphore)
{
 8009388:	b480      	push	{r7}
 800938a:	b089      	sub	sp, #36	@ 0x24
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	607a      	str	r2, [r7, #4]
 8009394:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009396:	f3ef 8310 	mrs	r3, PRIMASK
 800939a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800939c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800939e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80093a0:	b672      	cpsid	i
    return(int_posture);
 80093a2:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 80093a4:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the semaphore.  */
    if (name != TX_NULL)
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d003      	beq.n	80093b4 <_tx_semaphore_info_get+0x2c>
    {

        *name =  semaphore_ptr -> tx_semaphore_name;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	685a      	ldr	r2, [r3, #4]
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the current value of the semaphore.  */
    if (current_value != TX_NULL)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d003      	beq.n	80093c2 <_tx_semaphore_info_get+0x3a>
    {

        *current_value =  semaphore_ptr -> tx_semaphore_count;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	689a      	ldr	r2, [r3, #8]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the first thread suspended on this semaphore.  */
    if (first_suspended != TX_NULL)
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d003      	beq.n	80093d0 <_tx_semaphore_info_get+0x48>
    {

        *first_suspended =  semaphore_ptr -> tx_semaphore_suspension_list;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	68da      	ldr	r2, [r3, #12]
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the number of threads suspended on this semaphore.  */
    if (suspended_count != TX_NULL)
 80093d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d003      	beq.n	80093de <_tx_semaphore_info_get+0x56>
    {

        *suspended_count =  (ULONG) semaphore_ptr -> tx_semaphore_suspended_count;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	691a      	ldr	r2, [r3, #16]
 80093da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093dc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the pointer to the next semaphore created.  */
    if (next_semaphore != TX_NULL)
 80093de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d003      	beq.n	80093ec <_tx_semaphore_info_get+0x64>
    {

        *next_semaphore =  semaphore_ptr -> tx_semaphore_created_next;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	695a      	ldr	r2, [r3, #20]
 80093e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ea:	601a      	str	r2, [r3, #0]
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	f383 8810 	msr	PRIMASK, r3
}
 80093f6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 80093f8:	2300      	movs	r3, #0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3724      	adds	r7, #36	@ 0x24
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
	...

08009408 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b08c      	sub	sp, #48	@ 0x30
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009410:	f3ef 8310 	mrs	r3, PRIMASK
 8009414:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009416:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009418:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800941a:	b672      	cpsid	i
    return(int_posture);
 800941c:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800941e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8009426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009428:	2b00      	cmp	r3, #0
 800942a:	d10a      	bne.n	8009442 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	1c5a      	adds	r2, r3, #1
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	609a      	str	r2, [r3, #8]
 8009436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009438:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	f383 8810 	msr	PRIMASK, r3
}
 8009440:	e033      	b.n	80094aa <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8009448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800944a:	3b01      	subs	r3, #1
 800944c:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800944e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009450:	2b00      	cmp	r3, #0
 8009452:	d103      	bne.n	800945c <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	60da      	str	r2, [r3, #12]
 800945a:	e00e      	b.n	800947a <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800945c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800945e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009460:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a3a      	ldr	r2, [r7, #32]
 8009466:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8009468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800946a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800946c:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800946e:	6a3b      	ldr	r3, [r7, #32]
 8009470:	69fa      	ldr	r2, [r7, #28]
 8009472:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	6a3a      	ldr	r2, [r7, #32]
 8009478:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800947e:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009482:	2200      	movs	r2, #0
 8009484:	669a      	str	r2, [r3, #104]	@ 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8009486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009488:	2200      	movs	r2, #0
 800948a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800948e:	4b09      	ldr	r3, [pc, #36]	@ (80094b4 <_tx_semaphore_put+0xac>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3301      	adds	r3, #1
 8009494:	4a07      	ldr	r2, [pc, #28]	@ (80094b4 <_tx_semaphore_put+0xac>)
 8009496:	6013      	str	r3, [r2, #0]
 8009498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800949a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f383 8810 	msr	PRIMASK, r3
}
 80094a2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 80094a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80094a6:	f000 fa3f 	bl	8009928 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3730      	adds	r7, #48	@ 0x30
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	200014a0 	.word	0x200014a0

080094b8 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b092      	sub	sp, #72	@ 0x48
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
 80094c4:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 80094c6:	2300      	movs	r3, #0
 80094c8:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 80094ca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80094cc:	21ef      	movs	r1, #239	@ 0xef
 80094ce:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80094d0:	f001 fb65 	bl	800ab9e <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 80094d4:	22b0      	movs	r2, #176	@ 0xb0
 80094d6:	2100      	movs	r1, #0
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f001 fb60 	bl	800ab9e <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	683a      	ldr	r2, [r7, #0]
 80094ee:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80094f4:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80094fa:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009500:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009506:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800950e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009514:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2220      	movs	r2, #32
 800951a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800951e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009520:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8009522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009524:	3b01      	subs	r3, #1
 8009526:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009528:	4413      	add	r3, r2
 800952a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009530:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8009532:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009534:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009536:	429a      	cmp	r2, r3
 8009538:	d007      	beq.n	800954a <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2200      	movs	r2, #0
 800953e:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2200      	movs	r2, #0
 8009544:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8009548:	e006      	b.n	8009558 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800954e:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009554:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2203      	movs	r2, #3
 800955c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	4a48      	ldr	r2, [pc, #288]	@ (8009684 <_tx_thread_create+0x1cc>)
 8009562:	655a      	str	r2, [r3, #84]	@ 0x54
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800956a:	4947      	ldr	r1, [pc, #284]	@ (8009688 <_tx_thread_create+0x1d0>)
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f7f6 ff2f 	bl	80003d0 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009572:	f3ef 8310 	mrs	r3, PRIMASK
 8009576:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8009578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800957a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800957c:	b672      	cpsid	i
    return(int_posture);
 800957e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8009580:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	4a41      	ldr	r2, [pc, #260]	@ (800968c <_tx_thread_create+0x1d4>)
 8009586:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8009588:	4b41      	ldr	r3, [pc, #260]	@ (8009690 <_tx_thread_create+0x1d8>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d10b      	bne.n	80095a8 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8009590:	4a40      	ldr	r2, [pc, #256]	@ (8009694 <_tx_thread_create+0x1dc>)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80095a6:	e016      	b.n	80095d6 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80095a8:	4b3a      	ldr	r3, [pc, #232]	@ (8009694 <_tx_thread_create+0x1dc>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 80095ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095b4:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80095b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80095be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c0:	68fa      	ldr	r2, [r7, #12]
 80095c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80095d6:	4b2e      	ldr	r3, [pc, #184]	@ (8009690 <_tx_thread_create+0x1d8>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	3301      	adds	r3, #1
 80095dc:	4a2c      	ldr	r2, [pc, #176]	@ (8009690 <_tx_thread_create+0x1d8>)
 80095de:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80095e0:	4b2d      	ldr	r3, [pc, #180]	@ (8009698 <_tx_thread_create+0x1e0>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	3301      	adds	r3, #1
 80095e6:	4a2c      	ldr	r2, [pc, #176]	@ (8009698 <_tx_thread_create+0x1e0>)
 80095e8:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80095ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d129      	bne.n	8009644 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80095f0:	f3ef 8305 	mrs	r3, IPSR
 80095f4:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 80095f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80095f8:	4b28      	ldr	r3, [pc, #160]	@ (800969c <_tx_thread_create+0x1e4>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4313      	orrs	r3, r2
 80095fe:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8009602:	d30d      	bcc.n	8009620 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8009604:	4b26      	ldr	r3, [pc, #152]	@ (80096a0 <_tx_thread_create+0x1e8>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800960a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800960c:	2b00      	cmp	r3, #0
 800960e:	d009      	beq.n	8009624 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8009610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009614:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8009616:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800961a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800961c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800961e:	e001      	b.n	8009624 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8009620:	2300      	movs	r3, #0
 8009622:	647b      	str	r3, [r7, #68]	@ 0x44
 8009624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009626:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009628:	6a3b      	ldr	r3, [r7, #32]
 800962a:	f383 8810 	msr	PRIMASK, r3
}
 800962e:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8009630:	68f8      	ldr	r0, [r7, #12]
 8009632:	f000 f979 	bl	8009928 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8009636:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009638:	2b00      	cmp	r3, #0
 800963a:	d01e      	beq.n	800967a <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800963c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800963e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009640:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009642:	e01a      	b.n	800967a <_tx_thread_create+0x1c2>
 8009644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009646:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	f383 8810 	msr	PRIMASK, r3
}
 800964e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009650:	f3ef 8310 	mrs	r3, PRIMASK
 8009654:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009656:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009658:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800965a:	b672      	cpsid	i
    return(int_posture);
 800965c:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800965e:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8009660:	4b0d      	ldr	r3, [pc, #52]	@ (8009698 <_tx_thread_create+0x1e0>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	3b01      	subs	r3, #1
 8009666:	4a0c      	ldr	r2, [pc, #48]	@ (8009698 <_tx_thread_create+0x1e0>)
 8009668:	6013      	str	r3, [r2, #0]
 800966a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800966c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	f383 8810 	msr	PRIMASK, r3
}
 8009674:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8009676:	f000 f91d 	bl	80098b4 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3748      	adds	r7, #72	@ 0x48
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	08009dfd 	.word	0x08009dfd
 8009688:	0800971d 	.word	0x0800971d
 800968c:	54485244 	.word	0x54485244
 8009690:	20001414 	.word	0x20001414
 8009694:	20001410 	.word	0x20001410
 8009698:	200014a0 	.word	0x200014a0
 800969c:	2000000c 	.word	0x2000000c
 80096a0:	2000140c 	.word	0x2000140c

080096a4 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80096a8:	4b12      	ldr	r3, [pc, #72]	@ (80096f4 <_tx_thread_initialize+0x50>)
 80096aa:	2200      	movs	r2, #0
 80096ac:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80096ae:	4b12      	ldr	r3, [pc, #72]	@ (80096f8 <_tx_thread_initialize+0x54>)
 80096b0:	2200      	movs	r2, #0
 80096b2:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 80096b4:	4b11      	ldr	r3, [pc, #68]	@ (80096fc <_tx_thread_initialize+0x58>)
 80096b6:	2200      	movs	r2, #0
 80096b8:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80096ba:	4b11      	ldr	r3, [pc, #68]	@ (8009700 <_tx_thread_initialize+0x5c>)
 80096bc:	2220      	movs	r2, #32
 80096be:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80096c0:	2280      	movs	r2, #128	@ 0x80
 80096c2:	2100      	movs	r1, #0
 80096c4:	480f      	ldr	r0, [pc, #60]	@ (8009704 <_tx_thread_initialize+0x60>)
 80096c6:	f001 fa6a 	bl	800ab9e <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 80096ca:	4b0f      	ldr	r3, [pc, #60]	@ (8009708 <_tx_thread_initialize+0x64>)
 80096cc:	2200      	movs	r2, #0
 80096ce:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 80096d0:	4b0e      	ldr	r3, [pc, #56]	@ (800970c <_tx_thread_initialize+0x68>)
 80096d2:	2200      	movs	r2, #0
 80096d4:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 80096d6:	4b0e      	ldr	r3, [pc, #56]	@ (8009710 <_tx_thread_initialize+0x6c>)
 80096d8:	2200      	movs	r2, #0
 80096da:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 80096dc:	4b0d      	ldr	r3, [pc, #52]	@ (8009714 <_tx_thread_initialize+0x70>)
 80096de:	2200      	movs	r2, #0
 80096e0:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 80096e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009718 <_tx_thread_initialize+0x74>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 80096ea:	4a0b      	ldr	r2, [pc, #44]	@ (8009718 <_tx_thread_initialize+0x74>)
 80096ec:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 80096ee:	bf00      	nop
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	20001408 	.word	0x20001408
 80096f8:	2000140c 	.word	0x2000140c
 80096fc:	20001418 	.word	0x20001418
 8009700:	2000141c 	.word	0x2000141c
 8009704:	20001420 	.word	0x20001420
 8009708:	20001410 	.word	0x20001410
 800970c:	20001414 	.word	0x20001414
 8009710:	200014a0 	.word	0x200014a0
 8009714:	200014a4 	.word	0x200014a4
 8009718:	200014a8 	.word	0x200014a8

0800971c <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b088      	sub	sp, #32
 8009720:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009722:	4b21      	ldr	r3, [pc, #132]	@ (80097a8 <_tx_thread_shell_entry+0x8c>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800972c:	69fa      	ldr	r2, [r7, #28]
 800972e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009730:	4610      	mov	r0, r2
 8009732:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8009734:	4b1d      	ldr	r3, [pc, #116]	@ (80097ac <_tx_thread_shell_entry+0x90>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d003      	beq.n	8009744 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800973c:	4b1b      	ldr	r3, [pc, #108]	@ (80097ac <_tx_thread_shell_entry+0x90>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	69f8      	ldr	r0, [r7, #28]
 8009742:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009744:	f3ef 8310 	mrs	r3, PRIMASK
 8009748:	607b      	str	r3, [r7, #4]
    return(posture);
 800974a:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800974c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800974e:	b672      	cpsid	i
    return(int_posture);
 8009750:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8009752:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	2201      	movs	r2, #1
 8009758:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	2201      	movs	r2, #1
 800975e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	2200      	movs	r2, #0
 8009764:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8009766:	4b12      	ldr	r3, [pc, #72]	@ (80097b0 <_tx_thread_shell_entry+0x94>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	3301      	adds	r3, #1
 800976c:	4a10      	ldr	r2, [pc, #64]	@ (80097b0 <_tx_thread_shell_entry+0x94>)
 800976e:	6013      	str	r3, [r2, #0]
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	f383 8810 	msr	PRIMASK, r3
}
 800977a:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800977c:	f3ef 8314 	mrs	r3, CONTROL
 8009780:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8009782:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8009784:	617b      	str	r3, [r7, #20]
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	f023 0304 	bic.w	r3, r3, #4
 800978c:	617b      	str	r3, [r7, #20]
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	f383 8814 	msr	CONTROL, r3
}
 8009798:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800979a:	69f8      	ldr	r0, [r7, #28]
 800979c:	f000 f9c4 	bl	8009b28 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80097a0:	bf00      	nop
 80097a2:	3720      	adds	r7, #32
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	20001408 	.word	0x20001408
 80097ac:	200014a4 	.word	0x200014a4
 80097b0:	200014a0 	.word	0x200014a0

080097b4 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b08e      	sub	sp, #56	@ 0x38
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80097bc:	f3ef 8310 	mrs	r3, PRIMASK
 80097c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 80097c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 80097c4:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80097c6:	b672      	cpsid	i
    return(int_posture);
 80097c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80097ca:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80097cc:	4b35      	ldr	r3, [pc, #212]	@ (80098a4 <_tx_thread_sleep+0xf0>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 80097d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d108      	bne.n	80097ea <_tx_thread_sleep+0x36>
 80097d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097da:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80097dc:	6a3b      	ldr	r3, [r7, #32]
 80097de:	f383 8810 	msr	PRIMASK, r3
}
 80097e2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80097e4:	2313      	movs	r3, #19
 80097e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80097e8:	e056      	b.n	8009898 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80097ea:	f3ef 8305 	mrs	r3, IPSR
 80097ee:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80097f0:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80097f2:	4b2d      	ldr	r3, [pc, #180]	@ (80098a8 <_tx_thread_sleep+0xf4>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4313      	orrs	r3, r2
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d008      	beq.n	800980e <_tx_thread_sleep+0x5a>
 80097fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097fe:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	f383 8810 	msr	PRIMASK, r3
}
 8009806:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8009808:	2313      	movs	r3, #19
 800980a:	637b      	str	r3, [r7, #52]	@ 0x34
 800980c:	e044      	b.n	8009898 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800980e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009810:	4a26      	ldr	r2, [pc, #152]	@ (80098ac <_tx_thread_sleep+0xf8>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d108      	bne.n	8009828 <_tx_thread_sleep+0x74>
 8009816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009818:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	f383 8810 	msr	PRIMASK, r3
}
 8009820:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8009822:	2313      	movs	r3, #19
 8009824:	637b      	str	r3, [r7, #52]	@ 0x34
 8009826:	e037      	b.n	8009898 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d108      	bne.n	8009840 <_tx_thread_sleep+0x8c>
 800982e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009830:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	f383 8810 	msr	PRIMASK, r3
}
 8009838:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800983a:	2300      	movs	r3, #0
 800983c:	637b      	str	r3, [r7, #52]	@ 0x34
 800983e:	e02b      	b.n	8009898 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8009840:	4b1b      	ldr	r3, [pc, #108]	@ (80098b0 <_tx_thread_sleep+0xfc>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d008      	beq.n	800985a <_tx_thread_sleep+0xa6>
 8009848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800984a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f383 8810 	msr	PRIMASK, r3
}
 8009852:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8009854:	2313      	movs	r3, #19
 8009856:	637b      	str	r3, [r7, #52]	@ 0x34
 8009858:	e01e      	b.n	8009898 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800985a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800985c:	2204      	movs	r2, #4
 800985e:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009862:	2201      	movs	r2, #1
 8009864:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8009866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009868:	2200      	movs	r2, #0
 800986a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800986e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8009874:	4b0e      	ldr	r3, [pc, #56]	@ (80098b0 <_tx_thread_sleep+0xfc>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	3301      	adds	r3, #1
 800987a:	4a0d      	ldr	r2, [pc, #52]	@ (80098b0 <_tx_thread_sleep+0xfc>)
 800987c:	6013      	str	r3, [r2, #0]
 800987e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009880:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	f383 8810 	msr	PRIMASK, r3
}
 8009888:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800988a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800988c:	f000 f94c 	bl	8009b28 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8009890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009892:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009896:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8009898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800989a:	4618      	mov	r0, r3
 800989c:	3738      	adds	r7, #56	@ 0x38
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	20001408 	.word	0x20001408
 80098a8:	2000000c 	.word	0x2000000c
 80098ac:	20001550 	.word	0x20001550
 80098b0:	200014a0 	.word	0x200014a0

080098b4 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b089      	sub	sp, #36	@ 0x24
 80098b8:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80098ba:	4b17      	ldr	r3, [pc, #92]	@ (8009918 <_tx_thread_system_preempt_check+0x64>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d121      	bne.n	800990a <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80098c6:	4b15      	ldr	r3, [pc, #84]	@ (800991c <_tx_thread_system_preempt_check+0x68>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80098cc:	4b14      	ldr	r3, [pc, #80]	@ (8009920 <_tx_thread_system_preempt_check+0x6c>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80098d2:	69ba      	ldr	r2, [r7, #24]
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d017      	beq.n	800990a <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80098da:	4b12      	ldr	r3, [pc, #72]	@ (8009924 <_tx_thread_system_preempt_check+0x70>)
 80098dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098e0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80098e2:	f3ef 8305 	mrs	r3, IPSR
 80098e6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80098e8:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10c      	bne.n	8009908 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80098ee:	f3ef 8310 	mrs	r3, PRIMASK
 80098f2:	60fb      	str	r3, [r7, #12]
    return(posture);
 80098f4:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 80098f6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80098f8:	b662      	cpsie	i
}
 80098fa:	bf00      	nop
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f383 8810 	msr	PRIMASK, r3
}
 8009906:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8009908:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800990a:	bf00      	nop
 800990c:	3724      	adds	r7, #36	@ 0x24
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop
 8009918:	200014a0 	.word	0x200014a0
 800991c:	20001408 	.word	0x20001408
 8009920:	2000140c 	.word	0x2000140c
 8009924:	e000ed04 	.word	0xe000ed04

08009928 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b096      	sub	sp, #88	@ 0x58
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009930:	f3ef 8310 	mrs	r3, PRIMASK
 8009934:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 8009936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 8009938:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800993a:	b672      	cpsid	i
    return(int_posture);
 800993c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800993e:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009944:	2b00      	cmp	r3, #0
 8009946:	d005      	beq.n	8009954 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	334c      	adds	r3, #76	@ 0x4c
 800994c:	4618      	mov	r0, r3
 800994e:	f000 fb91 	bl	800a074 <_tx_timer_system_deactivate>
 8009952:	e002      	b.n	800995a <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800995a:	4b6c      	ldr	r3, [pc, #432]	@ (8009b0c <_tx_thread_system_resume+0x1e4>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	3b01      	subs	r3, #1
 8009960:	4a6a      	ldr	r2, [pc, #424]	@ (8009b0c <_tx_thread_system_resume+0x1e4>)
 8009962:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009968:	2b00      	cmp	r3, #0
 800996a:	f040 8083 	bne.w	8009a74 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009972:	2b00      	cmp	r3, #0
 8009974:	f000 8097 	beq.w	8009aa6 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800997c:	2b00      	cmp	r3, #0
 800997e:	d172      	bne.n	8009a66 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800998a:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800998c:	4a60      	ldr	r2, [pc, #384]	@ (8009b10 <_tx_thread_system_resume+0x1e8>)
 800998e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009994:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 8009996:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009998:	2b00      	cmp	r3, #0
 800999a:	d154      	bne.n	8009a46 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800999c:	495c      	ldr	r1, [pc, #368]	@ (8009b10 <_tx_thread_system_resume+0x1e8>)
 800999e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80099b2:	2201      	movs	r2, #1
 80099b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099b6:	fa02 f303 	lsl.w	r3, r2, r3
 80099ba:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80099bc:	4b55      	ldr	r3, [pc, #340]	@ (8009b14 <_tx_thread_system_resume+0x1ec>)
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099c2:	4313      	orrs	r3, r2
 80099c4:	4a53      	ldr	r2, [pc, #332]	@ (8009b14 <_tx_thread_system_resume+0x1ec>)
 80099c6:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 80099c8:	4b53      	ldr	r3, [pc, #332]	@ (8009b18 <_tx_thread_system_resume+0x1f0>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d269      	bcs.n	8009aa6 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 80099d2:	4a51      	ldr	r2, [pc, #324]	@ (8009b18 <_tx_thread_system_resume+0x1f0>)
 80099d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099d6:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 80099d8:	4b50      	ldr	r3, [pc, #320]	@ (8009b1c <_tx_thread_system_resume+0x1f4>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80099de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d103      	bne.n	80099ec <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80099e4:	4a4d      	ldr	r2, [pc, #308]	@ (8009b1c <_tx_thread_system_resume+0x1f4>)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6013      	str	r3, [r2, #0]
 80099ea:	e05c      	b.n	8009aa6 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80099ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099f0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d257      	bcs.n	8009aa6 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80099f6:	4a49      	ldr	r2, [pc, #292]	@ (8009b1c <_tx_thread_system_resume+0x1f4>)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6013      	str	r3, [r2, #0]
 80099fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a02:	f383 8810 	msr	PRIMASK, r3
}
 8009a06:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009a08:	4b40      	ldr	r3, [pc, #256]	@ (8009b0c <_tx_thread_system_resume+0x1e4>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 8009a0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d174      	bne.n	8009afe <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009a14:	4b42      	ldr	r3, [pc, #264]	@ (8009b20 <_tx_thread_system_resume+0x1f8>)
 8009a16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a1a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009a1c:	f3ef 8305 	mrs	r3, IPSR
 8009a20:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 8009a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (_tx_ipsr_get() == 0)
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10c      	bne.n	8009a42 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009a28:	f3ef 8310 	mrs	r3, PRIMASK
 8009a2c:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8009a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 8009a30:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009a32:	b662      	cpsie	i
}
 8009a34:	bf00      	nop
 8009a36:	6a3b      	ldr	r3, [r7, #32]
 8009a38:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	f383 8810 	msr	PRIMASK, r3
}
 8009a40:	bf00      	nop
}
 8009a42:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8009a44:	e05b      	b.n	8009afe <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8009a46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8009a4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8009a52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a5c:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009a62:	621a      	str	r2, [r3, #32]
 8009a64:	e01f      	b.n	8009aa6 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2203      	movs	r2, #3
 8009a70:	631a      	str	r2, [r3, #48]	@ 0x30
 8009a72:	e018      	b.n	8009aa6 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d014      	beq.n	8009aa6 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	d010      	beq.n	8009aa6 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d106      	bne.n	8009a9a <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	631a      	str	r2, [r3, #48]	@ 0x30
 8009a98:	e005      	b.n	8009aa6 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2203      	movs	r2, #3
 8009aa4:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8009aa6:	4b1f      	ldr	r3, [pc, #124]	@ (8009b24 <_tx_thread_system_resume+0x1fc>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009aae:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	f383 8810 	msr	PRIMASK, r3
}
 8009ab6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8009ab8:	4b18      	ldr	r3, [pc, #96]	@ (8009b1c <_tx_thread_system_resume+0x1f4>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d020      	beq.n	8009b04 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009ac2:	4b12      	ldr	r3, [pc, #72]	@ (8009b0c <_tx_thread_system_resume+0x1e4>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 8009ac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d11a      	bne.n	8009b04 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009ace:	4b14      	ldr	r3, [pc, #80]	@ (8009b20 <_tx_thread_system_resume+0x1f8>)
 8009ad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ad4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009ad6:	f3ef 8305 	mrs	r3, IPSR
 8009ada:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8009adc:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d10f      	bne.n	8009b02 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8009ae6:	613b      	str	r3, [r7, #16]
    return(posture);
 8009ae8:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8009aea:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009aec:	b662      	cpsie	i
}
 8009aee:	bf00      	nop
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	f383 8810 	msr	PRIMASK, r3
}
 8009afa:	bf00      	nop
}
 8009afc:	e001      	b.n	8009b02 <_tx_thread_system_resume+0x1da>
                                return;
 8009afe:	bf00      	nop
 8009b00:	e000      	b.n	8009b04 <_tx_thread_system_resume+0x1dc>
 8009b02:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8009b04:	3758      	adds	r7, #88	@ 0x58
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	200014a0 	.word	0x200014a0
 8009b10:	20001420 	.word	0x20001420
 8009b14:	20001418 	.word	0x20001418
 8009b18:	2000141c 	.word	0x2000141c
 8009b1c:	2000140c 	.word	0x2000140c
 8009b20:	e000ed04 	.word	0xe000ed04
 8009b24:	20001408 	.word	0x20001408

08009b28 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b09e      	sub	sp, #120	@ 0x78
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8009b30:	4b81      	ldr	r3, [pc, #516]	@ (8009d38 <_tx_thread_system_suspend+0x210>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009b36:	f3ef 8310 	mrs	r3, PRIMASK
 8009b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 8009b3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 8009b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8009b40:	b672      	cpsid	i
    return(int_posture);
 8009b42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8009b44:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d112      	bne.n	8009b74 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b52:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8009b54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d008      	beq.n	8009b6c <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8009b5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b60:	d004      	beq.n	8009b6c <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	334c      	adds	r3, #76	@ 0x4c
 8009b66:	4618      	mov	r0, r3
 8009b68:	f000 fa22 	bl	8009fb0 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	69db      	ldr	r3, [r3, #28]
 8009b70:	4a72      	ldr	r2, [pc, #456]	@ (8009d3c <_tx_thread_system_suspend+0x214>)
 8009b72:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8009b74:	4b72      	ldr	r3, [pc, #456]	@ (8009d40 <_tx_thread_system_suspend+0x218>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	4a71      	ldr	r2, [pc, #452]	@ (8009d40 <_tx_thread_system_suspend+0x218>)
 8009b7c:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	f040 80a6 	bne.w	8009cd4 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b92:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6a1b      	ldr	r3, [r3, #32]
 8009b98:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8009b9a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d015      	beq.n	8009bce <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ba6:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8009ba8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009baa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009bac:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8009bae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bb0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009bb2:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8009bb4:	4a63      	ldr	r2, [pc, #396]	@ (8009d44 <_tx_thread_system_suspend+0x21c>)
 8009bb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d157      	bne.n	8009c72 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8009bc2:	4960      	ldr	r1, [pc, #384]	@ (8009d44 <_tx_thread_system_suspend+0x21c>)
 8009bc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009bc6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009bcc:	e051      	b.n	8009c72 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8009bce:	4a5d      	ldr	r2, [pc, #372]	@ (8009d44 <_tx_thread_system_suspend+0x21c>)
 8009bd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8009bd8:	2201      	movs	r2, #1
 8009bda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8009be0:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8009be2:	4b59      	ldr	r3, [pc, #356]	@ (8009d48 <_tx_thread_system_suspend+0x220>)
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009be8:	43db      	mvns	r3, r3
 8009bea:	4013      	ands	r3, r2
 8009bec:	4a56      	ldr	r2, [pc, #344]	@ (8009d48 <_tx_thread_system_suspend+0x220>)
 8009bee:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8009bf4:	4b54      	ldr	r3, [pc, #336]	@ (8009d48 <_tx_thread_system_suspend+0x220>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8009bfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d12b      	bne.n	8009c58 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8009c00:	4b52      	ldr	r3, [pc, #328]	@ (8009d4c <_tx_thread_system_suspend+0x224>)
 8009c02:	2220      	movs	r2, #32
 8009c04:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8009c06:	4b52      	ldr	r3, [pc, #328]	@ (8009d50 <_tx_thread_system_suspend+0x228>)
 8009c08:	2200      	movs	r2, #0
 8009c0a:	601a      	str	r2, [r3, #0]
 8009c0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c0e:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009c10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c12:	f383 8810 	msr	PRIMASK, r3
}
 8009c16:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009c18:	4b49      	ldr	r3, [pc, #292]	@ (8009d40 <_tx_thread_system_suspend+0x218>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 8009c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f040 8081 	bne.w	8009d28 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009c26:	4b4b      	ldr	r3, [pc, #300]	@ (8009d54 <_tx_thread_system_suspend+0x22c>)
 8009c28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c2c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009c2e:	f3ef 8305 	mrs	r3, IPSR
 8009c32:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 8009c34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (_tx_ipsr_get() == 0)
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d10c      	bne.n	8009c54 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8009c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 8009c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 8009c42:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009c44:	b662      	cpsie	i
}
 8009c46:	bf00      	nop
 8009c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c4a:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c4e:	f383 8810 	msr	PRIMASK, r3
}
 8009c52:	bf00      	nop
}
 8009c54:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8009c56:	e067      	b.n	8009d28 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8009c58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c5a:	fa93 f3a3 	rbit	r3, r3
 8009c5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c62:	fab3 f383 	clz	r3, r3
 8009c66:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8009c68:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009c6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c6c:	4413      	add	r3, r2
 8009c6e:	4a37      	ldr	r2, [pc, #220]	@ (8009d4c <_tx_thread_system_suspend+0x224>)
 8009c70:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8009c72:	4b37      	ldr	r3, [pc, #220]	@ (8009d50 <_tx_thread_system_suspend+0x228>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d12b      	bne.n	8009cd4 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8009c7c:	4b33      	ldr	r3, [pc, #204]	@ (8009d4c <_tx_thread_system_suspend+0x224>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a30      	ldr	r2, [pc, #192]	@ (8009d44 <_tx_thread_system_suspend+0x21c>)
 8009c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c86:	4a32      	ldr	r2, [pc, #200]	@ (8009d50 <_tx_thread_system_suspend+0x228>)
 8009c88:	6013      	str	r3, [r2, #0]
 8009c8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c8c:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c90:	f383 8810 	msr	PRIMASK, r3
}
 8009c94:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009c96:	4b2a      	ldr	r3, [pc, #168]	@ (8009d40 <_tx_thread_system_suspend+0x218>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 8009c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d144      	bne.n	8009d2c <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009ca2:	4b2c      	ldr	r3, [pc, #176]	@ (8009d54 <_tx_thread_system_suspend+0x22c>)
 8009ca4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ca8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009caa:	f3ef 8305 	mrs	r3, IPSR
 8009cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 8009cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (_tx_ipsr_get() == 0)
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d10c      	bne.n	8009cd0 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8009cba:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8009cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 8009cbe:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009cc0:	b662      	cpsie	i
}
 8009cc2:	bf00      	nop
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009cc8:	6a3b      	ldr	r3, [r7, #32]
 8009cca:	f383 8810 	msr	PRIMASK, r3
}
 8009cce:	bf00      	nop
}
 8009cd0:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8009cd2:	e02b      	b.n	8009d2c <_tx_thread_system_suspend+0x204>
 8009cd4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009cd6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	f383 8810 	msr	PRIMASK, r3
}
 8009cde:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8009ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8009d50 <_tx_thread_system_suspend+0x228>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d022      	beq.n	8009d30 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009cea:	4b15      	ldr	r3, [pc, #84]	@ (8009d40 <_tx_thread_system_suspend+0x218>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 8009cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d11c      	bne.n	8009d30 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009cf6:	4b17      	ldr	r3, [pc, #92]	@ (8009d54 <_tx_thread_system_suspend+0x22c>)
 8009cf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cfc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009cfe:	f3ef 8305 	mrs	r3, IPSR
 8009d02:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8009d04:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d10c      	bne.n	8009d24 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009d0a:	f3ef 8310 	mrs	r3, PRIMASK
 8009d0e:	617b      	str	r3, [r7, #20]
    return(posture);
 8009d10:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8009d12:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009d14:	b662      	cpsie	i
}
 8009d16:	bf00      	nop
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f383 8810 	msr	PRIMASK, r3
}
 8009d22:	bf00      	nop
}
 8009d24:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8009d26:	e003      	b.n	8009d30 <_tx_thread_system_suspend+0x208>
                return;
 8009d28:	bf00      	nop
 8009d2a:	e002      	b.n	8009d32 <_tx_thread_system_suspend+0x20a>
            return;
 8009d2c:	bf00      	nop
 8009d2e:	e000      	b.n	8009d32 <_tx_thread_system_suspend+0x20a>
    return;
 8009d30:	bf00      	nop
}
 8009d32:	3778      	adds	r7, #120	@ 0x78
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	20001408 	.word	0x20001408
 8009d3c:	20001a0c 	.word	0x20001a0c
 8009d40:	200014a0 	.word	0x200014a0
 8009d44:	20001420 	.word	0x20001420
 8009d48:	20001418 	.word	0x20001418
 8009d4c:	2000141c 	.word	0x2000141c
 8009d50:	2000140c 	.word	0x2000140c
 8009d54:	e000ed04 	.word	0xe000ed04

08009d58 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b087      	sub	sp, #28
 8009d5c:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009d5e:	4b21      	ldr	r3, [pc, #132]	@ (8009de4 <_tx_thread_time_slice+0x8c>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009d64:	f3ef 8310 	mrs	r3, PRIMASK
 8009d68:	60fb      	str	r3, [r7, #12]
    return(posture);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8009d6c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009d6e:	b672      	cpsid	i
    return(int_posture);
 8009d70:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8009d72:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8009d74:	4b1c      	ldr	r3, [pc, #112]	@ (8009de8 <_tx_thread_time_slice+0x90>)
 8009d76:	2200      	movs	r2, #0
 8009d78:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d024      	beq.n	8009dca <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d120      	bne.n	8009dca <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	69da      	ldr	r2, [r3, #28]
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	699b      	ldr	r3, [r3, #24]
 8009d94:	4a15      	ldr	r2, [pc, #84]	@ (8009dec <_tx_thread_time_slice+0x94>)
 8009d96:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	6a1b      	ldr	r3, [r3, #32]
 8009d9c:	697a      	ldr	r2, [r7, #20]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d013      	beq.n	8009dca <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d10d      	bne.n	8009dca <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009db2:	697a      	ldr	r2, [r7, #20]
 8009db4:	6a12      	ldr	r2, [r2, #32]
 8009db6:	490e      	ldr	r1, [pc, #56]	@ (8009df0 <_tx_thread_time_slice+0x98>)
 8009db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8009dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8009df4 <_tx_thread_time_slice+0x9c>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8009df0 <_tx_thread_time_slice+0x98>)
 8009dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8009df8 <_tx_thread_time_slice+0xa0>)
 8009dc8:	6013      	str	r3, [r2, #0]
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f383 8810 	msr	PRIMASK, r3
}
 8009dd4:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8009dd6:	bf00      	nop
 8009dd8:	371c      	adds	r7, #28
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	20001408 	.word	0x20001408
 8009de8:	200014b0 	.word	0x200014b0
 8009dec:	20001a0c 	.word	0x20001a0c
 8009df0:	20001420 	.word	0x20001420
 8009df4:	2000141c 	.word	0x2000141c
 8009df8:	2000140c 	.word	0x2000140c

08009dfc <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b08a      	sub	sp, #40	@ 0x28
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009e08:	f3ef 8310 	mrs	r3, PRIMASK
 8009e0c:	617b      	str	r3, [r7, #20]
    return(posture);
 8009e0e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009e10:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009e12:	b672      	cpsid	i
    return(int_posture);
 8009e14:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8009e16:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8009e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e1c:	2b04      	cmp	r3, #4
 8009e1e:	d10e      	bne.n	8009e3e <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8009e20:	4b13      	ldr	r3, [pc, #76]	@ (8009e70 <_tx_thread_timeout+0x74>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	3301      	adds	r3, #1
 8009e26:	4a12      	ldr	r2, [pc, #72]	@ (8009e70 <_tx_thread_timeout+0x74>)
 8009e28:	6013      	str	r3, [r2, #0]
 8009e2a:	6a3b      	ldr	r3, [r7, #32]
 8009e2c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f383 8810 	msr	PRIMASK, r3
}
 8009e34:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8009e36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009e38:	f7ff fd76 	bl	8009928 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8009e3c:	e013      	b.n	8009e66 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8009e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e42:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8009e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009e4a:	61bb      	str	r3, [r7, #24]
 8009e4c:	6a3b      	ldr	r3, [r7, #32]
 8009e4e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	f383 8810 	msr	PRIMASK, r3
}
 8009e56:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d003      	beq.n	8009e66 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	69b9      	ldr	r1, [r7, #24]
 8009e62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009e64:	4798      	blx	r3
}
 8009e66:	bf00      	nop
 8009e68:	3728      	adds	r7, #40	@ 0x28
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	200014a0 	.word	0x200014a0

08009e74 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8009e7e:	607b      	str	r3, [r7, #4]
    return(posture);
 8009e80:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8009e82:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009e84:	b672      	cpsid	i
    return(int_posture);
 8009e86:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8009e88:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8009e8a:	4b09      	ldr	r3, [pc, #36]	@ (8009eb0 <_tx_timer_expiration_process+0x3c>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	4a07      	ldr	r2, [pc, #28]	@ (8009eb0 <_tx_timer_expiration_process+0x3c>)
 8009e92:	6013      	str	r3, [r2, #0]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	f383 8810 	msr	PRIMASK, r3
}
 8009e9e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8009ea0:	4804      	ldr	r0, [pc, #16]	@ (8009eb4 <_tx_timer_expiration_process+0x40>)
 8009ea2:	f7ff fd41 	bl	8009928 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8009ea6:	bf00      	nop
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	200014a0 	.word	0x200014a0
 8009eb4:	20001550 	.word	0x20001550

08009eb8 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8009eb8:	b590      	push	{r4, r7, lr}
 8009eba:	b089      	sub	sp, #36	@ 0x24
 8009ebc:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8009ebe:	4b28      	ldr	r3, [pc, #160]	@ (8009f60 <_tx_timer_initialize+0xa8>)
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8009ec4:	4b27      	ldr	r3, [pc, #156]	@ (8009f64 <_tx_timer_initialize+0xac>)
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8009eca:	4b27      	ldr	r3, [pc, #156]	@ (8009f68 <_tx_timer_initialize+0xb0>)
 8009ecc:	2200      	movs	r2, #0
 8009ece:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8009ed0:	4b26      	ldr	r3, [pc, #152]	@ (8009f6c <_tx_timer_initialize+0xb4>)
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8009ed6:	4b26      	ldr	r3, [pc, #152]	@ (8009f70 <_tx_timer_initialize+0xb8>)
 8009ed8:	2200      	movs	r2, #0
 8009eda:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8009edc:	2280      	movs	r2, #128	@ 0x80
 8009ede:	2100      	movs	r1, #0
 8009ee0:	4824      	ldr	r0, [pc, #144]	@ (8009f74 <_tx_timer_initialize+0xbc>)
 8009ee2:	f000 fe5c 	bl	800ab9e <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8009ee6:	4b24      	ldr	r3, [pc, #144]	@ (8009f78 <_tx_timer_initialize+0xc0>)
 8009ee8:	4a22      	ldr	r2, [pc, #136]	@ (8009f74 <_tx_timer_initialize+0xbc>)
 8009eea:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8009eec:	4b23      	ldr	r3, [pc, #140]	@ (8009f7c <_tx_timer_initialize+0xc4>)
 8009eee:	4a21      	ldr	r2, [pc, #132]	@ (8009f74 <_tx_timer_initialize+0xbc>)
 8009ef0:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8009ef2:	4b23      	ldr	r3, [pc, #140]	@ (8009f80 <_tx_timer_initialize+0xc8>)
 8009ef4:	4a23      	ldr	r2, [pc, #140]	@ (8009f84 <_tx_timer_initialize+0xcc>)
 8009ef6:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8009ef8:	4b21      	ldr	r3, [pc, #132]	@ (8009f80 <_tx_timer_initialize+0xc8>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	3304      	adds	r3, #4
 8009efe:	4a20      	ldr	r2, [pc, #128]	@ (8009f80 <_tx_timer_initialize+0xc8>)
 8009f00:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8009f02:	4b21      	ldr	r3, [pc, #132]	@ (8009f88 <_tx_timer_initialize+0xd0>)
 8009f04:	4a21      	ldr	r2, [pc, #132]	@ (8009f8c <_tx_timer_initialize+0xd4>)
 8009f06:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8009f08:	4b21      	ldr	r3, [pc, #132]	@ (8009f90 <_tx_timer_initialize+0xd8>)
 8009f0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009f0e:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8009f10:	4b20      	ldr	r3, [pc, #128]	@ (8009f94 <_tx_timer_initialize+0xdc>)
 8009f12:	2200      	movs	r2, #0
 8009f14:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8009f16:	4b1c      	ldr	r3, [pc, #112]	@ (8009f88 <_tx_timer_initialize+0xd0>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8009f90 <_tx_timer_initialize+0xd8>)
 8009f1c:	6812      	ldr	r2, [r2, #0]
 8009f1e:	491d      	ldr	r1, [pc, #116]	@ (8009f94 <_tx_timer_initialize+0xdc>)
 8009f20:	6809      	ldr	r1, [r1, #0]
 8009f22:	481c      	ldr	r0, [pc, #112]	@ (8009f94 <_tx_timer_initialize+0xdc>)
 8009f24:	6800      	ldr	r0, [r0, #0]
 8009f26:	2400      	movs	r4, #0
 8009f28:	9405      	str	r4, [sp, #20]
 8009f2a:	2400      	movs	r4, #0
 8009f2c:	9404      	str	r4, [sp, #16]
 8009f2e:	9003      	str	r0, [sp, #12]
 8009f30:	9102      	str	r1, [sp, #8]
 8009f32:	9201      	str	r2, [sp, #4]
 8009f34:	9300      	str	r3, [sp, #0]
 8009f36:	4b18      	ldr	r3, [pc, #96]	@ (8009f98 <_tx_timer_initialize+0xe0>)
 8009f38:	4a18      	ldr	r2, [pc, #96]	@ (8009f9c <_tx_timer_initialize+0xe4>)
 8009f3a:	4919      	ldr	r1, [pc, #100]	@ (8009fa0 <_tx_timer_initialize+0xe8>)
 8009f3c:	4819      	ldr	r0, [pc, #100]	@ (8009fa4 <_tx_timer_initialize+0xec>)
 8009f3e:	f7ff fabb 	bl	80094b8 <_tx_thread_create>
 8009f42:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1e5      	bne.n	8009f16 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8009f4a:	4b17      	ldr	r3, [pc, #92]	@ (8009fa8 <_tx_timer_initialize+0xf0>)
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8009f50:	4b16      	ldr	r3, [pc, #88]	@ (8009fac <_tx_timer_initialize+0xf4>)
 8009f52:	2200      	movs	r2, #0
 8009f54:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8009f56:	bf00      	nop
 8009f58:	370c      	adds	r7, #12
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd90      	pop	{r4, r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	200014ac 	.word	0x200014ac
 8009f64:	20001a0c 	.word	0x20001a0c
 8009f68:	200014b0 	.word	0x200014b0
 8009f6c:	20001540 	.word	0x20001540
 8009f70:	2000154c 	.word	0x2000154c
 8009f74:	200014b4 	.word	0x200014b4
 8009f78:	20001534 	.word	0x20001534
 8009f7c:	2000153c 	.word	0x2000153c
 8009f80:	20001538 	.word	0x20001538
 8009f84:	20001530 	.word	0x20001530
 8009f88:	20001600 	.word	0x20001600
 8009f8c:	2000160c 	.word	0x2000160c
 8009f90:	20001604 	.word	0x20001604
 8009f94:	20001608 	.word	0x20001608
 8009f98:	4154494d 	.word	0x4154494d
 8009f9c:	0800a0e5 	.word	0x0800a0e5
 8009fa0:	0800b768 	.word	0x0800b768
 8009fa4:	20001550 	.word	0x20001550
 8009fa8:	20001544 	.word	0x20001544
 8009fac:	20001548 	.word	0x20001548

08009fb0 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b089      	sub	sp, #36	@ 0x24
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d04a      	beq.n	800a05a <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fca:	d046      	beq.n	800a05a <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	699b      	ldr	r3, [r3, #24]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d142      	bne.n	800a05a <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	2b20      	cmp	r3, #32
 8009fd8:	d902      	bls.n	8009fe0 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8009fda:	231f      	movs	r3, #31
 8009fdc:	61bb      	str	r3, [r7, #24]
 8009fde:	e002      	b.n	8009fe6 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8009fe6:	4b20      	ldr	r3, [pc, #128]	@ (800a068 <_tx_timer_system_activate+0xb8>)
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	4413      	add	r3, r2
 8009ff0:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8009ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800a06c <_tx_timer_system_activate+0xbc>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	69fa      	ldr	r2, [r7, #28]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d30b      	bcc.n	800a014 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8009ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800a06c <_tx_timer_system_activate+0xbc>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	69fa      	ldr	r2, [r7, #28]
 800a002:	1ad3      	subs	r3, r2, r3
 800a004:	109b      	asrs	r3, r3, #2
 800a006:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800a008:	4b19      	ldr	r3, [pc, #100]	@ (800a070 <_tx_timer_system_activate+0xc0>)
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	4413      	add	r3, r2
 800a012:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d109      	bne.n	800a030 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	601a      	str	r2, [r3, #0]
 800a02e:	e011      	b.n	800a054 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800a030:	69fb      	ldr	r3, [r7, #28]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	695b      	ldr	r3, [r3, #20]
 800a03a:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	69fa      	ldr	r2, [r7, #28]
 800a058:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800a05a:	bf00      	nop
 800a05c:	3724      	adds	r7, #36	@ 0x24
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr
 800a066:	bf00      	nop
 800a068:	2000153c 	.word	0x2000153c
 800a06c:	20001538 	.word	0x20001538
 800a070:	20001534 	.word	0x20001534

0800a074 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800a074:	b480      	push	{r7}
 800a076:	b087      	sub	sp, #28
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	699b      	ldr	r3, [r3, #24]
 800a080:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d026      	beq.n	800a0d6 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	429a      	cmp	r2, r3
 800a094:	d108      	bne.n	800a0a8 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d117      	bne.n	800a0d0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	601a      	str	r2, [r3, #0]
 800a0a6:	e013      	b.n	800a0d0 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	695b      	ldr	r3, [r3, #20]
 800a0ac:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	693a      	ldr	r2, [r7, #16]
 800a0b8:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d105      	bne.n	800a0d0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	697a      	ldr	r2, [r7, #20]
 800a0c8:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	693a      	ldr	r2, [r7, #16]
 800a0ce:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	619a      	str	r2, [r3, #24]
    }
}
 800a0d6:	bf00      	nop
 800a0d8:	371c      	adds	r7, #28
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr
	...

0800a0e4 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b098      	sub	sp, #96	@ 0x60
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4a73      	ldr	r2, [pc, #460]	@ (800a2c0 <_tx_timer_thread_entry+0x1dc>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	f040 80de 	bne.w	800a2b6 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a0fa:	f3ef 8310 	mrs	r3, PRIMASK
 800a0fe:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 800a100:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 800a102:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800a104:	b672      	cpsid	i
    return(int_posture);
 800a106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800a108:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800a10a:	4b6e      	ldr	r3, [pc, #440]	@ (800a2c4 <_tx_timer_thread_entry+0x1e0>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d003      	beq.n	800a120 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f107 020c 	add.w	r2, r7, #12
 800a11e:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800a120:	4b68      	ldr	r3, [pc, #416]	@ (800a2c4 <_tx_timer_thread_entry+0x1e0>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2200      	movs	r2, #0
 800a126:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800a128:	4b66      	ldr	r3, [pc, #408]	@ (800a2c4 <_tx_timer_thread_entry+0x1e0>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3304      	adds	r3, #4
 800a12e:	4a65      	ldr	r2, [pc, #404]	@ (800a2c4 <_tx_timer_thread_entry+0x1e0>)
 800a130:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800a132:	4b64      	ldr	r3, [pc, #400]	@ (800a2c4 <_tx_timer_thread_entry+0x1e0>)
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	4b64      	ldr	r3, [pc, #400]	@ (800a2c8 <_tx_timer_thread_entry+0x1e4>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d103      	bne.n	800a146 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800a13e:	4b63      	ldr	r3, [pc, #396]	@ (800a2cc <_tx_timer_thread_entry+0x1e8>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a60      	ldr	r2, [pc, #384]	@ (800a2c4 <_tx_timer_thread_entry+0x1e0>)
 800a144:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800a146:	4b62      	ldr	r3, [pc, #392]	@ (800a2d0 <_tx_timer_thread_entry+0x1ec>)
 800a148:	2200      	movs	r2, #0
 800a14a:	601a      	str	r2, [r3, #0]
 800a14c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a14e:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a152:	f383 8810 	msr	PRIMASK, r3
}
 800a156:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a158:	f3ef 8310 	mrs	r3, PRIMASK
 800a15c:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 800a15e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 800a160:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800a162:	b672      	cpsid	i
    return(int_posture);
 800a164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800a166:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800a168:	e07f      	b.n	800a26a <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	691b      	ldr	r3, [r3, #16]
 800a172:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800a174:	2300      	movs	r3, #0
 800a176:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800a178:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a17a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d102      	bne.n	800a186 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800a180:	2300      	movs	r3, #0
 800a182:	60fb      	str	r3, [r7, #12]
 800a184:	e00e      	b.n	800a1a4 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800a186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a188:	695b      	ldr	r3, [r3, #20]
 800a18a:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800a18c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a18e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a190:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800a192:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a194:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a196:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800a198:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a19a:	f107 020c 	add.w	r2, r7, #12
 800a19e:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800a1a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a1a2:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800a1a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2b20      	cmp	r3, #32
 800a1aa:	d911      	bls.n	800a1d0 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800a1ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800a1b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1b6:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800a1bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1be:	f107 0208 	add.w	r2, r7, #8
 800a1c2:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800a1c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a1c8:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800a1ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1cc:	60bb      	str	r3, [r7, #8]
 800a1ce:	e01a      	b.n	800a206 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800a1d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800a1d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800a1dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1de:	685a      	ldr	r2, [r3, #4]
 800a1e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1e2:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800a1e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d009      	beq.n	800a200 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800a1ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1ee:	f107 0208 	add.w	r2, r7, #8
 800a1f2:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800a1f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a1f8:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800a1fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1fc:	60bb      	str	r3, [r7, #8]
 800a1fe:	e002      	b.n	800a206 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800a200:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a202:	2200      	movs	r2, #0
 800a204:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800a206:	4a33      	ldr	r2, [pc, #204]	@ (800a2d4 <_tx_timer_thread_entry+0x1f0>)
 800a208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a20a:	6013      	str	r3, [r2, #0]
 800a20c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a20e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a212:	f383 8810 	msr	PRIMASK, r3
}
 800a216:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800a218:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d002      	beq.n	800a224 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800a21e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a220:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a222:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a224:	f3ef 8310 	mrs	r3, PRIMASK
 800a228:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800a22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800a22c:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800a22e:	b672      	cpsid	i
    return(int_posture);
 800a230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800a232:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800a234:	4b27      	ldr	r3, [pc, #156]	@ (800a2d4 <_tx_timer_thread_entry+0x1f0>)
 800a236:	2200      	movs	r2, #0
 800a238:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a23e:	429a      	cmp	r2, r3
 800a240:	d105      	bne.n	800a24e <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800a242:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a244:	2200      	movs	r2, #0
 800a246:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800a248:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800a24a:	f7ff feb1 	bl	8009fb0 <_tx_timer_system_activate>
 800a24e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a250:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a252:	69bb      	ldr	r3, [r7, #24]
 800a254:	f383 8810 	msr	PRIMASK, r3
}
 800a258:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a25a:	f3ef 8310 	mrs	r3, PRIMASK
 800a25e:	623b      	str	r3, [r7, #32]
    return(posture);
 800a260:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a262:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a264:	b672      	cpsid	i
    return(int_posture);
 800a266:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800a268:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	f47f af7c 	bne.w	800a16a <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800a272:	4b17      	ldr	r3, [pc, #92]	@ (800a2d0 <_tx_timer_thread_entry+0x1ec>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d116      	bne.n	800a2a8 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800a27a:	4b17      	ldr	r3, [pc, #92]	@ (800a2d8 <_tx_timer_thread_entry+0x1f4>)
 800a27c:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800a27e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a280:	2203      	movs	r2, #3
 800a282:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a284:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a286:	2201      	movs	r2, #1
 800a288:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800a28a:	4b14      	ldr	r3, [pc, #80]	@ (800a2dc <_tx_timer_thread_entry+0x1f8>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	3301      	adds	r3, #1
 800a290:	4a12      	ldr	r2, [pc, #72]	@ (800a2dc <_tx_timer_thread_entry+0x1f8>)
 800a292:	6013      	str	r3, [r2, #0]
 800a294:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a296:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	f383 8810 	msr	PRIMASK, r3
}
 800a29e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800a2a0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800a2a2:	f7ff fc41 	bl	8009b28 <_tx_thread_system_suspend>
 800a2a6:	e728      	b.n	800a0fa <_tx_timer_thread_entry+0x16>
 800a2a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2aa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	f383 8810 	msr	PRIMASK, r3
}
 800a2b2:	bf00      	nop
            TX_DISABLE
 800a2b4:	e721      	b.n	800a0fa <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800a2b6:	bf00      	nop
 800a2b8:	3760      	adds	r7, #96	@ 0x60
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	4154494d 	.word	0x4154494d
 800a2c4:	2000153c 	.word	0x2000153c
 800a2c8:	20001538 	.word	0x20001538
 800a2cc:	20001534 	.word	0x20001534
 800a2d0:	20001540 	.word	0x20001540
 800a2d4:	2000154c 	.word	0x2000154c
 800a2d8:	20001550 	.word	0x20001550
 800a2dc:	200014a0 	.word	0x200014a0

0800a2e0 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b092      	sub	sp, #72	@ 0x48
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	607a      	str	r2, [r7, #4]
 800a2ec:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d102      	bne.n	800a2fe <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800a2f8:	2302      	movs	r3, #2
 800a2fa:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2fc:	e075      	b.n	800a3ea <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800a2fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a300:	2b34      	cmp	r3, #52	@ 0x34
 800a302:	d002      	beq.n	800a30a <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800a304:	2302      	movs	r3, #2
 800a306:	647b      	str	r3, [r7, #68]	@ 0x44
 800a308:	e06f      	b.n	800a3ea <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a30a:	f3ef 8310 	mrs	r3, PRIMASK
 800a30e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800a310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800a312:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a314:	b672      	cpsid	i
    return(int_posture);
 800a316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800a318:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800a31a:	4b3b      	ldr	r3, [pc, #236]	@ (800a408 <_txe_byte_pool_create+0x128>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	3301      	adds	r3, #1
 800a320:	4a39      	ldr	r2, [pc, #228]	@ (800a408 <_txe_byte_pool_create+0x128>)
 800a322:	6013      	str	r3, [r2, #0]
 800a324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a326:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a32a:	f383 8810 	msr	PRIMASK, r3
}
 800a32e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800a330:	4b36      	ldr	r3, [pc, #216]	@ (800a40c <_txe_byte_pool_create+0x12c>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800a336:	2300      	movs	r3, #0
 800a338:	643b      	str	r3, [r7, #64]	@ 0x40
 800a33a:	e009      	b.n	800a350 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a340:	429a      	cmp	r2, r3
 800a342:	d00b      	beq.n	800a35c <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800a344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a348:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800a34a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a34c:	3301      	adds	r3, #1
 800a34e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a350:	4b2f      	ldr	r3, [pc, #188]	@ (800a410 <_txe_byte_pool_create+0x130>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a356:	429a      	cmp	r2, r3
 800a358:	d3f0      	bcc.n	800a33c <_txe_byte_pool_create+0x5c>
 800a35a:	e000      	b.n	800a35e <_txe_byte_pool_create+0x7e>
                break;
 800a35c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a35e:	f3ef 8310 	mrs	r3, PRIMASK
 800a362:	623b      	str	r3, [r7, #32]
    return(posture);
 800a364:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a366:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a368:	b672      	cpsid	i
    return(int_posture);
 800a36a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800a36c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800a36e:	4b26      	ldr	r3, [pc, #152]	@ (800a408 <_txe_byte_pool_create+0x128>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	3b01      	subs	r3, #1
 800a374:	4a24      	ldr	r2, [pc, #144]	@ (800a408 <_txe_byte_pool_create+0x128>)
 800a376:	6013      	str	r3, [r2, #0]
 800a378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a37a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a37c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a37e:	f383 8810 	msr	PRIMASK, r3
}
 800a382:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a384:	f7ff fa96 	bl	80098b4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d102      	bne.n	800a396 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800a390:	2302      	movs	r3, #2
 800a392:	647b      	str	r3, [r7, #68]	@ 0x44
 800a394:	e029      	b.n	800a3ea <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d102      	bne.n	800a3a2 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800a39c:	2303      	movs	r3, #3
 800a39e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3a0:	e023      	b.n	800a3ea <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	2b63      	cmp	r3, #99	@ 0x63
 800a3a6:	d802      	bhi.n	800a3ae <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800a3a8:	2305      	movs	r3, #5
 800a3aa:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3ac:	e01d      	b.n	800a3ea <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800a3ae:	4b19      	ldr	r3, [pc, #100]	@ (800a414 <_txe_byte_pool_create+0x134>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800a3b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3b6:	4a18      	ldr	r2, [pc, #96]	@ (800a418 <_txe_byte_pool_create+0x138>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d101      	bne.n	800a3c0 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a3bc:	2313      	movs	r3, #19
 800a3be:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a3c0:	f3ef 8305 	mrs	r3, IPSR
 800a3c4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a3c6:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a3c8:	4b14      	ldr	r3, [pc, #80]	@ (800a41c <_txe_byte_pool_create+0x13c>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d00b      	beq.n	800a3ea <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a3d2:	f3ef 8305 	mrs	r3, IPSR
 800a3d6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a3d8:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a3da:	4b10      	ldr	r3, [pc, #64]	@ (800a41c <_txe_byte_pool_create+0x13c>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800a3e4:	d201      	bcs.n	800a3ea <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800a3e6:	2313      	movs	r3, #19
 800a3e8:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a3ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d106      	bne.n	800a3fe <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	68b9      	ldr	r1, [r7, #8]
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f7fe fd62 	bl	8008ec0 <_tx_byte_pool_create>
 800a3fc:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800a3fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800a400:	4618      	mov	r0, r3
 800a402:	3748      	adds	r7, #72	@ 0x48
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	200014a0 	.word	0x200014a0
 800a40c:	200013f8 	.word	0x200013f8
 800a410:	200013fc 	.word	0x200013fc
 800a414:	20001408 	.word	0x20001408
 800a418:	20001550 	.word	0x20001550
 800a41c:	2000000c 	.word	0x2000000c

0800a420 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b092      	sub	sp, #72	@ 0x48
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	607a      	str	r2, [r7, #4]
 800a42c:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a42e:	2300      	movs	r3, #0
 800a430:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d102      	bne.n	800a43e <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a438:	230c      	movs	r3, #12
 800a43a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a43c:	e054      	b.n	800a4e8 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	2b1c      	cmp	r3, #28
 800a442:	d002      	beq.n	800a44a <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a444:	230c      	movs	r3, #12
 800a446:	647b      	str	r3, [r7, #68]	@ 0x44
 800a448:	e04e      	b.n	800a4e8 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a44a:	f3ef 8310 	mrs	r3, PRIMASK
 800a44e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800a450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800a452:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a454:	b672      	cpsid	i
    return(int_posture);
 800a456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800a458:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800a45a:	4b36      	ldr	r3, [pc, #216]	@ (800a534 <_txe_semaphore_create+0x114>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	3301      	adds	r3, #1
 800a460:	4a34      	ldr	r2, [pc, #208]	@ (800a534 <_txe_semaphore_create+0x114>)
 800a462:	6013      	str	r3, [r2, #0]
 800a464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a466:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a46a:	f383 8810 	msr	PRIMASK, r3
}
 800a46e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800a470:	4b31      	ldr	r3, [pc, #196]	@ (800a538 <_txe_semaphore_create+0x118>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800a476:	2300      	movs	r3, #0
 800a478:	643b      	str	r3, [r7, #64]	@ 0x40
 800a47a:	e009      	b.n	800a490 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a480:	429a      	cmp	r2, r3
 800a482:	d00b      	beq.n	800a49c <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800a484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a486:	695b      	ldr	r3, [r3, #20]
 800a488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800a48a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a48c:	3301      	adds	r3, #1
 800a48e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a490:	4b2a      	ldr	r3, [pc, #168]	@ (800a53c <_txe_semaphore_create+0x11c>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a496:	429a      	cmp	r2, r3
 800a498:	d3f0      	bcc.n	800a47c <_txe_semaphore_create+0x5c>
 800a49a:	e000      	b.n	800a49e <_txe_semaphore_create+0x7e>
                break;
 800a49c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a49e:	f3ef 8310 	mrs	r3, PRIMASK
 800a4a2:	623b      	str	r3, [r7, #32]
    return(posture);
 800a4a4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a4a6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a4a8:	b672      	cpsid	i
    return(int_posture);
 800a4aa:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800a4ac:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800a4ae:	4b21      	ldr	r3, [pc, #132]	@ (800a534 <_txe_semaphore_create+0x114>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	4a1f      	ldr	r2, [pc, #124]	@ (800a534 <_txe_semaphore_create+0x114>)
 800a4b6:	6013      	str	r3, [r2, #0]
 800a4b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ba:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4be:	f383 8810 	msr	PRIMASK, r3
}
 800a4c2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a4c4:	f7ff f9f6 	bl	80098b4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d102      	bne.n	800a4d6 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800a4d0:	230c      	movs	r3, #12
 800a4d2:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4d4:	e008      	b.n	800a4e8 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800a4d6:	4b1a      	ldr	r3, [pc, #104]	@ (800a540 <_txe_semaphore_create+0x120>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800a4dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4de:	4a19      	ldr	r2, [pc, #100]	@ (800a544 <_txe_semaphore_create+0x124>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d101      	bne.n	800a4e8 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a4e4:	2313      	movs	r3, #19
 800a4e6:	647b      	str	r3, [r7, #68]	@ 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a4e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d114      	bne.n	800a518 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a4ee:	f3ef 8305 	mrs	r3, IPSR
 800a4f2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a4f4:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a4f6:	4b14      	ldr	r3, [pc, #80]	@ (800a548 <_txe_semaphore_create+0x128>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00b      	beq.n	800a518 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a500:	f3ef 8305 	mrs	r3, IPSR
 800a504:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a506:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a508:	4b0f      	ldr	r3, [pc, #60]	@ (800a548 <_txe_semaphore_create+0x128>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800a512:	d201      	bcs.n	800a518 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a514:	2313      	movs	r3, #19
 800a516:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d105      	bne.n	800a52a <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	68b9      	ldr	r1, [r7, #8]
 800a522:	68f8      	ldr	r0, [r7, #12]
 800a524:	f7fe fe4c 	bl	80091c0 <_tx_semaphore_create>
 800a528:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800a52a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3748      	adds	r7, #72	@ 0x48
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}
 800a534:	200014a0 	.word	0x200014a0
 800a538:	200013d0 	.word	0x200013d0
 800a53c:	200013d4 	.word	0x200013d4
 800a540:	20001408 	.word	0x20001408
 800a544:	20001550 	.word	0x20001550
 800a548:	2000000c 	.word	0x2000000c

0800a54c <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a556:	2300      	movs	r3, #0
 800a558:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d102      	bne.n	800a566 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a560:	230c      	movs	r3, #12
 800a562:	617b      	str	r3, [r7, #20]
 800a564:	e01f      	b.n	800a5a6 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a15      	ldr	r2, [pc, #84]	@ (800a5c0 <_txe_semaphore_get+0x74>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d002      	beq.n	800a576 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a570:	230c      	movs	r3, #12
 800a572:	617b      	str	r3, [r7, #20]
 800a574:	e017      	b.n	800a5a6 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d014      	beq.n	800a5a6 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a57c:	f3ef 8305 	mrs	r3, IPSR
 800a580:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800a582:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a584:	4b0f      	ldr	r3, [pc, #60]	@ (800a5c4 <_txe_semaphore_get+0x78>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4313      	orrs	r3, r2
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d002      	beq.n	800a594 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800a58e:	2304      	movs	r3, #4
 800a590:	617b      	str	r3, [r7, #20]
 800a592:	e008      	b.n	800a5a6 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800a594:	4b0c      	ldr	r3, [pc, #48]	@ (800a5c8 <_txe_semaphore_get+0x7c>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	4a0b      	ldr	r2, [pc, #44]	@ (800a5cc <_txe_semaphore_get+0x80>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d101      	bne.n	800a5a6 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800a5a2:	2304      	movs	r3, #4
 800a5a4:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d104      	bne.n	800a5b6 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800a5ac:	6839      	ldr	r1, [r7, #0]
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f7fe fe58 	bl	8009264 <_tx_semaphore_get>
 800a5b4:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800a5b6:	697b      	ldr	r3, [r7, #20]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3718      	adds	r7, #24
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	53454d41 	.word	0x53454d41
 800a5c4:	2000000c 	.word	0x2000000c
 800a5c8:	20001408 	.word	0x20001408
 800a5cc:	20001550 	.word	0x20001550

0800a5d0 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d102      	bne.n	800a5e4 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a5de:	230c      	movs	r3, #12
 800a5e0:	60fb      	str	r3, [r7, #12]
 800a5e2:	e00b      	b.n	800a5fc <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a07      	ldr	r2, [pc, #28]	@ (800a608 <_txe_semaphore_put+0x38>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d002      	beq.n	800a5f4 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a5ee:	230c      	movs	r3, #12
 800a5f0:	60fb      	str	r3, [r7, #12]
 800a5f2:	e003      	b.n	800a5fc <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f7fe ff07 	bl	8009408 <_tx_semaphore_put>
 800a5fa:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	53454d41 	.word	0x53454d41

0800a60c <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b09a      	sub	sp, #104	@ 0x68
 800a610:	af06      	add	r7, sp, #24
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]
 800a618:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a61a:	2300      	movs	r3, #0
 800a61c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d102      	bne.n	800a62a <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800a624:	230e      	movs	r3, #14
 800a626:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a628:	e0bb      	b.n	800a7a2 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800a62a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a62c:	2bb0      	cmp	r3, #176	@ 0xb0
 800a62e:	d002      	beq.n	800a636 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800a630:	230e      	movs	r3, #14
 800a632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a634:	e0b5      	b.n	800a7a2 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a636:	f3ef 8310 	mrs	r3, PRIMASK
 800a63a:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800a63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800a63e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800a640:	b672      	cpsid	i
    return(int_posture);
 800a642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800a644:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800a646:	4b64      	ldr	r3, [pc, #400]	@ (800a7d8 <_txe_thread_create+0x1cc>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	3301      	adds	r3, #1
 800a64c:	4a62      	ldr	r2, [pc, #392]	@ (800a7d8 <_txe_thread_create+0x1cc>)
 800a64e:	6013      	str	r3, [r2, #0]
 800a650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a652:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a656:	f383 8810 	msr	PRIMASK, r3
}
 800a65a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800a65c:	2300      	movs	r3, #0
 800a65e:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 800a660:	4b5e      	ldr	r3, [pc, #376]	@ (800a7dc <_txe_thread_create+0x1d0>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800a666:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a668:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800a66a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a66c:	3b01      	subs	r3, #1
 800a66e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a670:	4413      	add	r3, r2
 800a672:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800a674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a676:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800a678:	2300      	movs	r3, #0
 800a67a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a67c:	e02b      	b.n	800a6d6 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a682:	429a      	cmp	r2, r3
 800a684:	d101      	bne.n	800a68a <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800a686:	2301      	movs	r3, #1
 800a688:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800a68a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d028      	beq.n	800a6e2 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800a690:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a696:	429a      	cmp	r2, r3
 800a698:	d308      	bcc.n	800a6ac <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800a69a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a69c:	691b      	ldr	r3, [r3, #16]
 800a69e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d203      	bcs.n	800a6ac <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800a6ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d308      	bcc.n	800a6c8 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800a6b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d203      	bcs.n	800a6c8 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800a6c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6ce:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800a6d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6d6:	4b42      	ldr	r3, [pc, #264]	@ (800a7e0 <_txe_thread_create+0x1d4>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d3ce      	bcc.n	800a67e <_txe_thread_create+0x72>
 800a6e0:	e000      	b.n	800a6e4 <_txe_thread_create+0xd8>
                break;
 800a6e2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a6e4:	f3ef 8310 	mrs	r3, PRIMASK
 800a6e8:	61fb      	str	r3, [r7, #28]
    return(posture);
 800a6ea:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800a6ec:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a6ee:	b672      	cpsid	i
    return(int_posture);
 800a6f0:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800a6f2:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800a6f4:	4b38      	ldr	r3, [pc, #224]	@ (800a7d8 <_txe_thread_create+0x1cc>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	4a37      	ldr	r2, [pc, #220]	@ (800a7d8 <_txe_thread_create+0x1cc>)
 800a6fc:	6013      	str	r3, [r2, #0]
 800a6fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a700:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a702:	6a3b      	ldr	r3, [r7, #32]
 800a704:	f383 8810 	msr	PRIMASK, r3
}
 800a708:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a70a:	f7ff f8d3 	bl	80098b4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800a70e:	68fa      	ldr	r2, [r7, #12]
 800a710:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a712:	429a      	cmp	r2, r3
 800a714:	d102      	bne.n	800a71c <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800a716:	230e      	movs	r3, #14
 800a718:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a71a:	e042      	b.n	800a7a2 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800a71c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d102      	bne.n	800a728 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800a722:	2303      	movs	r3, #3
 800a724:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a726:	e03c      	b.n	800a7a2 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d102      	bne.n	800a734 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800a72e:	2303      	movs	r3, #3
 800a730:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a732:	e036      	b.n	800a7a2 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800a734:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a736:	2bc7      	cmp	r3, #199	@ 0xc7
 800a738:	d802      	bhi.n	800a740 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800a73a:	2305      	movs	r3, #5
 800a73c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a73e:	e030      	b.n	800a7a2 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800a740:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a742:	2b1f      	cmp	r3, #31
 800a744:	d902      	bls.n	800a74c <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800a746:	230f      	movs	r3, #15
 800a748:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a74a:	e02a      	b.n	800a7a2 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800a74c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a74e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a750:	429a      	cmp	r2, r3
 800a752:	d902      	bls.n	800a75a <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800a754:	2318      	movs	r3, #24
 800a756:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a758:	e023      	b.n	800a7a2 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800a75a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d902      	bls.n	800a766 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800a760:	2310      	movs	r3, #16
 800a762:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a764:	e01d      	b.n	800a7a2 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800a766:	4b1f      	ldr	r3, [pc, #124]	@ (800a7e4 <_txe_thread_create+0x1d8>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800a76c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76e:	4a1e      	ldr	r2, [pc, #120]	@ (800a7e8 <_txe_thread_create+0x1dc>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d101      	bne.n	800a778 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a774:	2313      	movs	r3, #19
 800a776:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a778:	f3ef 8305 	mrs	r3, IPSR
 800a77c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a77e:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a780:	4b1a      	ldr	r3, [pc, #104]	@ (800a7ec <_txe_thread_create+0x1e0>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4313      	orrs	r3, r2
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00b      	beq.n	800a7a2 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a78a:	f3ef 8305 	mrs	r3, IPSR
 800a78e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800a790:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a792:	4b16      	ldr	r3, [pc, #88]	@ (800a7ec <_txe_thread_create+0x1e0>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4313      	orrs	r3, r2
 800a798:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800a79c:	d201      	bcs.n	800a7a2 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800a79e:	2313      	movs	r3, #19
 800a7a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a7a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d112      	bne.n	800a7ce <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800a7a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7aa:	9305      	str	r3, [sp, #20]
 800a7ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a7ae:	9304      	str	r3, [sp, #16]
 800a7b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a7b2:	9303      	str	r3, [sp, #12]
 800a7b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a7b6:	9302      	str	r3, [sp, #8]
 800a7b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a7ba:	9301      	str	r3, [sp, #4]
 800a7bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a7be:	9300      	str	r3, [sp, #0]
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	68b9      	ldr	r1, [r7, #8]
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	f7fe fe76 	bl	80094b8 <_tx_thread_create>
 800a7cc:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800a7ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3750      	adds	r7, #80	@ 0x50
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	200014a0 	.word	0x200014a0
 800a7dc:	20001410 	.word	0x20001410
 800a7e0:	20001414 	.word	0x20001414
 800a7e4:	20001408 	.word	0x20001408
 800a7e8:	20001550 	.word	0x20001550
 800a7ec:	2000000c 	.word	0x2000000c

0800a7f0 <__sflush_r>:
 800a7f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7f8:	0716      	lsls	r6, r2, #28
 800a7fa:	4605      	mov	r5, r0
 800a7fc:	460c      	mov	r4, r1
 800a7fe:	d454      	bmi.n	800a8aa <__sflush_r+0xba>
 800a800:	684b      	ldr	r3, [r1, #4]
 800a802:	2b00      	cmp	r3, #0
 800a804:	dc02      	bgt.n	800a80c <__sflush_r+0x1c>
 800a806:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a808:	2b00      	cmp	r3, #0
 800a80a:	dd48      	ble.n	800a89e <__sflush_r+0xae>
 800a80c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a80e:	2e00      	cmp	r6, #0
 800a810:	d045      	beq.n	800a89e <__sflush_r+0xae>
 800a812:	2300      	movs	r3, #0
 800a814:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a818:	682f      	ldr	r7, [r5, #0]
 800a81a:	6a21      	ldr	r1, [r4, #32]
 800a81c:	602b      	str	r3, [r5, #0]
 800a81e:	d030      	beq.n	800a882 <__sflush_r+0x92>
 800a820:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a822:	89a3      	ldrh	r3, [r4, #12]
 800a824:	0759      	lsls	r1, r3, #29
 800a826:	d505      	bpl.n	800a834 <__sflush_r+0x44>
 800a828:	6863      	ldr	r3, [r4, #4]
 800a82a:	1ad2      	subs	r2, r2, r3
 800a82c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a82e:	b10b      	cbz	r3, 800a834 <__sflush_r+0x44>
 800a830:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a832:	1ad2      	subs	r2, r2, r3
 800a834:	2300      	movs	r3, #0
 800a836:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a838:	6a21      	ldr	r1, [r4, #32]
 800a83a:	4628      	mov	r0, r5
 800a83c:	47b0      	blx	r6
 800a83e:	1c43      	adds	r3, r0, #1
 800a840:	89a3      	ldrh	r3, [r4, #12]
 800a842:	d106      	bne.n	800a852 <__sflush_r+0x62>
 800a844:	6829      	ldr	r1, [r5, #0]
 800a846:	291d      	cmp	r1, #29
 800a848:	d82b      	bhi.n	800a8a2 <__sflush_r+0xb2>
 800a84a:	4a2a      	ldr	r2, [pc, #168]	@ (800a8f4 <__sflush_r+0x104>)
 800a84c:	410a      	asrs	r2, r1
 800a84e:	07d6      	lsls	r6, r2, #31
 800a850:	d427      	bmi.n	800a8a2 <__sflush_r+0xb2>
 800a852:	2200      	movs	r2, #0
 800a854:	04d9      	lsls	r1, r3, #19
 800a856:	6062      	str	r2, [r4, #4]
 800a858:	6922      	ldr	r2, [r4, #16]
 800a85a:	6022      	str	r2, [r4, #0]
 800a85c:	d504      	bpl.n	800a868 <__sflush_r+0x78>
 800a85e:	1c42      	adds	r2, r0, #1
 800a860:	d101      	bne.n	800a866 <__sflush_r+0x76>
 800a862:	682b      	ldr	r3, [r5, #0]
 800a864:	b903      	cbnz	r3, 800a868 <__sflush_r+0x78>
 800a866:	6560      	str	r0, [r4, #84]	@ 0x54
 800a868:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a86a:	602f      	str	r7, [r5, #0]
 800a86c:	b1b9      	cbz	r1, 800a89e <__sflush_r+0xae>
 800a86e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a872:	4299      	cmp	r1, r3
 800a874:	d002      	beq.n	800a87c <__sflush_r+0x8c>
 800a876:	4628      	mov	r0, r5
 800a878:	f000 fa0e 	bl	800ac98 <_free_r>
 800a87c:	2300      	movs	r3, #0
 800a87e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a880:	e00d      	b.n	800a89e <__sflush_r+0xae>
 800a882:	2301      	movs	r3, #1
 800a884:	4628      	mov	r0, r5
 800a886:	47b0      	blx	r6
 800a888:	4602      	mov	r2, r0
 800a88a:	1c50      	adds	r0, r2, #1
 800a88c:	d1c9      	bne.n	800a822 <__sflush_r+0x32>
 800a88e:	682b      	ldr	r3, [r5, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d0c6      	beq.n	800a822 <__sflush_r+0x32>
 800a894:	2b1d      	cmp	r3, #29
 800a896:	d001      	beq.n	800a89c <__sflush_r+0xac>
 800a898:	2b16      	cmp	r3, #22
 800a89a:	d11d      	bne.n	800a8d8 <__sflush_r+0xe8>
 800a89c:	602f      	str	r7, [r5, #0]
 800a89e:	2000      	movs	r0, #0
 800a8a0:	e021      	b.n	800a8e6 <__sflush_r+0xf6>
 800a8a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8a6:	b21b      	sxth	r3, r3
 800a8a8:	e01a      	b.n	800a8e0 <__sflush_r+0xf0>
 800a8aa:	690f      	ldr	r7, [r1, #16]
 800a8ac:	2f00      	cmp	r7, #0
 800a8ae:	d0f6      	beq.n	800a89e <__sflush_r+0xae>
 800a8b0:	0793      	lsls	r3, r2, #30
 800a8b2:	680e      	ldr	r6, [r1, #0]
 800a8b4:	600f      	str	r7, [r1, #0]
 800a8b6:	bf0c      	ite	eq
 800a8b8:	694b      	ldreq	r3, [r1, #20]
 800a8ba:	2300      	movne	r3, #0
 800a8bc:	eba6 0807 	sub.w	r8, r6, r7
 800a8c0:	608b      	str	r3, [r1, #8]
 800a8c2:	f1b8 0f00 	cmp.w	r8, #0
 800a8c6:	ddea      	ble.n	800a89e <__sflush_r+0xae>
 800a8c8:	4643      	mov	r3, r8
 800a8ca:	463a      	mov	r2, r7
 800a8cc:	6a21      	ldr	r1, [r4, #32]
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a8d2:	47b0      	blx	r6
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	dc08      	bgt.n	800a8ea <__sflush_r+0xfa>
 800a8d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e4:	81a3      	strh	r3, [r4, #12]
 800a8e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8ea:	4407      	add	r7, r0
 800a8ec:	eba8 0800 	sub.w	r8, r8, r0
 800a8f0:	e7e7      	b.n	800a8c2 <__sflush_r+0xd2>
 800a8f2:	bf00      	nop
 800a8f4:	dfbffffe 	.word	0xdfbffffe

0800a8f8 <_fflush_r>:
 800a8f8:	b538      	push	{r3, r4, r5, lr}
 800a8fa:	690b      	ldr	r3, [r1, #16]
 800a8fc:	4605      	mov	r5, r0
 800a8fe:	460c      	mov	r4, r1
 800a900:	b913      	cbnz	r3, 800a908 <_fflush_r+0x10>
 800a902:	2500      	movs	r5, #0
 800a904:	4628      	mov	r0, r5
 800a906:	bd38      	pop	{r3, r4, r5, pc}
 800a908:	b118      	cbz	r0, 800a912 <_fflush_r+0x1a>
 800a90a:	6a03      	ldr	r3, [r0, #32]
 800a90c:	b90b      	cbnz	r3, 800a912 <_fflush_r+0x1a>
 800a90e:	f000 f8bb 	bl	800aa88 <__sinit>
 800a912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d0f3      	beq.n	800a902 <_fflush_r+0xa>
 800a91a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a91c:	07d0      	lsls	r0, r2, #31
 800a91e:	d404      	bmi.n	800a92a <_fflush_r+0x32>
 800a920:	0599      	lsls	r1, r3, #22
 800a922:	d402      	bmi.n	800a92a <_fflush_r+0x32>
 800a924:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a926:	f000 f9b4 	bl	800ac92 <__retarget_lock_acquire_recursive>
 800a92a:	4628      	mov	r0, r5
 800a92c:	4621      	mov	r1, r4
 800a92e:	f7ff ff5f 	bl	800a7f0 <__sflush_r>
 800a932:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a934:	4605      	mov	r5, r0
 800a936:	07da      	lsls	r2, r3, #31
 800a938:	d4e4      	bmi.n	800a904 <_fflush_r+0xc>
 800a93a:	89a3      	ldrh	r3, [r4, #12]
 800a93c:	059b      	lsls	r3, r3, #22
 800a93e:	d4e1      	bmi.n	800a904 <_fflush_r+0xc>
 800a940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a942:	f000 f9a7 	bl	800ac94 <__retarget_lock_release_recursive>
 800a946:	e7dd      	b.n	800a904 <_fflush_r+0xc>

0800a948 <fflush>:
 800a948:	4601      	mov	r1, r0
 800a94a:	b920      	cbnz	r0, 800a956 <fflush+0xe>
 800a94c:	4a04      	ldr	r2, [pc, #16]	@ (800a960 <fflush+0x18>)
 800a94e:	4905      	ldr	r1, [pc, #20]	@ (800a964 <fflush+0x1c>)
 800a950:	4805      	ldr	r0, [pc, #20]	@ (800a968 <fflush+0x20>)
 800a952:	f000 b8b1 	b.w	800aab8 <_fwalk_sglue>
 800a956:	4b05      	ldr	r3, [pc, #20]	@ (800a96c <fflush+0x24>)
 800a958:	6818      	ldr	r0, [r3, #0]
 800a95a:	f7ff bfcd 	b.w	800a8f8 <_fflush_r>
 800a95e:	bf00      	nop
 800a960:	20000010 	.word	0x20000010
 800a964:	0800a8f9 	.word	0x0800a8f9
 800a968:	20000020 	.word	0x20000020
 800a96c:	2000001c 	.word	0x2000001c

0800a970 <std>:
 800a970:	2300      	movs	r3, #0
 800a972:	b510      	push	{r4, lr}
 800a974:	4604      	mov	r4, r0
 800a976:	6083      	str	r3, [r0, #8]
 800a978:	8181      	strh	r1, [r0, #12]
 800a97a:	4619      	mov	r1, r3
 800a97c:	6643      	str	r3, [r0, #100]	@ 0x64
 800a97e:	81c2      	strh	r2, [r0, #14]
 800a980:	2208      	movs	r2, #8
 800a982:	6183      	str	r3, [r0, #24]
 800a984:	e9c0 3300 	strd	r3, r3, [r0]
 800a988:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a98c:	305c      	adds	r0, #92	@ 0x5c
 800a98e:	f000 f906 	bl	800ab9e <memset>
 800a992:	4b0d      	ldr	r3, [pc, #52]	@ (800a9c8 <std+0x58>)
 800a994:	6224      	str	r4, [r4, #32]
 800a996:	6263      	str	r3, [r4, #36]	@ 0x24
 800a998:	4b0c      	ldr	r3, [pc, #48]	@ (800a9cc <std+0x5c>)
 800a99a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a99c:	4b0c      	ldr	r3, [pc, #48]	@ (800a9d0 <std+0x60>)
 800a99e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a9a0:	4b0c      	ldr	r3, [pc, #48]	@ (800a9d4 <std+0x64>)
 800a9a2:	6323      	str	r3, [r4, #48]	@ 0x30
 800a9a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a9d8 <std+0x68>)
 800a9a6:	429c      	cmp	r4, r3
 800a9a8:	d006      	beq.n	800a9b8 <std+0x48>
 800a9aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a9ae:	4294      	cmp	r4, r2
 800a9b0:	d002      	beq.n	800a9b8 <std+0x48>
 800a9b2:	33d0      	adds	r3, #208	@ 0xd0
 800a9b4:	429c      	cmp	r4, r3
 800a9b6:	d105      	bne.n	800a9c4 <std+0x54>
 800a9b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a9bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9c0:	f000 b966 	b.w	800ac90 <__retarget_lock_init_recursive>
 800a9c4:	bd10      	pop	{r4, pc}
 800a9c6:	bf00      	nop
 800a9c8:	0800ab19 	.word	0x0800ab19
 800a9cc:	0800ab3b 	.word	0x0800ab3b
 800a9d0:	0800ab73 	.word	0x0800ab73
 800a9d4:	0800ab97 	.word	0x0800ab97
 800a9d8:	20001a10 	.word	0x20001a10

0800a9dc <stdio_exit_handler>:
 800a9dc:	4a02      	ldr	r2, [pc, #8]	@ (800a9e8 <stdio_exit_handler+0xc>)
 800a9de:	4903      	ldr	r1, [pc, #12]	@ (800a9ec <stdio_exit_handler+0x10>)
 800a9e0:	4803      	ldr	r0, [pc, #12]	@ (800a9f0 <stdio_exit_handler+0x14>)
 800a9e2:	f000 b869 	b.w	800aab8 <_fwalk_sglue>
 800a9e6:	bf00      	nop
 800a9e8:	20000010 	.word	0x20000010
 800a9ec:	0800a8f9 	.word	0x0800a8f9
 800a9f0:	20000020 	.word	0x20000020

0800a9f4 <cleanup_stdio>:
 800a9f4:	6841      	ldr	r1, [r0, #4]
 800a9f6:	4b0c      	ldr	r3, [pc, #48]	@ (800aa28 <cleanup_stdio+0x34>)
 800a9f8:	4299      	cmp	r1, r3
 800a9fa:	b510      	push	{r4, lr}
 800a9fc:	4604      	mov	r4, r0
 800a9fe:	d001      	beq.n	800aa04 <cleanup_stdio+0x10>
 800aa00:	f7ff ff7a 	bl	800a8f8 <_fflush_r>
 800aa04:	68a1      	ldr	r1, [r4, #8]
 800aa06:	4b09      	ldr	r3, [pc, #36]	@ (800aa2c <cleanup_stdio+0x38>)
 800aa08:	4299      	cmp	r1, r3
 800aa0a:	d002      	beq.n	800aa12 <cleanup_stdio+0x1e>
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	f7ff ff73 	bl	800a8f8 <_fflush_r>
 800aa12:	68e1      	ldr	r1, [r4, #12]
 800aa14:	4b06      	ldr	r3, [pc, #24]	@ (800aa30 <cleanup_stdio+0x3c>)
 800aa16:	4299      	cmp	r1, r3
 800aa18:	d004      	beq.n	800aa24 <cleanup_stdio+0x30>
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa20:	f7ff bf6a 	b.w	800a8f8 <_fflush_r>
 800aa24:	bd10      	pop	{r4, pc}
 800aa26:	bf00      	nop
 800aa28:	20001a10 	.word	0x20001a10
 800aa2c:	20001a78 	.word	0x20001a78
 800aa30:	20001ae0 	.word	0x20001ae0

0800aa34 <global_stdio_init.part.0>:
 800aa34:	b510      	push	{r4, lr}
 800aa36:	4b0b      	ldr	r3, [pc, #44]	@ (800aa64 <global_stdio_init.part.0+0x30>)
 800aa38:	2104      	movs	r1, #4
 800aa3a:	4c0b      	ldr	r4, [pc, #44]	@ (800aa68 <global_stdio_init.part.0+0x34>)
 800aa3c:	4a0b      	ldr	r2, [pc, #44]	@ (800aa6c <global_stdio_init.part.0+0x38>)
 800aa3e:	4620      	mov	r0, r4
 800aa40:	601a      	str	r2, [r3, #0]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f7ff ff94 	bl	800a970 <std>
 800aa48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	2109      	movs	r1, #9
 800aa50:	f7ff ff8e 	bl	800a970 <std>
 800aa54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aa58:	2202      	movs	r2, #2
 800aa5a:	2112      	movs	r1, #18
 800aa5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa60:	f7ff bf86 	b.w	800a970 <std>
 800aa64:	20001b48 	.word	0x20001b48
 800aa68:	20001a10 	.word	0x20001a10
 800aa6c:	0800a9dd 	.word	0x0800a9dd

0800aa70 <__sfp_lock_acquire>:
 800aa70:	4801      	ldr	r0, [pc, #4]	@ (800aa78 <__sfp_lock_acquire+0x8>)
 800aa72:	f000 b90e 	b.w	800ac92 <__retarget_lock_acquire_recursive>
 800aa76:	bf00      	nop
 800aa78:	20001b51 	.word	0x20001b51

0800aa7c <__sfp_lock_release>:
 800aa7c:	4801      	ldr	r0, [pc, #4]	@ (800aa84 <__sfp_lock_release+0x8>)
 800aa7e:	f000 b909 	b.w	800ac94 <__retarget_lock_release_recursive>
 800aa82:	bf00      	nop
 800aa84:	20001b51 	.word	0x20001b51

0800aa88 <__sinit>:
 800aa88:	b510      	push	{r4, lr}
 800aa8a:	4604      	mov	r4, r0
 800aa8c:	f7ff fff0 	bl	800aa70 <__sfp_lock_acquire>
 800aa90:	6a23      	ldr	r3, [r4, #32]
 800aa92:	b11b      	cbz	r3, 800aa9c <__sinit+0x14>
 800aa94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa98:	f7ff bff0 	b.w	800aa7c <__sfp_lock_release>
 800aa9c:	4b04      	ldr	r3, [pc, #16]	@ (800aab0 <__sinit+0x28>)
 800aa9e:	6223      	str	r3, [r4, #32]
 800aaa0:	4b04      	ldr	r3, [pc, #16]	@ (800aab4 <__sinit+0x2c>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d1f5      	bne.n	800aa94 <__sinit+0xc>
 800aaa8:	f7ff ffc4 	bl	800aa34 <global_stdio_init.part.0>
 800aaac:	e7f2      	b.n	800aa94 <__sinit+0xc>
 800aaae:	bf00      	nop
 800aab0:	0800a9f5 	.word	0x0800a9f5
 800aab4:	20001b48 	.word	0x20001b48

0800aab8 <_fwalk_sglue>:
 800aab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aabc:	4607      	mov	r7, r0
 800aabe:	4688      	mov	r8, r1
 800aac0:	4614      	mov	r4, r2
 800aac2:	2600      	movs	r6, #0
 800aac4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aac8:	f1b9 0901 	subs.w	r9, r9, #1
 800aacc:	d505      	bpl.n	800aada <_fwalk_sglue+0x22>
 800aace:	6824      	ldr	r4, [r4, #0]
 800aad0:	2c00      	cmp	r4, #0
 800aad2:	d1f7      	bne.n	800aac4 <_fwalk_sglue+0xc>
 800aad4:	4630      	mov	r0, r6
 800aad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aada:	89ab      	ldrh	r3, [r5, #12]
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d907      	bls.n	800aaf0 <_fwalk_sglue+0x38>
 800aae0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aae4:	3301      	adds	r3, #1
 800aae6:	d003      	beq.n	800aaf0 <_fwalk_sglue+0x38>
 800aae8:	4629      	mov	r1, r5
 800aaea:	4638      	mov	r0, r7
 800aaec:	47c0      	blx	r8
 800aaee:	4306      	orrs	r6, r0
 800aaf0:	3568      	adds	r5, #104	@ 0x68
 800aaf2:	e7e9      	b.n	800aac8 <_fwalk_sglue+0x10>

0800aaf4 <iprintf>:
 800aaf4:	b40f      	push	{r0, r1, r2, r3}
 800aaf6:	b507      	push	{r0, r1, r2, lr}
 800aaf8:	4906      	ldr	r1, [pc, #24]	@ (800ab14 <iprintf+0x20>)
 800aafa:	ab04      	add	r3, sp, #16
 800aafc:	6808      	ldr	r0, [r1, #0]
 800aafe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab02:	6881      	ldr	r1, [r0, #8]
 800ab04:	9301      	str	r3, [sp, #4]
 800ab06:	f000 f9e9 	bl	800aedc <_vfiprintf_r>
 800ab0a:	b003      	add	sp, #12
 800ab0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab10:	b004      	add	sp, #16
 800ab12:	4770      	bx	lr
 800ab14:	2000001c 	.word	0x2000001c

0800ab18 <__sread>:
 800ab18:	b510      	push	{r4, lr}
 800ab1a:	460c      	mov	r4, r1
 800ab1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab20:	f000 f868 	bl	800abf4 <_read_r>
 800ab24:	2800      	cmp	r0, #0
 800ab26:	bfab      	itete	ge
 800ab28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ab2a:	89a3      	ldrhlt	r3, [r4, #12]
 800ab2c:	181b      	addge	r3, r3, r0
 800ab2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ab32:	bfac      	ite	ge
 800ab34:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ab36:	81a3      	strhlt	r3, [r4, #12]
 800ab38:	bd10      	pop	{r4, pc}

0800ab3a <__swrite>:
 800ab3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab3e:	461f      	mov	r7, r3
 800ab40:	898b      	ldrh	r3, [r1, #12]
 800ab42:	4605      	mov	r5, r0
 800ab44:	460c      	mov	r4, r1
 800ab46:	05db      	lsls	r3, r3, #23
 800ab48:	4616      	mov	r6, r2
 800ab4a:	d505      	bpl.n	800ab58 <__swrite+0x1e>
 800ab4c:	2302      	movs	r3, #2
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab54:	f000 f83c 	bl	800abd0 <_lseek_r>
 800ab58:	89a3      	ldrh	r3, [r4, #12]
 800ab5a:	4632      	mov	r2, r6
 800ab5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab60:	4628      	mov	r0, r5
 800ab62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab66:	81a3      	strh	r3, [r4, #12]
 800ab68:	463b      	mov	r3, r7
 800ab6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab6e:	f000 b853 	b.w	800ac18 <_write_r>

0800ab72 <__sseek>:
 800ab72:	b510      	push	{r4, lr}
 800ab74:	460c      	mov	r4, r1
 800ab76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab7a:	f000 f829 	bl	800abd0 <_lseek_r>
 800ab7e:	1c43      	adds	r3, r0, #1
 800ab80:	89a3      	ldrh	r3, [r4, #12]
 800ab82:	bf15      	itete	ne
 800ab84:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ab86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ab8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ab8e:	81a3      	strheq	r3, [r4, #12]
 800ab90:	bf18      	it	ne
 800ab92:	81a3      	strhne	r3, [r4, #12]
 800ab94:	bd10      	pop	{r4, pc}

0800ab96 <__sclose>:
 800ab96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab9a:	f000 b809 	b.w	800abb0 <_close_r>

0800ab9e <memset>:
 800ab9e:	4402      	add	r2, r0
 800aba0:	4603      	mov	r3, r0
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d100      	bne.n	800aba8 <memset+0xa>
 800aba6:	4770      	bx	lr
 800aba8:	f803 1b01 	strb.w	r1, [r3], #1
 800abac:	e7f9      	b.n	800aba2 <memset+0x4>
	...

0800abb0 <_close_r>:
 800abb0:	b538      	push	{r3, r4, r5, lr}
 800abb2:	2300      	movs	r3, #0
 800abb4:	4d05      	ldr	r5, [pc, #20]	@ (800abcc <_close_r+0x1c>)
 800abb6:	4604      	mov	r4, r0
 800abb8:	4608      	mov	r0, r1
 800abba:	602b      	str	r3, [r5, #0]
 800abbc:	f7f6 fb0f 	bl	80011de <_close>
 800abc0:	1c43      	adds	r3, r0, #1
 800abc2:	d102      	bne.n	800abca <_close_r+0x1a>
 800abc4:	682b      	ldr	r3, [r5, #0]
 800abc6:	b103      	cbz	r3, 800abca <_close_r+0x1a>
 800abc8:	6023      	str	r3, [r4, #0]
 800abca:	bd38      	pop	{r3, r4, r5, pc}
 800abcc:	20001b4c 	.word	0x20001b4c

0800abd0 <_lseek_r>:
 800abd0:	b538      	push	{r3, r4, r5, lr}
 800abd2:	4604      	mov	r4, r0
 800abd4:	4d06      	ldr	r5, [pc, #24]	@ (800abf0 <_lseek_r+0x20>)
 800abd6:	4608      	mov	r0, r1
 800abd8:	4611      	mov	r1, r2
 800abda:	2200      	movs	r2, #0
 800abdc:	602a      	str	r2, [r5, #0]
 800abde:	461a      	mov	r2, r3
 800abe0:	f7f6 fb24 	bl	800122c <_lseek>
 800abe4:	1c43      	adds	r3, r0, #1
 800abe6:	d102      	bne.n	800abee <_lseek_r+0x1e>
 800abe8:	682b      	ldr	r3, [r5, #0]
 800abea:	b103      	cbz	r3, 800abee <_lseek_r+0x1e>
 800abec:	6023      	str	r3, [r4, #0]
 800abee:	bd38      	pop	{r3, r4, r5, pc}
 800abf0:	20001b4c 	.word	0x20001b4c

0800abf4 <_read_r>:
 800abf4:	b538      	push	{r3, r4, r5, lr}
 800abf6:	4604      	mov	r4, r0
 800abf8:	4d06      	ldr	r5, [pc, #24]	@ (800ac14 <_read_r+0x20>)
 800abfa:	4608      	mov	r0, r1
 800abfc:	4611      	mov	r1, r2
 800abfe:	2200      	movs	r2, #0
 800ac00:	602a      	str	r2, [r5, #0]
 800ac02:	461a      	mov	r2, r3
 800ac04:	f7f6 fab2 	bl	800116c <_read>
 800ac08:	1c43      	adds	r3, r0, #1
 800ac0a:	d102      	bne.n	800ac12 <_read_r+0x1e>
 800ac0c:	682b      	ldr	r3, [r5, #0]
 800ac0e:	b103      	cbz	r3, 800ac12 <_read_r+0x1e>
 800ac10:	6023      	str	r3, [r4, #0]
 800ac12:	bd38      	pop	{r3, r4, r5, pc}
 800ac14:	20001b4c 	.word	0x20001b4c

0800ac18 <_write_r>:
 800ac18:	b538      	push	{r3, r4, r5, lr}
 800ac1a:	4604      	mov	r4, r0
 800ac1c:	4d06      	ldr	r5, [pc, #24]	@ (800ac38 <_write_r+0x20>)
 800ac1e:	4608      	mov	r0, r1
 800ac20:	4611      	mov	r1, r2
 800ac22:	2200      	movs	r2, #0
 800ac24:	602a      	str	r2, [r5, #0]
 800ac26:	461a      	mov	r2, r3
 800ac28:	f7f6 fabd 	bl	80011a6 <_write>
 800ac2c:	1c43      	adds	r3, r0, #1
 800ac2e:	d102      	bne.n	800ac36 <_write_r+0x1e>
 800ac30:	682b      	ldr	r3, [r5, #0]
 800ac32:	b103      	cbz	r3, 800ac36 <_write_r+0x1e>
 800ac34:	6023      	str	r3, [r4, #0]
 800ac36:	bd38      	pop	{r3, r4, r5, pc}
 800ac38:	20001b4c 	.word	0x20001b4c

0800ac3c <__errno>:
 800ac3c:	4b01      	ldr	r3, [pc, #4]	@ (800ac44 <__errno+0x8>)
 800ac3e:	6818      	ldr	r0, [r3, #0]
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop
 800ac44:	2000001c 	.word	0x2000001c

0800ac48 <__libc_init_array>:
 800ac48:	b570      	push	{r4, r5, r6, lr}
 800ac4a:	4d0d      	ldr	r5, [pc, #52]	@ (800ac80 <__libc_init_array+0x38>)
 800ac4c:	2600      	movs	r6, #0
 800ac4e:	4c0d      	ldr	r4, [pc, #52]	@ (800ac84 <__libc_init_array+0x3c>)
 800ac50:	1b64      	subs	r4, r4, r5
 800ac52:	10a4      	asrs	r4, r4, #2
 800ac54:	42a6      	cmp	r6, r4
 800ac56:	d109      	bne.n	800ac6c <__libc_init_array+0x24>
 800ac58:	4d0b      	ldr	r5, [pc, #44]	@ (800ac88 <__libc_init_array+0x40>)
 800ac5a:	2600      	movs	r6, #0
 800ac5c:	4c0b      	ldr	r4, [pc, #44]	@ (800ac8c <__libc_init_array+0x44>)
 800ac5e:	f000 fd1d 	bl	800b69c <_init>
 800ac62:	1b64      	subs	r4, r4, r5
 800ac64:	10a4      	asrs	r4, r4, #2
 800ac66:	42a6      	cmp	r6, r4
 800ac68:	d105      	bne.n	800ac76 <__libc_init_array+0x2e>
 800ac6a:	bd70      	pop	{r4, r5, r6, pc}
 800ac6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac70:	3601      	adds	r6, #1
 800ac72:	4798      	blx	r3
 800ac74:	e7ee      	b.n	800ac54 <__libc_init_array+0xc>
 800ac76:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac7a:	3601      	adds	r6, #1
 800ac7c:	4798      	blx	r3
 800ac7e:	e7f2      	b.n	800ac66 <__libc_init_array+0x1e>
 800ac80:	0800b7f8 	.word	0x0800b7f8
 800ac84:	0800b7f8 	.word	0x0800b7f8
 800ac88:	0800b7f8 	.word	0x0800b7f8
 800ac8c:	0800b7fc 	.word	0x0800b7fc

0800ac90 <__retarget_lock_init_recursive>:
 800ac90:	4770      	bx	lr

0800ac92 <__retarget_lock_acquire_recursive>:
 800ac92:	4770      	bx	lr

0800ac94 <__retarget_lock_release_recursive>:
 800ac94:	4770      	bx	lr
	...

0800ac98 <_free_r>:
 800ac98:	b538      	push	{r3, r4, r5, lr}
 800ac9a:	4605      	mov	r5, r0
 800ac9c:	2900      	cmp	r1, #0
 800ac9e:	d041      	beq.n	800ad24 <_free_r+0x8c>
 800aca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aca4:	1f0c      	subs	r4, r1, #4
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	bfb8      	it	lt
 800acaa:	18e4      	addlt	r4, r4, r3
 800acac:	f000 f8e0 	bl	800ae70 <__malloc_lock>
 800acb0:	4a1d      	ldr	r2, [pc, #116]	@ (800ad28 <_free_r+0x90>)
 800acb2:	6813      	ldr	r3, [r2, #0]
 800acb4:	b933      	cbnz	r3, 800acc4 <_free_r+0x2c>
 800acb6:	6063      	str	r3, [r4, #4]
 800acb8:	6014      	str	r4, [r2, #0]
 800acba:	4628      	mov	r0, r5
 800acbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acc0:	f000 b8dc 	b.w	800ae7c <__malloc_unlock>
 800acc4:	42a3      	cmp	r3, r4
 800acc6:	d908      	bls.n	800acda <_free_r+0x42>
 800acc8:	6820      	ldr	r0, [r4, #0]
 800acca:	1821      	adds	r1, r4, r0
 800accc:	428b      	cmp	r3, r1
 800acce:	bf01      	itttt	eq
 800acd0:	6819      	ldreq	r1, [r3, #0]
 800acd2:	685b      	ldreq	r3, [r3, #4]
 800acd4:	1809      	addeq	r1, r1, r0
 800acd6:	6021      	streq	r1, [r4, #0]
 800acd8:	e7ed      	b.n	800acb6 <_free_r+0x1e>
 800acda:	461a      	mov	r2, r3
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	b10b      	cbz	r3, 800ace4 <_free_r+0x4c>
 800ace0:	42a3      	cmp	r3, r4
 800ace2:	d9fa      	bls.n	800acda <_free_r+0x42>
 800ace4:	6811      	ldr	r1, [r2, #0]
 800ace6:	1850      	adds	r0, r2, r1
 800ace8:	42a0      	cmp	r0, r4
 800acea:	d10b      	bne.n	800ad04 <_free_r+0x6c>
 800acec:	6820      	ldr	r0, [r4, #0]
 800acee:	4401      	add	r1, r0
 800acf0:	1850      	adds	r0, r2, r1
 800acf2:	6011      	str	r1, [r2, #0]
 800acf4:	4283      	cmp	r3, r0
 800acf6:	d1e0      	bne.n	800acba <_free_r+0x22>
 800acf8:	6818      	ldr	r0, [r3, #0]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	4408      	add	r0, r1
 800acfe:	6053      	str	r3, [r2, #4]
 800ad00:	6010      	str	r0, [r2, #0]
 800ad02:	e7da      	b.n	800acba <_free_r+0x22>
 800ad04:	d902      	bls.n	800ad0c <_free_r+0x74>
 800ad06:	230c      	movs	r3, #12
 800ad08:	602b      	str	r3, [r5, #0]
 800ad0a:	e7d6      	b.n	800acba <_free_r+0x22>
 800ad0c:	6820      	ldr	r0, [r4, #0]
 800ad0e:	1821      	adds	r1, r4, r0
 800ad10:	428b      	cmp	r3, r1
 800ad12:	bf02      	ittt	eq
 800ad14:	6819      	ldreq	r1, [r3, #0]
 800ad16:	685b      	ldreq	r3, [r3, #4]
 800ad18:	1809      	addeq	r1, r1, r0
 800ad1a:	6063      	str	r3, [r4, #4]
 800ad1c:	bf08      	it	eq
 800ad1e:	6021      	streq	r1, [r4, #0]
 800ad20:	6054      	str	r4, [r2, #4]
 800ad22:	e7ca      	b.n	800acba <_free_r+0x22>
 800ad24:	bd38      	pop	{r3, r4, r5, pc}
 800ad26:	bf00      	nop
 800ad28:	20001b58 	.word	0x20001b58

0800ad2c <sbrk_aligned>:
 800ad2c:	b570      	push	{r4, r5, r6, lr}
 800ad2e:	4e0f      	ldr	r6, [pc, #60]	@ (800ad6c <sbrk_aligned+0x40>)
 800ad30:	460c      	mov	r4, r1
 800ad32:	4605      	mov	r5, r0
 800ad34:	6831      	ldr	r1, [r6, #0]
 800ad36:	b911      	cbnz	r1, 800ad3e <sbrk_aligned+0x12>
 800ad38:	f000 fc0e 	bl	800b558 <_sbrk_r>
 800ad3c:	6030      	str	r0, [r6, #0]
 800ad3e:	4621      	mov	r1, r4
 800ad40:	4628      	mov	r0, r5
 800ad42:	f000 fc09 	bl	800b558 <_sbrk_r>
 800ad46:	1c43      	adds	r3, r0, #1
 800ad48:	d103      	bne.n	800ad52 <sbrk_aligned+0x26>
 800ad4a:	f04f 34ff 	mov.w	r4, #4294967295
 800ad4e:	4620      	mov	r0, r4
 800ad50:	bd70      	pop	{r4, r5, r6, pc}
 800ad52:	1cc4      	adds	r4, r0, #3
 800ad54:	f024 0403 	bic.w	r4, r4, #3
 800ad58:	42a0      	cmp	r0, r4
 800ad5a:	d0f8      	beq.n	800ad4e <sbrk_aligned+0x22>
 800ad5c:	1a21      	subs	r1, r4, r0
 800ad5e:	4628      	mov	r0, r5
 800ad60:	f000 fbfa 	bl	800b558 <_sbrk_r>
 800ad64:	3001      	adds	r0, #1
 800ad66:	d1f2      	bne.n	800ad4e <sbrk_aligned+0x22>
 800ad68:	e7ef      	b.n	800ad4a <sbrk_aligned+0x1e>
 800ad6a:	bf00      	nop
 800ad6c:	20001b54 	.word	0x20001b54

0800ad70 <_malloc_r>:
 800ad70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad74:	1ccd      	adds	r5, r1, #3
 800ad76:	4606      	mov	r6, r0
 800ad78:	f025 0503 	bic.w	r5, r5, #3
 800ad7c:	3508      	adds	r5, #8
 800ad7e:	2d0c      	cmp	r5, #12
 800ad80:	bf38      	it	cc
 800ad82:	250c      	movcc	r5, #12
 800ad84:	2d00      	cmp	r5, #0
 800ad86:	db01      	blt.n	800ad8c <_malloc_r+0x1c>
 800ad88:	42a9      	cmp	r1, r5
 800ad8a:	d904      	bls.n	800ad96 <_malloc_r+0x26>
 800ad8c:	230c      	movs	r3, #12
 800ad8e:	6033      	str	r3, [r6, #0]
 800ad90:	2000      	movs	r0, #0
 800ad92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ae6c <_malloc_r+0xfc>
 800ad9a:	f000 f869 	bl	800ae70 <__malloc_lock>
 800ad9e:	f8d8 3000 	ldr.w	r3, [r8]
 800ada2:	461c      	mov	r4, r3
 800ada4:	bb44      	cbnz	r4, 800adf8 <_malloc_r+0x88>
 800ada6:	4629      	mov	r1, r5
 800ada8:	4630      	mov	r0, r6
 800adaa:	f7ff ffbf 	bl	800ad2c <sbrk_aligned>
 800adae:	1c43      	adds	r3, r0, #1
 800adb0:	4604      	mov	r4, r0
 800adb2:	d158      	bne.n	800ae66 <_malloc_r+0xf6>
 800adb4:	f8d8 4000 	ldr.w	r4, [r8]
 800adb8:	4627      	mov	r7, r4
 800adba:	2f00      	cmp	r7, #0
 800adbc:	d143      	bne.n	800ae46 <_malloc_r+0xd6>
 800adbe:	2c00      	cmp	r4, #0
 800adc0:	d04b      	beq.n	800ae5a <_malloc_r+0xea>
 800adc2:	6823      	ldr	r3, [r4, #0]
 800adc4:	4639      	mov	r1, r7
 800adc6:	4630      	mov	r0, r6
 800adc8:	eb04 0903 	add.w	r9, r4, r3
 800adcc:	f000 fbc4 	bl	800b558 <_sbrk_r>
 800add0:	4581      	cmp	r9, r0
 800add2:	d142      	bne.n	800ae5a <_malloc_r+0xea>
 800add4:	6821      	ldr	r1, [r4, #0]
 800add6:	4630      	mov	r0, r6
 800add8:	1a6d      	subs	r5, r5, r1
 800adda:	4629      	mov	r1, r5
 800addc:	f7ff ffa6 	bl	800ad2c <sbrk_aligned>
 800ade0:	3001      	adds	r0, #1
 800ade2:	d03a      	beq.n	800ae5a <_malloc_r+0xea>
 800ade4:	6823      	ldr	r3, [r4, #0]
 800ade6:	442b      	add	r3, r5
 800ade8:	6023      	str	r3, [r4, #0]
 800adea:	f8d8 3000 	ldr.w	r3, [r8]
 800adee:	685a      	ldr	r2, [r3, #4]
 800adf0:	bb62      	cbnz	r2, 800ae4c <_malloc_r+0xdc>
 800adf2:	f8c8 7000 	str.w	r7, [r8]
 800adf6:	e00f      	b.n	800ae18 <_malloc_r+0xa8>
 800adf8:	6822      	ldr	r2, [r4, #0]
 800adfa:	1b52      	subs	r2, r2, r5
 800adfc:	d420      	bmi.n	800ae40 <_malloc_r+0xd0>
 800adfe:	2a0b      	cmp	r2, #11
 800ae00:	d917      	bls.n	800ae32 <_malloc_r+0xc2>
 800ae02:	1961      	adds	r1, r4, r5
 800ae04:	42a3      	cmp	r3, r4
 800ae06:	6025      	str	r5, [r4, #0]
 800ae08:	bf18      	it	ne
 800ae0a:	6059      	strne	r1, [r3, #4]
 800ae0c:	6863      	ldr	r3, [r4, #4]
 800ae0e:	bf08      	it	eq
 800ae10:	f8c8 1000 	streq.w	r1, [r8]
 800ae14:	5162      	str	r2, [r4, r5]
 800ae16:	604b      	str	r3, [r1, #4]
 800ae18:	4630      	mov	r0, r6
 800ae1a:	f000 f82f 	bl	800ae7c <__malloc_unlock>
 800ae1e:	f104 000b 	add.w	r0, r4, #11
 800ae22:	1d23      	adds	r3, r4, #4
 800ae24:	f020 0007 	bic.w	r0, r0, #7
 800ae28:	1ac2      	subs	r2, r0, r3
 800ae2a:	bf1c      	itt	ne
 800ae2c:	1a1b      	subne	r3, r3, r0
 800ae2e:	50a3      	strne	r3, [r4, r2]
 800ae30:	e7af      	b.n	800ad92 <_malloc_r+0x22>
 800ae32:	6862      	ldr	r2, [r4, #4]
 800ae34:	42a3      	cmp	r3, r4
 800ae36:	bf0c      	ite	eq
 800ae38:	f8c8 2000 	streq.w	r2, [r8]
 800ae3c:	605a      	strne	r2, [r3, #4]
 800ae3e:	e7eb      	b.n	800ae18 <_malloc_r+0xa8>
 800ae40:	4623      	mov	r3, r4
 800ae42:	6864      	ldr	r4, [r4, #4]
 800ae44:	e7ae      	b.n	800ada4 <_malloc_r+0x34>
 800ae46:	463c      	mov	r4, r7
 800ae48:	687f      	ldr	r7, [r7, #4]
 800ae4a:	e7b6      	b.n	800adba <_malloc_r+0x4a>
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	42a3      	cmp	r3, r4
 800ae52:	d1fb      	bne.n	800ae4c <_malloc_r+0xdc>
 800ae54:	2300      	movs	r3, #0
 800ae56:	6053      	str	r3, [r2, #4]
 800ae58:	e7de      	b.n	800ae18 <_malloc_r+0xa8>
 800ae5a:	230c      	movs	r3, #12
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	6033      	str	r3, [r6, #0]
 800ae60:	f000 f80c 	bl	800ae7c <__malloc_unlock>
 800ae64:	e794      	b.n	800ad90 <_malloc_r+0x20>
 800ae66:	6005      	str	r5, [r0, #0]
 800ae68:	e7d6      	b.n	800ae18 <_malloc_r+0xa8>
 800ae6a:	bf00      	nop
 800ae6c:	20001b58 	.word	0x20001b58

0800ae70 <__malloc_lock>:
 800ae70:	4801      	ldr	r0, [pc, #4]	@ (800ae78 <__malloc_lock+0x8>)
 800ae72:	f7ff bf0e 	b.w	800ac92 <__retarget_lock_acquire_recursive>
 800ae76:	bf00      	nop
 800ae78:	20001b50 	.word	0x20001b50

0800ae7c <__malloc_unlock>:
 800ae7c:	4801      	ldr	r0, [pc, #4]	@ (800ae84 <__malloc_unlock+0x8>)
 800ae7e:	f7ff bf09 	b.w	800ac94 <__retarget_lock_release_recursive>
 800ae82:	bf00      	nop
 800ae84:	20001b50 	.word	0x20001b50

0800ae88 <__sfputc_r>:
 800ae88:	6893      	ldr	r3, [r2, #8]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	6093      	str	r3, [r2, #8]
 800ae90:	b410      	push	{r4}
 800ae92:	da08      	bge.n	800aea6 <__sfputc_r+0x1e>
 800ae94:	6994      	ldr	r4, [r2, #24]
 800ae96:	42a3      	cmp	r3, r4
 800ae98:	db01      	blt.n	800ae9e <__sfputc_r+0x16>
 800ae9a:	290a      	cmp	r1, #10
 800ae9c:	d103      	bne.n	800aea6 <__sfputc_r+0x1e>
 800ae9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aea2:	f000 bac5 	b.w	800b430 <__swbuf_r>
 800aea6:	6813      	ldr	r3, [r2, #0]
 800aea8:	1c58      	adds	r0, r3, #1
 800aeaa:	6010      	str	r0, [r2, #0]
 800aeac:	4608      	mov	r0, r1
 800aeae:	7019      	strb	r1, [r3, #0]
 800aeb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aeb4:	4770      	bx	lr

0800aeb6 <__sfputs_r>:
 800aeb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb8:	4606      	mov	r6, r0
 800aeba:	460f      	mov	r7, r1
 800aebc:	4614      	mov	r4, r2
 800aebe:	18d5      	adds	r5, r2, r3
 800aec0:	42ac      	cmp	r4, r5
 800aec2:	d101      	bne.n	800aec8 <__sfputs_r+0x12>
 800aec4:	2000      	movs	r0, #0
 800aec6:	e007      	b.n	800aed8 <__sfputs_r+0x22>
 800aec8:	463a      	mov	r2, r7
 800aeca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aece:	4630      	mov	r0, r6
 800aed0:	f7ff ffda 	bl	800ae88 <__sfputc_r>
 800aed4:	1c43      	adds	r3, r0, #1
 800aed6:	d1f3      	bne.n	800aec0 <__sfputs_r+0xa>
 800aed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aedc <_vfiprintf_r>:
 800aedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee0:	460d      	mov	r5, r1
 800aee2:	b09d      	sub	sp, #116	@ 0x74
 800aee4:	4614      	mov	r4, r2
 800aee6:	4698      	mov	r8, r3
 800aee8:	4606      	mov	r6, r0
 800aeea:	b118      	cbz	r0, 800aef4 <_vfiprintf_r+0x18>
 800aeec:	6a03      	ldr	r3, [r0, #32]
 800aeee:	b90b      	cbnz	r3, 800aef4 <_vfiprintf_r+0x18>
 800aef0:	f7ff fdca 	bl	800aa88 <__sinit>
 800aef4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aef6:	07d9      	lsls	r1, r3, #31
 800aef8:	d405      	bmi.n	800af06 <_vfiprintf_r+0x2a>
 800aefa:	89ab      	ldrh	r3, [r5, #12]
 800aefc:	059a      	lsls	r2, r3, #22
 800aefe:	d402      	bmi.n	800af06 <_vfiprintf_r+0x2a>
 800af00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af02:	f7ff fec6 	bl	800ac92 <__retarget_lock_acquire_recursive>
 800af06:	89ab      	ldrh	r3, [r5, #12]
 800af08:	071b      	lsls	r3, r3, #28
 800af0a:	d501      	bpl.n	800af10 <_vfiprintf_r+0x34>
 800af0c:	692b      	ldr	r3, [r5, #16]
 800af0e:	b99b      	cbnz	r3, 800af38 <_vfiprintf_r+0x5c>
 800af10:	4629      	mov	r1, r5
 800af12:	4630      	mov	r0, r6
 800af14:	f000 faca 	bl	800b4ac <__swsetup_r>
 800af18:	b170      	cbz	r0, 800af38 <_vfiprintf_r+0x5c>
 800af1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af1c:	07dc      	lsls	r4, r3, #31
 800af1e:	d504      	bpl.n	800af2a <_vfiprintf_r+0x4e>
 800af20:	f04f 30ff 	mov.w	r0, #4294967295
 800af24:	b01d      	add	sp, #116	@ 0x74
 800af26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af2a:	89ab      	ldrh	r3, [r5, #12]
 800af2c:	0598      	lsls	r0, r3, #22
 800af2e:	d4f7      	bmi.n	800af20 <_vfiprintf_r+0x44>
 800af30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af32:	f7ff feaf 	bl	800ac94 <__retarget_lock_release_recursive>
 800af36:	e7f3      	b.n	800af20 <_vfiprintf_r+0x44>
 800af38:	2300      	movs	r3, #0
 800af3a:	f8cd 800c 	str.w	r8, [sp, #12]
 800af3e:	f04f 0901 	mov.w	r9, #1
 800af42:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800b0f8 <_vfiprintf_r+0x21c>
 800af46:	9309      	str	r3, [sp, #36]	@ 0x24
 800af48:	2320      	movs	r3, #32
 800af4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af4e:	2330      	movs	r3, #48	@ 0x30
 800af50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af54:	4623      	mov	r3, r4
 800af56:	469a      	mov	sl, r3
 800af58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af5c:	b10a      	cbz	r2, 800af62 <_vfiprintf_r+0x86>
 800af5e:	2a25      	cmp	r2, #37	@ 0x25
 800af60:	d1f9      	bne.n	800af56 <_vfiprintf_r+0x7a>
 800af62:	ebba 0b04 	subs.w	fp, sl, r4
 800af66:	d00b      	beq.n	800af80 <_vfiprintf_r+0xa4>
 800af68:	465b      	mov	r3, fp
 800af6a:	4622      	mov	r2, r4
 800af6c:	4629      	mov	r1, r5
 800af6e:	4630      	mov	r0, r6
 800af70:	f7ff ffa1 	bl	800aeb6 <__sfputs_r>
 800af74:	3001      	adds	r0, #1
 800af76:	f000 80a7 	beq.w	800b0c8 <_vfiprintf_r+0x1ec>
 800af7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af7c:	445a      	add	r2, fp
 800af7e:	9209      	str	r2, [sp, #36]	@ 0x24
 800af80:	f89a 3000 	ldrb.w	r3, [sl]
 800af84:	2b00      	cmp	r3, #0
 800af86:	f000 809f 	beq.w	800b0c8 <_vfiprintf_r+0x1ec>
 800af8a:	2300      	movs	r3, #0
 800af8c:	f04f 32ff 	mov.w	r2, #4294967295
 800af90:	f10a 0a01 	add.w	sl, sl, #1
 800af94:	9304      	str	r3, [sp, #16]
 800af96:	9307      	str	r3, [sp, #28]
 800af98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af9c:	931a      	str	r3, [sp, #104]	@ 0x68
 800af9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afa2:	4654      	mov	r4, sl
 800afa4:	2205      	movs	r2, #5
 800afa6:	4854      	ldr	r0, [pc, #336]	@ (800b0f8 <_vfiprintf_r+0x21c>)
 800afa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afac:	f000 fae4 	bl	800b578 <memchr>
 800afb0:	9a04      	ldr	r2, [sp, #16]
 800afb2:	b9d8      	cbnz	r0, 800afec <_vfiprintf_r+0x110>
 800afb4:	06d1      	lsls	r1, r2, #27
 800afb6:	bf44      	itt	mi
 800afb8:	2320      	movmi	r3, #32
 800afba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afbe:	0713      	lsls	r3, r2, #28
 800afc0:	bf44      	itt	mi
 800afc2:	232b      	movmi	r3, #43	@ 0x2b
 800afc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afc8:	f89a 3000 	ldrb.w	r3, [sl]
 800afcc:	2b2a      	cmp	r3, #42	@ 0x2a
 800afce:	d015      	beq.n	800affc <_vfiprintf_r+0x120>
 800afd0:	9a07      	ldr	r2, [sp, #28]
 800afd2:	4654      	mov	r4, sl
 800afd4:	2000      	movs	r0, #0
 800afd6:	f04f 0c0a 	mov.w	ip, #10
 800afda:	4621      	mov	r1, r4
 800afdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afe0:	3b30      	subs	r3, #48	@ 0x30
 800afe2:	2b09      	cmp	r3, #9
 800afe4:	d94b      	bls.n	800b07e <_vfiprintf_r+0x1a2>
 800afe6:	b1b0      	cbz	r0, 800b016 <_vfiprintf_r+0x13a>
 800afe8:	9207      	str	r2, [sp, #28]
 800afea:	e014      	b.n	800b016 <_vfiprintf_r+0x13a>
 800afec:	eba0 0308 	sub.w	r3, r0, r8
 800aff0:	46a2      	mov	sl, r4
 800aff2:	fa09 f303 	lsl.w	r3, r9, r3
 800aff6:	4313      	orrs	r3, r2
 800aff8:	9304      	str	r3, [sp, #16]
 800affa:	e7d2      	b.n	800afa2 <_vfiprintf_r+0xc6>
 800affc:	9b03      	ldr	r3, [sp, #12]
 800affe:	1d19      	adds	r1, r3, #4
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	9103      	str	r1, [sp, #12]
 800b006:	bfbb      	ittet	lt
 800b008:	425b      	neglt	r3, r3
 800b00a:	f042 0202 	orrlt.w	r2, r2, #2
 800b00e:	9307      	strge	r3, [sp, #28]
 800b010:	9307      	strlt	r3, [sp, #28]
 800b012:	bfb8      	it	lt
 800b014:	9204      	strlt	r2, [sp, #16]
 800b016:	7823      	ldrb	r3, [r4, #0]
 800b018:	2b2e      	cmp	r3, #46	@ 0x2e
 800b01a:	d10a      	bne.n	800b032 <_vfiprintf_r+0x156>
 800b01c:	7863      	ldrb	r3, [r4, #1]
 800b01e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b020:	d132      	bne.n	800b088 <_vfiprintf_r+0x1ac>
 800b022:	9b03      	ldr	r3, [sp, #12]
 800b024:	3402      	adds	r4, #2
 800b026:	1d1a      	adds	r2, r3, #4
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b02e:	9203      	str	r2, [sp, #12]
 800b030:	9305      	str	r3, [sp, #20]
 800b032:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b108 <_vfiprintf_r+0x22c>
 800b036:	2203      	movs	r2, #3
 800b038:	7821      	ldrb	r1, [r4, #0]
 800b03a:	4650      	mov	r0, sl
 800b03c:	f000 fa9c 	bl	800b578 <memchr>
 800b040:	b138      	cbz	r0, 800b052 <_vfiprintf_r+0x176>
 800b042:	eba0 000a 	sub.w	r0, r0, sl
 800b046:	2240      	movs	r2, #64	@ 0x40
 800b048:	9b04      	ldr	r3, [sp, #16]
 800b04a:	3401      	adds	r4, #1
 800b04c:	4082      	lsls	r2, r0
 800b04e:	4313      	orrs	r3, r2
 800b050:	9304      	str	r3, [sp, #16]
 800b052:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b056:	2206      	movs	r2, #6
 800b058:	4828      	ldr	r0, [pc, #160]	@ (800b0fc <_vfiprintf_r+0x220>)
 800b05a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b05e:	f000 fa8b 	bl	800b578 <memchr>
 800b062:	2800      	cmp	r0, #0
 800b064:	d03f      	beq.n	800b0e6 <_vfiprintf_r+0x20a>
 800b066:	4b26      	ldr	r3, [pc, #152]	@ (800b100 <_vfiprintf_r+0x224>)
 800b068:	bb1b      	cbnz	r3, 800b0b2 <_vfiprintf_r+0x1d6>
 800b06a:	9b03      	ldr	r3, [sp, #12]
 800b06c:	3307      	adds	r3, #7
 800b06e:	f023 0307 	bic.w	r3, r3, #7
 800b072:	3308      	adds	r3, #8
 800b074:	9303      	str	r3, [sp, #12]
 800b076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b078:	443b      	add	r3, r7
 800b07a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b07c:	e76a      	b.n	800af54 <_vfiprintf_r+0x78>
 800b07e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b082:	460c      	mov	r4, r1
 800b084:	2001      	movs	r0, #1
 800b086:	e7a8      	b.n	800afda <_vfiprintf_r+0xfe>
 800b088:	2300      	movs	r3, #0
 800b08a:	3401      	adds	r4, #1
 800b08c:	f04f 0c0a 	mov.w	ip, #10
 800b090:	4619      	mov	r1, r3
 800b092:	9305      	str	r3, [sp, #20]
 800b094:	4620      	mov	r0, r4
 800b096:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b09a:	3a30      	subs	r2, #48	@ 0x30
 800b09c:	2a09      	cmp	r2, #9
 800b09e:	d903      	bls.n	800b0a8 <_vfiprintf_r+0x1cc>
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d0c6      	beq.n	800b032 <_vfiprintf_r+0x156>
 800b0a4:	9105      	str	r1, [sp, #20]
 800b0a6:	e7c4      	b.n	800b032 <_vfiprintf_r+0x156>
 800b0a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0ac:	4604      	mov	r4, r0
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e7f0      	b.n	800b094 <_vfiprintf_r+0x1b8>
 800b0b2:	ab03      	add	r3, sp, #12
 800b0b4:	462a      	mov	r2, r5
 800b0b6:	a904      	add	r1, sp, #16
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	9300      	str	r3, [sp, #0]
 800b0bc:	4b11      	ldr	r3, [pc, #68]	@ (800b104 <_vfiprintf_r+0x228>)
 800b0be:	f3af 8000 	nop.w
 800b0c2:	4607      	mov	r7, r0
 800b0c4:	1c78      	adds	r0, r7, #1
 800b0c6:	d1d6      	bne.n	800b076 <_vfiprintf_r+0x19a>
 800b0c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0ca:	07d9      	lsls	r1, r3, #31
 800b0cc:	d405      	bmi.n	800b0da <_vfiprintf_r+0x1fe>
 800b0ce:	89ab      	ldrh	r3, [r5, #12]
 800b0d0:	059a      	lsls	r2, r3, #22
 800b0d2:	d402      	bmi.n	800b0da <_vfiprintf_r+0x1fe>
 800b0d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0d6:	f7ff fddd 	bl	800ac94 <__retarget_lock_release_recursive>
 800b0da:	89ab      	ldrh	r3, [r5, #12]
 800b0dc:	065b      	lsls	r3, r3, #25
 800b0de:	f53f af1f 	bmi.w	800af20 <_vfiprintf_r+0x44>
 800b0e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0e4:	e71e      	b.n	800af24 <_vfiprintf_r+0x48>
 800b0e6:	ab03      	add	r3, sp, #12
 800b0e8:	462a      	mov	r2, r5
 800b0ea:	a904      	add	r1, sp, #16
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	9300      	str	r3, [sp, #0]
 800b0f0:	4b04      	ldr	r3, [pc, #16]	@ (800b104 <_vfiprintf_r+0x228>)
 800b0f2:	f000 f87d 	bl	800b1f0 <_printf_i>
 800b0f6:	e7e4      	b.n	800b0c2 <_vfiprintf_r+0x1e6>
 800b0f8:	0800b7bc 	.word	0x0800b7bc
 800b0fc:	0800b7c6 	.word	0x0800b7c6
 800b100:	00000000 	.word	0x00000000
 800b104:	0800aeb7 	.word	0x0800aeb7
 800b108:	0800b7c2 	.word	0x0800b7c2

0800b10c <_printf_common>:
 800b10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b110:	4616      	mov	r6, r2
 800b112:	4698      	mov	r8, r3
 800b114:	688a      	ldr	r2, [r1, #8]
 800b116:	4607      	mov	r7, r0
 800b118:	690b      	ldr	r3, [r1, #16]
 800b11a:	460c      	mov	r4, r1
 800b11c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b120:	4293      	cmp	r3, r2
 800b122:	bfb8      	it	lt
 800b124:	4613      	movlt	r3, r2
 800b126:	6033      	str	r3, [r6, #0]
 800b128:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b12c:	b10a      	cbz	r2, 800b132 <_printf_common+0x26>
 800b12e:	3301      	adds	r3, #1
 800b130:	6033      	str	r3, [r6, #0]
 800b132:	6823      	ldr	r3, [r4, #0]
 800b134:	0699      	lsls	r1, r3, #26
 800b136:	bf42      	ittt	mi
 800b138:	6833      	ldrmi	r3, [r6, #0]
 800b13a:	3302      	addmi	r3, #2
 800b13c:	6033      	strmi	r3, [r6, #0]
 800b13e:	6825      	ldr	r5, [r4, #0]
 800b140:	f015 0506 	ands.w	r5, r5, #6
 800b144:	d106      	bne.n	800b154 <_printf_common+0x48>
 800b146:	f104 0a19 	add.w	sl, r4, #25
 800b14a:	68e3      	ldr	r3, [r4, #12]
 800b14c:	6832      	ldr	r2, [r6, #0]
 800b14e:	1a9b      	subs	r3, r3, r2
 800b150:	42ab      	cmp	r3, r5
 800b152:	dc2b      	bgt.n	800b1ac <_printf_common+0xa0>
 800b154:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b158:	6822      	ldr	r2, [r4, #0]
 800b15a:	3b00      	subs	r3, #0
 800b15c:	bf18      	it	ne
 800b15e:	2301      	movne	r3, #1
 800b160:	0692      	lsls	r2, r2, #26
 800b162:	d430      	bmi.n	800b1c6 <_printf_common+0xba>
 800b164:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b168:	4641      	mov	r1, r8
 800b16a:	4638      	mov	r0, r7
 800b16c:	47c8      	blx	r9
 800b16e:	3001      	adds	r0, #1
 800b170:	d023      	beq.n	800b1ba <_printf_common+0xae>
 800b172:	6823      	ldr	r3, [r4, #0]
 800b174:	341a      	adds	r4, #26
 800b176:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800b17a:	f003 0306 	and.w	r3, r3, #6
 800b17e:	2b04      	cmp	r3, #4
 800b180:	bf0a      	itet	eq
 800b182:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800b186:	2500      	movne	r5, #0
 800b188:	6833      	ldreq	r3, [r6, #0]
 800b18a:	f04f 0600 	mov.w	r6, #0
 800b18e:	bf08      	it	eq
 800b190:	1aed      	subeq	r5, r5, r3
 800b192:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b196:	bf08      	it	eq
 800b198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b19c:	4293      	cmp	r3, r2
 800b19e:	bfc4      	itt	gt
 800b1a0:	1a9b      	subgt	r3, r3, r2
 800b1a2:	18ed      	addgt	r5, r5, r3
 800b1a4:	42b5      	cmp	r5, r6
 800b1a6:	d11a      	bne.n	800b1de <_printf_common+0xd2>
 800b1a8:	2000      	movs	r0, #0
 800b1aa:	e008      	b.n	800b1be <_printf_common+0xb2>
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	4652      	mov	r2, sl
 800b1b0:	4641      	mov	r1, r8
 800b1b2:	4638      	mov	r0, r7
 800b1b4:	47c8      	blx	r9
 800b1b6:	3001      	adds	r0, #1
 800b1b8:	d103      	bne.n	800b1c2 <_printf_common+0xb6>
 800b1ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b1be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1c2:	3501      	adds	r5, #1
 800b1c4:	e7c1      	b.n	800b14a <_printf_common+0x3e>
 800b1c6:	18e1      	adds	r1, r4, r3
 800b1c8:	1c5a      	adds	r2, r3, #1
 800b1ca:	2030      	movs	r0, #48	@ 0x30
 800b1cc:	3302      	adds	r3, #2
 800b1ce:	4422      	add	r2, r4
 800b1d0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b1d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b1d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b1dc:	e7c2      	b.n	800b164 <_printf_common+0x58>
 800b1de:	2301      	movs	r3, #1
 800b1e0:	4622      	mov	r2, r4
 800b1e2:	4641      	mov	r1, r8
 800b1e4:	4638      	mov	r0, r7
 800b1e6:	47c8      	blx	r9
 800b1e8:	3001      	adds	r0, #1
 800b1ea:	d0e6      	beq.n	800b1ba <_printf_common+0xae>
 800b1ec:	3601      	adds	r6, #1
 800b1ee:	e7d9      	b.n	800b1a4 <_printf_common+0x98>

0800b1f0 <_printf_i>:
 800b1f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1f4:	7e0f      	ldrb	r7, [r1, #24]
 800b1f6:	4691      	mov	r9, r2
 800b1f8:	4680      	mov	r8, r0
 800b1fa:	460c      	mov	r4, r1
 800b1fc:	2f78      	cmp	r7, #120	@ 0x78
 800b1fe:	469a      	mov	sl, r3
 800b200:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b202:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b206:	d807      	bhi.n	800b218 <_printf_i+0x28>
 800b208:	2f62      	cmp	r7, #98	@ 0x62
 800b20a:	d80a      	bhi.n	800b222 <_printf_i+0x32>
 800b20c:	2f00      	cmp	r7, #0
 800b20e:	f000 80d2 	beq.w	800b3b6 <_printf_i+0x1c6>
 800b212:	2f58      	cmp	r7, #88	@ 0x58
 800b214:	f000 80b9 	beq.w	800b38a <_printf_i+0x19a>
 800b218:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b21c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b220:	e03a      	b.n	800b298 <_printf_i+0xa8>
 800b222:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b226:	2b15      	cmp	r3, #21
 800b228:	d8f6      	bhi.n	800b218 <_printf_i+0x28>
 800b22a:	a101      	add	r1, pc, #4	@ (adr r1, 800b230 <_printf_i+0x40>)
 800b22c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b230:	0800b289 	.word	0x0800b289
 800b234:	0800b29d 	.word	0x0800b29d
 800b238:	0800b219 	.word	0x0800b219
 800b23c:	0800b219 	.word	0x0800b219
 800b240:	0800b219 	.word	0x0800b219
 800b244:	0800b219 	.word	0x0800b219
 800b248:	0800b29d 	.word	0x0800b29d
 800b24c:	0800b219 	.word	0x0800b219
 800b250:	0800b219 	.word	0x0800b219
 800b254:	0800b219 	.word	0x0800b219
 800b258:	0800b219 	.word	0x0800b219
 800b25c:	0800b39d 	.word	0x0800b39d
 800b260:	0800b2c7 	.word	0x0800b2c7
 800b264:	0800b357 	.word	0x0800b357
 800b268:	0800b219 	.word	0x0800b219
 800b26c:	0800b219 	.word	0x0800b219
 800b270:	0800b3bf 	.word	0x0800b3bf
 800b274:	0800b219 	.word	0x0800b219
 800b278:	0800b2c7 	.word	0x0800b2c7
 800b27c:	0800b219 	.word	0x0800b219
 800b280:	0800b219 	.word	0x0800b219
 800b284:	0800b35f 	.word	0x0800b35f
 800b288:	6833      	ldr	r3, [r6, #0]
 800b28a:	1d1a      	adds	r2, r3, #4
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	6032      	str	r2, [r6, #0]
 800b290:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b294:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b298:	2301      	movs	r3, #1
 800b29a:	e09d      	b.n	800b3d8 <_printf_i+0x1e8>
 800b29c:	6833      	ldr	r3, [r6, #0]
 800b29e:	6820      	ldr	r0, [r4, #0]
 800b2a0:	1d19      	adds	r1, r3, #4
 800b2a2:	6031      	str	r1, [r6, #0]
 800b2a4:	0606      	lsls	r6, r0, #24
 800b2a6:	d501      	bpl.n	800b2ac <_printf_i+0xbc>
 800b2a8:	681d      	ldr	r5, [r3, #0]
 800b2aa:	e003      	b.n	800b2b4 <_printf_i+0xc4>
 800b2ac:	0645      	lsls	r5, r0, #25
 800b2ae:	d5fb      	bpl.n	800b2a8 <_printf_i+0xb8>
 800b2b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b2b4:	2d00      	cmp	r5, #0
 800b2b6:	da03      	bge.n	800b2c0 <_printf_i+0xd0>
 800b2b8:	232d      	movs	r3, #45	@ 0x2d
 800b2ba:	426d      	negs	r5, r5
 800b2bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2c0:	4859      	ldr	r0, [pc, #356]	@ (800b428 <_printf_i+0x238>)
 800b2c2:	230a      	movs	r3, #10
 800b2c4:	e011      	b.n	800b2ea <_printf_i+0xfa>
 800b2c6:	6821      	ldr	r1, [r4, #0]
 800b2c8:	6833      	ldr	r3, [r6, #0]
 800b2ca:	0608      	lsls	r0, r1, #24
 800b2cc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b2d0:	d402      	bmi.n	800b2d8 <_printf_i+0xe8>
 800b2d2:	0649      	lsls	r1, r1, #25
 800b2d4:	bf48      	it	mi
 800b2d6:	b2ad      	uxthmi	r5, r5
 800b2d8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b2da:	6033      	str	r3, [r6, #0]
 800b2dc:	4852      	ldr	r0, [pc, #328]	@ (800b428 <_printf_i+0x238>)
 800b2de:	bf14      	ite	ne
 800b2e0:	230a      	movne	r3, #10
 800b2e2:	2308      	moveq	r3, #8
 800b2e4:	2100      	movs	r1, #0
 800b2e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b2ea:	6866      	ldr	r6, [r4, #4]
 800b2ec:	2e00      	cmp	r6, #0
 800b2ee:	60a6      	str	r6, [r4, #8]
 800b2f0:	bfa2      	ittt	ge
 800b2f2:	6821      	ldrge	r1, [r4, #0]
 800b2f4:	f021 0104 	bicge.w	r1, r1, #4
 800b2f8:	6021      	strge	r1, [r4, #0]
 800b2fa:	b90d      	cbnz	r5, 800b300 <_printf_i+0x110>
 800b2fc:	2e00      	cmp	r6, #0
 800b2fe:	d04b      	beq.n	800b398 <_printf_i+0x1a8>
 800b300:	4616      	mov	r6, r2
 800b302:	fbb5 f1f3 	udiv	r1, r5, r3
 800b306:	fb03 5711 	mls	r7, r3, r1, r5
 800b30a:	5dc7      	ldrb	r7, [r0, r7]
 800b30c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b310:	462f      	mov	r7, r5
 800b312:	460d      	mov	r5, r1
 800b314:	42bb      	cmp	r3, r7
 800b316:	d9f4      	bls.n	800b302 <_printf_i+0x112>
 800b318:	2b08      	cmp	r3, #8
 800b31a:	d10b      	bne.n	800b334 <_printf_i+0x144>
 800b31c:	6823      	ldr	r3, [r4, #0]
 800b31e:	07df      	lsls	r7, r3, #31
 800b320:	d508      	bpl.n	800b334 <_printf_i+0x144>
 800b322:	6923      	ldr	r3, [r4, #16]
 800b324:	6861      	ldr	r1, [r4, #4]
 800b326:	4299      	cmp	r1, r3
 800b328:	bfde      	ittt	le
 800b32a:	2330      	movle	r3, #48	@ 0x30
 800b32c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b330:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b334:	1b92      	subs	r2, r2, r6
 800b336:	6122      	str	r2, [r4, #16]
 800b338:	464b      	mov	r3, r9
 800b33a:	aa03      	add	r2, sp, #12
 800b33c:	4621      	mov	r1, r4
 800b33e:	4640      	mov	r0, r8
 800b340:	f8cd a000 	str.w	sl, [sp]
 800b344:	f7ff fee2 	bl	800b10c <_printf_common>
 800b348:	3001      	adds	r0, #1
 800b34a:	d14a      	bne.n	800b3e2 <_printf_i+0x1f2>
 800b34c:	f04f 30ff 	mov.w	r0, #4294967295
 800b350:	b004      	add	sp, #16
 800b352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b356:	6823      	ldr	r3, [r4, #0]
 800b358:	f043 0320 	orr.w	r3, r3, #32
 800b35c:	6023      	str	r3, [r4, #0]
 800b35e:	2778      	movs	r7, #120	@ 0x78
 800b360:	4832      	ldr	r0, [pc, #200]	@ (800b42c <_printf_i+0x23c>)
 800b362:	6823      	ldr	r3, [r4, #0]
 800b364:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b368:	061f      	lsls	r7, r3, #24
 800b36a:	6831      	ldr	r1, [r6, #0]
 800b36c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b370:	d402      	bmi.n	800b378 <_printf_i+0x188>
 800b372:	065f      	lsls	r7, r3, #25
 800b374:	bf48      	it	mi
 800b376:	b2ad      	uxthmi	r5, r5
 800b378:	6031      	str	r1, [r6, #0]
 800b37a:	07d9      	lsls	r1, r3, #31
 800b37c:	bf44      	itt	mi
 800b37e:	f043 0320 	orrmi.w	r3, r3, #32
 800b382:	6023      	strmi	r3, [r4, #0]
 800b384:	b11d      	cbz	r5, 800b38e <_printf_i+0x19e>
 800b386:	2310      	movs	r3, #16
 800b388:	e7ac      	b.n	800b2e4 <_printf_i+0xf4>
 800b38a:	4827      	ldr	r0, [pc, #156]	@ (800b428 <_printf_i+0x238>)
 800b38c:	e7e9      	b.n	800b362 <_printf_i+0x172>
 800b38e:	6823      	ldr	r3, [r4, #0]
 800b390:	f023 0320 	bic.w	r3, r3, #32
 800b394:	6023      	str	r3, [r4, #0]
 800b396:	e7f6      	b.n	800b386 <_printf_i+0x196>
 800b398:	4616      	mov	r6, r2
 800b39a:	e7bd      	b.n	800b318 <_printf_i+0x128>
 800b39c:	6833      	ldr	r3, [r6, #0]
 800b39e:	6825      	ldr	r5, [r4, #0]
 800b3a0:	1d18      	adds	r0, r3, #4
 800b3a2:	6961      	ldr	r1, [r4, #20]
 800b3a4:	6030      	str	r0, [r6, #0]
 800b3a6:	062e      	lsls	r6, r5, #24
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	d501      	bpl.n	800b3b0 <_printf_i+0x1c0>
 800b3ac:	6019      	str	r1, [r3, #0]
 800b3ae:	e002      	b.n	800b3b6 <_printf_i+0x1c6>
 800b3b0:	0668      	lsls	r0, r5, #25
 800b3b2:	d5fb      	bpl.n	800b3ac <_printf_i+0x1bc>
 800b3b4:	8019      	strh	r1, [r3, #0]
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	4616      	mov	r6, r2
 800b3ba:	6123      	str	r3, [r4, #16]
 800b3bc:	e7bc      	b.n	800b338 <_printf_i+0x148>
 800b3be:	6833      	ldr	r3, [r6, #0]
 800b3c0:	2100      	movs	r1, #0
 800b3c2:	1d1a      	adds	r2, r3, #4
 800b3c4:	6032      	str	r2, [r6, #0]
 800b3c6:	681e      	ldr	r6, [r3, #0]
 800b3c8:	6862      	ldr	r2, [r4, #4]
 800b3ca:	4630      	mov	r0, r6
 800b3cc:	f000 f8d4 	bl	800b578 <memchr>
 800b3d0:	b108      	cbz	r0, 800b3d6 <_printf_i+0x1e6>
 800b3d2:	1b80      	subs	r0, r0, r6
 800b3d4:	6060      	str	r0, [r4, #4]
 800b3d6:	6863      	ldr	r3, [r4, #4]
 800b3d8:	6123      	str	r3, [r4, #16]
 800b3da:	2300      	movs	r3, #0
 800b3dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3e0:	e7aa      	b.n	800b338 <_printf_i+0x148>
 800b3e2:	6923      	ldr	r3, [r4, #16]
 800b3e4:	4632      	mov	r2, r6
 800b3e6:	4649      	mov	r1, r9
 800b3e8:	4640      	mov	r0, r8
 800b3ea:	47d0      	blx	sl
 800b3ec:	3001      	adds	r0, #1
 800b3ee:	d0ad      	beq.n	800b34c <_printf_i+0x15c>
 800b3f0:	6823      	ldr	r3, [r4, #0]
 800b3f2:	079b      	lsls	r3, r3, #30
 800b3f4:	d413      	bmi.n	800b41e <_printf_i+0x22e>
 800b3f6:	68e0      	ldr	r0, [r4, #12]
 800b3f8:	9b03      	ldr	r3, [sp, #12]
 800b3fa:	4298      	cmp	r0, r3
 800b3fc:	bfb8      	it	lt
 800b3fe:	4618      	movlt	r0, r3
 800b400:	e7a6      	b.n	800b350 <_printf_i+0x160>
 800b402:	2301      	movs	r3, #1
 800b404:	4632      	mov	r2, r6
 800b406:	4649      	mov	r1, r9
 800b408:	4640      	mov	r0, r8
 800b40a:	47d0      	blx	sl
 800b40c:	3001      	adds	r0, #1
 800b40e:	d09d      	beq.n	800b34c <_printf_i+0x15c>
 800b410:	3501      	adds	r5, #1
 800b412:	68e3      	ldr	r3, [r4, #12]
 800b414:	9903      	ldr	r1, [sp, #12]
 800b416:	1a5b      	subs	r3, r3, r1
 800b418:	42ab      	cmp	r3, r5
 800b41a:	dcf2      	bgt.n	800b402 <_printf_i+0x212>
 800b41c:	e7eb      	b.n	800b3f6 <_printf_i+0x206>
 800b41e:	2500      	movs	r5, #0
 800b420:	f104 0619 	add.w	r6, r4, #25
 800b424:	e7f5      	b.n	800b412 <_printf_i+0x222>
 800b426:	bf00      	nop
 800b428:	0800b7cd 	.word	0x0800b7cd
 800b42c:	0800b7de 	.word	0x0800b7de

0800b430 <__swbuf_r>:
 800b430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b432:	460e      	mov	r6, r1
 800b434:	4614      	mov	r4, r2
 800b436:	4605      	mov	r5, r0
 800b438:	b118      	cbz	r0, 800b442 <__swbuf_r+0x12>
 800b43a:	6a03      	ldr	r3, [r0, #32]
 800b43c:	b90b      	cbnz	r3, 800b442 <__swbuf_r+0x12>
 800b43e:	f7ff fb23 	bl	800aa88 <__sinit>
 800b442:	69a3      	ldr	r3, [r4, #24]
 800b444:	60a3      	str	r3, [r4, #8]
 800b446:	89a3      	ldrh	r3, [r4, #12]
 800b448:	071a      	lsls	r2, r3, #28
 800b44a:	d501      	bpl.n	800b450 <__swbuf_r+0x20>
 800b44c:	6923      	ldr	r3, [r4, #16]
 800b44e:	b943      	cbnz	r3, 800b462 <__swbuf_r+0x32>
 800b450:	4621      	mov	r1, r4
 800b452:	4628      	mov	r0, r5
 800b454:	f000 f82a 	bl	800b4ac <__swsetup_r>
 800b458:	b118      	cbz	r0, 800b462 <__swbuf_r+0x32>
 800b45a:	f04f 37ff 	mov.w	r7, #4294967295
 800b45e:	4638      	mov	r0, r7
 800b460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b462:	6823      	ldr	r3, [r4, #0]
 800b464:	b2f6      	uxtb	r6, r6
 800b466:	6922      	ldr	r2, [r4, #16]
 800b468:	4637      	mov	r7, r6
 800b46a:	1a98      	subs	r0, r3, r2
 800b46c:	6963      	ldr	r3, [r4, #20]
 800b46e:	4283      	cmp	r3, r0
 800b470:	dc05      	bgt.n	800b47e <__swbuf_r+0x4e>
 800b472:	4621      	mov	r1, r4
 800b474:	4628      	mov	r0, r5
 800b476:	f7ff fa3f 	bl	800a8f8 <_fflush_r>
 800b47a:	2800      	cmp	r0, #0
 800b47c:	d1ed      	bne.n	800b45a <__swbuf_r+0x2a>
 800b47e:	68a3      	ldr	r3, [r4, #8]
 800b480:	3b01      	subs	r3, #1
 800b482:	60a3      	str	r3, [r4, #8]
 800b484:	6823      	ldr	r3, [r4, #0]
 800b486:	1c5a      	adds	r2, r3, #1
 800b488:	6022      	str	r2, [r4, #0]
 800b48a:	701e      	strb	r6, [r3, #0]
 800b48c:	1c43      	adds	r3, r0, #1
 800b48e:	6962      	ldr	r2, [r4, #20]
 800b490:	429a      	cmp	r2, r3
 800b492:	d004      	beq.n	800b49e <__swbuf_r+0x6e>
 800b494:	89a3      	ldrh	r3, [r4, #12]
 800b496:	07db      	lsls	r3, r3, #31
 800b498:	d5e1      	bpl.n	800b45e <__swbuf_r+0x2e>
 800b49a:	2e0a      	cmp	r6, #10
 800b49c:	d1df      	bne.n	800b45e <__swbuf_r+0x2e>
 800b49e:	4621      	mov	r1, r4
 800b4a0:	4628      	mov	r0, r5
 800b4a2:	f7ff fa29 	bl	800a8f8 <_fflush_r>
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	d0d9      	beq.n	800b45e <__swbuf_r+0x2e>
 800b4aa:	e7d6      	b.n	800b45a <__swbuf_r+0x2a>

0800b4ac <__swsetup_r>:
 800b4ac:	b538      	push	{r3, r4, r5, lr}
 800b4ae:	4b29      	ldr	r3, [pc, #164]	@ (800b554 <__swsetup_r+0xa8>)
 800b4b0:	4605      	mov	r5, r0
 800b4b2:	460c      	mov	r4, r1
 800b4b4:	6818      	ldr	r0, [r3, #0]
 800b4b6:	b118      	cbz	r0, 800b4c0 <__swsetup_r+0x14>
 800b4b8:	6a03      	ldr	r3, [r0, #32]
 800b4ba:	b90b      	cbnz	r3, 800b4c0 <__swsetup_r+0x14>
 800b4bc:	f7ff fae4 	bl	800aa88 <__sinit>
 800b4c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4c4:	0719      	lsls	r1, r3, #28
 800b4c6:	d422      	bmi.n	800b50e <__swsetup_r+0x62>
 800b4c8:	06da      	lsls	r2, r3, #27
 800b4ca:	d407      	bmi.n	800b4dc <__swsetup_r+0x30>
 800b4cc:	2209      	movs	r2, #9
 800b4ce:	602a      	str	r2, [r5, #0]
 800b4d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d8:	81a3      	strh	r3, [r4, #12]
 800b4da:	e033      	b.n	800b544 <__swsetup_r+0x98>
 800b4dc:	0758      	lsls	r0, r3, #29
 800b4de:	d512      	bpl.n	800b506 <__swsetup_r+0x5a>
 800b4e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b4e2:	b141      	cbz	r1, 800b4f6 <__swsetup_r+0x4a>
 800b4e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4e8:	4299      	cmp	r1, r3
 800b4ea:	d002      	beq.n	800b4f2 <__swsetup_r+0x46>
 800b4ec:	4628      	mov	r0, r5
 800b4ee:	f7ff fbd3 	bl	800ac98 <_free_r>
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b4f6:	89a3      	ldrh	r3, [r4, #12]
 800b4f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b4fc:	81a3      	strh	r3, [r4, #12]
 800b4fe:	2300      	movs	r3, #0
 800b500:	6063      	str	r3, [r4, #4]
 800b502:	6923      	ldr	r3, [r4, #16]
 800b504:	6023      	str	r3, [r4, #0]
 800b506:	89a3      	ldrh	r3, [r4, #12]
 800b508:	f043 0308 	orr.w	r3, r3, #8
 800b50c:	81a3      	strh	r3, [r4, #12]
 800b50e:	6923      	ldr	r3, [r4, #16]
 800b510:	b94b      	cbnz	r3, 800b526 <__swsetup_r+0x7a>
 800b512:	89a3      	ldrh	r3, [r4, #12]
 800b514:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b51c:	d003      	beq.n	800b526 <__swsetup_r+0x7a>
 800b51e:	4621      	mov	r1, r4
 800b520:	4628      	mov	r0, r5
 800b522:	f000 f85c 	bl	800b5de <__smakebuf_r>
 800b526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b52a:	f013 0201 	ands.w	r2, r3, #1
 800b52e:	d00a      	beq.n	800b546 <__swsetup_r+0x9a>
 800b530:	2200      	movs	r2, #0
 800b532:	60a2      	str	r2, [r4, #8]
 800b534:	6962      	ldr	r2, [r4, #20]
 800b536:	4252      	negs	r2, r2
 800b538:	61a2      	str	r2, [r4, #24]
 800b53a:	6922      	ldr	r2, [r4, #16]
 800b53c:	b942      	cbnz	r2, 800b550 <__swsetup_r+0xa4>
 800b53e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b542:	d1c5      	bne.n	800b4d0 <__swsetup_r+0x24>
 800b544:	bd38      	pop	{r3, r4, r5, pc}
 800b546:	0799      	lsls	r1, r3, #30
 800b548:	bf58      	it	pl
 800b54a:	6962      	ldrpl	r2, [r4, #20]
 800b54c:	60a2      	str	r2, [r4, #8]
 800b54e:	e7f4      	b.n	800b53a <__swsetup_r+0x8e>
 800b550:	2000      	movs	r0, #0
 800b552:	e7f7      	b.n	800b544 <__swsetup_r+0x98>
 800b554:	2000001c 	.word	0x2000001c

0800b558 <_sbrk_r>:
 800b558:	b538      	push	{r3, r4, r5, lr}
 800b55a:	2300      	movs	r3, #0
 800b55c:	4d05      	ldr	r5, [pc, #20]	@ (800b574 <_sbrk_r+0x1c>)
 800b55e:	4604      	mov	r4, r0
 800b560:	4608      	mov	r0, r1
 800b562:	602b      	str	r3, [r5, #0]
 800b564:	f7f5 fe70 	bl	8001248 <_sbrk>
 800b568:	1c43      	adds	r3, r0, #1
 800b56a:	d102      	bne.n	800b572 <_sbrk_r+0x1a>
 800b56c:	682b      	ldr	r3, [r5, #0]
 800b56e:	b103      	cbz	r3, 800b572 <_sbrk_r+0x1a>
 800b570:	6023      	str	r3, [r4, #0]
 800b572:	bd38      	pop	{r3, r4, r5, pc}
 800b574:	20001b4c 	.word	0x20001b4c

0800b578 <memchr>:
 800b578:	b2c9      	uxtb	r1, r1
 800b57a:	4603      	mov	r3, r0
 800b57c:	4402      	add	r2, r0
 800b57e:	b510      	push	{r4, lr}
 800b580:	4293      	cmp	r3, r2
 800b582:	4618      	mov	r0, r3
 800b584:	d101      	bne.n	800b58a <memchr+0x12>
 800b586:	2000      	movs	r0, #0
 800b588:	e003      	b.n	800b592 <memchr+0x1a>
 800b58a:	7804      	ldrb	r4, [r0, #0]
 800b58c:	3301      	adds	r3, #1
 800b58e:	428c      	cmp	r4, r1
 800b590:	d1f6      	bne.n	800b580 <memchr+0x8>
 800b592:	bd10      	pop	{r4, pc}

0800b594 <__swhatbuf_r>:
 800b594:	b570      	push	{r4, r5, r6, lr}
 800b596:	460c      	mov	r4, r1
 800b598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b59c:	b096      	sub	sp, #88	@ 0x58
 800b59e:	4615      	mov	r5, r2
 800b5a0:	2900      	cmp	r1, #0
 800b5a2:	461e      	mov	r6, r3
 800b5a4:	da0c      	bge.n	800b5c0 <__swhatbuf_r+0x2c>
 800b5a6:	89a3      	ldrh	r3, [r4, #12]
 800b5a8:	2100      	movs	r1, #0
 800b5aa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b5ae:	bf14      	ite	ne
 800b5b0:	2340      	movne	r3, #64	@ 0x40
 800b5b2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b5b6:	2000      	movs	r0, #0
 800b5b8:	6031      	str	r1, [r6, #0]
 800b5ba:	602b      	str	r3, [r5, #0]
 800b5bc:	b016      	add	sp, #88	@ 0x58
 800b5be:	bd70      	pop	{r4, r5, r6, pc}
 800b5c0:	466a      	mov	r2, sp
 800b5c2:	f000 f849 	bl	800b658 <_fstat_r>
 800b5c6:	2800      	cmp	r0, #0
 800b5c8:	dbed      	blt.n	800b5a6 <__swhatbuf_r+0x12>
 800b5ca:	9901      	ldr	r1, [sp, #4]
 800b5cc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b5d0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b5d4:	4259      	negs	r1, r3
 800b5d6:	4159      	adcs	r1, r3
 800b5d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b5dc:	e7eb      	b.n	800b5b6 <__swhatbuf_r+0x22>

0800b5de <__smakebuf_r>:
 800b5de:	898b      	ldrh	r3, [r1, #12]
 800b5e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5e2:	079d      	lsls	r5, r3, #30
 800b5e4:	4606      	mov	r6, r0
 800b5e6:	460c      	mov	r4, r1
 800b5e8:	d507      	bpl.n	800b5fa <__smakebuf_r+0x1c>
 800b5ea:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b5ee:	6023      	str	r3, [r4, #0]
 800b5f0:	6123      	str	r3, [r4, #16]
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	6163      	str	r3, [r4, #20]
 800b5f6:	b003      	add	sp, #12
 800b5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5fa:	ab01      	add	r3, sp, #4
 800b5fc:	466a      	mov	r2, sp
 800b5fe:	f7ff ffc9 	bl	800b594 <__swhatbuf_r>
 800b602:	9f00      	ldr	r7, [sp, #0]
 800b604:	4605      	mov	r5, r0
 800b606:	4630      	mov	r0, r6
 800b608:	4639      	mov	r1, r7
 800b60a:	f7ff fbb1 	bl	800ad70 <_malloc_r>
 800b60e:	b948      	cbnz	r0, 800b624 <__smakebuf_r+0x46>
 800b610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b614:	059a      	lsls	r2, r3, #22
 800b616:	d4ee      	bmi.n	800b5f6 <__smakebuf_r+0x18>
 800b618:	f023 0303 	bic.w	r3, r3, #3
 800b61c:	f043 0302 	orr.w	r3, r3, #2
 800b620:	81a3      	strh	r3, [r4, #12]
 800b622:	e7e2      	b.n	800b5ea <__smakebuf_r+0xc>
 800b624:	89a3      	ldrh	r3, [r4, #12]
 800b626:	6020      	str	r0, [r4, #0]
 800b628:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b62c:	81a3      	strh	r3, [r4, #12]
 800b62e:	9b01      	ldr	r3, [sp, #4]
 800b630:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b634:	b15b      	cbz	r3, 800b64e <__smakebuf_r+0x70>
 800b636:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b63a:	4630      	mov	r0, r6
 800b63c:	f000 f81e 	bl	800b67c <_isatty_r>
 800b640:	b128      	cbz	r0, 800b64e <__smakebuf_r+0x70>
 800b642:	89a3      	ldrh	r3, [r4, #12]
 800b644:	f023 0303 	bic.w	r3, r3, #3
 800b648:	f043 0301 	orr.w	r3, r3, #1
 800b64c:	81a3      	strh	r3, [r4, #12]
 800b64e:	89a3      	ldrh	r3, [r4, #12]
 800b650:	431d      	orrs	r5, r3
 800b652:	81a5      	strh	r5, [r4, #12]
 800b654:	e7cf      	b.n	800b5f6 <__smakebuf_r+0x18>
	...

0800b658 <_fstat_r>:
 800b658:	b538      	push	{r3, r4, r5, lr}
 800b65a:	2300      	movs	r3, #0
 800b65c:	4d06      	ldr	r5, [pc, #24]	@ (800b678 <_fstat_r+0x20>)
 800b65e:	4604      	mov	r4, r0
 800b660:	4608      	mov	r0, r1
 800b662:	4611      	mov	r1, r2
 800b664:	602b      	str	r3, [r5, #0]
 800b666:	f7f5 fdc6 	bl	80011f6 <_fstat>
 800b66a:	1c43      	adds	r3, r0, #1
 800b66c:	d102      	bne.n	800b674 <_fstat_r+0x1c>
 800b66e:	682b      	ldr	r3, [r5, #0]
 800b670:	b103      	cbz	r3, 800b674 <_fstat_r+0x1c>
 800b672:	6023      	str	r3, [r4, #0]
 800b674:	bd38      	pop	{r3, r4, r5, pc}
 800b676:	bf00      	nop
 800b678:	20001b4c 	.word	0x20001b4c

0800b67c <_isatty_r>:
 800b67c:	b538      	push	{r3, r4, r5, lr}
 800b67e:	2300      	movs	r3, #0
 800b680:	4d05      	ldr	r5, [pc, #20]	@ (800b698 <_isatty_r+0x1c>)
 800b682:	4604      	mov	r4, r0
 800b684:	4608      	mov	r0, r1
 800b686:	602b      	str	r3, [r5, #0]
 800b688:	f7f5 fdc5 	bl	8001216 <_isatty>
 800b68c:	1c43      	adds	r3, r0, #1
 800b68e:	d102      	bne.n	800b696 <_isatty_r+0x1a>
 800b690:	682b      	ldr	r3, [r5, #0]
 800b692:	b103      	cbz	r3, 800b696 <_isatty_r+0x1a>
 800b694:	6023      	str	r3, [r4, #0]
 800b696:	bd38      	pop	{r3, r4, r5, pc}
 800b698:	20001b4c 	.word	0x20001b4c

0800b69c <_init>:
 800b69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b69e:	bf00      	nop
 800b6a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6a2:	bc08      	pop	{r3}
 800b6a4:	469e      	mov	lr, r3
 800b6a6:	4770      	bx	lr

0800b6a8 <_fini>:
 800b6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6aa:	bf00      	nop
 800b6ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6ae:	bc08      	pop	{r3}
 800b6b0:	469e      	mov	lr, r3
 800b6b2:	4770      	bx	lr
