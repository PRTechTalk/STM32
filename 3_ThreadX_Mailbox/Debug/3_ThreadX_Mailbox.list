
3_ThreadX_Mailbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c410  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  0800c65c  0800c65c  0000d65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7ec  0800c7ec  0000e06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7ec  0800c7ec  0000d7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7f4  0800c7f4  0000e06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7f4  0800c7f4  0000d7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c7f8  0800c7f8  0000d7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800c7fc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028ac  2000006c  0800c868  0000e06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002918  0800c868  0000e918  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000e06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000249d0  00000000  00000000  0000e0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000061c8  00000000  00000000  00032a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001738  00000000  00000000  00038c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010fa  00000000  00000000  0003a378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037615  00000000  00000000  0003b472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027c94  00000000  00000000  00072a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014c7bf  00000000  00000000  0009a71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e6eda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ccc  00000000  00000000  001e6f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000f8  00000000  00000000  001ecbec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000006c 	.word	0x2000006c
 8000268:	00000000 	.word	0x00000000
 800026c:	0800c644 	.word	0x0800c644

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000070 	.word	0x20000070
 8000288:	0800c644 	.word	0x0800c644

0800028c <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 800028c:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800028e:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000292:	4917      	ldr	r1, [pc, #92]	@ (80002f0 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000294:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000298:	4816      	ldr	r0, [pc, #88]	@ (80002f4 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 800029a:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 800029c:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002a0:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002a2:	4815      	ldr	r0, [pc, #84]	@ (80002f8 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002a4:	4912      	ldr	r1, [pc, #72]	@ (80002f0 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002a6:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002a8:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002aa:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002ae:	4913      	ldr	r1, [pc, #76]	@ (80002fc <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002b0:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002b2:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002b6:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002b8:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002bc:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002c0:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002c4:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002c8:	490d      	ldr	r1, [pc, #52]	@ (8000300 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002ca:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ce:	4770      	bx	lr

080002d0 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002d0:	f7ff bffe 	b.w	80002d0 <__tx_BadHandler>

080002d4 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002d4:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002d6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002da:	4770      	bx	lr

080002dc <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002dc:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002de:	f000 f897 	bl	8000410 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002e6:	4770      	bx	lr

080002e8 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002e8:	f7ff bffe 	b.w	80002e8 <__tx_NMIHandler>

080002ec <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002ec:	f7ff bffe 	b.w	80002ec <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002f0:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002f4:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002f8:	200021c0 	.word	0x200021c0
    LDR     r1, =SYSTICK_CYCLES
 80002fc:	000f423f 	.word	0x000f423f
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000300:	40ff0000 	.word	0x40ff0000

08000304 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000304:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000308:	4a2d      	ldr	r2, [pc, #180]	@ (80003c0 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 800030a:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 800030c:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000310:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000314:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000318:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800031a:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800031e:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000322:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 8000326:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800032a:	f3bf 8f6f 	isb	sy

0800032e <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800032e:	e7fe      	b.n	800032e <__tx_wait_here>

08000330 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000330:	4824      	ldr	r0, [pc, #144]	@ (80003c4 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000332:	4a25      	ldr	r2, [pc, #148]	@ (80003c8 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000334:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000338:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800033a:	b191      	cbz	r1, 8000362 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 800033c:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800033e:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000342:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000346:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 800034a:	d101      	bne.n	8000350 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 800034c:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000350 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000350:	4c1e      	ldr	r4, [pc, #120]	@ (80003cc <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000352:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000356:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800035a:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 800035c:	b10d      	cbz	r5, 8000362 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800035e:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000360:	6023      	str	r3, [r4, #0]

08000362 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000362:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000364:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000366:	b1d1      	cbz	r1, 800039e <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000368:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800036a:	b662      	cpsie	i

0800036c <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 800036c:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800036e:	4c17      	ldr	r4, [pc, #92]	@ (80003cc <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000370:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000372:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000376:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000378:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 800037a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800037e:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000382:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000386:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800038a:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800038e:	d101      	bne.n	8000394 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000390:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000394 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000394:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000398:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 800039c:	4770      	bx	lr

0800039e <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800039e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003a0:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003a2:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003a4:	b909      	cbnz	r1, 80003aa <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a6:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003a8:	e7f9      	b.n	800039e <__tx_ts_wait>

080003aa <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003aa:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003ae:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003b2:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003b6:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003b8:	e7d8      	b.n	800036c <__tx_ts_restore>
 80003ba:	bf00      	nop

080003bc <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003bc:	4770      	bx	lr
 80003be:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003c0:	2000225c 	.word	0x2000225c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c4:	200021c4 	.word	0x200021c4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c8:	200021c8 	.word	0x200021c8
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003cc:	200027c8 	.word	0x200027c8

080003d0 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003d0:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003d2:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003d6:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003da:	f06f 0343 	mvn.w	r3, #67	@ 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003de:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003e0:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e4:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003e6:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003e8:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003ea:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003ec:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003ee:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003f0:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003f2:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f4:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003f6:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003fa:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003fc:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003fe:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000402:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000404:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000406:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800040a:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800040c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800040e:	4770      	bx	lr

08000410 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000410:	4922      	ldr	r1, [pc, #136]	@ (800049c <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000412:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000414:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000418:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800041a:	4b21      	ldr	r3, [pc, #132]	@ (80004a0 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800041c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800041e:	b13a      	cbz	r2, 8000430 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000420:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000424:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000426:	b91a      	cbnz	r2, 8000430 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000428:	4b1e      	ldr	r3, [pc, #120]	@ (80004a4 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 800042a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800042e:	6018      	str	r0, [r3, #0]

08000430 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000430:	491d      	ldr	r1, [pc, #116]	@ (80004a8 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000432:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000434:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000436:	b122      	cbz	r2, 8000442 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000438:	4b1c      	ldr	r3, [pc, #112]	@ (80004ac <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 800043a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800043e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000440:	e008      	b.n	8000454 <__tx_timer_done>

08000442 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000442:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000446:	4b1a      	ldr	r3, [pc, #104]	@ (80004b0 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000448:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800044a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800044c:	d101      	bne.n	8000452 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800044e:	4b19      	ldr	r3, [pc, #100]	@ (80004b4 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000450:	6818      	ldr	r0, [r3, #0]

08000452 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000452:	6008      	str	r0, [r1, #0]

08000454 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000454:	4b13      	ldr	r3, [pc, #76]	@ (80004a4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000456:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000458:	b912      	cbnz	r2, 8000460 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800045a:	4914      	ldr	r1, [pc, #80]	@ (80004ac <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800045c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800045e:	b1c8      	cbz	r0, 8000494 <__tx_timer_nothing_expired>

08000460 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000460:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000462:	4912      	ldr	r1, [pc, #72]	@ (80004ac <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000464:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000466:	b108      	cbz	r0, 800046c <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000468:	f00a fb94 	bl	800ab94 <_tx_timer_expiration_process>

0800046c <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800046c:	4b0d      	ldr	r3, [pc, #52]	@ (80004a4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800046e:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000470:	b172      	cbz	r2, 8000490 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000472:	f00a fb01 	bl	800aa78 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000476:	4810      	ldr	r0, [pc, #64]	@ (80004b8 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000478:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800047a:	b949      	cbnz	r1, 8000490 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800047c:	480f      	ldr	r0, [pc, #60]	@ (80004bc <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800047e:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000480:	4a0f      	ldr	r2, [pc, #60]	@ (80004c0 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000482:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000484:	480f      	ldr	r0, [pc, #60]	@ (80004c4 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800048a:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800048c:	d000      	beq.n	8000490 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800048e:	6002      	str	r2, [r0, #0]

08000490 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000490:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000494 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000494:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000498:	4770      	bx	lr
 800049a:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800049c:	20002268 	.word	0x20002268
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004a0:	200027c8 	.word	0x200027c8
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a4:	2000226c 	.word	0x2000226c
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004a8:	200022f8 	.word	0x200022f8
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004ac:	200022fc 	.word	0x200022fc
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004b0:	200022f4 	.word	0x200022f4
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b4:	200022f0 	.word	0x200022f0
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004b8:	2000225c 	.word	0x2000225c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004bc:	200021c4 	.word	0x200021c4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004c0:	200021c8 	.word	0x200021c8
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c4:	e000ed04 	.word	0xe000ed04

080004c8 <__aeabi_uldivmod>:
 80004c8:	b953      	cbnz	r3, 80004e0 <__aeabi_uldivmod+0x18>
 80004ca:	b94a      	cbnz	r2, 80004e0 <__aeabi_uldivmod+0x18>
 80004cc:	2900      	cmp	r1, #0
 80004ce:	bf08      	it	eq
 80004d0:	2800      	cmpeq	r0, #0
 80004d2:	bf1c      	itt	ne
 80004d4:	f04f 31ff 	movne.w	r1, #4294967295
 80004d8:	f04f 30ff 	movne.w	r0, #4294967295
 80004dc:	f000 b97e 	b.w	80007dc <__aeabi_idiv0>
 80004e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80004e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004e8:	f000 f806 	bl	80004f8 <__udivmoddi4>
 80004ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004f4:	b004      	add	sp, #16
 80004f6:	4770      	bx	lr

080004f8 <__udivmoddi4>:
 80004f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004fc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80004fe:	460c      	mov	r4, r1
 8000500:	2b00      	cmp	r3, #0
 8000502:	d14d      	bne.n	80005a0 <__udivmoddi4+0xa8>
 8000504:	428a      	cmp	r2, r1
 8000506:	460f      	mov	r7, r1
 8000508:	4684      	mov	ip, r0
 800050a:	4696      	mov	lr, r2
 800050c:	fab2 f382 	clz	r3, r2
 8000510:	d960      	bls.n	80005d4 <__udivmoddi4+0xdc>
 8000512:	b14b      	cbz	r3, 8000528 <__udivmoddi4+0x30>
 8000514:	fa02 fe03 	lsl.w	lr, r2, r3
 8000518:	f1c3 0220 	rsb	r2, r3, #32
 800051c:	409f      	lsls	r7, r3
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f202 	lsr.w	r2, r0, r2
 8000526:	4317      	orrs	r7, r2
 8000528:	ea4f 461e 	mov.w	r6, lr, lsr #16
 800052c:	fa1f f48e 	uxth.w	r4, lr
 8000530:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000534:	fbb7 f1f6 	udiv	r1, r7, r6
 8000538:	fb06 7711 	mls	r7, r6, r1, r7
 800053c:	fb01 f004 	mul.w	r0, r1, r4
 8000540:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000544:	4290      	cmp	r0, r2
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x62>
 8000548:	eb1e 0202 	adds.w	r2, lr, r2
 800054c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000550:	d202      	bcs.n	8000558 <__udivmoddi4+0x60>
 8000552:	4290      	cmp	r0, r2
 8000554:	f200 812d 	bhi.w	80007b2 <__udivmoddi4+0x2ba>
 8000558:	4639      	mov	r1, r7
 800055a:	1a12      	subs	r2, r2, r0
 800055c:	fa1f fc8c 	uxth.w	ip, ip
 8000560:	fbb2 f0f6 	udiv	r0, r2, r6
 8000564:	fb06 2210 	mls	r2, r6, r0, r2
 8000568:	fb00 f404 	mul.w	r4, r0, r4
 800056c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000570:	4564      	cmp	r4, ip
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x8e>
 8000574:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000578:	f100 32ff 	add.w	r2, r0, #4294967295
 800057c:	d202      	bcs.n	8000584 <__udivmoddi4+0x8c>
 800057e:	4564      	cmp	r4, ip
 8000580:	f200 811a 	bhi.w	80007b8 <__udivmoddi4+0x2c0>
 8000584:	4610      	mov	r0, r2
 8000586:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800058a:	ebac 0c04 	sub.w	ip, ip, r4
 800058e:	2100      	movs	r1, #0
 8000590:	b125      	cbz	r5, 800059c <__udivmoddi4+0xa4>
 8000592:	fa2c f303 	lsr.w	r3, ip, r3
 8000596:	2200      	movs	r2, #0
 8000598:	e9c5 3200 	strd	r3, r2, [r5]
 800059c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d905      	bls.n	80005b0 <__udivmoddi4+0xb8>
 80005a4:	b10d      	cbz	r5, 80005aa <__udivmoddi4+0xb2>
 80005a6:	e9c5 0100 	strd	r0, r1, [r5]
 80005aa:	2100      	movs	r1, #0
 80005ac:	4608      	mov	r0, r1
 80005ae:	e7f5      	b.n	800059c <__udivmoddi4+0xa4>
 80005b0:	fab3 f183 	clz	r1, r3
 80005b4:	2900      	cmp	r1, #0
 80005b6:	d14d      	bne.n	8000654 <__udivmoddi4+0x15c>
 80005b8:	42a3      	cmp	r3, r4
 80005ba:	f0c0 80f2 	bcc.w	80007a2 <__udivmoddi4+0x2aa>
 80005be:	4290      	cmp	r0, r2
 80005c0:	f080 80ef 	bcs.w	80007a2 <__udivmoddi4+0x2aa>
 80005c4:	4606      	mov	r6, r0
 80005c6:	4623      	mov	r3, r4
 80005c8:	4608      	mov	r0, r1
 80005ca:	2d00      	cmp	r5, #0
 80005cc:	d0e6      	beq.n	800059c <__udivmoddi4+0xa4>
 80005ce:	e9c5 6300 	strd	r6, r3, [r5]
 80005d2:	e7e3      	b.n	800059c <__udivmoddi4+0xa4>
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	f040 80a2 	bne.w	800071e <__udivmoddi4+0x226>
 80005da:	1a8a      	subs	r2, r1, r2
 80005dc:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80005e0:	fa1f f68e 	uxth.w	r6, lr
 80005e4:	2101      	movs	r1, #1
 80005e6:	fbb2 f4f7 	udiv	r4, r2, r7
 80005ea:	fb07 2014 	mls	r0, r7, r4, r2
 80005ee:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80005f2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80005f6:	fb06 f004 	mul.w	r0, r6, r4
 80005fa:	4290      	cmp	r0, r2
 80005fc:	d90f      	bls.n	800061e <__udivmoddi4+0x126>
 80005fe:	eb1e 0202 	adds.w	r2, lr, r2
 8000602:	f104 38ff 	add.w	r8, r4, #4294967295
 8000606:	bf2c      	ite	cs
 8000608:	f04f 0901 	movcs.w	r9, #1
 800060c:	f04f 0900 	movcc.w	r9, #0
 8000610:	4290      	cmp	r0, r2
 8000612:	d903      	bls.n	800061c <__udivmoddi4+0x124>
 8000614:	f1b9 0f00 	cmp.w	r9, #0
 8000618:	f000 80c8 	beq.w	80007ac <__udivmoddi4+0x2b4>
 800061c:	4644      	mov	r4, r8
 800061e:	1a12      	subs	r2, r2, r0
 8000620:	fa1f fc8c 	uxth.w	ip, ip
 8000624:	fbb2 f0f7 	udiv	r0, r2, r7
 8000628:	fb07 2210 	mls	r2, r7, r0, r2
 800062c:	fb00 f606 	mul.w	r6, r0, r6
 8000630:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000634:	4566      	cmp	r6, ip
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x152>
 8000638:	eb1e 0c0c 	adds.w	ip, lr, ip
 800063c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000640:	d202      	bcs.n	8000648 <__udivmoddi4+0x150>
 8000642:	4566      	cmp	r6, ip
 8000644:	f200 80bb 	bhi.w	80007be <__udivmoddi4+0x2c6>
 8000648:	4610      	mov	r0, r2
 800064a:	ebac 0c06 	sub.w	ip, ip, r6
 800064e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000652:	e79d      	b.n	8000590 <__udivmoddi4+0x98>
 8000654:	f1c1 0620 	rsb	r6, r1, #32
 8000658:	408b      	lsls	r3, r1
 800065a:	fa04 fe01 	lsl.w	lr, r4, r1
 800065e:	fa22 f706 	lsr.w	r7, r2, r6
 8000662:	fa20 fc06 	lsr.w	ip, r0, r6
 8000666:	40f4      	lsrs	r4, r6
 8000668:	408a      	lsls	r2, r1
 800066a:	431f      	orrs	r7, r3
 800066c:	ea4e 030c 	orr.w	r3, lr, ip
 8000670:	fa00 fe01 	lsl.w	lr, r0, r1
 8000674:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000678:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800067c:	fa1f fc87 	uxth.w	ip, r7
 8000680:	fbb4 f0f8 	udiv	r0, r4, r8
 8000684:	fb08 4410 	mls	r4, r8, r0, r4
 8000688:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800068c:	fb00 f90c 	mul.w	r9, r0, ip
 8000690:	45a1      	cmp	r9, r4
 8000692:	d90e      	bls.n	80006b2 <__udivmoddi4+0x1ba>
 8000694:	193c      	adds	r4, r7, r4
 8000696:	f100 3aff 	add.w	sl, r0, #4294967295
 800069a:	bf2c      	ite	cs
 800069c:	f04f 0b01 	movcs.w	fp, #1
 80006a0:	f04f 0b00 	movcc.w	fp, #0
 80006a4:	45a1      	cmp	r9, r4
 80006a6:	d903      	bls.n	80006b0 <__udivmoddi4+0x1b8>
 80006a8:	f1bb 0f00 	cmp.w	fp, #0
 80006ac:	f000 8093 	beq.w	80007d6 <__udivmoddi4+0x2de>
 80006b0:	4650      	mov	r0, sl
 80006b2:	eba4 0409 	sub.w	r4, r4, r9
 80006b6:	fa1f f983 	uxth.w	r9, r3
 80006ba:	fbb4 f3f8 	udiv	r3, r4, r8
 80006be:	fb08 4413 	mls	r4, r8, r3, r4
 80006c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80006c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80006ca:	45a4      	cmp	ip, r4
 80006cc:	d906      	bls.n	80006dc <__udivmoddi4+0x1e4>
 80006ce:	193c      	adds	r4, r7, r4
 80006d0:	f103 38ff 	add.w	r8, r3, #4294967295
 80006d4:	d201      	bcs.n	80006da <__udivmoddi4+0x1e2>
 80006d6:	45a4      	cmp	ip, r4
 80006d8:	d87a      	bhi.n	80007d0 <__udivmoddi4+0x2d8>
 80006da:	4643      	mov	r3, r8
 80006dc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80006e0:	eba4 040c 	sub.w	r4, r4, ip
 80006e4:	fba0 9802 	umull	r9, r8, r0, r2
 80006e8:	4544      	cmp	r4, r8
 80006ea:	46cc      	mov	ip, r9
 80006ec:	4643      	mov	r3, r8
 80006ee:	d302      	bcc.n	80006f6 <__udivmoddi4+0x1fe>
 80006f0:	d106      	bne.n	8000700 <__udivmoddi4+0x208>
 80006f2:	45ce      	cmp	lr, r9
 80006f4:	d204      	bcs.n	8000700 <__udivmoddi4+0x208>
 80006f6:	3801      	subs	r0, #1
 80006f8:	ebb9 0c02 	subs.w	ip, r9, r2
 80006fc:	eb68 0307 	sbc.w	r3, r8, r7
 8000700:	b15d      	cbz	r5, 800071a <__udivmoddi4+0x222>
 8000702:	ebbe 020c 	subs.w	r2, lr, ip
 8000706:	eb64 0403 	sbc.w	r4, r4, r3
 800070a:	fa04 f606 	lsl.w	r6, r4, r6
 800070e:	fa22 f301 	lsr.w	r3, r2, r1
 8000712:	40cc      	lsrs	r4, r1
 8000714:	431e      	orrs	r6, r3
 8000716:	e9c5 6400 	strd	r6, r4, [r5]
 800071a:	2100      	movs	r1, #0
 800071c:	e73e      	b.n	800059c <__udivmoddi4+0xa4>
 800071e:	fa02 fe03 	lsl.w	lr, r2, r3
 8000722:	f1c3 0120 	rsb	r1, r3, #32
 8000726:	fa04 f203 	lsl.w	r2, r4, r3
 800072a:	fa00 fc03 	lsl.w	ip, r0, r3
 800072e:	40cc      	lsrs	r4, r1
 8000730:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000734:	fa20 f101 	lsr.w	r1, r0, r1
 8000738:	fa1f f68e 	uxth.w	r6, lr
 800073c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000740:	430a      	orrs	r2, r1
 8000742:	fb07 4410 	mls	r4, r7, r0, r4
 8000746:	0c11      	lsrs	r1, r2, #16
 8000748:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800074c:	fb00 f406 	mul.w	r4, r0, r6
 8000750:	428c      	cmp	r4, r1
 8000752:	d90e      	bls.n	8000772 <__udivmoddi4+0x27a>
 8000754:	eb1e 0101 	adds.w	r1, lr, r1
 8000758:	f100 38ff 	add.w	r8, r0, #4294967295
 800075c:	bf2c      	ite	cs
 800075e:	f04f 0901 	movcs.w	r9, #1
 8000762:	f04f 0900 	movcc.w	r9, #0
 8000766:	428c      	cmp	r4, r1
 8000768:	d902      	bls.n	8000770 <__udivmoddi4+0x278>
 800076a:	f1b9 0f00 	cmp.w	r9, #0
 800076e:	d02c      	beq.n	80007ca <__udivmoddi4+0x2d2>
 8000770:	4640      	mov	r0, r8
 8000772:	1b09      	subs	r1, r1, r4
 8000774:	b292      	uxth	r2, r2
 8000776:	fbb1 f4f7 	udiv	r4, r1, r7
 800077a:	fb07 1114 	mls	r1, r7, r4, r1
 800077e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000782:	fb04 f106 	mul.w	r1, r4, r6
 8000786:	4291      	cmp	r1, r2
 8000788:	d907      	bls.n	800079a <__udivmoddi4+0x2a2>
 800078a:	eb1e 0202 	adds.w	r2, lr, r2
 800078e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000792:	d201      	bcs.n	8000798 <__udivmoddi4+0x2a0>
 8000794:	4291      	cmp	r1, r2
 8000796:	d815      	bhi.n	80007c4 <__udivmoddi4+0x2cc>
 8000798:	4644      	mov	r4, r8
 800079a:	1a52      	subs	r2, r2, r1
 800079c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 80007a0:	e721      	b.n	80005e6 <__udivmoddi4+0xee>
 80007a2:	1a86      	subs	r6, r0, r2
 80007a4:	eb64 0303 	sbc.w	r3, r4, r3
 80007a8:	2001      	movs	r0, #1
 80007aa:	e70e      	b.n	80005ca <__udivmoddi4+0xd2>
 80007ac:	3c02      	subs	r4, #2
 80007ae:	4472      	add	r2, lr
 80007b0:	e735      	b.n	800061e <__udivmoddi4+0x126>
 80007b2:	3902      	subs	r1, #2
 80007b4:	4472      	add	r2, lr
 80007b6:	e6d0      	b.n	800055a <__udivmoddi4+0x62>
 80007b8:	44f4      	add	ip, lr
 80007ba:	3802      	subs	r0, #2
 80007bc:	e6e3      	b.n	8000586 <__udivmoddi4+0x8e>
 80007be:	44f4      	add	ip, lr
 80007c0:	3802      	subs	r0, #2
 80007c2:	e742      	b.n	800064a <__udivmoddi4+0x152>
 80007c4:	3c02      	subs	r4, #2
 80007c6:	4472      	add	r2, lr
 80007c8:	e7e7      	b.n	800079a <__udivmoddi4+0x2a2>
 80007ca:	3802      	subs	r0, #2
 80007cc:	4471      	add	r1, lr
 80007ce:	e7d0      	b.n	8000772 <__udivmoddi4+0x27a>
 80007d0:	3b02      	subs	r3, #2
 80007d2:	443c      	add	r4, r7
 80007d4:	e782      	b.n	80006dc <__udivmoddi4+0x1e4>
 80007d6:	3802      	subs	r0, #2
 80007d8:	443c      	add	r4, r7
 80007da:	e76a      	b.n	80006b2 <__udivmoddi4+0x1ba>

080007dc <__aeabi_idiv0>:
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop

080007e0 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af02      	add	r7, sp, #8
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80007ec:	2334      	movs	r3, #52	@ 0x34
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000824 <tx_application_define+0x44>)
 80007f6:	490c      	ldr	r1, [pc, #48]	@ (8000828 <tx_application_define+0x48>)
 80007f8:	480c      	ldr	r0, [pc, #48]	@ (800082c <tx_application_define+0x4c>)
 80007fa:	f00a fc01 	bl	800b000 <_txe_byte_pool_create>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d10a      	bne.n	800081a <tx_application_define+0x3a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000804:	4b09      	ldr	r3, [pc, #36]	@ (800082c <tx_application_define+0x4c>)
 8000806:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000808:	68b8      	ldr	r0, [r7, #8]
 800080a:	f000 f811 	bl	8000830 <App_ThreadX_Init>
 800080e:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000816:	bf00      	nop
 8000818:	e7fd      	b.n	8000816 <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000088 	.word	0x20000088
 8000828:	0800c65c 	.word	0x0800c65c
 800082c:	20000488 	.word	0x20000488

08000830 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	@ 0x30
 8000834:	af08      	add	r7, sp, #32
 8000836:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */

  tx_thread_create(&thread_ptr1, "LD1_thread", LD1_thread_entry, 0x1234, thread_stack1, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);
 800083c:	23b0      	movs	r3, #176	@ 0xb0
 800083e:	9306      	str	r3, [sp, #24]
 8000840:	2301      	movs	r3, #1
 8000842:	9305      	str	r3, [sp, #20]
 8000844:	2301      	movs	r3, #1
 8000846:	9304      	str	r3, [sp, #16]
 8000848:	230f      	movs	r3, #15
 800084a:	9303      	str	r3, [sp, #12]
 800084c:	230f      	movs	r3, #15
 800084e:	9302      	str	r3, [sp, #8]
 8000850:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	4b3a      	ldr	r3, [pc, #232]	@ (8000940 <App_ThreadX_Init+0x110>)
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	f241 2334 	movw	r3, #4660	@ 0x1234
 800085e:	4a39      	ldr	r2, [pc, #228]	@ (8000944 <App_ThreadX_Init+0x114>)
 8000860:	4939      	ldr	r1, [pc, #228]	@ (8000948 <App_ThreadX_Init+0x118>)
 8000862:	483a      	ldr	r0, [pc, #232]	@ (800094c <App_ThreadX_Init+0x11c>)
 8000864:	f00a fea6 	bl	800b5b4 <_txe_thread_create>
  tx_thread_create(&thread_ptr2, "LD2_thread", LD2_thread_entry, 0x1234, thread_stack2, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);
 8000868:	23b0      	movs	r3, #176	@ 0xb0
 800086a:	9306      	str	r3, [sp, #24]
 800086c:	2301      	movs	r3, #1
 800086e:	9305      	str	r3, [sp, #20]
 8000870:	2301      	movs	r3, #1
 8000872:	9304      	str	r3, [sp, #16]
 8000874:	230f      	movs	r3, #15
 8000876:	9303      	str	r3, [sp, #12]
 8000878:	230f      	movs	r3, #15
 800087a:	9302      	str	r3, [sp, #8]
 800087c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	4b33      	ldr	r3, [pc, #204]	@ (8000950 <App_ThreadX_Init+0x120>)
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	f241 2334 	movw	r3, #4660	@ 0x1234
 800088a:	4a32      	ldr	r2, [pc, #200]	@ (8000954 <App_ThreadX_Init+0x124>)
 800088c:	4932      	ldr	r1, [pc, #200]	@ (8000958 <App_ThreadX_Init+0x128>)
 800088e:	4833      	ldr	r0, [pc, #204]	@ (800095c <App_ThreadX_Init+0x12c>)
 8000890:	f00a fe90 	bl	800b5b4 <_txe_thread_create>
  tx_thread_create(&thread_ptr3, "LD3_thread", LD3_thread_entry, 0x1234, thread_stack3, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);
 8000894:	23b0      	movs	r3, #176	@ 0xb0
 8000896:	9306      	str	r3, [sp, #24]
 8000898:	2301      	movs	r3, #1
 800089a:	9305      	str	r3, [sp, #20]
 800089c:	2301      	movs	r3, #1
 800089e:	9304      	str	r3, [sp, #16]
 80008a0:	230f      	movs	r3, #15
 80008a2:	9303      	str	r3, [sp, #12]
 80008a4:	230f      	movs	r3, #15
 80008a6:	9302      	str	r3, [sp, #8]
 80008a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008ac:	9301      	str	r3, [sp, #4]
 80008ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000960 <App_ThreadX_Init+0x130>)
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	f241 2334 	movw	r3, #4660	@ 0x1234
 80008b6:	4a2b      	ldr	r2, [pc, #172]	@ (8000964 <App_ThreadX_Init+0x134>)
 80008b8:	492b      	ldr	r1, [pc, #172]	@ (8000968 <App_ThreadX_Init+0x138>)
 80008ba:	482c      	ldr	r0, [pc, #176]	@ (800096c <App_ThreadX_Init+0x13c>)
 80008bc:	f00a fe7a 	bl	800b5b4 <_txe_thread_create>

  tx_semaphore_create(&semaphore_0,"semaphore_0",0);
 80008c0:	231c      	movs	r3, #28
 80008c2:	2200      	movs	r2, #0
 80008c4:	492a      	ldr	r1, [pc, #168]	@ (8000970 <App_ThreadX_Init+0x140>)
 80008c6:	482b      	ldr	r0, [pc, #172]	@ (8000974 <App_ThreadX_Init+0x144>)
 80008c8:	f00a fd7e 	bl	800b3c8 <_txe_semaphore_create>

  tx_queue_create(&temp_queue,"TEMP Queue", 1, queue_stack, 256);
 80008cc:	2338      	movs	r3, #56	@ 0x38
 80008ce:	9301      	str	r3, [sp, #4]
 80008d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	4b28      	ldr	r3, [pc, #160]	@ (8000978 <App_ThreadX_Init+0x148>)
 80008d8:	2201      	movs	r2, #1
 80008da:	4928      	ldr	r1, [pc, #160]	@ (800097c <App_ThreadX_Init+0x14c>)
 80008dc:	4828      	ldr	r0, [pc, #160]	@ (8000980 <App_ThreadX_Init+0x150>)
 80008de:	f00a fc2f 	bl	800b140 <_txe_queue_create>

  tx_thread_create(&temp_thread_ptr, "TEMP Thread", temp_thread_entry, 0, temp_thread_stack, TEMP_THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);
 80008e2:	23b0      	movs	r3, #176	@ 0xb0
 80008e4:	9306      	str	r3, [sp, #24]
 80008e6:	2301      	movs	r3, #1
 80008e8:	9305      	str	r3, [sp, #20]
 80008ea:	2301      	movs	r3, #1
 80008ec:	9304      	str	r3, [sp, #16]
 80008ee:	230f      	movs	r3, #15
 80008f0:	9303      	str	r3, [sp, #12]
 80008f2:	230f      	movs	r3, #15
 80008f4:	9302      	str	r3, [sp, #8]
 80008f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008fa:	9301      	str	r3, [sp, #4]
 80008fc:	4b21      	ldr	r3, [pc, #132]	@ (8000984 <App_ThreadX_Init+0x154>)
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	2300      	movs	r3, #0
 8000902:	4a21      	ldr	r2, [pc, #132]	@ (8000988 <App_ThreadX_Init+0x158>)
 8000904:	4921      	ldr	r1, [pc, #132]	@ (800098c <App_ThreadX_Init+0x15c>)
 8000906:	4822      	ldr	r0, [pc, #136]	@ (8000990 <App_ThreadX_Init+0x160>)
 8000908:	f00a fe54 	bl	800b5b4 <_txe_thread_create>
  tx_thread_create(&uart_thread_ptr, "UART Thread", uart_thread_entry, 0, uart_thread_stack, UART_THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);
 800090c:	23b0      	movs	r3, #176	@ 0xb0
 800090e:	9306      	str	r3, [sp, #24]
 8000910:	2301      	movs	r3, #1
 8000912:	9305      	str	r3, [sp, #20]
 8000914:	2301      	movs	r3, #1
 8000916:	9304      	str	r3, [sp, #16]
 8000918:	230f      	movs	r3, #15
 800091a:	9303      	str	r3, [sp, #12]
 800091c:	230f      	movs	r3, #15
 800091e:	9302      	str	r3, [sp, #8]
 8000920:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000924:	9301      	str	r3, [sp, #4]
 8000926:	4b1b      	ldr	r3, [pc, #108]	@ (8000994 <App_ThreadX_Init+0x164>)
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	2300      	movs	r3, #0
 800092c:	4a1a      	ldr	r2, [pc, #104]	@ (8000998 <App_ThreadX_Init+0x168>)
 800092e:	491b      	ldr	r1, [pc, #108]	@ (800099c <App_ThreadX_Init+0x16c>)
 8000930:	481b      	ldr	r0, [pc, #108]	@ (80009a0 <App_ThreadX_Init+0x170>)
 8000932:	f00a fe3f 	bl	800b5b4 <_txe_thread_create>

  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000936:	68fb      	ldr	r3, [r7, #12]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	200004bc 	.word	0x200004bc
 8000944:	080009b1 	.word	0x080009b1
 8000948:	0800c670 	.word	0x0800c670
 800094c:	200008bc 	.word	0x200008bc
 8000950:	2000096c 	.word	0x2000096c
 8000954:	080009d1 	.word	0x080009d1
 8000958:	0800c67c 	.word	0x0800c67c
 800095c:	20000d6c 	.word	0x20000d6c
 8000960:	20000e1c 	.word	0x20000e1c
 8000964:	080009f1 	.word	0x080009f1
 8000968:	0800c688 	.word	0x0800c688
 800096c:	2000121c 	.word	0x2000121c
 8000970:	0800c694 	.word	0x0800c694
 8000974:	200012cc 	.word	0x200012cc
 8000978:	20001c80 	.word	0x20001c80
 800097c:	0800c6a0 	.word	0x0800c6a0
 8000980:	20001448 	.word	0x20001448
 8000984:	20001480 	.word	0x20001480
 8000988:	08000a5d 	.word	0x08000a5d
 800098c:	0800c6ac 	.word	0x0800c6ac
 8000990:	200012e8 	.word	0x200012e8
 8000994:	20001880 	.word	0x20001880
 8000998:	08000ac9 	.word	0x08000ac9
 800099c:	0800c6b8 	.word	0x0800c6b8
 80009a0:	20001398 	.word	0x20001398

080009a4 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80009a8:	f008 fe08 	bl	80095bc <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <LD1_thread_entry>:

/* USER CODE BEGIN 1 */
VOID LD1_thread_entry (ULONG initial_input){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80009b8:	2101      	movs	r1, #1
 80009ba:	4804      	ldr	r0, [pc, #16]	@ (80009cc <LD1_thread_entry+0x1c>)
 80009bc:	f001 faae 	bl	8001f1c <HAL_GPIO_TogglePin>
		tx_thread_sleep(100);
 80009c0:	2064      	movs	r0, #100	@ 0x64
 80009c2:	f009 fd87 	bl	800a4d4 <_tx_thread_sleep>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80009c6:	bf00      	nop
 80009c8:	e7f6      	b.n	80009b8 <LD1_thread_entry+0x8>
 80009ca:	bf00      	nop
 80009cc:	42020400 	.word	0x42020400

080009d0 <LD2_thread_entry>:
	}

}
VOID LD2_thread_entry (ULONG initial_input){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80009d8:	2110      	movs	r1, #16
 80009da:	4804      	ldr	r0, [pc, #16]	@ (80009ec <LD2_thread_entry+0x1c>)
 80009dc:	f001 fa9e 	bl	8001f1c <HAL_GPIO_TogglePin>
		tx_thread_sleep(200);
 80009e0:	20c8      	movs	r0, #200	@ 0xc8
 80009e2:	f009 fd77 	bl	800a4d4 <_tx_thread_sleep>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80009e6:	bf00      	nop
 80009e8:	e7f6      	b.n	80009d8 <LD2_thread_entry+0x8>
 80009ea:	bf00      	nop
 80009ec:	42021400 	.word	0x42021400

080009f0 <LD3_thread_entry>:
	}

}
VOID LD3_thread_entry (ULONG initial_input){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	@ 0x28
 80009f4:	af02      	add	r7, sp, #8
 80009f6:	6078      	str	r0, [r7, #4]
	ULONG suspended_count;
	TX_SEMAPHORE *next_semaphore;

	while(1){

		tx_semaphore_get(&semaphore_0, TX_WAIT_FOREVER);
 80009f8:	f04f 31ff 	mov.w	r1, #4294967295
 80009fc:	4813      	ldr	r0, [pc, #76]	@ (8000a4c <LD3_thread_entry+0x5c>)
 80009fe:	f00a fd79 	bl	800b4f4 <_txe_semaphore_get>

		printf("User Button Pressed\n\r");
 8000a02:	4813      	ldr	r0, [pc, #76]	@ (8000a50 <LD3_thread_entry+0x60>)
 8000a04:	f00b f84a 	bl	800ba9c <iprintf>
		UINT status = _tx_semaphore_info_get(&semaphore_0,
 8000a08:	f107 0114 	add.w	r1, r7, #20
 8000a0c:	f107 0218 	add.w	r2, r7, #24
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	9301      	str	r3, [sp, #4]
 8000a16:	f107 0310 	add.w	r3, r7, #16
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	2100      	movs	r1, #0
 8000a20:	480a      	ldr	r0, [pc, #40]	@ (8000a4c <LD3_thread_entry+0x5c>)
 8000a22:	f009 fb41 	bl	800a0a8 <_tx_semaphore_info_get>
 8000a26:	61f8      	str	r0, [r7, #28]
				&current_value,
				&first_suspended,
				&suspended_count,
				&next_semaphore);

		if (status == TX_SUCCESS){
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d104      	bne.n	8000a38 <LD3_thread_entry+0x48>
			printf("Current Value: %lu\n\r\n\n", current_value);
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	4619      	mov	r1, r3
 8000a32:	4808      	ldr	r0, [pc, #32]	@ (8000a54 <LD3_thread_entry+0x64>)
 8000a34:	f00b f832 	bl	800ba9c <iprintf>
		}

		tx_thread_sleep(50);
 8000a38:	2032      	movs	r0, #50	@ 0x32
 8000a3a:	f009 fd4b 	bl	800a4d4 <_tx_thread_sleep>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);	//Turn of LD3
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2110      	movs	r1, #16
 8000a42:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <LD3_thread_entry+0x68>)
 8000a44:	f001 fa52 	bl	8001eec <HAL_GPIO_WritePin>
	while(1){
 8000a48:	e7d6      	b.n	80009f8 <LD3_thread_entry+0x8>
 8000a4a:	bf00      	nop
 8000a4c:	200012cc 	.word	0x200012cc
 8000a50:	0800c6c4 	.word	0x0800c6c4
 8000a54:	0800c6dc 	.word	0x0800c6dc
 8000a58:	42021800 	.word	0x42021800

08000a5c <temp_thread_entry>:
	}
}


void temp_thread_entry(ULONG thread_input){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

	int32_t Temperature;

	while(1){
	if(HAL_DTS_Start(&hdts)!= HAL_OK){
 8000a64:	4815      	ldr	r0, [pc, #84]	@ (8000abc <temp_thread_entry+0x60>)
 8000a66:	f000 ffee 	bl	8001a46 <HAL_DTS_Start>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <temp_thread_entry+0x18>
			     /* DTS start Error */
			     Error_Handler();
 8000a70:	f000 fb02 	bl	8001078 <Error_Handler>
			   }

		  /* Get temperature in deg C */
		 if(HAL_DTS_GetTemperature(&hdts, &Temperature)!= HAL_OK){
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4810      	ldr	r0, [pc, #64]	@ (8000abc <temp_thread_entry+0x60>)
 8000a7c:	f001 f867 	bl	8001b4e <HAL_DTS_GetTemperature>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <temp_thread_entry+0x2e>
			      /* DTS GetTemperature Error */
			      Error_Handler();
 8000a86:	f000 faf7 	bl	8001078 <Error_Handler>
			  }

		  printf("From Temp Thread: %lu\r\n", Temperature);
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480c      	ldr	r0, [pc, #48]	@ (8000ac0 <temp_thread_entry+0x64>)
 8000a90:	f00b f804 	bl	800ba9c <iprintf>

		   // Send the TEMP value to the UART thread
		        tx_queue_send(&temp_queue, &Temperature, TX_WAIT_FOREVER);
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	f04f 32ff 	mov.w	r2, #4294967295
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4809      	ldr	r0, [pc, #36]	@ (8000ac4 <temp_thread_entry+0x68>)
 8000aa0:	f00a fc48 	bl	800b334 <_txe_queue_send>

		  if(HAL_DTS_Stop(&hdts) != HAL_OK){
 8000aa4:	4805      	ldr	r0, [pc, #20]	@ (8000abc <temp_thread_entry+0x60>)
 8000aa6:	f001 f81b 	bl	8001ae0 <HAL_DTS_Stop>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <temp_thread_entry+0x58>
				  Error_Handler();
 8000ab0:	f000 fae2 	bl	8001078 <Error_Handler>
			  }

        // Delay for a while (e.g., 1 second)
        tx_thread_sleep(100);
 8000ab4:	2064      	movs	r0, #100	@ 0x64
 8000ab6:	f009 fd0d 	bl	800a4d4 <_tx_thread_sleep>
	if(HAL_DTS_Start(&hdts)!= HAL_OK){
 8000aba:	e7d3      	b.n	8000a64 <temp_thread_entry+0x8>
 8000abc:	20002080 	.word	0x20002080
 8000ac0:	0800c6f4 	.word	0x0800c6f4
 8000ac4:	20001448 	.word	0x20001448

08000ac8 <uart_thread_entry>:
	}
}

void uart_thread_entry(ULONG thread_input){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]


	    while (1) {

	    	// Wait to receive data from the TEMP thread
	        if (tx_queue_receive(&temp_queue, &receivedValue, TX_WAIT_FOREVER) == TX_SUCCESS) {
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4806      	ldr	r0, [pc, #24]	@ (8000af4 <uart_thread_entry+0x2c>)
 8000adc:	f00a fbe0 	bl	800b2a0 <_txe_queue_receive>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d1f4      	bne.n	8000ad0 <uart_thread_entry+0x8>

	        	//printf("From Temp Thread: %lu\r\n", Temperature);
	        	 printf("From UART Thread: %lu\r\n", receivedValue);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4803      	ldr	r0, [pc, #12]	@ (8000af8 <uart_thread_entry+0x30>)
 8000aec:	f00a ffd6 	bl	800ba9c <iprintf>
	        if (tx_queue_receive(&temp_queue, &receivedValue, TX_WAIT_FOREVER) == TX_SUCCESS) {
 8000af0:	e7ee      	b.n	8000ad0 <uart_thread_entry+0x8>
 8000af2:	bf00      	nop
 8000af4:	20001448 	.word	0x20001448
 8000af8:	0800c70c 	.word	0x0800c70c

08000afc <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Code for enabling printf -------------------------------------------------*/
#define USE_UART_PRINT
void __io_putchar(char ch) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
#ifdef USE_UART_PRINT
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 10);
 8000b06:	1df9      	adds	r1, r7, #7
 8000b08:	230a      	movs	r3, #10
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4803      	ldr	r0, [pc, #12]	@ (8000b1c <__io_putchar+0x20>)
 8000b0e:	f007 fecd 	bl	80088ac <HAL_UART_Transmit>
#else
	ITM_SendChar(ch);
#endif
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200020a4 	.word	0x200020a4

08000b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b24:	f000 fd54 	bl	80015d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b28:	f000 f81e 	bl	8000b68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b2c:	f000 f90c 	bl	8000d48 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000b30:	f000 f8aa 	bl	8000c88 <MX_ICACHE_Init>
  MX_USART3_UART_Init();
 8000b34:	f000 f8bc 	bl	8000cb0 <MX_USART3_UART_Init>
  MX_DTS_Init();
 8000b38:	f000 f87c 	bl	8000c34 <MX_DTS_Init>
  /* USER CODE BEGIN 2 */

  //Clear TerraTerm Terminal
  printf("\033[2J");
 8000b3c:	4807      	ldr	r0, [pc, #28]	@ (8000b5c <main+0x3c>)
 8000b3e:	f00a ffad 	bl	800ba9c <iprintf>
  fflush(stdout);
 8000b42:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <main+0x40>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f00a fed1 	bl	800b8f0 <fflush>

  printf("\r\nWaiting for USER_BTN to be pressed to set Semaphore\n\r");
 8000b4e:	4805      	ldr	r0, [pc, #20]	@ (8000b64 <main+0x44>)
 8000b50:	f00a ffa4 	bl	800ba9c <iprintf>
  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000b54:	f7ff ff26 	bl	80009a4 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <main+0x38>
 8000b5c:	0800c724 	.word	0x0800c724
 8000b60:	2000001c 	.word	0x2000001c
 8000b64:	0800c72c 	.word	0x0800c72c

08000b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b09c      	sub	sp, #112	@ 0x70
 8000b6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6e:	f107 0320 	add.w	r3, r7, #32
 8000b72:	2250      	movs	r2, #80	@ 0x50
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f00a ffe5 	bl	800bb46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b7c:	f107 0308 	add.w	r3, r7, #8
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
 8000b8c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b8e:	4b28      	ldr	r3, [pc, #160]	@ (8000c30 <SystemClock_Config+0xc8>)
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	4a27      	ldr	r2, [pc, #156]	@ (8000c30 <SystemClock_Config+0xc8>)
 8000b94:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000b98:	6113      	str	r3, [r2, #16]
 8000b9a:	4b25      	ldr	r3, [pc, #148]	@ (8000c30 <SystemClock_Config+0xc8>)
 8000b9c:	691b      	ldr	r3, [r3, #16]
 8000b9e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ba6:	bf00      	nop
 8000ba8:	4b21      	ldr	r3, [pc, #132]	@ (8000c30 <SystemClock_Config+0xc8>)
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	f003 0308 	and.w	r3, r3, #8
 8000bb0:	2b08      	cmp	r3, #8
 8000bb2:	d1f9      	bne.n	8000ba8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bb8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000bca:	2319      	movs	r3, #25
 8000bcc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000bda:	230c      	movs	r3, #12
 8000bdc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be6:	f107 0320 	add.w	r3, r7, #32
 8000bea:	4618      	mov	r0, r3
 8000bec:	f001 fa12 	bl	8002014 <HAL_RCC_OscConfig>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000bf6:	f000 fa3f 	bl	8001078 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfa:	231f      	movs	r3, #31
 8000bfc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c12:	f107 0308 	add.w	r3, r7, #8
 8000c16:	2104      	movs	r1, #4
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f001 fe33 	bl	8002884 <HAL_RCC_ClockConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c24:	f000 fa28 	bl	8001078 <Error_Handler>
  }
}
 8000c28:	bf00      	nop
 8000c2a:	3770      	adds	r7, #112	@ 0x70
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	44020800 	.word	0x44020800

08000c34 <MX_DTS_Init>:
  * @brief DTS Initialization Function
  * @param None
  * @retval None
  */
static void MX_DTS_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END DTS_Init 0 */

  /* USER CODE BEGIN DTS_Init 1 */

  /* USER CODE END DTS_Init 1 */
  hdts.Instance = DTS;
 8000c38:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <MX_DTS_Init+0x4c>)
 8000c3a:	4a12      	ldr	r2, [pc, #72]	@ (8000c84 <MX_DTS_Init+0x50>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hdts.Init.QuickMeasure = DTS_QUICKMEAS_DISABLE;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <MX_DTS_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	605a      	str	r2, [r3, #4]
  hdts.Init.RefClock = DTS_REFCLKSEL_PCLK;
 8000c44:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <MX_DTS_Init+0x4c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  hdts.Init.TriggerInput = DTS_TRIGGER_HW_NONE;
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c80 <MX_DTS_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	60da      	str	r2, [r3, #12]
  hdts.Init.SamplingTime = DTS_SMP_TIME_10_CYCLE;
 8000c50:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <MX_DTS_Init+0x4c>)
 8000c52:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000c56:	611a      	str	r2, [r3, #16]
  hdts.Init.Divider = 100;
 8000c58:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <MX_DTS_Init+0x4c>)
 8000c5a:	2264      	movs	r2, #100	@ 0x64
 8000c5c:	615a      	str	r2, [r3, #20]
  hdts.Init.HighThreshold = 0x0;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <MX_DTS_Init+0x4c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  hdts.Init.LowThreshold = 0x0;
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <MX_DTS_Init+0x4c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
  if (HAL_DTS_Init(&hdts) != HAL_OK)
 8000c6a:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <MX_DTS_Init+0x4c>)
 8000c6c:	f000 fe54 	bl	8001918 <HAL_DTS_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_DTS_Init+0x46>
  {
    Error_Handler();
 8000c76:	f000 f9ff 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN DTS_Init 2 */

  /* USER CODE END DTS_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20002080 	.word	0x20002080
 8000c84:	40008c00 	.word	0x40008c00

08000c88 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f001 f991 	bl	8001fb4 <HAL_ICACHE_ConfigAssociativityMode>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000c98:	f000 f9ee 	bl	8001078 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000c9c:	f001 f9aa 	bl	8001ff4 <HAL_ICACHE_Enable>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000ca6:	f000 f9e7 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cb4:	4b22      	ldr	r3, [pc, #136]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cb6:	4a23      	ldr	r2, [pc, #140]	@ (8000d44 <MX_USART3_UART_Init+0x94>)
 8000cb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cba:	4b21      	ldr	r3, [pc, #132]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cce:	4b1c      	ldr	r3, [pc, #112]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cda:	4b19      	ldr	r3, [pc, #100]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce0:	4b17      	ldr	r3, [pc, #92]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ce6:	4b16      	ldr	r3, [pc, #88]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cec:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf2:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cf8:	4811      	ldr	r0, [pc, #68]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cfa:	f007 fd87 	bl	800880c <HAL_UART_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d04:	f000 f9b8 	bl	8001078 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d08:	2100      	movs	r1, #0
 8000d0a:	480d      	ldr	r0, [pc, #52]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000d0c:	f008 fab2 	bl	8009274 <HAL_UARTEx_SetTxFifoThreshold>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d16:	f000 f9af 	bl	8001078 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4808      	ldr	r0, [pc, #32]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000d1e:	f008 fae7 	bl	80092f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d28:	f000 f9a6 	bl	8001078 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d2c:	4804      	ldr	r0, [pc, #16]	@ (8000d40 <MX_USART3_UART_Init+0x90>)
 8000d2e:	f008 fa68 	bl	8009202 <HAL_UARTEx_DisableFifoMode>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d38:	f000 f99e 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	200020a4 	.word	0x200020a4
 8000d44:	40004800 	.word	0x40004800

08000d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08e      	sub	sp, #56	@ 0x38
 8000d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
 8000d5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d5e:	4ba9      	ldr	r3, [pc, #676]	@ (8001004 <MX_GPIO_Init+0x2bc>)
 8000d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d64:	4aa7      	ldr	r2, [pc, #668]	@ (8001004 <MX_GPIO_Init+0x2bc>)
 8000d66:	f043 0310 	orr.w	r3, r3, #16
 8000d6a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d6e:	4ba5      	ldr	r3, [pc, #660]	@ (8001004 <MX_GPIO_Init+0x2bc>)
 8000d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d74:	f003 0310 	and.w	r3, r3, #16
 8000d78:	623b      	str	r3, [r7, #32]
 8000d7a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7c:	4ba1      	ldr	r3, [pc, #644]	@ (8001004 <MX_GPIO_Init+0x2bc>)
 8000d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d82:	4aa0      	ldr	r2, [pc, #640]	@ (8001004 <MX_GPIO_Init+0x2bc>)
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d8c:	4b9d      	ldr	r3, [pc, #628]	@ (8001004 <MX_GPIO_Init+0x2bc>)
 8000d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	61fb      	str	r3, [r7, #28]
 8000d98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d9a:	4b9a      	ldr	r3, [pc, #616]	@ (8001004 <MX_GPIO_Init+0x2bc>)
 8000d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000da0:	4a98      	ldr	r2, [pc, #608]	@ (8001004 <MX_GPIO_Init+0x2bc>)
 8000da2:	f043 0320 	orr.w	r3, r3, #32
 8000da6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000daa:	4b96      	ldr	r3, [pc, #600]	@ (8001004 <MX_GPIO_Init+0x2bc>)
 8000dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000db0:	f003 0320 	and.w	r3, r3, #32
 8000db4:	61bb      	str	r3, [r7, #24]
 8000db6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db8:	4b92      	ldr	r3, [pc, #584]	@ (8001004 <MX_GPIO_Init+0x2bc>)
 8000dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dbe:	4a91      	ldr	r2, [pc, #580]	@ (8001004 <MX_GPIO_Init+0x2bc>)
 8000dc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dc4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000dc8:	4b8e      	ldr	r3, [pc, #568]	@ (8001004 <MX_GPIO_Init+0x2bc>)
 8000dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	4b8b      	ldr	r3, [pc, #556]	@ (8001004 <MX_GPIO_Init+0x2bc>)
 8000dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ddc:	4a89      	ldr	r2, [pc, #548]	@ (8001004 <MX_GPIO_Init+0x2bc>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000de6:	4b87      	ldr	r3, [pc, #540]	@ (8001004 <MX_GPIO_Init+0x2bc>)
 8000de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df4:	4b83      	ldr	r3, [pc, #524]	@ (8001004 <MX_GPIO_Init+0x2bc>)
 8000df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dfa:	4a82      	ldr	r2, [pc, #520]	@ (8001004 <MX_GPIO_Init+0x2bc>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e04:	4b7f      	ldr	r3, [pc, #508]	@ (8001004 <MX_GPIO_Init+0x2bc>)
 8000e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e12:	4b7c      	ldr	r3, [pc, #496]	@ (8001004 <MX_GPIO_Init+0x2bc>)
 8000e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e18:	4a7a      	ldr	r2, [pc, #488]	@ (8001004 <MX_GPIO_Init+0x2bc>)
 8000e1a:	f043 0308 	orr.w	r3, r3, #8
 8000e1e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e22:	4b78      	ldr	r3, [pc, #480]	@ (8001004 <MX_GPIO_Init+0x2bc>)
 8000e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e28:	f003 0308 	and.w	r3, r3, #8
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e30:	4b74      	ldr	r3, [pc, #464]	@ (8001004 <MX_GPIO_Init+0x2bc>)
 8000e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e36:	4a73      	ldr	r2, [pc, #460]	@ (8001004 <MX_GPIO_Init+0x2bc>)
 8000e38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e3c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e40:	4b70      	ldr	r3, [pc, #448]	@ (8001004 <MX_GPIO_Init+0x2bc>)
 8000e42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2110      	movs	r1, #16
 8000e52:	486d      	ldr	r0, [pc, #436]	@ (8001008 <MX_GPIO_Init+0x2c0>)
 8000e54:	f001 f84a 	bl	8001eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	486b      	ldr	r0, [pc, #428]	@ (800100c <MX_GPIO_Init+0x2c4>)
 8000e5e:	f001 f845 	bl	8001eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2110      	movs	r1, #16
 8000e66:	486a      	ldr	r0, [pc, #424]	@ (8001010 <MX_GPIO_Init+0x2c8>)
 8000e68:	f001 f840 	bl	8001eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000e6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e72:	4b68      	ldr	r3, [pc, #416]	@ (8001014 <MX_GPIO_Init+0x2cc>)
 8000e74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4865      	ldr	r0, [pc, #404]	@ (8001018 <MX_GPIO_Init+0x2d0>)
 8000e82:	f000 fee1 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e86:	2310      	movs	r3, #16
 8000e88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	485a      	ldr	r0, [pc, #360]	@ (8001008 <MX_GPIO_Init+0x2c0>)
 8000e9e:	f000 fed3 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ea2:	2332      	movs	r3, #50	@ 0x32
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb2:	230b      	movs	r3, #11
 8000eb4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4856      	ldr	r0, [pc, #344]	@ (8001018 <MX_GPIO_Init+0x2d0>)
 8000ebe:	f000 fec3 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ec2:	2386      	movs	r3, #134	@ 0x86
 8000ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed2:	230b      	movs	r3, #11
 8000ed4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eda:	4619      	mov	r1, r3
 8000edc:	484f      	ldr	r0, [pc, #316]	@ (800101c <MX_GPIO_Init+0x2d4>)
 8000ede:	f000 feb3 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000ee2:	2310      	movs	r3, #16
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4849      	ldr	r0, [pc, #292]	@ (800101c <MX_GPIO_Init+0x2d4>)
 8000ef6:	f000 fea7 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000efa:	2301      	movs	r3, #1
 8000efc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f0e:	4619      	mov	r1, r3
 8000f10:	483e      	ldr	r0, [pc, #248]	@ (800100c <MX_GPIO_Init+0x2c4>)
 8000f12:	f000 fe99 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 8000f16:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4838      	ldr	r0, [pc, #224]	@ (800100c <MX_GPIO_Init+0x2c4>)
 8000f2c:	f000 fe8c 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f42:	230b      	movs	r3, #11
 8000f44:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	482f      	ldr	r0, [pc, #188]	@ (800100c <MX_GPIO_Init+0x2c4>)
 8000f4e:	f000 fe7b 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000f52:	2310      	movs	r3, #16
 8000f54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f66:	4619      	mov	r1, r3
 8000f68:	4829      	ldr	r0, [pc, #164]	@ (8001010 <MX_GPIO_Init+0x2c8>)
 8000f6a:	f000 fe6d 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000f6e:	2380      	movs	r3, #128	@ 0x80
 8000f70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f72:	4b28      	ldr	r3, [pc, #160]	@ (8001014 <MX_GPIO_Init+0x2cc>)
 8000f74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4823      	ldr	r0, [pc, #140]	@ (8001010 <MX_GPIO_Init+0x2c8>)
 8000f82:	f000 fe61 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000f86:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000f98:	230a      	movs	r3, #10
 8000f9a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	481e      	ldr	r0, [pc, #120]	@ (800101c <MX_GPIO_Init+0x2d4>)
 8000fa4:	f000 fe50 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8000fa8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fba:	230b      	movs	r3, #11
 8000fbc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4812      	ldr	r0, [pc, #72]	@ (8001010 <MX_GPIO_Init+0x2c8>)
 8000fc6:	f000 fe3f 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000fca:	23c0      	movs	r3, #192	@ 0xc0
 8000fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000fda:	2308      	movs	r3, #8
 8000fdc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4809      	ldr	r0, [pc, #36]	@ (800100c <MX_GPIO_Init+0x2c4>)
 8000fe6:	f000 fe2f 	bl	8001c48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	2018      	movs	r0, #24
 8000ff0:	f000 fc12 	bl	8001818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000ff4:	2018      	movs	r0, #24
 8000ff6:	f000 fc29 	bl	800184c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ffa:	bf00      	nop
 8000ffc:	3738      	adds	r7, #56	@ 0x38
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	44020c00 	.word	0x44020c00
 8001008:	42021400 	.word	0x42021400
 800100c:	42020400 	.word	0x42020400
 8001010:	42021800 	.word	0x42021800
 8001014:	10110000 	.word	0x10110000
 8001018:	42020800 	.word	0x42020800
 800101c:	42020000 	.word	0x42020000

08001020 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_BTN_Pin){
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001030:	d107      	bne.n	8001042 <HAL_GPIO_EXTI_Rising_Callback+0x22>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001032:	2201      	movs	r2, #1
 8001034:	2110      	movs	r1, #16
 8001036:	4805      	ldr	r0, [pc, #20]	@ (800104c <HAL_GPIO_EXTI_Rising_Callback+0x2c>)
 8001038:	f000 ff58 	bl	8001eec <HAL_GPIO_WritePin>
		tx_semaphore_put(&semaphore_0);
 800103c:	4804      	ldr	r0, [pc, #16]	@ (8001050 <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 800103e:	f00a fa9b 	bl	800b578 <_txe_semaphore_put>
	}
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	42021800 	.word	0x42021800
 8001050:	200012cc 	.word	0x200012cc

08001054 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d101      	bne.n	800106a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001066:	f000 fadb 	bl	8001620 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40001000 	.word	0x40001000

08001078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800107c:	b672      	cpsid	i
}
 800107e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <Error_Handler+0x8>

08001084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <HAL_DTS_MspInit>:
* This function configures the hardware resources used in this example
* @param hdts: DTS handle pointer
* @retval None
*/
void HAL_DTS_MspInit(DTS_HandleTypeDef* hdts)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if(hdts->Instance==DTS)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0b      	ldr	r2, [pc, #44]	@ (80010d0 <HAL_DTS_MspInit+0x3c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d10e      	bne.n	80010c4 <HAL_DTS_MspInit+0x30>
  {
  /* USER CODE BEGIN DTS_MspInit 0 */

  /* USER CODE END DTS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DTS_CLK_ENABLE();
 80010a6:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <HAL_DTS_MspInit+0x40>)
 80010a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80010ac:	4a09      	ldr	r2, [pc, #36]	@ (80010d4 <HAL_DTS_MspInit+0x40>)
 80010ae:	f043 0308 	orr.w	r3, r3, #8
 80010b2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 80010b6:	4b07      	ldr	r3, [pc, #28]	@ (80010d4 <HAL_DTS_MspInit+0x40>)
 80010b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80010bc:	f003 0308 	and.w	r3, r3, #8
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DTS_MspInit 1 */

  /* USER CODE END DTS_MspInit 1 */
  }

}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	40008c00 	.word	0x40008c00
 80010d4:	44020c00 	.word	0x44020c00

080010d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b0cc      	sub	sp, #304	@ 0x130
 80010dc:	af00      	add	r7, sp, #0
 80010de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80010e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80010e6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80010fc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001100:	4618      	mov	r0, r3
 8001102:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001106:	461a      	mov	r2, r3
 8001108:	2100      	movs	r1, #0
 800110a:	f00a fd1c 	bl	800bb46 <memset>
  if(huart->Instance==USART3)
 800110e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001112:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a33      	ldr	r2, [pc, #204]	@ (80011e8 <HAL_UART_MspInit+0x110>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d15d      	bne.n	80011dc <HAL_UART_MspInit+0x104>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001120:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001124:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001128:	f04f 0204 	mov.w	r2, #4
 800112c:	f04f 0300 	mov.w	r3, #0
 8001130:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001134:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001138:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800113c:	2200      	movs	r2, #0
 800113e:	665a      	str	r2, [r3, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	4618      	mov	r0, r3
 8001146:	f001 ff17 	bl	8002f78 <HAL_RCCEx_PeriphCLKConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8001150:	f7ff ff92 	bl	8001078 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001154:	4b25      	ldr	r3, [pc, #148]	@ (80011ec <HAL_UART_MspInit+0x114>)
 8001156:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800115a:	4a24      	ldr	r2, [pc, #144]	@ (80011ec <HAL_UART_MspInit+0x114>)
 800115c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001160:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001164:	4b21      	ldr	r3, [pc, #132]	@ (80011ec <HAL_UART_MspInit+0x114>)
 8001166:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800116a:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 800116e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001172:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800117c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001180:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001182:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <HAL_UART_MspInit+0x114>)
 8001184:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001188:	4a18      	ldr	r2, [pc, #96]	@ (80011ec <HAL_UART_MspInit+0x114>)
 800118a:	f043 0308 	orr.w	r3, r3, #8
 800118e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001192:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <HAL_UART_MspInit+0x114>)
 8001194:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001198:	f003 0208 	and.w	r2, r3, #8
 800119c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80011a0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80011aa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80011ae:	681b      	ldr	r3, [r3, #0]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011b0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011b4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011ca:	2307      	movs	r3, #7
 80011cc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d0:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80011d4:	4619      	mov	r1, r3
 80011d6:	4806      	ldr	r0, [pc, #24]	@ (80011f0 <HAL_UART_MspInit+0x118>)
 80011d8:	f000 fd36 	bl	8001c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011dc:	bf00      	nop
 80011de:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40004800 	.word	0x40004800
 80011ec:	44020c00 	.word	0x44020c00
 80011f0:	42020c00 	.word	0x42020c00

080011f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08e      	sub	sp, #56	@ 0x38
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011fc:	4b33      	ldr	r3, [pc, #204]	@ (80012cc <HAL_InitTick+0xd8>)
 80011fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001202:	4a32      	ldr	r2, [pc, #200]	@ (80012cc <HAL_InitTick+0xd8>)
 8001204:	f043 0310 	orr.w	r3, r3, #16
 8001208:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800120c:	4b2f      	ldr	r3, [pc, #188]	@ (80012cc <HAL_InitTick+0xd8>)
 800120e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001212:	f003 0310 	and.w	r3, r3, #16
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800121a:	f107 020c 	add.w	r2, r7, #12
 800121e:	f107 0310 	add.w	r3, r7, #16
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f001 fe6f 	bl	8002f08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800122e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001230:	2b00      	cmp	r3, #0
 8001232:	d103      	bne.n	800123c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001234:	f001 fe26 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 8001238:	6378      	str	r0, [r7, #52]	@ 0x34
 800123a:	e004      	b.n	8001246 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800123c:	f001 fe22 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 8001240:	4603      	mov	r3, r0
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8001246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001248:	095b      	lsrs	r3, r3, #5
 800124a:	4a21      	ldr	r2, [pc, #132]	@ (80012d0 <HAL_InitTick+0xdc>)
 800124c:	fba2 2303 	umull	r2, r3, r2, r3
 8001250:	09db      	lsrs	r3, r3, #7
 8001252:	3b01      	subs	r3, #1
 8001254:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001256:	4b1f      	ldr	r3, [pc, #124]	@ (80012d4 <HAL_InitTick+0xe0>)
 8001258:	4a1f      	ldr	r2, [pc, #124]	@ (80012d8 <HAL_InitTick+0xe4>)
 800125a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 800125c:	4b1d      	ldr	r3, [pc, #116]	@ (80012d4 <HAL_InitTick+0xe0>)
 800125e:	2263      	movs	r2, #99	@ 0x63
 8001260:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001262:	4a1c      	ldr	r2, [pc, #112]	@ (80012d4 <HAL_InitTick+0xe0>)
 8001264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001266:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001268:	4b1a      	ldr	r3, [pc, #104]	@ (80012d4 <HAL_InitTick+0xe0>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126e:	4b19      	ldr	r3, [pc, #100]	@ (80012d4 <HAL_InitTick+0xe0>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001274:	4817      	ldr	r0, [pc, #92]	@ (80012d4 <HAL_InitTick+0xe0>)
 8001276:	f006 fed1 	bl	800801c <HAL_TIM_Base_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001280:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001284:	2b00      	cmp	r3, #0
 8001286:	d118      	bne.n	80012ba <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001288:	4812      	ldr	r0, [pc, #72]	@ (80012d4 <HAL_InitTick+0xe0>)
 800128a:	f006 ff29 	bl	80080e0 <HAL_TIM_Base_Start_IT>
 800128e:	4603      	mov	r3, r0
 8001290:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001294:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001298:	2b00      	cmp	r3, #0
 800129a:	d10e      	bne.n	80012ba <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b0f      	cmp	r3, #15
 80012a0:	d808      	bhi.n	80012b4 <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80012a2:	2200      	movs	r2, #0
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	2031      	movs	r0, #49	@ 0x31
 80012a8:	f000 fab6 	bl	8001818 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012ac:	4a0b      	ldr	r2, [pc, #44]	@ (80012dc <HAL_InitTick+0xe8>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	e002      	b.n	80012ba <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80012ba:	2031      	movs	r0, #49	@ 0x31
 80012bc:	f000 fac6 	bl	800184c <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 80012c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3738      	adds	r7, #56	@ 0x38
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	44020c00 	.word	0x44020c00
 80012d0:	0a7c5ac5 	.word	0x0a7c5ac5
 80012d4:	20002138 	.word	0x20002138
 80012d8:	40001000 	.word	0x40001000
 80012dc:	20000004 	.word	0x20000004

080012e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <NMI_Handler+0x4>

080012e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <HardFault_Handler+0x4>

080012f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <MemManage_Handler+0x4>

080012f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <UsageFault_Handler+0x4>

08001308 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 800131a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800131e:	f000 fe17 	bl	8001f50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800132c:	4802      	ldr	r0, [pc, #8]	@ (8001338 <TIM6_IRQHandler+0x10>)
 800132e:	f006 ff85 	bl	800823c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20002138 	.word	0x20002138

0800133c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	e00a      	b.n	8001364 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800134e:	f3af 8000 	nop.w
 8001352:	4601      	mov	r1, r0
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	60ba      	str	r2, [r7, #8]
 800135a:	b2ca      	uxtb	r2, r1
 800135c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	3301      	adds	r3, #1
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	429a      	cmp	r2, r3
 800136a:	dbf0      	blt.n	800134e <_read+0x12>
  }

  return len;
 800136c:	687b      	ldr	r3, [r7, #4]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af00      	add	r7, sp, #0
 800137c:	60f8      	str	r0, [r7, #12]
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	e009      	b.n	800139c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	60ba      	str	r2, [r7, #8]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fbb3 	bl	8000afc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	3301      	adds	r3, #1
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	dbf1      	blt.n	8001388 <_write+0x12>
  }
  return len;
 80013a4:	687b      	ldr	r3, [r7, #4]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <_close>:

int _close(int file)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013d6:	605a      	str	r2, [r3, #4]
  return 0;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <_isatty>:

int _isatty(int file)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013ee:	2301      	movs	r3, #1
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001420:	4a14      	ldr	r2, [pc, #80]	@ (8001474 <_sbrk+0x5c>)
 8001422:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <_sbrk+0x60>)
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800142c:	4b13      	ldr	r3, [pc, #76]	@ (800147c <_sbrk+0x64>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d102      	bne.n	800143a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001434:	4b11      	ldr	r3, [pc, #68]	@ (800147c <_sbrk+0x64>)
 8001436:	4a12      	ldr	r2, [pc, #72]	@ (8001480 <_sbrk+0x68>)
 8001438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800143a:	4b10      	ldr	r3, [pc, #64]	@ (800147c <_sbrk+0x64>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	429a      	cmp	r2, r3
 8001446:	d207      	bcs.n	8001458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001448:	f00a fbcc 	bl	800bbe4 <__errno>
 800144c:	4603      	mov	r3, r0
 800144e:	220c      	movs	r2, #12
 8001450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	e009      	b.n	800146c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001458:	4b08      	ldr	r3, [pc, #32]	@ (800147c <_sbrk+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800145e:	4b07      	ldr	r3, [pc, #28]	@ (800147c <_sbrk+0x64>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	4a05      	ldr	r2, [pc, #20]	@ (800147c <_sbrk+0x64>)
 8001468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800146a:	68fb      	ldr	r3, [r7, #12]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	200a0000 	.word	0x200a0000
 8001478:	00000400 	.word	0x00000400
 800147c:	20002184 	.word	0x20002184
 8001480:	20002918 	.word	0x20002918

08001484 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800148a:	4b35      	ldr	r3, [pc, #212]	@ (8001560 <SystemInit+0xdc>)
 800148c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001490:	4a33      	ldr	r2, [pc, #204]	@ (8001560 <SystemInit+0xdc>)
 8001492:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001496:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800149a:	4b32      	ldr	r3, [pc, #200]	@ (8001564 <SystemInit+0xe0>)
 800149c:	2201      	movs	r2, #1
 800149e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80014a0:	4b30      	ldr	r3, [pc, #192]	@ (8001564 <SystemInit+0xe0>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80014a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001564 <SystemInit+0xe0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80014ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001564 <SystemInit+0xe0>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	492c      	ldr	r1, [pc, #176]	@ (8001564 <SystemInit+0xe0>)
 80014b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001568 <SystemInit+0xe4>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80014b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001564 <SystemInit+0xe0>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80014be:	4b29      	ldr	r3, [pc, #164]	@ (8001564 <SystemInit+0xe0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80014c4:	4b27      	ldr	r3, [pc, #156]	@ (8001564 <SystemInit+0xe0>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80014ca:	4b26      	ldr	r3, [pc, #152]	@ (8001564 <SystemInit+0xe0>)
 80014cc:	4a27      	ldr	r2, [pc, #156]	@ (800156c <SystemInit+0xe8>)
 80014ce:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80014d0:	4b24      	ldr	r3, [pc, #144]	@ (8001564 <SystemInit+0xe0>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80014d6:	4b23      	ldr	r3, [pc, #140]	@ (8001564 <SystemInit+0xe0>)
 80014d8:	4a24      	ldr	r2, [pc, #144]	@ (800156c <SystemInit+0xe8>)
 80014da:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80014dc:	4b21      	ldr	r3, [pc, #132]	@ (8001564 <SystemInit+0xe0>)
 80014de:	2200      	movs	r2, #0
 80014e0:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80014e2:	4b20      	ldr	r3, [pc, #128]	@ (8001564 <SystemInit+0xe0>)
 80014e4:	4a21      	ldr	r2, [pc, #132]	@ (800156c <SystemInit+0xe8>)
 80014e6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80014e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001564 <SystemInit+0xe0>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80014ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001564 <SystemInit+0xe0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001564 <SystemInit+0xe0>)
 80014f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014f8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80014fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001564 <SystemInit+0xe0>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001500:	4b17      	ldr	r3, [pc, #92]	@ (8001560 <SystemInit+0xdc>)
 8001502:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001506:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001508:	4b19      	ldr	r3, [pc, #100]	@ (8001570 <SystemInit+0xec>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001510:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001518:	d003      	beq.n	8001522 <SystemInit+0x9e>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001520:	d117      	bne.n	8001552 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001522:	4b13      	ldr	r3, [pc, #76]	@ (8001570 <SystemInit+0xec>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d005      	beq.n	800153a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800152e:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <SystemInit+0xec>)
 8001530:	4a10      	ldr	r2, [pc, #64]	@ (8001574 <SystemInit+0xf0>)
 8001532:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001534:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <SystemInit+0xec>)
 8001536:	4a10      	ldr	r2, [pc, #64]	@ (8001578 <SystemInit+0xf4>)
 8001538:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800153a:	4b0d      	ldr	r3, [pc, #52]	@ (8001570 <SystemInit+0xec>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	4a0c      	ldr	r2, [pc, #48]	@ (8001570 <SystemInit+0xec>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001546:	4b0a      	ldr	r3, [pc, #40]	@ (8001570 <SystemInit+0xec>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	4a09      	ldr	r2, [pc, #36]	@ (8001570 <SystemInit+0xec>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	61d3      	str	r3, [r2, #28]
  }
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000ed00 	.word	0xe000ed00
 8001564:	44020c00 	.word	0x44020c00
 8001568:	eae2eae3 	.word	0xeae2eae3
 800156c:	01010280 	.word	0x01010280
 8001570:	40022000 	.word	0x40022000
 8001574:	08192a3b 	.word	0x08192a3b
 8001578:	4c5d6e7f 	.word	0x4c5d6e7f

0800157c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800157c:	480d      	ldr	r0, [pc, #52]	@ (80015b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800157e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001580:	f7ff ff80 	bl	8001484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001584:	480c      	ldr	r0, [pc, #48]	@ (80015b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001586:	490d      	ldr	r1, [pc, #52]	@ (80015bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001588:	4a0d      	ldr	r2, [pc, #52]	@ (80015c0 <LoopForever+0xe>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800158c:	e002      	b.n	8001594 <LoopCopyDataInit>

0800158e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001592:	3304      	adds	r3, #4

08001594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001598:	d3f9      	bcc.n	800158e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159a:	4a0a      	ldr	r2, [pc, #40]	@ (80015c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800159c:	4c0a      	ldr	r4, [pc, #40]	@ (80015c8 <LoopForever+0x16>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a0:	e001      	b.n	80015a6 <LoopFillZerobss>

080015a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a4:	3204      	adds	r2, #4

080015a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a8:	d3fb      	bcc.n	80015a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015aa:	f00a fb21 	bl	800bbf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ae:	f7ff fab7 	bl	8000b20 <main>

080015b2 <LoopForever>:

LoopForever:
    b LoopForever
 80015b2:	e7fe      	b.n	80015b2 <LoopForever>
  ldr   r0, =_estack
 80015b4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80015b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015bc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80015c0:	0800c7fc 	.word	0x0800c7fc
  ldr r2, =_sbss
 80015c4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80015c8:	20002918 	.word	0x20002918

080015cc <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015cc:	e7fe      	b.n	80015cc <ADC1_IRQHandler>
	...

080015d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d4:	2003      	movs	r0, #3
 80015d6:	f000 f914 	bl	8001802 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80015da:	f001 fb0b 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 80015de:	4602      	mov	r2, r0
 80015e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <HAL_Init+0x44>)
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	f003 030f 	and.w	r3, r3, #15
 80015e8:	490b      	ldr	r1, [pc, #44]	@ (8001618 <HAL_Init+0x48>)
 80015ea:	5ccb      	ldrb	r3, [r1, r3]
 80015ec:	fa22 f303 	lsr.w	r3, r2, r3
 80015f0:	4a0a      	ldr	r2, [pc, #40]	@ (800161c <HAL_Init+0x4c>)
 80015f2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80015f4:	2004      	movs	r0, #4
 80015f6:	f000 f937 	bl	8001868 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015fa:	200f      	movs	r0, #15
 80015fc:	f7ff fdfa 	bl	80011f4 <HAL_InitTick>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e002      	b.n	8001610 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800160a:	f7ff fd3b 	bl	8001084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	bd80      	pop	{r7, pc}
 8001614:	44020c00 	.word	0x44020c00
 8001618:	0800c778 	.word	0x0800c778
 800161c:	20000000 	.word	0x20000000

08001620 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001624:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <HAL_IncTick+0x20>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <HAL_IncTick+0x24>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4413      	add	r3, r2
 8001630:	4a04      	ldr	r2, [pc, #16]	@ (8001644 <HAL_IncTick+0x24>)
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000008 	.word	0x20000008
 8001644:	20002188 	.word	0x20002188

08001648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return uwTick;
 800164c:	4b03      	ldr	r3, [pc, #12]	@ (800165c <HAL_GetTick+0x14>)
 800164e:	681b      	ldr	r3, [r3, #0]
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20002188 	.word	0x20002188

08001660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001668:	f7ff ffee 	bl	8001648 <HAL_GetTick>
 800166c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001678:	d005      	beq.n	8001686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167a:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <HAL_Delay+0x44>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4413      	add	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001686:	bf00      	nop
 8001688:	f7ff ffde 	bl	8001648 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	429a      	cmp	r2, r3
 8001696:	d8f7      	bhi.n	8001688 <HAL_Delay+0x28>
  {
  }
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000008 	.word	0x20000008

080016a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b8:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016c4:	4013      	ands	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016da:	4a04      	ldr	r2, [pc, #16]	@ (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	60d3      	str	r3, [r2, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f4:	4b04      	ldr	r3, [pc, #16]	@ (8001708 <__NVIC_GetPriorityGrouping+0x18>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	f003 0307 	and.w	r3, r3, #7
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171a:	2b00      	cmp	r3, #0
 800171c:	db0b      	blt.n	8001736 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	f003 021f 	and.w	r2, r3, #31
 8001724:	4907      	ldr	r1, [pc, #28]	@ (8001744 <__NVIC_EnableIRQ+0x38>)
 8001726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	2001      	movs	r0, #1
 800172e:	fa00 f202 	lsl.w	r2, r0, r2
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000e100 	.word	0xe000e100

08001748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001754:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001758:	2b00      	cmp	r3, #0
 800175a:	db0a      	blt.n	8001772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	490c      	ldr	r1, [pc, #48]	@ (8001794 <__NVIC_SetPriority+0x4c>)
 8001762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001766:	0112      	lsls	r2, r2, #4
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	440b      	add	r3, r1
 800176c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001770:	e00a      	b.n	8001788 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4908      	ldr	r1, [pc, #32]	@ (8001798 <__NVIC_SetPriority+0x50>)
 8001778:	88fb      	ldrh	r3, [r7, #6]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	3b04      	subs	r3, #4
 8001780:	0112      	lsls	r2, r2, #4
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	440b      	add	r3, r1
 8001786:	761a      	strb	r2, [r3, #24]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000e100 	.word	0xe000e100
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	@ 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f1c3 0307 	rsb	r3, r3, #7
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	bf28      	it	cs
 80017ba:	2304      	movcs	r3, #4
 80017bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3304      	adds	r3, #4
 80017c2:	2b06      	cmp	r3, #6
 80017c4:	d902      	bls.n	80017cc <NVIC_EncodePriority+0x30>
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3b03      	subs	r3, #3
 80017ca:	e000      	b.n	80017ce <NVIC_EncodePriority+0x32>
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	f04f 32ff 	mov.w	r2, #4294967295
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	401a      	ands	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	4313      	orrs	r3, r2
         );
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3724      	adds	r7, #36	@ 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff ff4c 	bl	80016a8 <__NVIC_SetPriorityGrouping>
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
 8001824:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001826:	f7ff ff63 	bl	80016f0 <__NVIC_GetPriorityGrouping>
 800182a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	68b9      	ldr	r1, [r7, #8]
 8001830:	6978      	ldr	r0, [r7, #20]
 8001832:	f7ff ffb3 	bl	800179c <NVIC_EncodePriority>
 8001836:	4602      	mov	r2, r0
 8001838:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800183c:	4611      	mov	r1, r2
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ff82 	bl	8001748 <__NVIC_SetPriority>
}
 8001844:	bf00      	nop
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff56 	bl	800170c <__NVIC_EnableIRQ>
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b04      	cmp	r3, #4
 8001874:	d844      	bhi.n	8001900 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001876:	a201      	add	r2, pc, #4	@ (adr r2, 800187c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187c:	0800189f 	.word	0x0800189f
 8001880:	080018bd 	.word	0x080018bd
 8001884:	080018df 	.word	0x080018df
 8001888:	08001901 	.word	0x08001901
 800188c:	08001891 	.word	0x08001891
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001890:	4b1f      	ldr	r3, [pc, #124]	@ (8001910 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a1e      	ldr	r2, [pc, #120]	@ (8001910 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001896:	f043 0304 	orr.w	r3, r3, #4
 800189a:	6013      	str	r3, [r2, #0]
      break;
 800189c:	e031      	b.n	8001902 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800189e:	4b1c      	ldr	r3, [pc, #112]	@ (8001910 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001910 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80018a4:	f023 0304 	bic.w	r3, r3, #4
 80018a8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80018aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001914 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80018ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80018b0:	4a18      	ldr	r2, [pc, #96]	@ (8001914 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80018b2:	f023 030c 	bic.w	r3, r3, #12
 80018b6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80018ba:	e022      	b.n	8001902 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80018bc:	4b14      	ldr	r3, [pc, #80]	@ (8001910 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a13      	ldr	r2, [pc, #76]	@ (8001910 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80018c2:	f023 0304 	bic.w	r3, r3, #4
 80018c6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80018c8:	4b12      	ldr	r3, [pc, #72]	@ (8001914 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80018ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80018ce:	f023 030c 	bic.w	r3, r3, #12
 80018d2:	4a10      	ldr	r2, [pc, #64]	@ (8001914 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80018dc:	e011      	b.n	8001902 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80018de:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001910 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80018e4:	f023 0304 	bic.w	r3, r3, #4
 80018e8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80018ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001914 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80018ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80018f0:	f023 030c 	bic.w	r3, r3, #12
 80018f4:	4a07      	ldr	r2, [pc, #28]	@ (8001914 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80018f6:	f043 0308 	orr.w	r3, r3, #8
 80018fa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80018fe:	e000      	b.n	8001902 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001900:	bf00      	nop
  }
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000e010 	.word	0xe000e010
 8001914:	44020c00 	.word	0x44020c00

08001918 <HAL_DTS_Init>:
  *         parameters in the DTS_InitTypeDef and initialize the associated handle.
  * @param  hdts  DTS handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DTS_Init(DTS_HandleTypeDef *hdts)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the DTS handle allocation */
  if (hdts == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_DTS_Init+0x12>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e089      	b.n	8001a3e <HAL_DTS_Init+0x126>
  assert_param(IS_DTS_TRIGGERINPUT(hdts->Init.TriggerInput));
  assert_param(IS_DTS_SAMPLINGTIME(hdts->Init.SamplingTime));
  assert_param(IS_DTS_THRESHOLD(hdts->Init.HighThreshold));
  assert_param(IS_DTS_THRESHOLD(hdts->Init.LowThreshold));

  if (hdts->State == HAL_DTS_STATE_RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d102      	bne.n	800193c <HAL_DTS_Init+0x24>

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hdts->MspInitCallback(hdts);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_DTS_MspInit(hdts);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff fbac 	bl	8001094 <HAL_DTS_MspInit>
#endif /* USE_HAL_DTS_REGISTER_CALLBACKS */
  }

  /* Change the DTS state */
  hdts->State = HAL_DTS_STATE_BUSY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2202      	movs	r2, #2
 8001940:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check ramp coefficient */
  if (hdts->Instance->RAMPVALR == 0UL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_DTS_Init+0x3a>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e075      	b.n	8001a3e <HAL_DTS_Init+0x126>
  }

  /* Check factory calibration temperature  */
  if (hdts->Instance->T0VALR1 == 0UL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_DTS_Init+0x48>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e06e      	b.n	8001a3e <HAL_DTS_Init+0x126>
  }

  /* Check Quick Measure option is enabled or disabled */
  if (hdts->Init.QuickMeasure == DTS_QUICKMEAS_DISABLE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d108      	bne.n	800197a <HAL_DTS_Init+0x62>
    if (hdts->Init.RefClock == DTS_REFCLKSEL_PCLK)
    {
      assert_param(IS_DTS_DIVIDER_RATIO_NUMBER(hdts->Init.Divider));
    }
    /* Quick measurement mode disabled */
    CLEAR_BIT(hdts->Instance->CFGR1, DTS_CFGR1_Q_MEAS_OPT);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	e00e      	b.n	8001998 <HAL_DTS_Init+0x80>
  }
  else
  {
    /* DTS_QUICKMEAS_ENABLE shall be used only when the LSE clock is
       selected as reference clock */
    if (hdts->Init.RefClock != DTS_REFCLKSEL_LSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001982:	d001      	beq.n	8001988 <HAL_DTS_Init+0x70>
    {
      return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e05a      	b.n	8001a3e <HAL_DTS_Init+0x126>
    }

    /* Quick measurement mode enabled - no calibration needed */
    SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_Q_MEAS_OPT);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8001996:	601a      	str	r2, [r3, #0]
  }

  /* set the DTS clk source */
  if (hdts->Init.RefClock == DTS_REFCLKSEL_LSE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80019a0:	d108      	bne.n	80019b4 <HAL_DTS_Init+0x9c>
  {
    SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_REFCLK_SEL);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	e007      	b.n	80019c4 <HAL_DTS_Init+0xac>
  }
  else
  {
    CLEAR_BIT(hdts->Instance->CFGR1, DTS_CFGR1_REFCLK_SEL);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80019c2:	601a      	str	r2, [r3, #0]
  }

  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_HSREF_CLK_DIV, (hdts->Init.Divider << DTS_CFGR1_HSREF_CLK_DIV_Pos));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 41fe 	bic.w	r1, r3, #2130706432	@ 0x7f000000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	061a      	lsls	r2, r3, #24
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_TS1_SMP_TIME, hdts->Init.SamplingTime);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f423 2170 	bic.w	r1, r3, #983040	@ 0xf0000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691a      	ldr	r2, [r3, #16]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_TS1_INTRIG_SEL, hdts->Init.TriggerInput);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->ITR1, DTS_ITR1_TS1_HITTHD, (hdts->Init.HighThreshold << DTS_ITR1_TS1_HITTHD_Pos));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	b299      	uxth	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	041a      	lsls	r2, r3, #16
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	615a      	str	r2, [r3, #20]
  MODIFY_REG(hdts->Instance->ITR1, DTS_ITR1_TS1_LITTHD, hdts->Init.LowThreshold);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	0c1b      	lsrs	r3, r3, #16
 8001a26:	041b      	lsls	r3, r3, #16
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	69d1      	ldr	r1, [r2, #28]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	430b      	orrs	r3, r1
 8001a32:	6153      	str	r3, [r2, #20]

  /* Change the DTS state */
  hdts->State = HAL_DTS_STATE_READY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_DTS_Start>:
  * @brief  Start the DTS sensor.
  * @param  hdts  DTS handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DTS_Start(DTS_HandleTypeDef *hdts)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b084      	sub	sp, #16
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  uint32_t Ref_Time;

  /* Check the DTS handle allocation */
  if (hdts == NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_DTS_Start+0x12>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e03f      	b.n	8001ad8 <HAL_DTS_Start+0x92>
  }

  if (hdts->State == HAL_DTS_STATE_READY)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d138      	bne.n	8001ad6 <HAL_DTS_Start+0x90>
  {
    hdts->State = HAL_DTS_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2202      	movs	r2, #2
 8001a68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Enable DTS sensor */
    __HAL_DTS_ENABLE(hdts);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0201 	orr.w	r2, r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]

    /* Get Start Tick*/
    Ref_Time = HAL_GetTick();
 8001a7c:	f7ff fde4 	bl	8001648 <HAL_GetTick>
 8001a80:	60f8      	str	r0, [r7, #12]

    /* Wait till TS1_RDY flag is set */
    while (__HAL_DTS_GET_FLAG(hdts, DTS_FLAG_TS1_RDY) == RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_DTS_Start+0x50>
    {
      if ((HAL_GetTick() - Ref_Time) > DTS_DELAY_STARTUP)
 8001a84:	f7ff fde0 	bl	8001648 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d901      	bls.n	8001a96 <HAL_DTS_Start+0x50>
      {
        return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e020      	b.n	8001ad8 <HAL_DTS_Start+0x92>
    while (__HAL_DTS_GET_FLAG(hdts, DTS_FLAG_TS1_RDY) == RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001aa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001aa4:	d1ee      	bne.n	8001a84 <HAL_DTS_Start+0x3e>
      }
    }

    if (__HAL_DTS_GET_TRIGGER(hdts) == DTS_TRIGGER_HW_NONE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d10a      	bne.n	8001aca <HAL_DTS_Start+0x84>
    {
      /* Start continuous measures */
      SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_TS1_START);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0210 	orr.w	r2, r2, #16
 8001ac2:	601a      	str	r2, [r3, #0]

      /* Ensure start is taken into account */
      HAL_Delay(TS_TIMEOUT_MS);
 8001ac4:	2005      	movs	r0, #5
 8001ac6:	f7ff fdcb 	bl	8001660 <HAL_Delay>
    }

    hdts->State = HAL_DTS_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  else
  {
    return HAL_BUSY;
  }

  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e000      	b.n	8001ad8 <HAL_DTS_Start+0x92>
    return HAL_BUSY;
 8001ad6:	2302      	movs	r3, #2
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <HAL_DTS_Stop>:
  * @brief  Stop the DTS Sensor.
  * @param  hdts  DTS handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DTS_Stop(DTS_HandleTypeDef *hdts)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the DTS handle allocation */
  if (hdts == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_DTS_Stop+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e027      	b.n	8001b42 <HAL_DTS_Stop+0x62>
  }

  if (hdts->State == HAL_DTS_STATE_READY)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d120      	bne.n	8001b40 <HAL_DTS_Stop+0x60>
  {
    hdts->State = HAL_DTS_STATE_BUSY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2202      	movs	r2, #2
 8001b02:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    if (__HAL_DTS_GET_TRIGGER(hdts) == DTS_TRIGGER_HW_NONE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d107      	bne.n	8001b24 <HAL_DTS_Stop+0x44>
    {
      CLEAR_BIT(hdts->Instance->CFGR1, DTS_CFGR1_TS1_START);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0210 	bic.w	r2, r2, #16
 8001b22:	601a      	str	r2, [r3, #0]
    }

    /* Disable the selected DTS sensor */
    __HAL_DTS_DISABLE(hdts);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0201 	bic.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

    hdts->State = HAL_DTS_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  else
  {
    return HAL_BUSY;
  }

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	e000      	b.n	8001b42 <HAL_DTS_Stop+0x62>
    return HAL_BUSY;
 8001b40:	2302      	movs	r3, #2
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <HAL_DTS_GetTemperature>:
  * @param  Temperature  Temperature in deg C
  * @note This function retrieves latest available measure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DTS_GetTemperature(DTS_HandleTypeDef *hdts, int32_t *Temperature)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b088      	sub	sp, #32
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
  uint32_t samples;
  uint32_t t0_temp;
  uint32_t t0_freq;
  uint32_t ramp_coeff;

  if (hdts->State == HAL_DTS_STATE_READY)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d16c      	bne.n	8001c3e <HAL_DTS_GetTemperature+0xf0>
  {
    hdts->State = HAL_DTS_STATE_BUSY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2202      	movs	r2, #2
 8001b68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Get the total number of samples */
    samples = (hdts->Instance->DR & DTS_DR_TS1_MFREQ);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	617b      	str	r3, [r7, #20]

    if ((hdts->Init.SamplingTime == 0UL) || (samples == 0UL))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d002      	beq.n	8001b84 <HAL_DTS_GetTemperature+0x36>
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d105      	bne.n	8001b90 <HAL_DTS_GetTemperature+0x42>
    {
      hdts->State = HAL_DTS_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e057      	b.n	8001c40 <HAL_DTS_GetTemperature+0xf2>
    }

    if ((hdts->Init.RefClock) == DTS_REFCLKSEL_LSE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b98:	d108      	bne.n	8001bac <HAL_DTS_GetTemperature+0x5e>
    {
      /* Measured frequency On Hz */
      freq_meas = (LSE_VALUE * samples) / (hdts->Init.SamplingTime >> DTS_CFGR1_TS1_SMP_TIME_Pos);
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	03da      	lsls	r2, r3, #15
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	0c1b      	lsrs	r3, r3, #16
 8001ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba8:	61fb      	str	r3, [r7, #28]
 8001baa:	e00b      	b.n	8001bc4 <HAL_DTS_GetTemperature+0x76>
    }
    else
    {
      /* Measured frequency On Hz */
      freq_meas = (HAL_RCC_GetPCLK1Freq() * (hdts->Init.SamplingTime >> DTS_CFGR1_TS1_SMP_TIME_Pos)) / samples;
 8001bac:	f001 f96a 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	0c1b      	lsrs	r3, r3, #16
 8001bb8:	fb03 f202 	mul.w	r2, r3, r2
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc2:	61fb      	str	r3, [r7, #28]
    }

    /* Read factory settings */
    t0_temp = hdts->Instance->T0VALR1 >> DTS_T0VALR1_TS1_T0_Pos;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	0c1b      	lsrs	r3, r3, #16
 8001bcc:	61bb      	str	r3, [r7, #24]

    if (t0_temp == 0UL)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d102      	bne.n	8001bda <HAL_DTS_GetTemperature+0x8c>
    {
      t0_temp = DTS_FACTORY_TEMPERATURE1; /* 30 deg C */
 8001bd4:	231e      	movs	r3, #30
 8001bd6:	61bb      	str	r3, [r7, #24]
 8001bd8:	e00b      	b.n	8001bf2 <HAL_DTS_GetTemperature+0xa4>
    }
    else if (t0_temp == 1UL)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d102      	bne.n	8001be6 <HAL_DTS_GetTemperature+0x98>
    {
      t0_temp = DTS_FACTORY_TEMPERATURE2; /* 130 deg C */
 8001be0:	2382      	movs	r3, #130	@ 0x82
 8001be2:	61bb      	str	r3, [r7, #24]
 8001be4:	e005      	b.n	8001bf2 <HAL_DTS_GetTemperature+0xa4>
    }
    else
    {
      hdts->State = HAL_DTS_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e026      	b.n	8001c40 <HAL_DTS_GetTemperature+0xf2>
    }

    t0_freq = (hdts->Instance->T0VALR1 & DTS_T0VALR1_TS1_FMT0) * 100UL; /* Hz */
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	2264      	movs	r2, #100	@ 0x64
 8001bfc:	fb02 f303 	mul.w	r3, r2, r3
 8001c00:	613b      	str	r3, [r7, #16]

    ramp_coeff = hdts->Instance->RAMPVALR & DTS_RAMPVALR_TS1_RAMP_COEFF; /* deg C/Hz */
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	60fb      	str	r3, [r7, #12]

    if (ramp_coeff == 0UL)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d105      	bne.n	8001c1e <HAL_DTS_GetTemperature+0xd0>
    {
      hdts->State = HAL_DTS_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e010      	b.n	8001c40 <HAL_DTS_GetTemperature+0xf2>
    }

    /* Figure out the temperature deg C */
    *Temperature = (int32_t)t0_temp + (((int32_t)freq_meas - (int32_t)t0_freq) / (int32_t)ramp_coeff);
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad2      	subs	r2, r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	fb92 f2f3 	sdiv	r2, r2, r3
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	441a      	add	r2, r3
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	601a      	str	r2, [r3, #0]

    hdts->State = HAL_DTS_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  else
  {
    return HAL_BUSY;
  }

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e000      	b.n	8001c40 <HAL_DTS_GetTemperature+0xf2>
    return HAL_BUSY;
 8001c3e:	2302      	movs	r3, #2
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3720      	adds	r7, #32
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b087      	sub	sp, #28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001c56:	e136      	b.n	8001ec6 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	fa01 f303 	lsl.w	r3, r1, r3
 8001c64:	4013      	ands	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 8128 	beq.w	8001ec0 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x38>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b12      	cmp	r3, #18
 8001c7e:	d125      	bne.n	8001ccc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	08da      	lsrs	r2, r3, #3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3208      	adds	r2, #8
 8001c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c8c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	220f      	movs	r2, #15
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	f003 020f 	and.w	r2, r3, #15
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	08da      	lsrs	r2, r3, #3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3208      	adds	r2, #8
 8001cc6:	6979      	ldr	r1, [r7, #20]
 8001cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0203 	and.w	r2, r3, #3
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d00b      	beq.n	8001d20 <HAL_GPIO_Init+0xd8>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d007      	beq.n	8001d20 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d14:	2b11      	cmp	r3, #17
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b12      	cmp	r3, #18
 8001d1e:	d130      	bne.n	8001d82 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4013      	ands	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d56:	2201      	movs	r2, #1
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	4013      	ands	r3, r2
 8001d64:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	091b      	lsrs	r3, r3, #4
 8001d6c:	f003 0201 	and.w	r2, r3, #1
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d017      	beq.n	8001dba <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	2203      	movs	r2, #3
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d07c      	beq.n	8001ec0 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001dc6:	4a47      	ldr	r2, [pc, #284]	@ (8001ee4 <HAL_GPIO_Init+0x29c>)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3318      	adds	r3, #24
 8001dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd2:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	220f      	movs	r2, #15
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	4013      	ands	r3, r2
 8001de8:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	0a9a      	lsrs	r2, r3, #10
 8001dee:	4b3e      	ldr	r3, [pc, #248]	@ (8001ee8 <HAL_GPIO_Init+0x2a0>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	f002 0203 	and.w	r2, r2, #3
 8001df8:	00d2      	lsls	r2, r2, #3
 8001dfa:	4093      	lsls	r3, r2
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001e02:	4938      	ldr	r1, [pc, #224]	@ (8001ee4 <HAL_GPIO_Init+0x29c>)
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	089b      	lsrs	r3, r3, #2
 8001e08:	3318      	adds	r3, #24
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001e10:	4b34      	ldr	r3, [pc, #208]	@ (8001ee4 <HAL_GPIO_Init+0x29c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001e34:	4a2b      	ldr	r2, [pc, #172]	@ (8001ee4 <HAL_GPIO_Init+0x29c>)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee4 <HAL_GPIO_Init+0x29c>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	4013      	ands	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001e5e:	4a21      	ldr	r2, [pc, #132]	@ (8001ee4 <HAL_GPIO_Init+0x29c>)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001e64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee4 <HAL_GPIO_Init+0x29c>)
 8001e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e6a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	4013      	ands	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001e8a:	4a16      	ldr	r2, [pc, #88]	@ (8001ee4 <HAL_GPIO_Init+0x29c>)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001e92:	4b14      	ldr	r3, [pc, #80]	@ (8001ee4 <HAL_GPIO_Init+0x29c>)
 8001e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e98:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee4 <HAL_GPIO_Init+0x29c>)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f47f aec1 	bne.w	8001c58 <HAL_GPIO_Init+0x10>
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	bf00      	nop
 8001eda:	371c      	adds	r7, #28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	44022000 	.word	0x44022000
 8001ee8:	002f7f7f 	.word	0x002f7f7f

08001eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	807b      	strh	r3, [r7, #2]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001efc:	787b      	ldrb	r3, [r7, #1]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f02:	887a      	ldrh	r2, [r7, #2]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f08:	e002      	b.n	8001f10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f0a:	887a      	ldrh	r2, [r7, #2]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f2e:	887a      	ldrh	r2, [r7, #2]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4013      	ands	r3, r2
 8001f34:	041a      	lsls	r2, r3, #16
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	43d9      	mvns	r1, r3
 8001f3a:	887b      	ldrh	r3, [r7, #2]
 8001f3c:	400b      	ands	r3, r1
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	619a      	str	r2, [r3, #24]
}
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f98 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d006      	beq.n	8001f74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001f66:	4a0c      	ldr	r2, [pc, #48]	@ (8001f98 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001f6c:	88fb      	ldrh	r3, [r7, #6]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff f856 	bl	8001020 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001f74:	4b08      	ldr	r3, [pc, #32]	@ (8001f98 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d006      	beq.n	8001f8e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001f80:	4a05      	ldr	r2, [pc, #20]	@ (8001f98 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001f86:	88fb      	ldrh	r3, [r7, #6]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 f807 	bl	8001f9c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	44022000 	.word	0x44022000

08001f9c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d002      	beq.n	8001fd2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	73fb      	strb	r3, [r7, #15]
 8001fd0:	e007      	b.n	8001fe2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001fd2:	4b07      	ldr	r3, [pc, #28]	@ (8001ff0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 0204 	bic.w	r2, r3, #4
 8001fda:	4905      	ldr	r1, [pc, #20]	@ (8001ff0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	40030400 	.word	0x40030400

08001ff4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001ff8:	4b05      	ldr	r3, [pc, #20]	@ (8002010 <HAL_ICACHE_Enable+0x1c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a04      	ldr	r2, [pc, #16]	@ (8002010 <HAL_ICACHE_Enable+0x1c>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	40030400 	.word	0x40030400

08002014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d102      	bne.n	8002028 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	f000 bc28 	b.w	8002878 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002028:	4b94      	ldr	r3, [pc, #592]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	f003 0318 	and.w	r3, r3, #24
 8002030:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002032:	4b92      	ldr	r3, [pc, #584]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 8002034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0310 	and.w	r3, r3, #16
 8002044:	2b00      	cmp	r3, #0
 8002046:	d05b      	beq.n	8002100 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	2b08      	cmp	r3, #8
 800204c:	d005      	beq.n	800205a <HAL_RCC_OscConfig+0x46>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	2b18      	cmp	r3, #24
 8002052:	d114      	bne.n	800207e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d111      	bne.n	800207e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d102      	bne.n	8002068 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	f000 bc08 	b.w	8002878 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002068:	4b84      	ldr	r3, [pc, #528]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	041b      	lsls	r3, r3, #16
 8002076:	4981      	ldr	r1, [pc, #516]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 8002078:	4313      	orrs	r3, r2
 800207a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800207c:	e040      	b.n	8002100 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d023      	beq.n	80020ce <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002086:	4b7d      	ldr	r3, [pc, #500]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a7c      	ldr	r2, [pc, #496]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 800208c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002092:	f7ff fad9 	bl	8001648 <HAL_GetTick>
 8002096:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800209a:	f7ff fad5 	bl	8001648 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e3e5      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80020ac:	4b73      	ldr	r3, [pc, #460]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80020b8:	4b70      	ldr	r3, [pc, #448]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	041b      	lsls	r3, r3, #16
 80020c6:	496d      	ldr	r1, [pc, #436]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	618b      	str	r3, [r1, #24]
 80020cc:	e018      	b.n	8002100 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80020ce:	4b6b      	ldr	r3, [pc, #428]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a6a      	ldr	r2, [pc, #424]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80020d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020da:	f7ff fab5 	bl	8001648 <HAL_GetTick>
 80020de:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80020e2:	f7ff fab1 	bl	8001648 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e3c1      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80020f4:	4b61      	ldr	r3, [pc, #388]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1f0      	bne.n	80020e2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 80a0 	beq.w	800224e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	2b10      	cmp	r3, #16
 8002112:	d005      	beq.n	8002120 <HAL_RCC_OscConfig+0x10c>
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	2b18      	cmp	r3, #24
 8002118:	d109      	bne.n	800212e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	2b03      	cmp	r3, #3
 800211e:	d106      	bne.n	800212e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	f040 8092 	bne.w	800224e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e3a4      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002136:	d106      	bne.n	8002146 <HAL_RCC_OscConfig+0x132>
 8002138:	4b50      	ldr	r3, [pc, #320]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a4f      	ldr	r2, [pc, #316]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 800213e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	e058      	b.n	80021f8 <HAL_RCC_OscConfig+0x1e4>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d112      	bne.n	8002174 <HAL_RCC_OscConfig+0x160>
 800214e:	4b4b      	ldr	r3, [pc, #300]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a4a      	ldr	r2, [pc, #296]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 8002154:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	4b48      	ldr	r3, [pc, #288]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a47      	ldr	r2, [pc, #284]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 8002160:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b45      	ldr	r3, [pc, #276]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a44      	ldr	r2, [pc, #272]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 800216c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e041      	b.n	80021f8 <HAL_RCC_OscConfig+0x1e4>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800217c:	d112      	bne.n	80021a4 <HAL_RCC_OscConfig+0x190>
 800217e:	4b3f      	ldr	r3, [pc, #252]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a3e      	ldr	r2, [pc, #248]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 8002184:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b3c      	ldr	r3, [pc, #240]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a3b      	ldr	r2, [pc, #236]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 8002190:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	4b39      	ldr	r3, [pc, #228]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a38      	ldr	r2, [pc, #224]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 800219c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	e029      	b.n	80021f8 <HAL_RCC_OscConfig+0x1e4>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80021ac:	d112      	bne.n	80021d4 <HAL_RCC_OscConfig+0x1c0>
 80021ae:	4b33      	ldr	r3, [pc, #204]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a32      	ldr	r2, [pc, #200]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80021b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	4b30      	ldr	r3, [pc, #192]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a2f      	ldr	r2, [pc, #188]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80021c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b2d      	ldr	r3, [pc, #180]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a2c      	ldr	r2, [pc, #176]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e011      	b.n	80021f8 <HAL_RCC_OscConfig+0x1e4>
 80021d4:	4b29      	ldr	r3, [pc, #164]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a28      	ldr	r2, [pc, #160]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80021da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	4b26      	ldr	r3, [pc, #152]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a25      	ldr	r2, [pc, #148]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80021e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021ea:	6013      	str	r3, [r2, #0]
 80021ec:	4b23      	ldr	r3, [pc, #140]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a22      	ldr	r2, [pc, #136]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80021f2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80021f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d013      	beq.n	8002228 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002200:	f7ff fa22 	bl	8001648 <HAL_GetTick>
 8002204:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002208:	f7ff fa1e 	bl	8001648 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b64      	cmp	r3, #100	@ 0x64
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e32e      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800221a:	4b18      	ldr	r3, [pc, #96]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f0      	beq.n	8002208 <HAL_RCC_OscConfig+0x1f4>
 8002226:	e012      	b.n	800224e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7ff fa0e 	bl	8001648 <HAL_GetTick>
 800222c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002230:	f7ff fa0a 	bl	8001648 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b64      	cmp	r3, #100	@ 0x64
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e31a      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002242:	4b0e      	ldr	r3, [pc, #56]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 809a 	beq.w	8002390 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_RCC_OscConfig+0x25a>
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	2b18      	cmp	r3, #24
 8002266:	d149      	bne.n	80022fc <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d146      	bne.n	80022fc <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d104      	bne.n	8002280 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e2fe      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
 800227a:	bf00      	nop
 800227c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d11c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002286:	4b9a      	ldr	r3, [pc, #616]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0218 	and.w	r2, r3, #24
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	429a      	cmp	r2, r3
 8002294:	d014      	beq.n	80022c0 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002296:	4b96      	ldr	r3, [pc, #600]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 0218 	bic.w	r2, r3, #24
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	4993      	ldr	r1, [pc, #588]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80022a8:	f000 fdd0 	bl	8002e4c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022ac:	4b91      	ldr	r3, [pc, #580]	@ (80024f4 <HAL_RCC_OscConfig+0x4e0>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe ff9f 	bl	80011f4 <HAL_InitTick>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e2db      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7ff f9c2 	bl	8001648 <HAL_GetTick>
 80022c4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80022c8:	f7ff f9be 	bl	8001648 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e2ce      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022da:	4b85      	ldr	r3, [pc, #532]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80022e6:	4b82      	ldr	r3, [pc, #520]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	041b      	lsls	r3, r3, #16
 80022f4:	497e      	ldr	r1, [pc, #504]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80022fa:	e049      	b.n	8002390 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d02c      	beq.n	800235e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002304:	4b7a      	ldr	r3, [pc, #488]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f023 0218 	bic.w	r2, r3, #24
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	4977      	ldr	r1, [pc, #476]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 8002312:	4313      	orrs	r3, r2
 8002314:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002316:	4b76      	ldr	r3, [pc, #472]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a75      	ldr	r2, [pc, #468]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002322:	f7ff f991 	bl	8001648 <HAL_GetTick>
 8002326:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800232a:	f7ff f98d 	bl	8001648 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e29d      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800233c:	4b6c      	ldr	r3, [pc, #432]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002348:	4b69      	ldr	r3, [pc, #420]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	041b      	lsls	r3, r3, #16
 8002356:	4966      	ldr	r1, [pc, #408]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 8002358:	4313      	orrs	r3, r2
 800235a:	610b      	str	r3, [r1, #16]
 800235c:	e018      	b.n	8002390 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800235e:	4b64      	ldr	r3, [pc, #400]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a63      	ldr	r2, [pc, #396]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236a:	f7ff f96d 	bl	8001648 <HAL_GetTick>
 800236e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002372:	f7ff f969 	bl	8001648 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e279      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002384:	4b5a      	ldr	r3, [pc, #360]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f0      	bne.n	8002372 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	2b00      	cmp	r3, #0
 800239a:	d03c      	beq.n	8002416 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d01c      	beq.n	80023de <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a4:	4b52      	ldr	r3, [pc, #328]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80023a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023aa:	4a51      	ldr	r2, [pc, #324]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80023ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b4:	f7ff f948 	bl	8001648 <HAL_GetTick>
 80023b8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80023bc:	f7ff f944 	bl	8001648 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e254      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80023ce:	4b48      	ldr	r3, [pc, #288]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80023d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0ef      	beq.n	80023bc <HAL_RCC_OscConfig+0x3a8>
 80023dc:	e01b      	b.n	8002416 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023de:	4b44      	ldr	r3, [pc, #272]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80023e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023e4:	4a42      	ldr	r2, [pc, #264]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80023e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80023ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ee:	f7ff f92b 	bl	8001648 <HAL_GetTick>
 80023f2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80023f6:	f7ff f927 	bl	8001648 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e237      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002408:	4b39      	ldr	r3, [pc, #228]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 800240a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800240e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1ef      	bne.n	80023f6 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 80d2 	beq.w	80025c8 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002424:	4b34      	ldr	r3, [pc, #208]	@ (80024f8 <HAL_RCC_OscConfig+0x4e4>)
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	d118      	bne.n	8002462 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002430:	4b31      	ldr	r3, [pc, #196]	@ (80024f8 <HAL_RCC_OscConfig+0x4e4>)
 8002432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002434:	4a30      	ldr	r2, [pc, #192]	@ (80024f8 <HAL_RCC_OscConfig+0x4e4>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800243c:	f7ff f904 	bl	8001648 <HAL_GetTick>
 8002440:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002444:	f7ff f900 	bl	8001648 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e210      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002456:	4b28      	ldr	r3, [pc, #160]	@ (80024f8 <HAL_RCC_OscConfig+0x4e4>)
 8002458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d108      	bne.n	800247c <HAL_RCC_OscConfig+0x468>
 800246a:	4b21      	ldr	r3, [pc, #132]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 800246c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002470:	4a1f      	ldr	r2, [pc, #124]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800247a:	e074      	b.n	8002566 <HAL_RCC_OscConfig+0x552>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d118      	bne.n	80024b6 <HAL_RCC_OscConfig+0x4a2>
 8002484:	4b1a      	ldr	r3, [pc, #104]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 8002486:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800248a:	4a19      	ldr	r2, [pc, #100]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 800248c:	f023 0301 	bic.w	r3, r3, #1
 8002490:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002494:	4b16      	ldr	r3, [pc, #88]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 8002496:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800249a:	4a15      	ldr	r2, [pc, #84]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 800249c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024a4:	4b12      	ldr	r3, [pc, #72]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80024a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024aa:	4a11      	ldr	r2, [pc, #68]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80024ac:	f023 0304 	bic.w	r3, r3, #4
 80024b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024b4:	e057      	b.n	8002566 <HAL_RCC_OscConfig+0x552>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b05      	cmp	r3, #5
 80024bc:	d11e      	bne.n	80024fc <HAL_RCC_OscConfig+0x4e8>
 80024be:	4b0c      	ldr	r3, [pc, #48]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80024c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024c4:	4a0a      	ldr	r2, [pc, #40]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80024c6:	f043 0304 	orr.w	r3, r3, #4
 80024ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024ce:	4b08      	ldr	r3, [pc, #32]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80024d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024d4:	4a06      	ldr	r2, [pc, #24]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80024d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024de:	4b04      	ldr	r3, [pc, #16]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80024e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024e4:	4a02      	ldr	r2, [pc, #8]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024ee:	e03a      	b.n	8002566 <HAL_RCC_OscConfig+0x552>
 80024f0:	44020c00 	.word	0x44020c00
 80024f4:	20000004 	.word	0x20000004
 80024f8:	44020800 	.word	0x44020800
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b85      	cmp	r3, #133	@ 0x85
 8002502:	d118      	bne.n	8002536 <HAL_RCC_OscConfig+0x522>
 8002504:	4ba2      	ldr	r3, [pc, #648]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002506:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800250a:	4aa1      	ldr	r2, [pc, #644]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 800250c:	f043 0304 	orr.w	r3, r3, #4
 8002510:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002514:	4b9e      	ldr	r3, [pc, #632]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002516:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800251a:	4a9d      	ldr	r2, [pc, #628]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 800251c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002520:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002524:	4b9a      	ldr	r3, [pc, #616]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002526:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800252a:	4a99      	ldr	r2, [pc, #612]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002534:	e017      	b.n	8002566 <HAL_RCC_OscConfig+0x552>
 8002536:	4b96      	ldr	r3, [pc, #600]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002538:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800253c:	4a94      	ldr	r2, [pc, #592]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 800253e:	f023 0301 	bic.w	r3, r3, #1
 8002542:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002546:	4b92      	ldr	r3, [pc, #584]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800254c:	4a90      	ldr	r2, [pc, #576]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 800254e:	f023 0304 	bic.w	r3, r3, #4
 8002552:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002556:	4b8e      	ldr	r3, [pc, #568]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002558:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800255c:	4a8c      	ldr	r2, [pc, #560]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 800255e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002562:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d016      	beq.n	800259c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256e:	f7ff f86b 	bl	8001648 <HAL_GetTick>
 8002572:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002574:	e00a      	b.n	800258c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7ff f867 	bl	8001648 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002584:	4293      	cmp	r3, r2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e175      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800258c:	4b80      	ldr	r3, [pc, #512]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 800258e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0ed      	beq.n	8002576 <HAL_RCC_OscConfig+0x562>
 800259a:	e015      	b.n	80025c8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259c:	f7ff f854 	bl	8001648 <HAL_GetTick>
 80025a0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025a2:	e00a      	b.n	80025ba <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a4:	f7ff f850 	bl	8001648 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e15e      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025ba:	4b75      	ldr	r3, [pc, #468]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 80025bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1ed      	bne.n	80025a4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0320 	and.w	r3, r3, #32
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d036      	beq.n	8002642 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d019      	beq.n	8002610 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a6b      	ldr	r2, [pc, #428]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 80025e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e8:	f7ff f82e 	bl	8001648 <HAL_GetTick>
 80025ec:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80025f0:	f7ff f82a 	bl	8001648 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e13a      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002602:	4b63      	ldr	r3, [pc, #396]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x5dc>
 800260e:	e018      	b.n	8002642 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002610:	4b5f      	ldr	r3, [pc, #380]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a5e      	ldr	r2, [pc, #376]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002616:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800261a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261c:	f7ff f814 	bl	8001648 <HAL_GetTick>
 8002620:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002624:	f7ff f810 	bl	8001648 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e120      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002636:	4b56      	ldr	r3, [pc, #344]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 8115 	beq.w	8002876 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	2b18      	cmp	r3, #24
 8002650:	f000 80af 	beq.w	80027b2 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002658:	2b02      	cmp	r3, #2
 800265a:	f040 8086 	bne.w	800276a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800265e:	4b4c      	ldr	r3, [pc, #304]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a4b      	ldr	r2, [pc, #300]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002664:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266a:	f7fe ffed 	bl	8001648 <HAL_GetTick>
 800266e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002672:	f7fe ffe9 	bl	8001648 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e0f9      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002684:	4b42      	ldr	r3, [pc, #264]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1f0      	bne.n	8002672 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002690:	4b3f      	ldr	r3, [pc, #252]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002694:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002698:	f023 0303 	bic.w	r3, r3, #3
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026a4:	0212      	lsls	r2, r2, #8
 80026a6:	430a      	orrs	r2, r1
 80026a8:	4939      	ldr	r1, [pc, #228]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	628b      	str	r3, [r1, #40]	@ 0x28
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026b2:	3b01      	subs	r3, #1
 80026b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026bc:	3b01      	subs	r3, #1
 80026be:	025b      	lsls	r3, r3, #9
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c8:	3b01      	subs	r3, #1
 80026ca:	041b      	lsls	r3, r3, #16
 80026cc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	3b01      	subs	r3, #1
 80026d8:	061b      	lsls	r3, r3, #24
 80026da:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80026de:	492c      	ldr	r1, [pc, #176]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80026e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 80026e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e8:	4a29      	ldr	r2, [pc, #164]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 80026ea:	f023 0310 	bic.w	r3, r3, #16
 80026ee:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f4:	4a26      	ldr	r2, [pc, #152]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80026fa:	4b25      	ldr	r3, [pc, #148]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 80026fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fe:	4a24      	ldr	r2, [pc, #144]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002700:	f043 0310 	orr.w	r3, r3, #16
 8002704:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002706:	4b22      	ldr	r3, [pc, #136]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270a:	f023 020c 	bic.w	r2, r3, #12
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002712:	491f      	ldr	r1, [pc, #124]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002714:	4313      	orrs	r3, r2
 8002716:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002718:	4b1d      	ldr	r3, [pc, #116]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 800271a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271c:	f023 0220 	bic.w	r2, r3, #32
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002724:	491a      	ldr	r1, [pc, #104]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002726:	4313      	orrs	r3, r2
 8002728:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800272a:	4b19      	ldr	r3, [pc, #100]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 800272c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272e:	4a18      	ldr	r2, [pc, #96]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002734:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002736:	4b16      	ldr	r3, [pc, #88]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a15      	ldr	r2, [pc, #84]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 800273c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002742:	f7fe ff81 	bl	8001648 <HAL_GetTick>
 8002746:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800274a:	f7fe ff7d 	bl	8001648 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e08d      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800275c:	4b0c      	ldr	r3, [pc, #48]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x736>
 8002768:	e085      	b.n	8002876 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800276a:	4b09      	ldr	r3, [pc, #36]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a08      	ldr	r2, [pc, #32]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002770:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002776:	f7fe ff67 	bl	8001648 <HAL_GetTick>
 800277a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800277c:	e00a      	b.n	8002794 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800277e:	f7fe ff63 	bl	8001648 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d903      	bls.n	8002794 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e073      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
 8002790:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002794:	4b3a      	ldr	r3, [pc, #232]	@ (8002880 <HAL_RCC_OscConfig+0x86c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1ee      	bne.n	800277e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80027a0:	4b37      	ldr	r3, [pc, #220]	@ (8002880 <HAL_RCC_OscConfig+0x86c>)
 80027a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a4:	4a36      	ldr	r2, [pc, #216]	@ (8002880 <HAL_RCC_OscConfig+0x86c>)
 80027a6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80027aa:	f023 0303 	bic.w	r3, r3, #3
 80027ae:	6293      	str	r3, [r2, #40]	@ 0x28
 80027b0:	e061      	b.n	8002876 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80027b2:	4b33      	ldr	r3, [pc, #204]	@ (8002880 <HAL_RCC_OscConfig+0x86c>)
 80027b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80027b8:	4b31      	ldr	r3, [pc, #196]	@ (8002880 <HAL_RCC_OscConfig+0x86c>)
 80027ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027bc:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d031      	beq.n	800282a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f003 0203 	and.w	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d12a      	bne.n	800282a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	0a1b      	lsrs	r3, r3, #8
 80027d8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d122      	bne.n	800282a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ee:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d11a      	bne.n	800282a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	0a5b      	lsrs	r3, r3, #9
 80027f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002800:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002802:	429a      	cmp	r2, r3
 8002804:	d111      	bne.n	800282a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	0c1b      	lsrs	r3, r3, #16
 800280a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002812:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002814:	429a      	cmp	r2, r3
 8002816:	d108      	bne.n	800282a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	0e1b      	lsrs	r3, r3, #24
 800281c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d001      	beq.n	800282e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e024      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800282e:	4b14      	ldr	r3, [pc, #80]	@ (8002880 <HAL_RCC_OscConfig+0x86c>)
 8002830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002832:	08db      	lsrs	r3, r3, #3
 8002834:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800283c:	429a      	cmp	r2, r3
 800283e:	d01a      	beq.n	8002876 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002840:	4b0f      	ldr	r3, [pc, #60]	@ (8002880 <HAL_RCC_OscConfig+0x86c>)
 8002842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002844:	4a0e      	ldr	r2, [pc, #56]	@ (8002880 <HAL_RCC_OscConfig+0x86c>)
 8002846:	f023 0310 	bic.w	r3, r3, #16
 800284a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7fe fefc 	bl	8001648 <HAL_GetTick>
 8002850:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002852:	bf00      	nop
 8002854:	f7fe fef8 	bl	8001648 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	4293      	cmp	r3, r2
 800285e:	d0f9      	beq.n	8002854 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002864:	4a06      	ldr	r2, [pc, #24]	@ (8002880 <HAL_RCC_OscConfig+0x86c>)
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800286a:	4b05      	ldr	r3, [pc, #20]	@ (8002880 <HAL_RCC_OscConfig+0x86c>)
 800286c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800286e:	4a04      	ldr	r2, [pc, #16]	@ (8002880 <HAL_RCC_OscConfig+0x86c>)
 8002870:	f043 0310 	orr.w	r3, r3, #16
 8002874:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3720      	adds	r7, #32
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	44020c00 	.word	0x44020c00

08002884 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e19e      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002898:	4b83      	ldr	r3, [pc, #524]	@ (8002aa8 <HAL_RCC_ClockConfig+0x224>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 030f 	and.w	r3, r3, #15
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d910      	bls.n	80028c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a6:	4b80      	ldr	r3, [pc, #512]	@ (8002aa8 <HAL_RCC_ClockConfig+0x224>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 020f 	bic.w	r2, r3, #15
 80028ae:	497e      	ldr	r1, [pc, #504]	@ (8002aa8 <HAL_RCC_ClockConfig+0x224>)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b7c      	ldr	r3, [pc, #496]	@ (8002aa8 <HAL_RCC_ClockConfig+0x224>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e186      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d012      	beq.n	80028fa <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	695a      	ldr	r2, [r3, #20]
 80028d8:	4b74      	ldr	r3, [pc, #464]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	0a1b      	lsrs	r3, r3, #8
 80028de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d909      	bls.n	80028fa <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80028e6:	4b71      	ldr	r3, [pc, #452]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	021b      	lsls	r3, r3, #8
 80028f4:	496d      	ldr	r1, [pc, #436]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d012      	beq.n	800292c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691a      	ldr	r2, [r3, #16]
 800290a:	4b68      	ldr	r3, [pc, #416]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	091b      	lsrs	r3, r3, #4
 8002910:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002914:	429a      	cmp	r2, r3
 8002916:	d909      	bls.n	800292c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002918:	4b64      	ldr	r3, [pc, #400]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	4961      	ldr	r1, [pc, #388]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 8002928:	4313      	orrs	r3, r2
 800292a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d010      	beq.n	800295a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	4b5b      	ldr	r3, [pc, #364]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002944:	429a      	cmp	r2, r3
 8002946:	d908      	bls.n	800295a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002948:	4b58      	ldr	r3, [pc, #352]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	4955      	ldr	r1, [pc, #340]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 8002956:	4313      	orrs	r3, r2
 8002958:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d010      	beq.n	8002988 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	4b50      	ldr	r3, [pc, #320]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	429a      	cmp	r2, r3
 8002974:	d908      	bls.n	8002988 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002976:	4b4d      	ldr	r3, [pc, #308]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	f023 020f 	bic.w	r2, r3, #15
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	494a      	ldr	r1, [pc, #296]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 8002984:	4313      	orrs	r3, r2
 8002986:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8093 	beq.w	8002abc <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b03      	cmp	r3, #3
 800299c:	d107      	bne.n	80029ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800299e:	4b43      	ldr	r3, [pc, #268]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d121      	bne.n	80029ee <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e113      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d107      	bne.n	80029c6 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029b6:	4b3d      	ldr	r3, [pc, #244]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d115      	bne.n	80029ee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e107      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d107      	bne.n	80029de <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80029ce:	4b37      	ldr	r3, [pc, #220]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d109      	bne.n	80029ee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e0fb      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029de:	4b33      	ldr	r3, [pc, #204]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e0f3      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80029ee:	4b2f      	ldr	r3, [pc, #188]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	f023 0203 	bic.w	r2, r3, #3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	492c      	ldr	r1, [pc, #176]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a00:	f7fe fe22 	bl	8001648 <HAL_GetTick>
 8002a04:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d112      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002a10:	f7fe fe1a 	bl	8001648 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e0d7      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a26:	4b21      	ldr	r3, [pc, #132]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f003 0318 	and.w	r3, r3, #24
 8002a2e:	2b18      	cmp	r3, #24
 8002a30:	d1ee      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x18c>
 8002a32:	e043      	b.n	8002abc <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d112      	bne.n	8002a62 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a3c:	e00a      	b.n	8002a54 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002a3e:	f7fe fe03 	bl	8001648 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e0c0      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a54:	4b15      	ldr	r3, [pc, #84]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	f003 0318 	and.w	r3, r3, #24
 8002a5c:	2b10      	cmp	r3, #16
 8002a5e:	d1ee      	bne.n	8002a3e <HAL_RCC_ClockConfig+0x1ba>
 8002a60:	e02c      	b.n	8002abc <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d122      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002a6a:	e00a      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002a6c:	f7fe fdec 	bl	8001648 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e0a9      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002a82:	4b0a      	ldr	r3, [pc, #40]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f003 0318 	and.w	r3, r3, #24
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d1ee      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x1e8>
 8002a8e:	e015      	b.n	8002abc <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002a90:	f7fe fdda 	bl	8001648 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d906      	bls.n	8002ab0 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e097      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x352>
 8002aa6:	bf00      	nop
 8002aa8:	40022000 	.word	0x40022000
 8002aac:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ab0:	4b4b      	ldr	r3, [pc, #300]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	f003 0318 	and.w	r3, r3, #24
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1e9      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d010      	beq.n	8002aea <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	4b44      	ldr	r3, [pc, #272]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	f003 030f 	and.w	r3, r3, #15
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d208      	bcs.n	8002aea <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002ad8:	4b41      	ldr	r3, [pc, #260]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	f023 020f 	bic.w	r2, r3, #15
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	493e      	ldr	r1, [pc, #248]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aea:	4b3e      	ldr	r3, [pc, #248]	@ (8002be4 <HAL_RCC_ClockConfig+0x360>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d210      	bcs.n	8002b1a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af8:	4b3a      	ldr	r3, [pc, #232]	@ (8002be4 <HAL_RCC_ClockConfig+0x360>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f023 020f 	bic.w	r2, r3, #15
 8002b00:	4938      	ldr	r1, [pc, #224]	@ (8002be4 <HAL_RCC_ClockConfig+0x360>)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b08:	4b36      	ldr	r3, [pc, #216]	@ (8002be4 <HAL_RCC_ClockConfig+0x360>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 030f 	and.w	r3, r3, #15
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d001      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e05d      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d010      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	4b2d      	ldr	r3, [pc, #180]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d208      	bcs.n	8002b48 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002b36:	4b2a      	ldr	r3, [pc, #168]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	4927      	ldr	r1, [pc, #156]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d012      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	4b21      	ldr	r3, [pc, #132]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d209      	bcs.n	8002b7a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002b66:	4b1e      	ldr	r3, [pc, #120]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	491a      	ldr	r1, [pc, #104]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d012      	beq.n	8002bac <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	4b15      	ldr	r3, [pc, #84]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	0a1b      	lsrs	r3, r3, #8
 8002b90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d209      	bcs.n	8002bac <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002b98:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	490e      	ldr	r1, [pc, #56]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002bac:	f000 f822 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	490b      	ldr	r1, [pc, #44]	@ (8002be8 <HAL_RCC_ClockConfig+0x364>)
 8002bbc:	5ccb      	ldrb	r3, [r1, r3]
 8002bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bec <HAL_RCC_ClockConfig+0x368>)
 8002bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf0 <HAL_RCC_ClockConfig+0x36c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fe fb12 	bl	80011f4 <HAL_InitTick>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002bd4:	7afb      	ldrb	r3, [r7, #11]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	44020c00 	.word	0x44020c00
 8002be4:	40022000 	.word	0x40022000
 8002be8:	0800c778 	.word	0x0800c778
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	20000004 	.word	0x20000004

08002bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b089      	sub	sp, #36	@ 0x24
 8002bf8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002bfa:	4b8c      	ldr	r3, [pc, #560]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	f003 0318 	and.w	r3, r3, #24
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d102      	bne.n	8002c0c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002c06:	4b8a      	ldr	r3, [pc, #552]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002c08:	61fb      	str	r3, [r7, #28]
 8002c0a:	e107      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c0c:	4b87      	ldr	r3, [pc, #540]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	f003 0318 	and.w	r3, r3, #24
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d112      	bne.n	8002c3e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002c18:	4b84      	ldr	r3, [pc, #528]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0320 	and.w	r3, r3, #32
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d009      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002c24:	4b81      	ldr	r3, [pc, #516]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	08db      	lsrs	r3, r3, #3
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	4a81      	ldr	r2, [pc, #516]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x240>)
 8002c30:	fa22 f303 	lsr.w	r3, r2, r3
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	e0f1      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002c38:	4b7e      	ldr	r3, [pc, #504]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x240>)
 8002c3a:	61fb      	str	r3, [r7, #28]
 8002c3c:	e0ee      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c3e:	4b7b      	ldr	r3, [pc, #492]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f003 0318 	and.w	r3, r3, #24
 8002c46:	2b10      	cmp	r3, #16
 8002c48:	d102      	bne.n	8002c50 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c4a:	4b7b      	ldr	r3, [pc, #492]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x244>)
 8002c4c:	61fb      	str	r3, [r7, #28]
 8002c4e:	e0e5      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c50:	4b76      	ldr	r3, [pc, #472]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	f003 0318 	and.w	r3, r3, #24
 8002c58:	2b18      	cmp	r3, #24
 8002c5a:	f040 80dd 	bne.w	8002e18 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002c5e:	4b73      	ldr	r3, [pc, #460]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002c68:	4b70      	ldr	r3, [pc, #448]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6c:	0a1b      	lsrs	r3, r3, #8
 8002c6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c72:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002c74:	4b6d      	ldr	r3, [pc, #436]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002c80:	4b6a      	ldr	r3, [pc, #424]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002c84:	08db      	lsrs	r3, r3, #3
 8002c86:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	fb02 f303 	mul.w	r3, r2, r3
 8002c90:	ee07 3a90 	vmov	s15, r3
 8002c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c98:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 80b7 	beq.w	8002e12 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d003      	beq.n	8002cb2 <HAL_RCC_GetSysClockFreq+0xbe>
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d056      	beq.n	8002d5e <HAL_RCC_GetSysClockFreq+0x16a>
 8002cb0:	e077      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002cb2:	4b5e      	ldr	r3, [pc, #376]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0320 	and.w	r3, r3, #32
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d02d      	beq.n	8002d1a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002cbe:	4b5b      	ldr	r3, [pc, #364]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	08db      	lsrs	r3, r3, #3
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	4a5a      	ldr	r2, [pc, #360]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x240>)
 8002cca:	fa22 f303 	lsr.w	r3, r2, r3
 8002cce:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	ee07 3a90 	vmov	s15, r3
 8002cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	ee07 3a90 	vmov	s15, r3
 8002ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ce8:	4b50      	ldr	r3, [pc, #320]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf0:	ee07 3a90 	vmov	s15, r3
 8002cf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cf8:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cfc:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002e3c <HAL_RCC_GetSysClockFreq+0x248>
 8002d00:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d04:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d14:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002d18:	e065      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	ee07 3a90 	vmov	s15, r3
 8002d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d24:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002e40 <HAL_RCC_GetSysClockFreq+0x24c>
 8002d28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d2c:	4b3f      	ldr	r3, [pc, #252]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d34:	ee07 3a90 	vmov	s15, r3
 8002d38:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d3c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d40:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002e3c <HAL_RCC_GetSysClockFreq+0x248>
 8002d44:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d48:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d50:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d58:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002d5c:	e043      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	ee07 3a90 	vmov	s15, r3
 8002d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d68:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002e44 <HAL_RCC_GetSysClockFreq+0x250>
 8002d6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d70:	4b2e      	ldr	r3, [pc, #184]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d78:	ee07 3a90 	vmov	s15, r3
 8002d7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d80:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d84:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002e3c <HAL_RCC_GetSysClockFreq+0x248>
 8002d88:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d94:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d9c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002da0:	e021      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	ee07 3a90 	vmov	s15, r3
 8002da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dac:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002e48 <HAL_RCC_GetSysClockFreq+0x254>
 8002db0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002db4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002db6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dbc:	ee07 3a90 	vmov	s15, r3
 8002dc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dc4:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dc8:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002e3c <HAL_RCC_GetSysClockFreq+0x248>
 8002dcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002de4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002de6:	4b11      	ldr	r3, [pc, #68]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dea:	0a5b      	lsrs	r3, r3, #9
 8002dec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002df0:	3301      	adds	r3, #1
 8002df2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	ee07 3a90 	vmov	s15, r3
 8002dfa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002dfe:	edd7 6a06 	vldr	s13, [r7, #24]
 8002e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e0a:	ee17 3a90 	vmov	r3, s15
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	e004      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
 8002e16:	e001      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002e18:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x240>)
 8002e1a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002e1c:	69fb      	ldr	r3, [r7, #28]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3724      	adds	r7, #36	@ 0x24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	44020c00 	.word	0x44020c00
 8002e30:	003d0900 	.word	0x003d0900
 8002e34:	03d09000 	.word	0x03d09000
 8002e38:	007a1200 	.word	0x007a1200
 8002e3c:	46000000 	.word	0x46000000
 8002e40:	4c742400 	.word	0x4c742400
 8002e44:	4af42400 	.word	0x4af42400
 8002e48:	4a742400 	.word	0x4a742400

08002e4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002e50:	f7ff fed0 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8002e54:	4602      	mov	r2, r0
 8002e56:	4b08      	ldr	r3, [pc, #32]	@ (8002e78 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002e58:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002e5a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002e5e:	4907      	ldr	r1, [pc, #28]	@ (8002e7c <HAL_RCC_GetHCLKFreq+0x30>)
 8002e60:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002e62:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002e66:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6a:	4a05      	ldr	r2, [pc, #20]	@ (8002e80 <HAL_RCC_GetHCLKFreq+0x34>)
 8002e6c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002e6e:	4b04      	ldr	r3, [pc, #16]	@ (8002e80 <HAL_RCC_GetHCLKFreq+0x34>)
 8002e70:	681b      	ldr	r3, [r3, #0]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	44020c00 	.word	0x44020c00
 8002e7c:	0800c778 	.word	0x0800c778
 8002e80:	20000000 	.word	0x20000000

08002e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002e88:	f7ff ffe0 	bl	8002e4c <HAL_RCC_GetHCLKFreq>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	4904      	ldr	r1, [pc, #16]	@ (8002eac <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e9a:	5ccb      	ldrb	r3, [r1, r3]
 8002e9c:	f003 031f 	and.w	r3, r3, #31
 8002ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	44020c00 	.word	0x44020c00
 8002eac:	0800c788 	.word	0x0800c788

08002eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002eb4:	f7ff ffca 	bl	8002e4c <HAL_RCC_GetHCLKFreq>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	4b06      	ldr	r3, [pc, #24]	@ (8002ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	0a1b      	lsrs	r3, r3, #8
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	4904      	ldr	r1, [pc, #16]	@ (8002ed8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ec6:	5ccb      	ldrb	r3, [r1, r3]
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	44020c00 	.word	0x44020c00
 8002ed8:	0800c788 	.word	0x0800c788

08002edc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002ee0:	f7ff ffb4 	bl	8002e4c <HAL_RCC_GetHCLKFreq>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	4b06      	ldr	r3, [pc, #24]	@ (8002f00 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	0b1b      	lsrs	r3, r3, #12
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	4904      	ldr	r1, [pc, #16]	@ (8002f04 <HAL_RCC_GetPCLK3Freq+0x28>)
 8002ef2:	5ccb      	ldrb	r3, [r1, r3]
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	44020c00 	.word	0x44020c00
 8002f04:	0800c788 	.word	0x0800c788

08002f08 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	221f      	movs	r2, #31
 8002f16:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8002f18:	4b15      	ldr	r3, [pc, #84]	@ (8002f70 <HAL_RCC_GetClockConfig+0x68>)
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	f003 0203 	and.w	r2, r3, #3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8002f24:	4b12      	ldr	r3, [pc, #72]	@ (8002f70 <HAL_RCC_GetClockConfig+0x68>)
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f003 020f 	and.w	r2, r3, #15
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	091b      	lsrs	r3, r3, #4
 8002f42:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	0a1b      	lsrs	r3, r3, #8
 8002f4e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f56:	4b07      	ldr	r3, [pc, #28]	@ (8002f74 <HAL_RCC_GetClockConfig+0x6c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 020f 	and.w	r2, r3, #15
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	601a      	str	r2, [r3, #0]
}
 8002f62:	bf00      	nop
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	44020c00 	.word	0x44020c00
 8002f74:	40022000 	.word	0x40022000

08002f78 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f7c:	b0d8      	sub	sp, #352	@ 0x160
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f84:	2300      	movs	r3, #0
 8002f86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002f90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f98:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8002f9c:	2500      	movs	r5, #0
 8002f9e:	ea54 0305 	orrs.w	r3, r4, r5
 8002fa2:	d00b      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002fa4:	4bcd      	ldr	r3, [pc, #820]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002fa6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002faa:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8002fae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb4:	4ac9      	ldr	r2, [pc, #804]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002fb6:	430b      	orrs	r3, r1
 8002fb8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc4:	f002 0801 	and.w	r8, r2, #1
 8002fc8:	f04f 0900 	mov.w	r9, #0
 8002fcc:	ea58 0309 	orrs.w	r3, r8, r9
 8002fd0:	d042      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002fd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd8:	2b05      	cmp	r3, #5
 8002fda:	d823      	bhi.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8002fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe2:	bf00      	nop
 8002fe4:	0800302d 	.word	0x0800302d
 8002fe8:	08002ffd 	.word	0x08002ffd
 8002fec:	08003011 	.word	0x08003011
 8002ff0:	0800302d 	.word	0x0800302d
 8002ff4:	0800302d 	.word	0x0800302d
 8002ff8:	0800302d 	.word	0x0800302d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002ffc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003000:	3308      	adds	r3, #8
 8003002:	4618      	mov	r0, r3
 8003004:	f004 feda 	bl	8007dbc <RCCEx_PLL2_Config>
 8003008:	4603      	mov	r3, r0
 800300a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800300e:	e00e      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003010:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003014:	3330      	adds	r3, #48	@ 0x30
 8003016:	4618      	mov	r0, r3
 8003018:	f004 ff68 	bl	8007eec <RCCEx_PLL3_Config>
 800301c:	4603      	mov	r3, r0
 800301e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8003022:	e004      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800302a:	e000      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800302c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800302e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10c      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003036:	4ba9      	ldr	r3, [pc, #676]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003038:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800303c:	f023 0107 	bic.w	r1, r3, #7
 8003040:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003046:	4aa5      	ldr	r2, [pc, #660]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003048:	430b      	orrs	r3, r1
 800304a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800304e:	e003      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003050:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003054:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003058:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800305c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003060:	f002 0a02 	and.w	sl, r2, #2
 8003064:	f04f 0b00 	mov.w	fp, #0
 8003068:	ea5a 030b 	orrs.w	r3, sl, fp
 800306c:	f000 8088 	beq.w	8003180 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003070:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003076:	2b28      	cmp	r3, #40	@ 0x28
 8003078:	d868      	bhi.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800307a:	a201      	add	r2, pc, #4	@ (adr r2, 8003080 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800307c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003080:	08003155 	.word	0x08003155
 8003084:	0800314d 	.word	0x0800314d
 8003088:	0800314d 	.word	0x0800314d
 800308c:	0800314d 	.word	0x0800314d
 8003090:	0800314d 	.word	0x0800314d
 8003094:	0800314d 	.word	0x0800314d
 8003098:	0800314d 	.word	0x0800314d
 800309c:	0800314d 	.word	0x0800314d
 80030a0:	08003125 	.word	0x08003125
 80030a4:	0800314d 	.word	0x0800314d
 80030a8:	0800314d 	.word	0x0800314d
 80030ac:	0800314d 	.word	0x0800314d
 80030b0:	0800314d 	.word	0x0800314d
 80030b4:	0800314d 	.word	0x0800314d
 80030b8:	0800314d 	.word	0x0800314d
 80030bc:	0800314d 	.word	0x0800314d
 80030c0:	08003139 	.word	0x08003139
 80030c4:	0800314d 	.word	0x0800314d
 80030c8:	0800314d 	.word	0x0800314d
 80030cc:	0800314d 	.word	0x0800314d
 80030d0:	0800314d 	.word	0x0800314d
 80030d4:	0800314d 	.word	0x0800314d
 80030d8:	0800314d 	.word	0x0800314d
 80030dc:	0800314d 	.word	0x0800314d
 80030e0:	08003155 	.word	0x08003155
 80030e4:	0800314d 	.word	0x0800314d
 80030e8:	0800314d 	.word	0x0800314d
 80030ec:	0800314d 	.word	0x0800314d
 80030f0:	0800314d 	.word	0x0800314d
 80030f4:	0800314d 	.word	0x0800314d
 80030f8:	0800314d 	.word	0x0800314d
 80030fc:	0800314d 	.word	0x0800314d
 8003100:	08003155 	.word	0x08003155
 8003104:	0800314d 	.word	0x0800314d
 8003108:	0800314d 	.word	0x0800314d
 800310c:	0800314d 	.word	0x0800314d
 8003110:	0800314d 	.word	0x0800314d
 8003114:	0800314d 	.word	0x0800314d
 8003118:	0800314d 	.word	0x0800314d
 800311c:	0800314d 	.word	0x0800314d
 8003120:	08003155 	.word	0x08003155
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003124:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003128:	3308      	adds	r3, #8
 800312a:	4618      	mov	r0, r3
 800312c:	f004 fe46 	bl	8007dbc <RCCEx_PLL2_Config>
 8003130:	4603      	mov	r3, r0
 8003132:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8003136:	e00e      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003138:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800313c:	3330      	adds	r3, #48	@ 0x30
 800313e:	4618      	mov	r0, r3
 8003140:	f004 fed4 	bl	8007eec <RCCEx_PLL3_Config>
 8003144:	4603      	mov	r3, r0
 8003146:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800314a:	e004      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003152:	e000      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8003154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003156:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10c      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800315e:	4b5f      	ldr	r3, [pc, #380]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003160:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003164:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003168:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800316c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800316e:	4a5b      	ldr	r2, [pc, #364]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003170:	430b      	orrs	r3, r1
 8003172:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003176:	e003      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003178:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800317c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003180:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003188:	f002 0304 	and.w	r3, r2, #4
 800318c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8003190:	2300      	movs	r3, #0
 8003192:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8003196:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 800319a:	460b      	mov	r3, r1
 800319c:	4313      	orrs	r3, r2
 800319e:	d04e      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80031a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80031a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031a6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80031aa:	d02c      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80031ac:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80031b0:	d825      	bhi.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x286>
 80031b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031b6:	d028      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80031b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031bc:	d81f      	bhi.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x286>
 80031be:	2bc0      	cmp	r3, #192	@ 0xc0
 80031c0:	d025      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x296>
 80031c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80031c4:	d81b      	bhi.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x286>
 80031c6:	2b80      	cmp	r3, #128	@ 0x80
 80031c8:	d00f      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x272>
 80031ca:	2b80      	cmp	r3, #128	@ 0x80
 80031cc:	d817      	bhi.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x286>
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d01f      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80031d2:	2b40      	cmp	r3, #64	@ 0x40
 80031d4:	d113      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80031da:	3308      	adds	r3, #8
 80031dc:	4618      	mov	r0, r3
 80031de:	f004 fded 	bl	8007dbc <RCCEx_PLL2_Config>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80031e8:	e014      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80031ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80031ee:	3330      	adds	r3, #48	@ 0x30
 80031f0:	4618      	mov	r0, r3
 80031f2:	f004 fe7b 	bl	8007eec <RCCEx_PLL3_Config>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80031fc:	e00a      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003204:	e006      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003206:	bf00      	nop
 8003208:	e004      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800320a:	bf00      	nop
 800320c:	e002      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800320e:	bf00      	nop
 8003210:	e000      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003212:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003214:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10c      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800321c:	4b2f      	ldr	r3, [pc, #188]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800321e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003222:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003226:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800322a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800322c:	4a2b      	ldr	r2, [pc, #172]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800322e:	430b      	orrs	r3, r1
 8003230:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003234:	e003      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003236:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800323a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800323e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003246:	f002 0308 	and.w	r3, r2, #8
 800324a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800324e:	2300      	movs	r3, #0
 8003250:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003254:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8003258:	460b      	mov	r3, r1
 800325a:	4313      	orrs	r3, r2
 800325c:	d056      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800325e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003262:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003264:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003268:	d031      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x356>
 800326a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800326e:	d82a      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003270:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003274:	d02d      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003276:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800327a:	d824      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800327c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003280:	d029      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003282:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003286:	d81e      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003288:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800328c:	d011      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800328e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003292:	d818      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003294:	2b00      	cmp	r3, #0
 8003296:	d023      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800329c:	d113      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800329e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032a2:	3308      	adds	r3, #8
 80032a4:	4618      	mov	r0, r3
 80032a6:	f004 fd89 	bl	8007dbc <RCCEx_PLL2_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80032b0:	e017      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80032b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032b6:	3330      	adds	r3, #48	@ 0x30
 80032b8:	4618      	mov	r0, r3
 80032ba:	f004 fe17 	bl	8007eec <RCCEx_PLL3_Config>
 80032be:	4603      	mov	r3, r0
 80032c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80032c4:	e00d      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80032cc:	e009      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80032ce:	bf00      	nop
 80032d0:	e007      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80032d2:	bf00      	nop
 80032d4:	e005      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80032d6:	bf00      	nop
 80032d8:	e003      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80032da:	bf00      	nop
 80032dc:	44020c00 	.word	0x44020c00
        break;
 80032e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10c      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80032ea:	4bbb      	ldr	r3, [pc, #748]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80032ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80032f0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80032f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032fa:	4ab7      	ldr	r2, [pc, #732]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80032fc:	430b      	orrs	r3, r1
 80032fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003302:	e003      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003304:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003308:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800330c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003314:	f002 0310 	and.w	r3, r2, #16
 8003318:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800331c:	2300      	movs	r3, #0
 800331e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003322:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8003326:	460b      	mov	r3, r1
 8003328:	4313      	orrs	r3, r2
 800332a:	d053      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800332c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003330:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003332:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003336:	d031      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003338:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800333c:	d82a      	bhi.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800333e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003342:	d02d      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003344:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003348:	d824      	bhi.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800334a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800334e:	d029      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003350:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003354:	d81e      	bhi.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003356:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800335a:	d011      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800335c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003360:	d818      	bhi.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003362:	2b00      	cmp	r3, #0
 8003364:	d020      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8003366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800336a:	d113      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800336c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003370:	3308      	adds	r3, #8
 8003372:	4618      	mov	r0, r3
 8003374:	f004 fd22 	bl	8007dbc <RCCEx_PLL2_Config>
 8003378:	4603      	mov	r3, r0
 800337a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800337e:	e014      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003380:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003384:	3330      	adds	r3, #48	@ 0x30
 8003386:	4618      	mov	r0, r3
 8003388:	f004 fdb0 	bl	8007eec <RCCEx_PLL3_Config>
 800338c:	4603      	mov	r3, r0
 800338e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8003392:	e00a      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800339a:	e006      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800339c:	bf00      	nop
 800339e:	e004      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80033a0:	bf00      	nop
 80033a2:	e002      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80033a4:	bf00      	nop
 80033a6:	e000      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80033a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10c      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80033b2:	4b89      	ldr	r3, [pc, #548]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80033b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80033b8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80033bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033c2:	4a85      	ldr	r2, [pc, #532]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80033c4:	430b      	orrs	r3, r1
 80033c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80033ca:	e003      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033cc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80033d0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80033d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033dc:	f002 0320 	and.w	r3, r2, #32
 80033e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80033e4:	2300      	movs	r3, #0
 80033e6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80033ea:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 80033ee:	460b      	mov	r3, r1
 80033f0:	4313      	orrs	r3, r2
 80033f2:	d053      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80033f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fa:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80033fe:	d031      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8003400:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003404:	d82a      	bhi.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003406:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800340a:	d02d      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800340c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003410:	d824      	bhi.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003412:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003416:	d029      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003418:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800341c:	d81e      	bhi.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800341e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003422:	d011      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003428:	d818      	bhi.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800342a:	2b00      	cmp	r3, #0
 800342c:	d020      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800342e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003432:	d113      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003434:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003438:	3308      	adds	r3, #8
 800343a:	4618      	mov	r0, r3
 800343c:	f004 fcbe 	bl	8007dbc <RCCEx_PLL2_Config>
 8003440:	4603      	mov	r3, r0
 8003442:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8003446:	e014      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003448:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800344c:	3330      	adds	r3, #48	@ 0x30
 800344e:	4618      	mov	r0, r3
 8003450:	f004 fd4c 	bl	8007eec <RCCEx_PLL3_Config>
 8003454:	4603      	mov	r3, r0
 8003456:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800345a:	e00a      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003462:	e006      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003464:	bf00      	nop
 8003466:	e004      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003468:	bf00      	nop
 800346a:	e002      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800346c:	bf00      	nop
 800346e:	e000      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003472:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10c      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800347a:	4b57      	ldr	r3, [pc, #348]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800347c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003480:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8003484:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800348a:	4a53      	ldr	r2, [pc, #332]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800348c:	430b      	orrs	r3, r1
 800348e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003492:	e003      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003494:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003498:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800349c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80034a8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80034ac:	2300      	movs	r3, #0
 80034ae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80034b2:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 80034b6:	460b      	mov	r3, r1
 80034b8:	4313      	orrs	r3, r2
 80034ba:	d053      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80034bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034c2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80034c6:	d031      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80034c8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80034cc:	d82a      	bhi.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80034ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034d2:	d02d      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80034d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034d8:	d824      	bhi.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80034da:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80034de:	d029      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80034e0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80034e4:	d81e      	bhi.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80034e6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80034ea:	d011      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80034ec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80034f0:	d818      	bhi.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d020      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80034f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034fa:	d113      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003500:	3308      	adds	r3, #8
 8003502:	4618      	mov	r0, r3
 8003504:	f004 fc5a 	bl	8007dbc <RCCEx_PLL2_Config>
 8003508:	4603      	mov	r3, r0
 800350a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800350e:	e014      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003510:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003514:	3330      	adds	r3, #48	@ 0x30
 8003516:	4618      	mov	r0, r3
 8003518:	f004 fce8 	bl	8007eec <RCCEx_PLL3_Config>
 800351c:	4603      	mov	r3, r0
 800351e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8003522:	e00a      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800352a:	e006      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800352c:	bf00      	nop
 800352e:	e004      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003530:	bf00      	nop
 8003532:	e002      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003534:	bf00      	nop
 8003536:	e000      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800353a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10c      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8003542:	4b25      	ldr	r3, [pc, #148]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003544:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003548:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 800354c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003552:	4a21      	ldr	r2, [pc, #132]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003554:	430b      	orrs	r3, r1
 8003556:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800355a:	e003      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003560:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003564:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003570:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003574:	2300      	movs	r3, #0
 8003576:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800357a:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800357e:	460b      	mov	r3, r1
 8003580:	4313      	orrs	r3, r2
 8003582:	d055      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8003584:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003588:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800358a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800358e:	d033      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8003590:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003594:	d82c      	bhi.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003596:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800359a:	d02f      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x684>
 800359c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035a0:	d826      	bhi.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80035a2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80035a6:	d02b      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80035a8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80035ac:	d820      	bhi.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80035ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035b2:	d013      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x664>
 80035b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035b8:	d81a      	bhi.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d022      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80035be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035c2:	d115      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035c8:	3308      	adds	r3, #8
 80035ca:	4618      	mov	r0, r3
 80035cc:	f004 fbf6 	bl	8007dbc <RCCEx_PLL2_Config>
 80035d0:	4603      	mov	r3, r0
 80035d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80035d6:	e016      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80035d8:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80035dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035e0:	3330      	adds	r3, #48	@ 0x30
 80035e2:	4618      	mov	r0, r3
 80035e4:	f004 fc82 	bl	8007eec <RCCEx_PLL3_Config>
 80035e8:	4603      	mov	r3, r0
 80035ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80035ee:	e00a      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80035f6:	e006      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80035f8:	bf00      	nop
 80035fa:	e004      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80035fc:	bf00      	nop
 80035fe:	e002      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003600:	bf00      	nop
 8003602:	e000      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003604:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003606:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10c      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800360e:	4bbb      	ldr	r3, [pc, #748]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003610:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003614:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003618:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800361c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800361e:	4ab7      	ldr	r2, [pc, #732]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003620:	430b      	orrs	r3, r1
 8003622:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003626:	e003      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003628:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800362c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8003630:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003638:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800363c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003640:	2300      	movs	r3, #0
 8003642:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003646:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800364a:	460b      	mov	r3, r1
 800364c:	4313      	orrs	r3, r2
 800364e:	d053      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8003650:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003654:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003656:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800365a:	d031      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
 800365c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003660:	d82a      	bhi.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003662:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003666:	d02d      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003668:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800366c:	d824      	bhi.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800366e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003672:	d029      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8003674:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003678:	d81e      	bhi.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800367a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800367e:	d011      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8003680:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003684:	d818      	bhi.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003686:	2b00      	cmp	r3, #0
 8003688:	d020      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x754>
 800368a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800368e:	d113      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003690:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003694:	3308      	adds	r3, #8
 8003696:	4618      	mov	r0, r3
 8003698:	f004 fb90 	bl	8007dbc <RCCEx_PLL2_Config>
 800369c:	4603      	mov	r3, r0
 800369e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80036a2:	e014      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80036a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036a8:	3330      	adds	r3, #48	@ 0x30
 80036aa:	4618      	mov	r0, r3
 80036ac:	f004 fc1e 	bl	8007eec <RCCEx_PLL3_Config>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80036b6:	e00a      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80036be:	e006      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80036c0:	bf00      	nop
 80036c2:	e004      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80036c4:	bf00      	nop
 80036c6:	e002      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80036c8:	bf00      	nop
 80036ca:	e000      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80036cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10c      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80036d6:	4b89      	ldr	r3, [pc, #548]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80036d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80036dc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80036e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036e6:	4a85      	ldr	r2, [pc, #532]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80036e8:	430b      	orrs	r3, r1
 80036ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80036ee:	e003      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80036f4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80036f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003700:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8003704:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003708:	2300      	movs	r3, #0
 800370a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800370e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003712:	460b      	mov	r3, r1
 8003714:	4313      	orrs	r3, r2
 8003716:	d055      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8003718:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800371c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003720:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8003724:	d031      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x812>
 8003726:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800372a:	d82a      	bhi.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800372c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003730:	d02d      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x816>
 8003732:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003736:	d824      	bhi.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003738:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800373c:	d029      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800373e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003742:	d81e      	bhi.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003744:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003748:	d011      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800374a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800374e:	d818      	bhi.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003750:	2b00      	cmp	r3, #0
 8003752:	d020      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8003754:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003758:	d113      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800375a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800375e:	3308      	adds	r3, #8
 8003760:	4618      	mov	r0, r3
 8003762:	f004 fb2b 	bl	8007dbc <RCCEx_PLL2_Config>
 8003766:	4603      	mov	r3, r0
 8003768:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800376c:	e014      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800376e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003772:	3330      	adds	r3, #48	@ 0x30
 8003774:	4618      	mov	r0, r3
 8003776:	f004 fbb9 	bl	8007eec <RCCEx_PLL3_Config>
 800377a:	4603      	mov	r3, r0
 800377c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003780:	e00a      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003788:	e006      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800378a:	bf00      	nop
 800378c:	e004      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800378e:	bf00      	nop
 8003790:	e002      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003792:	bf00      	nop
 8003794:	e000      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003796:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003798:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10d      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80037a0:	4b56      	ldr	r3, [pc, #344]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80037a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037a6:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 80037aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037b2:	4a52      	ldr	r2, [pc, #328]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80037b4:	430b      	orrs	r3, r1
 80037b6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80037ba:	e003      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037bc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80037c0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80037c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037cc:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80037d0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80037d4:	2300      	movs	r3, #0
 80037d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80037da:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80037de:	460b      	mov	r3, r1
 80037e0:	4313      	orrs	r3, r2
 80037e2:	d044      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80037e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037ec:	2b05      	cmp	r3, #5
 80037ee:	d823      	bhi.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80037f0:	a201      	add	r2, pc, #4	@ (adr r2, 80037f8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80037f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f6:	bf00      	nop
 80037f8:	08003841 	.word	0x08003841
 80037fc:	08003811 	.word	0x08003811
 8003800:	08003825 	.word	0x08003825
 8003804:	08003841 	.word	0x08003841
 8003808:	08003841 	.word	0x08003841
 800380c:	08003841 	.word	0x08003841
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003810:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003814:	3308      	adds	r3, #8
 8003816:	4618      	mov	r0, r3
 8003818:	f004 fad0 	bl	8007dbc <RCCEx_PLL2_Config>
 800381c:	4603      	mov	r3, r0
 800381e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003822:	e00e      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003824:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003828:	3330      	adds	r3, #48	@ 0x30
 800382a:	4618      	mov	r0, r3
 800382c:	f004 fb5e 	bl	8007eec <RCCEx_PLL3_Config>
 8003830:	4603      	mov	r3, r0
 8003832:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003836:	e004      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800383e:	e000      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8003840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003842:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10d      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800384a:	4b2c      	ldr	r3, [pc, #176]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800384c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003850:	f023 0107 	bic.w	r1, r3, #7
 8003854:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003858:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800385c:	4a27      	ldr	r2, [pc, #156]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800385e:	430b      	orrs	r3, r1
 8003860:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003864:	e003      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003866:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800386a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800386e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003876:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800387a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800387e:	2300      	movs	r3, #0
 8003880:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003884:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003888:	460b      	mov	r3, r1
 800388a:	4313      	orrs	r3, r2
 800388c:	d04f      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800388e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003896:	2b50      	cmp	r3, #80	@ 0x50
 8003898:	d029      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x976>
 800389a:	2b50      	cmp	r3, #80	@ 0x50
 800389c:	d823      	bhi.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800389e:	2b40      	cmp	r3, #64	@ 0x40
 80038a0:	d027      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80038a2:	2b40      	cmp	r3, #64	@ 0x40
 80038a4:	d81f      	bhi.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80038a6:	2b30      	cmp	r3, #48	@ 0x30
 80038a8:	d025      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80038aa:	2b30      	cmp	r3, #48	@ 0x30
 80038ac:	d81b      	bhi.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	d00f      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80038b2:	2b20      	cmp	r3, #32
 80038b4:	d817      	bhi.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d022      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80038ba:	2b10      	cmp	r3, #16
 80038bc:	d113      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038c2:	3308      	adds	r3, #8
 80038c4:	4618      	mov	r0, r3
 80038c6:	f004 fa79 	bl	8007dbc <RCCEx_PLL2_Config>
 80038ca:	4603      	mov	r3, r0
 80038cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80038d0:	e017      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80038d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038d6:	3330      	adds	r3, #48	@ 0x30
 80038d8:	4618      	mov	r0, r3
 80038da:	f004 fb07 	bl	8007eec <RCCEx_PLL3_Config>
 80038de:	4603      	mov	r3, r0
 80038e0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80038e4:	e00d      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80038ec:	e009      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80038ee:	bf00      	nop
 80038f0:	e007      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80038f2:	bf00      	nop
 80038f4:	e005      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80038f6:	bf00      	nop
 80038f8:	e003      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80038fa:	bf00      	nop
 80038fc:	44020c00 	.word	0x44020c00
        break;
 8003900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003902:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10d      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800390a:	4baf      	ldr	r3, [pc, #700]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800390c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003910:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003914:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391c:	4aaa      	ldr	r2, [pc, #680]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800391e:	430b      	orrs	r3, r1
 8003920:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003924:	e003      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003926:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800392a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800392e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003936:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800393a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800393e:	2300      	movs	r3, #0
 8003940:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003944:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003948:	460b      	mov	r3, r1
 800394a:	4313      	orrs	r3, r2
 800394c:	d055      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800394e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003952:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003956:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800395a:	d031      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 800395c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003960:	d82a      	bhi.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003962:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003966:	d02d      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003968:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800396c:	d824      	bhi.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800396e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003972:	d029      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003974:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003978:	d81e      	bhi.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800397a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800397e:	d011      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8003980:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003984:	d818      	bhi.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003986:	2b00      	cmp	r3, #0
 8003988:	d020      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800398a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800398e:	d113      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003990:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003994:	3308      	adds	r3, #8
 8003996:	4618      	mov	r0, r3
 8003998:	f004 fa10 	bl	8007dbc <RCCEx_PLL2_Config>
 800399c:	4603      	mov	r3, r0
 800399e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80039a2:	e014      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039a8:	3330      	adds	r3, #48	@ 0x30
 80039aa:	4618      	mov	r0, r3
 80039ac:	f004 fa9e 	bl	8007eec <RCCEx_PLL3_Config>
 80039b0:	4603      	mov	r3, r0
 80039b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80039b6:	e00a      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80039be:	e006      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80039c0:	bf00      	nop
 80039c2:	e004      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80039c4:	bf00      	nop
 80039c6:	e002      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80039c8:	bf00      	nop
 80039ca:	e000      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80039cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10d      	bne.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80039d6:	4b7c      	ldr	r3, [pc, #496]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80039d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039dc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80039e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039e8:	4a77      	ldr	r2, [pc, #476]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80039ea:	430b      	orrs	r3, r1
 80039ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039f0:	e003      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80039f6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a02:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003a06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003a10:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003a14:	460b      	mov	r3, r1
 8003a16:	4313      	orrs	r3, r2
 8003a18:	d03d      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003a1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a26:	d01b      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003a28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a2c:	d814      	bhi.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003a2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a32:	d017      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003a34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a38:	d80e      	bhi.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d014      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003a3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a42:	d109      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a48:	3330      	adds	r3, #48	@ 0x30
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f004 fa4e 	bl	8007eec <RCCEx_PLL3_Config>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003a56:	e008      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003a5e:	e004      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003a60:	bf00      	nop
 8003a62:	e002      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003a64:	bf00      	nop
 8003a66:	e000      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a6a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10d      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003a72:	4b55      	ldr	r3, [pc, #340]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003a74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003a78:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003a7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a84:	4a50      	ldr	r2, [pc, #320]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003a86:	430b      	orrs	r3, r1
 8003a88:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003a8c:	e003      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a92:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003aa2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003aac:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	d03d      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003ab6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003abe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003ac2:	d01b      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8003ac4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003ac8:	d814      	bhi.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003aca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ace:	d017      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8003ad0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ad4:	d80e      	bhi.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d014      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8003ada:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ade:	d109      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ae0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ae4:	3330      	adds	r3, #48	@ 0x30
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f004 fa00 	bl	8007eec <RCCEx_PLL3_Config>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003af2:	e008      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003afa:	e004      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003afc:	bf00      	nop
 8003afe:	e002      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003b00:	bf00      	nop
 8003b02:	e000      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10d      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003b0e:	4b2e      	ldr	r3, [pc, #184]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003b10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b14:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003b18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b20:	4a29      	ldr	r2, [pc, #164]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003b22:	430b      	orrs	r3, r1
 8003b24:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003b28:	e003      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b2e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003b3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b42:	2300      	movs	r3, #0
 8003b44:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003b48:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	d040      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003b52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b5e:	d01b      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003b60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b64:	d814      	bhi.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003b66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b6a:	d017      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003b6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b70:	d80e      	bhi.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d014      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003b76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b7a:	d109      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b80:	3330      	adds	r3, #48	@ 0x30
 8003b82:	4618      	mov	r0, r3
 8003b84:	f004 f9b2 	bl	8007eec <RCCEx_PLL3_Config>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003b96:	e004      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003b98:	bf00      	nop
 8003b9a:	e002      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003b9c:	bf00      	nop
 8003b9e:	e000      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003ba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ba2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d110      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003baa:	4b07      	ldr	r3, [pc, #28]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003bac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003bb0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003bb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bbc:	4a02      	ldr	r2, [pc, #8]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003bbe:	430b      	orrs	r3, r1
 8003bc0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003bc4:	e006      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003bc6:	bf00      	nop
 8003bc8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bcc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003bd0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bdc:	2100      	movs	r1, #0
 8003bde:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8003be2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003be6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003bea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	d03d      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8003bf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bf8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bfc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c00:	d01b      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003c02:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c06:	d814      	bhi.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003c08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c0c:	d017      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8003c0e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c12:	d80e      	bhi.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d014      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003c18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c1c:	d109      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c22:	3330      	adds	r3, #48	@ 0x30
 8003c24:	4618      	mov	r0, r3
 8003c26:	f004 f961 	bl	8007eec <RCCEx_PLL3_Config>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003c30:	e008      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003c38:	e004      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003c3a:	bf00      	nop
 8003c3c:	e002      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003c3e:	bf00      	nop
 8003c40:	e000      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003c42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c44:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10d      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003c4c:	4bbe      	ldr	r3, [pc, #760]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003c4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c52:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003c56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c5e:	4aba      	ldr	r2, [pc, #744]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003c60:	430b      	orrs	r3, r1
 8003c62:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003c66:	e003      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c68:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c6c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003c70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c78:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003c7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c80:	2300      	movs	r3, #0
 8003c82:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c86:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	d035      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003c90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c9c:	d015      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8003c9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ca2:	d80e      	bhi.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d012      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003ca8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cac:	d109      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003cae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cb2:	3330      	adds	r3, #48	@ 0x30
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f004 f919 	bl	8007eec <RCCEx_PLL3_Config>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003cc0:	e006      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003cc8:	e002      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003cca:	bf00      	nop
 8003ccc:	e000      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003cce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cd0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10d      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003cd8:	4b9b      	ldr	r3, [pc, #620]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003cda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003cde:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003ce2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ce6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003cea:	4a97      	ldr	r2, [pc, #604]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003cec:	430b      	orrs	r3, r1
 8003cee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003cf2:	e003      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003cf8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003cfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d04:	2100      	movs	r1, #0
 8003d06:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8003d0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d12:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	d00e      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003d1c:	4b8a      	ldr	r3, [pc, #552]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	4a89      	ldr	r2, [pc, #548]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d22:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003d26:	61d3      	str	r3, [r2, #28]
 8003d28:	4b87      	ldr	r3, [pc, #540]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d2a:	69d9      	ldr	r1, [r3, #28]
 8003d2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d30:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003d34:	4a84      	ldr	r2, [pc, #528]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d36:	430b      	orrs	r3, r1
 8003d38:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d42:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003d46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003d50:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003d54:	460b      	mov	r3, r1
 8003d56:	4313      	orrs	r3, r2
 8003d58:	d055      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003d5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003d62:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003d66:	d031      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8003d68:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003d6c:	d82a      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d72:	d02d      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003d74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d78:	d824      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003d7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d7e:	d029      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003d80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d84:	d81e      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003d86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d8a:	d011      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8003d8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d90:	d818      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d020      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003d96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d9a:	d113      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003da0:	3308      	adds	r3, #8
 8003da2:	4618      	mov	r0, r3
 8003da4:	f004 f80a 	bl	8007dbc <RCCEx_PLL2_Config>
 8003da8:	4603      	mov	r3, r0
 8003daa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003dae:	e014      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003db0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003db4:	3330      	adds	r3, #48	@ 0x30
 8003db6:	4618      	mov	r0, r3
 8003db8:	f004 f898 	bl	8007eec <RCCEx_PLL3_Config>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003dc2:	e00a      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003dca:	e006      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003dcc:	bf00      	nop
 8003dce:	e004      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003dd0:	bf00      	nop
 8003dd2:	e002      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003dd4:	bf00      	nop
 8003dd6:	e000      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dda:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10d      	bne.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003de2:	4b59      	ldr	r3, [pc, #356]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003de4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003de8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003dec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003df0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003df4:	4a54      	ldr	r2, [pc, #336]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003df6:	430b      	orrs	r3, r1
 8003df8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003dfc:	e003      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e02:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003e12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e16:	2300      	movs	r3, #0
 8003e18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e1c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003e20:	460b      	mov	r3, r1
 8003e22:	4313      	orrs	r3, r2
 8003e24:	d055      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003e26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e2e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003e32:	d031      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8003e34:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003e38:	d82a      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003e3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e3e:	d02d      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8003e40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e44:	d824      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003e46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e4a:	d029      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8003e4c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e50:	d81e      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003e52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e56:	d011      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8003e58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e5c:	d818      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d020      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e66:	d113      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e6c:	3308      	adds	r3, #8
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f003 ffa4 	bl	8007dbc <RCCEx_PLL2_Config>
 8003e74:	4603      	mov	r3, r0
 8003e76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003e7a:	e014      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e80:	3330      	adds	r3, #48	@ 0x30
 8003e82:	4618      	mov	r0, r3
 8003e84:	f004 f832 	bl	8007eec <RCCEx_PLL3_Config>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003e8e:	e00a      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003e96:	e006      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003e98:	bf00      	nop
 8003e9a:	e004      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003e9c:	bf00      	nop
 8003e9e:	e002      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003ea0:	bf00      	nop
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10d      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003eae:	4b26      	ldr	r3, [pc, #152]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003eb0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003eb4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003eb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ebc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003ec0:	4a21      	ldr	r2, [pc, #132]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003ec2:	430b      	orrs	r3, r1
 8003ec4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003ec8:	e003      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ece:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8003ed2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eda:	2100      	movs	r1, #0
 8003edc:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8003ee0:	f003 0320 	and.w	r3, r3, #32
 8003ee4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ee8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003eec:	460b      	mov	r3, r1
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	d057      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8003ef2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ef6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003efa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003efe:	d033      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8003f00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f04:	d82c      	bhi.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003f06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f0a:	d02f      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8003f0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f10:	d826      	bhi.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003f12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f16:	d02b      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8003f18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f1c:	d820      	bhi.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003f1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f22:	d013      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003f24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f28:	d81a      	bhi.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d022      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8003f2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f32:	d115      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f38:	3308      	adds	r3, #8
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f003 ff3e 	bl	8007dbc <RCCEx_PLL2_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003f46:	e016      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8003f48:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f50:	3330      	adds	r3, #48	@ 0x30
 8003f52:	4618      	mov	r0, r3
 8003f54:	f003 ffca 	bl	8007eec <RCCEx_PLL3_Config>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003f66:	e006      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003f68:	bf00      	nop
 8003f6a:	e004      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003f6c:	bf00      	nop
 8003f6e:	e002      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003f70:	bf00      	nop
 8003f72:	e000      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f76:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10d      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8003f7e:	4bbb      	ldr	r3, [pc, #748]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003f80:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003f84:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003f88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003f90:	4ab6      	ldr	r2, [pc, #728]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003f92:	430b      	orrs	r3, r1
 8003f94:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003f98:	e003      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f9e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8003fa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003faa:	2100      	movs	r1, #0
 8003fac:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8003fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003fb8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	d055      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8003fc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003fca:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8003fce:	d031      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003fd0:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8003fd4:	d82a      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003fd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fda:	d02d      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8003fdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fe0:	d824      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003fe2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003fe6:	d029      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8003fe8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003fec:	d81e      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003fee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ff2:	d011      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8003ff4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ff8:	d818      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d020      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8003ffe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004002:	d113      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004004:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004008:	3308      	adds	r3, #8
 800400a:	4618      	mov	r0, r3
 800400c:	f003 fed6 	bl	8007dbc <RCCEx_PLL2_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004016:	e014      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004018:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800401c:	3330      	adds	r3, #48	@ 0x30
 800401e:	4618      	mov	r0, r3
 8004020:	f003 ff64 	bl	8007eec <RCCEx_PLL3_Config>
 8004024:	4603      	mov	r3, r0
 8004026:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800402a:	e00a      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004032:	e006      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004034:	bf00      	nop
 8004036:	e004      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004038:	bf00      	nop
 800403a:	e002      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800403c:	bf00      	nop
 800403e:	e000      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004042:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10d      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800404a:	4b88      	ldr	r3, [pc, #544]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800404c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004050:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8004054:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004058:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800405c:	4a83      	ldr	r2, [pc, #524]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800405e:	430b      	orrs	r3, r1
 8004060:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004064:	e003      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004066:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800406a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800406e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004076:	2100      	movs	r1, #0
 8004078:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800407c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004080:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004084:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004088:	460b      	mov	r3, r1
 800408a:	4313      	orrs	r3, r2
 800408c:	d055      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800408e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004092:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004096:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800409a:	d031      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 800409c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80040a0:	d82a      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80040a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040a6:	d02d      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80040a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040ac:	d824      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80040ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80040b2:	d029      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80040b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80040b8:	d81e      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80040ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040be:	d011      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80040c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040c4:	d818      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d020      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80040ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040ce:	d113      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040d4:	3308      	adds	r3, #8
 80040d6:	4618      	mov	r0, r3
 80040d8:	f003 fe70 	bl	8007dbc <RCCEx_PLL2_Config>
 80040dc:	4603      	mov	r3, r0
 80040de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80040e2:	e014      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040e8:	3330      	adds	r3, #48	@ 0x30
 80040ea:	4618      	mov	r0, r3
 80040ec:	f003 fefe 	bl	8007eec <RCCEx_PLL3_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80040f6:	e00a      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80040fe:	e006      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004100:	bf00      	nop
 8004102:	e004      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004104:	bf00      	nop
 8004106:	e002      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004108:	bf00      	nop
 800410a:	e000      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800410c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800410e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10d      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8004116:	4b55      	ldr	r3, [pc, #340]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004118:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800411c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004120:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004124:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004128:	4a50      	ldr	r2, [pc, #320]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800412a:	430b      	orrs	r3, r1
 800412c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004130:	e003      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004132:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004136:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800413a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800413e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004142:	2100      	movs	r1, #0
 8004144:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8004148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004150:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004154:	460b      	mov	r3, r1
 8004156:	4313      	orrs	r3, r2
 8004158:	d055      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800415a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800415e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004162:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004166:	d031      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8004168:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800416c:	d82a      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800416e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004172:	d02d      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8004174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004178:	d824      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800417a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800417e:	d029      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8004180:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004184:	d81e      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004186:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800418a:	d011      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 800418c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004190:	d818      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004192:	2b00      	cmp	r3, #0
 8004194:	d020      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8004196:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800419a:	d113      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800419c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041a0:	3308      	adds	r3, #8
 80041a2:	4618      	mov	r0, r3
 80041a4:	f003 fe0a 	bl	8007dbc <RCCEx_PLL2_Config>
 80041a8:	4603      	mov	r3, r0
 80041aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80041ae:	e014      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041b4:	3330      	adds	r3, #48	@ 0x30
 80041b6:	4618      	mov	r0, r3
 80041b8:	f003 fe98 	bl	8007eec <RCCEx_PLL3_Config>
 80041bc:	4603      	mov	r3, r0
 80041be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80041c2:	e00a      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80041ca:	e006      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80041cc:	bf00      	nop
 80041ce:	e004      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80041d0:	bf00      	nop
 80041d2:	e002      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80041d4:	bf00      	nop
 80041d6:	e000      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80041d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10d      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80041e2:	4b22      	ldr	r3, [pc, #136]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80041e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80041e8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80041ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80041f4:	4a1d      	ldr	r2, [pc, #116]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80041f6:	430b      	orrs	r3, r1
 80041f8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80041fc:	e003      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004202:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004206:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004212:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004216:	2300      	movs	r3, #0
 8004218:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800421c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004220:	460b      	mov	r3, r1
 8004222:	4313      	orrs	r3, r2
 8004224:	d055      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004226:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800422a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800422e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004232:	d035      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8004234:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004238:	d82e      	bhi.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800423a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800423e:	d031      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8004240:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004244:	d828      	bhi.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004246:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800424a:	d01b      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 800424c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004250:	d822      	bhi.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8004256:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800425a:	d009      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 800425c:	e01c      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800425e:	4b03      	ldr	r3, [pc, #12]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004262:	4a02      	ldr	r2, [pc, #8]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004268:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800426a:	e01c      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800426c:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004270:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004274:	3308      	adds	r3, #8
 8004276:	4618      	mov	r0, r3
 8004278:	f003 fda0 	bl	8007dbc <RCCEx_PLL2_Config>
 800427c:	4603      	mov	r3, r0
 800427e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004282:	e010      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004284:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004288:	3330      	adds	r3, #48	@ 0x30
 800428a:	4618      	mov	r0, r3
 800428c:	f003 fe2e 	bl	8007eec <RCCEx_PLL3_Config>
 8004290:	4603      	mov	r3, r0
 8004292:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004296:	e006      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800429e:	e002      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80042a0:	bf00      	nop
 80042a2:	e000      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80042a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10d      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80042ae:	4bc3      	ldr	r3, [pc, #780]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80042b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80042b4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80042b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80042c0:	4abe      	ldr	r2, [pc, #760]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80042c2:	430b      	orrs	r3, r1
 80042c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80042c8:	e003      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80042ce:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80042d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80042de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042e2:	2300      	movs	r3, #0
 80042e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80042e8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80042ec:	460b      	mov	r3, r1
 80042ee:	4313      	orrs	r3, r2
 80042f0:	d051      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80042f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042f6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80042fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042fe:	d033      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004300:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004304:	d82c      	bhi.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004306:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800430a:	d02d      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800430c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004310:	d826      	bhi.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004312:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004316:	d019      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8004318:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800431c:	d820      	bhi.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8004322:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004326:	d007      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8004328:	e01a      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800432a:	4ba4      	ldr	r3, [pc, #656]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800432c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432e:	4aa3      	ldr	r2, [pc, #652]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004330:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004334:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004336:	e018      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004338:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800433c:	3308      	adds	r3, #8
 800433e:	4618      	mov	r0, r3
 8004340:	f003 fd3c 	bl	8007dbc <RCCEx_PLL2_Config>
 8004344:	4603      	mov	r3, r0
 8004346:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800434a:	e00e      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800434c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004350:	3330      	adds	r3, #48	@ 0x30
 8004352:	4618      	mov	r0, r3
 8004354:	f003 fdca 	bl	8007eec <RCCEx_PLL3_Config>
 8004358:	4603      	mov	r3, r0
 800435a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800435e:	e004      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004366:	e000      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8004368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800436a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10d      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004372:	4b92      	ldr	r3, [pc, #584]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004374:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004378:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 800437c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004380:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004384:	4a8d      	ldr	r2, [pc, #564]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004386:	430b      	orrs	r3, r1
 8004388:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800438c:	e003      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004392:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004396:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800439a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80043a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043a4:	2300      	movs	r3, #0
 80043a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80043a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80043ac:	460b      	mov	r3, r1
 80043ae:	4313      	orrs	r3, r2
 80043b0:	d032      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80043b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80043ba:	2b05      	cmp	r3, #5
 80043bc:	d80f      	bhi.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80043be:	2b03      	cmp	r3, #3
 80043c0:	d211      	bcs.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d911      	bls.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d109      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043ce:	3308      	adds	r3, #8
 80043d0:	4618      	mov	r0, r3
 80043d2:	f003 fcf3 	bl	8007dbc <RCCEx_PLL2_Config>
 80043d6:	4603      	mov	r3, r0
 80043d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80043dc:	e006      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80043e4:	e002      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80043e6:	bf00      	nop
 80043e8:	e000      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80043ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10d      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80043f4:	4b71      	ldr	r3, [pc, #452]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80043f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80043fa:	f023 0107 	bic.w	r1, r3, #7
 80043fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004402:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004406:	4a6d      	ldr	r2, [pc, #436]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004408:	430b      	orrs	r3, r1
 800440a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800440e:	e003      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004410:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004414:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004418:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004420:	2100      	movs	r1, #0
 8004422:	6739      	str	r1, [r7, #112]	@ 0x70
 8004424:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004428:	677b      	str	r3, [r7, #116]	@ 0x74
 800442a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800442e:	460b      	mov	r3, r1
 8004430:	4313      	orrs	r3, r2
 8004432:	d024      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004434:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004438:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8004440:	2b08      	cmp	r3, #8
 8004442:	d005      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800444a:	e002      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800444c:	bf00      	nop
 800444e:	e000      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004452:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10d      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800445a:	4b58      	ldr	r3, [pc, #352]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800445c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004460:	f023 0108 	bic.w	r1, r3, #8
 8004464:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004468:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800446c:	4a53      	ldr	r2, [pc, #332]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800446e:	430b      	orrs	r3, r1
 8004470:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004474:	e003      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004476:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800447a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800447e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004486:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800448a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800448c:	2300      	movs	r3, #0
 800448e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004490:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004494:	460b      	mov	r3, r1
 8004496:	4313      	orrs	r3, r2
 8004498:	f000 80b9 	beq.w	800460e <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800449c:	4b48      	ldr	r3, [pc, #288]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800449e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a0:	4a47      	ldr	r2, [pc, #284]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80044a2:	f043 0301 	orr.w	r3, r3, #1
 80044a6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044a8:	f7fd f8ce 	bl	8001648 <HAL_GetTick>
 80044ac:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80044b0:	e00b      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b2:	f7fd f8c9 	bl	8001648 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d903      	bls.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80044c8:	e005      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80044ca:	4b3d      	ldr	r3, [pc, #244]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80044cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0ed      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80044d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f040 8093 	bne.w	8004606 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044e0:	4b36      	ldr	r3, [pc, #216]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80044e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044ea:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80044ee:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d023      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80044f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044fa:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80044fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004502:	4293      	cmp	r3, r2
 8004504:	d01b      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004506:	4b2d      	ldr	r3, [pc, #180]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004508:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800450c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004510:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004514:	4b29      	ldr	r3, [pc, #164]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004516:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800451a:	4a28      	ldr	r2, [pc, #160]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800451c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004520:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004524:	4b25      	ldr	r3, [pc, #148]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004526:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800452a:	4a24      	ldr	r2, [pc, #144]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800452c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004530:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004534:	4a21      	ldr	r2, [pc, #132]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004536:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800453a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800453e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d019      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454a:	f7fd f87d 	bl	8001648 <HAL_GetTick>
 800454e:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004552:	e00d      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004554:	f7fd f878 	bl	8001648 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800455e:	1ad2      	subs	r2, r2, r3
 8004560:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004564:	429a      	cmp	r2, r3
 8004566:	d903      	bls.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 800456e:	e006      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004570:	4b12      	ldr	r3, [pc, #72]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004572:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0ea      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800457e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004582:	2b00      	cmp	r3, #0
 8004584:	d13a      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004586:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800458a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800458e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004592:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004596:	d115      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8004598:	4b08      	ldr	r3, [pc, #32]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80045a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045a4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80045a8:	091b      	lsrs	r3, r3, #4
 80045aa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80045ae:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80045b2:	4a02      	ldr	r2, [pc, #8]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80045b4:	430b      	orrs	r3, r1
 80045b6:	61d3      	str	r3, [r2, #28]
 80045b8:	e00a      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80045ba:	bf00      	nop
 80045bc:	44020c00 	.word	0x44020c00
 80045c0:	44020800 	.word	0x44020800
 80045c4:	4b9f      	ldr	r3, [pc, #636]	@ (8004844 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	4a9e      	ldr	r2, [pc, #632]	@ (8004844 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80045ca:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80045ce:	61d3      	str	r3, [r2, #28]
 80045d0:	4b9c      	ldr	r3, [pc, #624]	@ (8004844 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80045d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045d6:	4a9b      	ldr	r2, [pc, #620]	@ (8004844 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80045d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045e0:	4b98      	ldr	r3, [pc, #608]	@ (8004844 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80045e2:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80045e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045ea:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80045ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045f2:	4a94      	ldr	r2, [pc, #592]	@ (8004844 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80045f4:	430b      	orrs	r3, r1
 80045f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045fa:	e008      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004600:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8004604:	e003      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004606:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800460a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800460e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004616:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800461a:	663b      	str	r3, [r7, #96]	@ 0x60
 800461c:	2300      	movs	r3, #0
 800461e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004620:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004624:	460b      	mov	r3, r1
 8004626:	4313      	orrs	r3, r2
 8004628:	d035      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800462a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800462e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004632:	2b30      	cmp	r3, #48	@ 0x30
 8004634:	d014      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8004636:	2b30      	cmp	r3, #48	@ 0x30
 8004638:	d80e      	bhi.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800463a:	2b20      	cmp	r3, #32
 800463c:	d012      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800463e:	2b20      	cmp	r3, #32
 8004640:	d80a      	bhi.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8004642:	2b00      	cmp	r3, #0
 8004644:	d010      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8004646:	2b10      	cmp	r3, #16
 8004648:	d106      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800464a:	4b7e      	ldr	r3, [pc, #504]	@ (8004844 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800464c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800464e:	4a7d      	ldr	r2, [pc, #500]	@ (8004844 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004650:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004654:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8004656:	e008      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800465e:	e004      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004660:	bf00      	nop
 8004662:	e002      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004664:	bf00      	nop
 8004666:	e000      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800466a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10d      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004672:	4b74      	ldr	r3, [pc, #464]	@ (8004844 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004674:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004678:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800467c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004680:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004684:	4a6f      	ldr	r2, [pc, #444]	@ (8004844 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004686:	430b      	orrs	r3, r1
 8004688:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800468c:	e003      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800468e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004692:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004696:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800469a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469e:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80046a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046a4:	2300      	movs	r3, #0
 80046a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046a8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80046ac:	460b      	mov	r3, r1
 80046ae:	4313      	orrs	r3, r2
 80046b0:	d033      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80046b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046b6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80046be:	2b40      	cmp	r3, #64	@ 0x40
 80046c0:	d007      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80046c2:	e010      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046c4:	4b5f      	ldr	r3, [pc, #380]	@ (8004844 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c8:	4a5e      	ldr	r2, [pc, #376]	@ (8004844 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046ce:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80046d0:	e00d      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046d6:	3308      	adds	r3, #8
 80046d8:	4618      	mov	r0, r3
 80046da:	f003 fb6f 	bl	8007dbc <RCCEx_PLL2_Config>
 80046de:	4603      	mov	r3, r0
 80046e0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80046e4:	e003      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80046ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10d      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80046f6:	4b53      	ldr	r3, [pc, #332]	@ (8004844 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80046fc:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004700:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004704:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004708:	4a4e      	ldr	r2, [pc, #312]	@ (8004844 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800470a:	430b      	orrs	r3, r1
 800470c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004710:	e003      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004712:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004716:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800471a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004722:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004726:	653b      	str	r3, [r7, #80]	@ 0x50
 8004728:	2300      	movs	r3, #0
 800472a:	657b      	str	r3, [r7, #84]	@ 0x54
 800472c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004730:	460b      	mov	r3, r1
 8004732:	4313      	orrs	r3, r2
 8004734:	d033      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8004736:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800473a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8004742:	2b80      	cmp	r3, #128	@ 0x80
 8004744:	d007      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8004746:	e010      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004748:	4b3e      	ldr	r3, [pc, #248]	@ (8004844 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800474a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474c:	4a3d      	ldr	r2, [pc, #244]	@ (8004844 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800474e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004752:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004754:	e00d      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004756:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800475a:	3308      	adds	r3, #8
 800475c:	4618      	mov	r0, r3
 800475e:	f003 fb2d 	bl	8007dbc <RCCEx_PLL2_Config>
 8004762:	4603      	mov	r3, r0
 8004764:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004768:	e003      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004770:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004772:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10d      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800477a:	4b32      	ldr	r3, [pc, #200]	@ (8004844 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800477c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004780:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004784:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004788:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800478c:	4a2d      	ldr	r2, [pc, #180]	@ (8004844 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800478e:	430b      	orrs	r3, r1
 8004790:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004794:	e003      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004796:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800479a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800479e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a6:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80047aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047ac:	2300      	movs	r3, #0
 80047ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047b0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80047b4:	460b      	mov	r3, r1
 80047b6:	4313      	orrs	r3, r2
 80047b8:	d04a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80047ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d827      	bhi.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80047c6:	a201      	add	r2, pc, #4	@ (adr r2, 80047cc <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80047c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047cc:	080047e1 	.word	0x080047e1
 80047d0:	080047ef 	.word	0x080047ef
 80047d4:	08004803 	.word	0x08004803
 80047d8:	0800481f 	.word	0x0800481f
 80047dc:	0800481f 	.word	0x0800481f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047e0:	4b18      	ldr	r3, [pc, #96]	@ (8004844 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e4:	4a17      	ldr	r2, [pc, #92]	@ (8004844 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047ea:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80047ec:	e018      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047f2:	3308      	adds	r3, #8
 80047f4:	4618      	mov	r0, r3
 80047f6:	f003 fae1 	bl	8007dbc <RCCEx_PLL2_Config>
 80047fa:	4603      	mov	r3, r0
 80047fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004800:	e00e      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004802:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004806:	3330      	adds	r3, #48	@ 0x30
 8004808:	4618      	mov	r0, r3
 800480a:	f003 fb6f 	bl	8007eec <RCCEx_PLL3_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004814:	e004      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800481c:	e000      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800481e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004820:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10f      	bne.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004828:	4b06      	ldr	r3, [pc, #24]	@ (8004844 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800482a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800482e:	f023 0107 	bic.w	r1, r3, #7
 8004832:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800483a:	4a02      	ldr	r2, [pc, #8]	@ (8004844 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800483c:	430b      	orrs	r3, r1
 800483e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004842:	e005      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8004844:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004848:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800484c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004850:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004858:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800485c:	643b      	str	r3, [r7, #64]	@ 0x40
 800485e:	2300      	movs	r3, #0
 8004860:	647b      	str	r3, [r7, #68]	@ 0x44
 8004862:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004866:	460b      	mov	r3, r1
 8004868:	4313      	orrs	r3, r2
 800486a:	f000 8081 	beq.w	8004970 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800486e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004872:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004876:	2b20      	cmp	r3, #32
 8004878:	d85f      	bhi.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800487a:	a201      	add	r2, pc, #4	@ (adr r2, 8004880 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 800487c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004880:	08004905 	.word	0x08004905
 8004884:	0800493b 	.word	0x0800493b
 8004888:	0800493b 	.word	0x0800493b
 800488c:	0800493b 	.word	0x0800493b
 8004890:	0800493b 	.word	0x0800493b
 8004894:	0800493b 	.word	0x0800493b
 8004898:	0800493b 	.word	0x0800493b
 800489c:	0800493b 	.word	0x0800493b
 80048a0:	08004913 	.word	0x08004913
 80048a4:	0800493b 	.word	0x0800493b
 80048a8:	0800493b 	.word	0x0800493b
 80048ac:	0800493b 	.word	0x0800493b
 80048b0:	0800493b 	.word	0x0800493b
 80048b4:	0800493b 	.word	0x0800493b
 80048b8:	0800493b 	.word	0x0800493b
 80048bc:	0800493b 	.word	0x0800493b
 80048c0:	08004927 	.word	0x08004927
 80048c4:	0800493b 	.word	0x0800493b
 80048c8:	0800493b 	.word	0x0800493b
 80048cc:	0800493b 	.word	0x0800493b
 80048d0:	0800493b 	.word	0x0800493b
 80048d4:	0800493b 	.word	0x0800493b
 80048d8:	0800493b 	.word	0x0800493b
 80048dc:	0800493b 	.word	0x0800493b
 80048e0:	08004943 	.word	0x08004943
 80048e4:	0800493b 	.word	0x0800493b
 80048e8:	0800493b 	.word	0x0800493b
 80048ec:	0800493b 	.word	0x0800493b
 80048f0:	0800493b 	.word	0x0800493b
 80048f4:	0800493b 	.word	0x0800493b
 80048f8:	0800493b 	.word	0x0800493b
 80048fc:	0800493b 	.word	0x0800493b
 8004900:	08004943 	.word	0x08004943
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004904:	4bab      	ldr	r3, [pc, #684]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004908:	4aaa      	ldr	r2, [pc, #680]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800490a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800490e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004910:	e018      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004912:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004916:	3308      	adds	r3, #8
 8004918:	4618      	mov	r0, r3
 800491a:	f003 fa4f 	bl	8007dbc <RCCEx_PLL2_Config>
 800491e:	4603      	mov	r3, r0
 8004920:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004924:	e00e      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004926:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800492a:	3330      	adds	r3, #48	@ 0x30
 800492c:	4618      	mov	r0, r3
 800492e:	f003 fadd 	bl	8007eec <RCCEx_PLL3_Config>
 8004932:	4603      	mov	r3, r0
 8004934:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004938:	e004      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004940:	e000      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8004942:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004944:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10d      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800494c:	4b99      	ldr	r3, [pc, #612]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800494e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004952:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004956:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800495a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800495e:	4a95      	ldr	r2, [pc, #596]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004960:	430b      	orrs	r3, r1
 8004962:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004966:	e003      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004968:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800496c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004970:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004978:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800497c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800497e:	2300      	movs	r3, #0
 8004980:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004982:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004986:	460b      	mov	r3, r1
 8004988:	4313      	orrs	r3, r2
 800498a:	d04e      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800498c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004990:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004994:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004998:	d02e      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 800499a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800499e:	d827      	bhi.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80049a0:	2bc0      	cmp	r3, #192	@ 0xc0
 80049a2:	d02b      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 80049a4:	2bc0      	cmp	r3, #192	@ 0xc0
 80049a6:	d823      	bhi.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80049a8:	2b80      	cmp	r3, #128	@ 0x80
 80049aa:	d017      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 80049ac:	2b80      	cmp	r3, #128	@ 0x80
 80049ae:	d81f      	bhi.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 80049b4:	2b40      	cmp	r3, #64	@ 0x40
 80049b6:	d007      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 80049b8:	e01a      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ba:	4b7e      	ldr	r3, [pc, #504]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80049bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049be:	4a7d      	ldr	r2, [pc, #500]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80049c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049c4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80049c6:	e01a      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049cc:	3308      	adds	r3, #8
 80049ce:	4618      	mov	r0, r3
 80049d0:	f003 f9f4 	bl	8007dbc <RCCEx_PLL2_Config>
 80049d4:	4603      	mov	r3, r0
 80049d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80049da:	e010      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049e0:	3330      	adds	r3, #48	@ 0x30
 80049e2:	4618      	mov	r0, r3
 80049e4:	f003 fa82 	bl	8007eec <RCCEx_PLL3_Config>
 80049e8:	4603      	mov	r3, r0
 80049ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80049ee:	e006      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80049f6:	e002      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80049f8:	bf00      	nop
 80049fa:	e000      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80049fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10d      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004a06:	4b6b      	ldr	r3, [pc, #428]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a0c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004a10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a18:	4a66      	ldr	r2, [pc, #408]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004a1a:	430b      	orrs	r3, r1
 8004a1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a20:	e003      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a26:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004a2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a32:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004a36:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a38:	2300      	movs	r3, #0
 8004a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a3c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004a40:	460b      	mov	r3, r1
 8004a42:	4313      	orrs	r3, r2
 8004a44:	d055      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004a46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a4a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004a4e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004a52:	d031      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8004a54:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004a58:	d82a      	bhi.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004a5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a5e:	d02d      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8004a60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a64:	d824      	bhi.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004a66:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004a6a:	d029      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8004a6c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004a70:	d81e      	bhi.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a76:	d011      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8004a78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a7c:	d818      	bhi.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d020      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8004a82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a86:	d113      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f003 f994 	bl	8007dbc <RCCEx_PLL2_Config>
 8004a94:	4603      	mov	r3, r0
 8004a96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004a9a:	e014      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004aa0:	3330      	adds	r3, #48	@ 0x30
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f003 fa22 	bl	8007eec <RCCEx_PLL3_Config>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004aae:	e00a      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004ab6:	e006      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004ab8:	bf00      	nop
 8004aba:	e004      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004abc:	bf00      	nop
 8004abe:	e002      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004ac0:	bf00      	nop
 8004ac2:	e000      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ac6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10d      	bne.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8004ace:	4b39      	ldr	r3, [pc, #228]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ad4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004ad8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004adc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004ae0:	4a34      	ldr	r2, [pc, #208]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004ae2:	430b      	orrs	r3, r1
 8004ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004ae8:	e003      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004aee:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8004af2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afa:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004afe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b00:	2300      	movs	r3, #0
 8004b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b04:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	d058      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8004b0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b16:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004b1a:	d031      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8004b1c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004b20:	d82a      	bhi.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004b22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b26:	d02d      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004b28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b2c:	d824      	bhi.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004b2e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b32:	d029      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8004b34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b38:	d81e      	bhi.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b3e:	d011      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8004b40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b44:	d818      	bhi.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d020      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8004b4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b4e:	d113      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b54:	3308      	adds	r3, #8
 8004b56:	4618      	mov	r0, r3
 8004b58:	f003 f930 	bl	8007dbc <RCCEx_PLL2_Config>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004b62:	e014      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b68:	3330      	adds	r3, #48	@ 0x30
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f003 f9be 	bl	8007eec <RCCEx_PLL3_Config>
 8004b70:	4603      	mov	r3, r0
 8004b72:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004b76:	e00a      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004b7e:	e006      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004b80:	bf00      	nop
 8004b82:	e004      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004b84:	bf00      	nop
 8004b86:	e002      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004b88:	bf00      	nop
 8004b8a:	e000      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b8e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d110      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8004b96:	4b07      	ldr	r3, [pc, #28]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b9c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004ba0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ba8:	4902      	ldr	r1, [pc, #8]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004bb0:	e006      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8004bb2:	bf00      	nop
 8004bb4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004bbc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004bc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc8:	2100      	movs	r1, #0
 8004bca:	6239      	str	r1, [r7, #32]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bd2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	d055      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8004bdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004be0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004be4:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004be8:	d031      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8004bea:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004bee:	d82a      	bhi.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004bf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bf4:	d02d      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8004bf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bfa:	d824      	bhi.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004bfc:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004c00:	d029      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8004c02:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004c06:	d81e      	bhi.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c0c:	d011      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8004c0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c12:	d818      	bhi.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d020      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8004c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c1c:	d113      	bne.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c22:	3308      	adds	r3, #8
 8004c24:	4618      	mov	r0, r3
 8004c26:	f003 f8c9 	bl	8007dbc <RCCEx_PLL2_Config>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c30:	e014      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c36:	3330      	adds	r3, #48	@ 0x30
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f003 f957 	bl	8007eec <RCCEx_PLL3_Config>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c44:	e00a      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004c4c:	e006      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004c4e:	bf00      	nop
 8004c50:	e004      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004c52:	bf00      	nop
 8004c54:	e002      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004c56:	bf00      	nop
 8004c58:	e000      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004c5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c5c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10d      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8004c64:	4b88      	ldr	r3, [pc, #544]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c6a:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8004c6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c76:	4984      	ldr	r1, [pc, #528]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004c7e:	e003      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c80:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c84:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004c88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c90:	2100      	movs	r1, #0
 8004c92:	61b9      	str	r1, [r7, #24]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	61fb      	str	r3, [r7, #28]
 8004c9a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	d03d      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004ca4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ca8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d81c      	bhi.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8004cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8004cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb6:	bf00      	nop
 8004cb8:	08004cf3 	.word	0x08004cf3
 8004cbc:	08004cc9 	.word	0x08004cc9
 8004cc0:	08004cd7 	.word	0x08004cd7
 8004cc4:	08004cf3 	.word	0x08004cf3
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cc8:	4b6f      	ldr	r3, [pc, #444]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ccc:	4a6e      	ldr	r2, [pc, #440]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004cce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cd2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004cd4:	e00e      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cda:	3308      	adds	r3, #8
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f003 f86d 	bl	8007dbc <RCCEx_PLL2_Config>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004ce8:	e004      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004cf0:	e000      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8004cf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cf4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10d      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004cfc:	4b62      	ldr	r3, [pc, #392]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004cfe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d02:	f023 0203 	bic.w	r2, r3, #3
 8004d06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d0a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004d0e:	495e      	ldr	r1, [pc, #376]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004d16:	e003      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d18:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d1c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d28:	2100      	movs	r1, #0
 8004d2a:	6139      	str	r1, [r7, #16]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	617b      	str	r3, [r7, #20]
 8004d32:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004d36:	460b      	mov	r3, r1
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	d03a      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004d3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d40:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004d44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d48:	d00e      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8004d4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d4e:	d815      	bhi.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d017      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8004d54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d58:	d110      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d5a:	4b4b      	ldr	r3, [pc, #300]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5e:	4a4a      	ldr	r2, [pc, #296]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d64:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004d66:	e00e      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d6c:	3308      	adds	r3, #8
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f003 f824 	bl	8007dbc <RCCEx_PLL2_Config>
 8004d74:	4603      	mov	r3, r0
 8004d76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004d7a:	e004      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004d82:	e000      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8004d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d86:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10d      	bne.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004d8e:	4b3e      	ldr	r3, [pc, #248]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d9c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004da0:	4939      	ldr	r1, [pc, #228]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8004da8:	e003      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004daa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004dae:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004db2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dba:	2100      	movs	r1, #0
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	f003 0310 	and.w	r3, r3, #16
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	d038      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004dce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dd2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004dd6:	2b30      	cmp	r3, #48	@ 0x30
 8004dd8:	d01b      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8004dda:	2b30      	cmp	r3, #48	@ 0x30
 8004ddc:	d815      	bhi.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8004dde:	2b10      	cmp	r3, #16
 8004de0:	d002      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8004de2:	2b20      	cmp	r3, #32
 8004de4:	d007      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8004de6:	e010      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004de8:	4b27      	ldr	r3, [pc, #156]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dec:	4a26      	ldr	r2, [pc, #152]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004dee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004df2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004df4:	e00e      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004df6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dfa:	3330      	adds	r3, #48	@ 0x30
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f003 f875 	bl	8007eec <RCCEx_PLL3_Config>
 8004e02:	4603      	mov	r3, r0
 8004e04:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004e08:	e004      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004e10:	e000      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8004e12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e14:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10d      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e22:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004e26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e2a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004e2e:	4916      	ldr	r1, [pc, #88]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004e36:	e003      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e38:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e3c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e48:	2100      	movs	r1, #0
 8004e4a:	6039      	str	r1, [r7, #0]
 8004e4c:	f003 0308 	and.w	r3, r3, #8
 8004e50:	607b      	str	r3, [r7, #4]
 8004e52:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004e56:	460b      	mov	r3, r1
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	d00c      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8004e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e6a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8004e6e:	4906      	ldr	r1, [pc, #24]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8004e76:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8004e80:	46bd      	mov	sp, r7
 8004e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e86:	bf00      	nop
 8004e88:	44020c00 	.word	0x44020c00

08004e8c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b08b      	sub	sp, #44	@ 0x2c
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004e94:	4bad      	ldr	r3, [pc, #692]	@ (800514c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e9c:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004e9e:	4bab      	ldr	r3, [pc, #684]	@ (800514c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea2:	f003 0303 	and.w	r3, r3, #3
 8004ea6:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004ea8:	4ba8      	ldr	r3, [pc, #672]	@ (800514c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eac:	0a1b      	lsrs	r3, r3, #8
 8004eae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004eb2:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8004eb4:	4ba5      	ldr	r3, [pc, #660]	@ (800514c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb8:	f003 0310 	and.w	r3, r3, #16
 8004ebc:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004ebe:	4ba3      	ldr	r3, [pc, #652]	@ (800514c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec2:	08db      	lsrs	r3, r3, #3
 8004ec4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	fb02 f303 	mul.w	r3, r2, r3
 8004ece:	ee07 3a90 	vmov	s15, r3
 8004ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 8126 	beq.w	800512e <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	2b03      	cmp	r3, #3
 8004ee6:	d053      	beq.n	8004f90 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	d86f      	bhi.n	8004fce <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d003      	beq.n	8004efc <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d02b      	beq.n	8004f52 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8004efa:	e068      	b.n	8004fce <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004efc:	4b93      	ldr	r3, [pc, #588]	@ (800514c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	08db      	lsrs	r3, r3, #3
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	4a92      	ldr	r2, [pc, #584]	@ (8005150 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004f08:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0c:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	ee07 3a90 	vmov	s15, r3
 8004f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	ee07 3a90 	vmov	s15, r3
 8004f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	ee07 3a90 	vmov	s15, r3
 8004f2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f30:	ed97 6a04 	vldr	s12, [r7, #16]
 8004f34:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005154 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004f38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004f50:	e068      	b.n	8005024 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	ee07 3a90 	vmov	s15, r3
 8004f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005158 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004f60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f64:	6a3b      	ldr	r3, [r7, #32]
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f6e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004f72:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005154 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f8a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004f8e:	e049      	b.n	8005024 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	ee07 3a90 	vmov	s15, r3
 8004f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f9a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800515c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8004f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	ee07 3a90 	vmov	s15, r3
 8004fa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fac:	ed97 6a04 	vldr	s12, [r7, #16]
 8004fb0:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005154 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004fb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fc8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004fcc:	e02a      	b.n	8005024 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004fce:	4b5f      	ldr	r3, [pc, #380]	@ (800514c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	08db      	lsrs	r3, r3, #3
 8004fd4:	f003 0303 	and.w	r3, r3, #3
 8004fd8:	4a5d      	ldr	r2, [pc, #372]	@ (8005150 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004fda:	fa22 f303 	lsr.w	r3, r2, r3
 8004fde:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	ee07 3a90 	vmov	s15, r3
 8004fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	ee07 3a90 	vmov	s15, r3
 8004ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	ee07 3a90 	vmov	s15, r3
 8004ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005002:	ed97 6a04 	vldr	s12, [r7, #16]
 8005006:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005154 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800500a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800500e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800501a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800501e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005022:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005024:	4b49      	ldr	r3, [pc, #292]	@ (800514c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800502c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005030:	d121      	bne.n	8005076 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005032:	4b46      	ldr	r3, [pc, #280]	@ (800514c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005036:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d017      	beq.n	800506e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800503e:	4b43      	ldr	r3, [pc, #268]	@ (800514c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005042:	0a5b      	lsrs	r3, r3, #9
 8005044:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005048:	ee07 3a90 	vmov	s15, r3
 800504c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005050:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005054:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005058:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800505c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005064:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	e006      	b.n	800507c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	e002      	b.n	800507c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800507c:	4b33      	ldr	r3, [pc, #204]	@ (800514c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005084:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005088:	d121      	bne.n	80050ce <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800508a:	4b30      	ldr	r3, [pc, #192]	@ (800514c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800508c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d017      	beq.n	80050c6 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005096:	4b2d      	ldr	r3, [pc, #180]	@ (800514c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800509a:	0c1b      	lsrs	r3, r3, #16
 800509c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050a0:	ee07 3a90 	vmov	s15, r3
 80050a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80050a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050ac:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80050b0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80050b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050bc:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	605a      	str	r2, [r3, #4]
 80050c4:	e006      	b.n	80050d4 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	605a      	str	r2, [r3, #4]
 80050cc:	e002      	b.n	80050d4 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80050d4:	4b1d      	ldr	r3, [pc, #116]	@ (800514c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050e0:	d121      	bne.n	8005126 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80050e2:	4b1a      	ldr	r3, [pc, #104]	@ (800514c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80050e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d017      	beq.n	800511e <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80050ee:	4b17      	ldr	r3, [pc, #92]	@ (800514c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80050f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050f2:	0e1b      	lsrs	r3, r3, #24
 80050f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050f8:	ee07 3a90 	vmov	s15, r3
 80050fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005100:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005104:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005108:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800510c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005114:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800511c:	e010      	b.n	8005140 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	609a      	str	r2, [r3, #8]
}
 8005124:	e00c      	b.n	8005140 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	609a      	str	r2, [r3, #8]
}
 800512c:	e008      	b.n	8005140 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	609a      	str	r2, [r3, #8]
}
 8005140:	bf00      	nop
 8005142:	372c      	adds	r7, #44	@ 0x2c
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	44020c00 	.word	0x44020c00
 8005150:	03d09000 	.word	0x03d09000
 8005154:	46000000 	.word	0x46000000
 8005158:	4a742400 	.word	0x4a742400
 800515c:	4af42400 	.word	0x4af42400

08005160 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005160:	b480      	push	{r7}
 8005162:	b08b      	sub	sp, #44	@ 0x2c
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005168:	4bad      	ldr	r3, [pc, #692]	@ (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800516a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800516c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005170:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005172:	4bab      	ldr	r3, [pc, #684]	@ (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800517c:	4ba8      	ldr	r3, [pc, #672]	@ (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800517e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005180:	0a1b      	lsrs	r3, r3, #8
 8005182:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005186:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005188:	4ba5      	ldr	r3, [pc, #660]	@ (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800518a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518c:	f003 0310 	and.w	r3, r3, #16
 8005190:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005192:	4ba3      	ldr	r3, [pc, #652]	@ (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005196:	08db      	lsrs	r3, r3, #3
 8005198:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	fb02 f303 	mul.w	r3, r2, r3
 80051a2:	ee07 3a90 	vmov	s15, r3
 80051a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051aa:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 8126 	beq.w	8005402 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	2b03      	cmp	r3, #3
 80051ba:	d053      	beq.n	8005264 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	2b03      	cmp	r3, #3
 80051c0:	d86f      	bhi.n	80052a2 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d003      	beq.n	80051d0 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d02b      	beq.n	8005226 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80051ce:	e068      	b.n	80052a2 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80051d0:	4b93      	ldr	r3, [pc, #588]	@ (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	08db      	lsrs	r3, r3, #3
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	4a92      	ldr	r2, [pc, #584]	@ (8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80051dc:	fa22 f303 	lsr.w	r3, r2, r3
 80051e0:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	ee07 3a90 	vmov	s15, r3
 80051e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	ee07 3a90 	vmov	s15, r3
 80051f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	ee07 3a90 	vmov	s15, r3
 8005200:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005204:	ed97 6a04 	vldr	s12, [r7, #16]
 8005208:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005428 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800520c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005210:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005214:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005218:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800521c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005220:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005224:	e068      	b.n	80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	ee07 3a90 	vmov	s15, r3
 800522c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005230:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 800542c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005234:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005242:	ed97 6a04 	vldr	s12, [r7, #16]
 8005246:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005428 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800524a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800524e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005252:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800525a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800525e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005262:	e049      	b.n	80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	ee07 3a90 	vmov	s15, r3
 800526a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800526e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005430 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8005272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	ee07 3a90 	vmov	s15, r3
 800527c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005280:	ed97 6a04 	vldr	s12, [r7, #16]
 8005284:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005428 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005288:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800528c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005290:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005294:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800529c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80052a0:	e02a      	b.n	80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80052a2:	4b5f      	ldr	r3, [pc, #380]	@ (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	08db      	lsrs	r3, r3, #3
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	4a5d      	ldr	r2, [pc, #372]	@ (8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80052ae:	fa22 f303 	lsr.w	r3, r2, r3
 80052b2:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	ee07 3a90 	vmov	s15, r3
 80052ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	ee07 3a90 	vmov	s15, r3
 80052c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	ee07 3a90 	vmov	s15, r3
 80052d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052d6:	ed97 6a04 	vldr	s12, [r7, #16]
 80052da:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005428 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80052de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052f2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80052f6:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052f8:	4b49      	ldr	r3, [pc, #292]	@ (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005300:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005304:	d121      	bne.n	800534a <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005306:	4b46      	ldr	r3, [pc, #280]	@ (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800530a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d017      	beq.n	8005342 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005312:	4b43      	ldr	r3, [pc, #268]	@ (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005316:	0a5b      	lsrs	r3, r3, #9
 8005318:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800531c:	ee07 3a90 	vmov	s15, r3
 8005320:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8005324:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005328:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800532c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005338:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	e006      	b.n	8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	e002      	b.n	8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005350:	4b33      	ldr	r3, [pc, #204]	@ (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005358:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800535c:	d121      	bne.n	80053a2 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800535e:	4b30      	ldr	r3, [pc, #192]	@ (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d017      	beq.n	800539a <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800536a:	4b2d      	ldr	r3, [pc, #180]	@ (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800536c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800536e:	0c1b      	lsrs	r3, r3, #16
 8005370:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005374:	ee07 3a90 	vmov	s15, r3
 8005378:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800537c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005380:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005384:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800538c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005390:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	605a      	str	r2, [r3, #4]
 8005398:	e006      	b.n	80053a8 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	605a      	str	r2, [r3, #4]
 80053a0:	e002      	b.n	80053a8 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053b4:	d121      	bne.n	80053fa <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80053b6:	4b1a      	ldr	r3, [pc, #104]	@ (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80053b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d017      	beq.n	80053f2 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80053c2:	4b17      	ldr	r3, [pc, #92]	@ (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80053c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c6:	0e1b      	lsrs	r3, r3, #24
 80053c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053cc:	ee07 3a90 	vmov	s15, r3
 80053d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80053d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053d8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80053dc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80053e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053e8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80053f0:	e010      	b.n	8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	609a      	str	r2, [r3, #8]
}
 80053f8:	e00c      	b.n	8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	609a      	str	r2, [r3, #8]
}
 8005400:	e008      	b.n	8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	609a      	str	r2, [r3, #8]
}
 8005414:	bf00      	nop
 8005416:	372c      	adds	r7, #44	@ 0x2c
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	44020c00 	.word	0x44020c00
 8005424:	03d09000 	.word	0x03d09000
 8005428:	46000000 	.word	0x46000000
 800542c:	4a742400 	.word	0x4a742400
 8005430:	4af42400 	.word	0x4af42400

08005434 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8005434:	b480      	push	{r7}
 8005436:	b08b      	sub	sp, #44	@ 0x2c
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800543c:	4bad      	ldr	r3, [pc, #692]	@ (80056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800543e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005444:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005446:	4bab      	ldr	r3, [pc, #684]	@ (80056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8005450:	4ba8      	ldr	r3, [pc, #672]	@ (80056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005454:	0a1b      	lsrs	r3, r3, #8
 8005456:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800545a:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800545c:	4ba5      	ldr	r3, [pc, #660]	@ (80056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800545e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005460:	f003 0310 	and.w	r3, r3, #16
 8005464:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005466:	4ba3      	ldr	r3, [pc, #652]	@ (80056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005468:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800546a:	08db      	lsrs	r3, r3, #3
 800546c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	fb02 f303 	mul.w	r3, r2, r3
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 8126 	beq.w	80056d6 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	2b03      	cmp	r3, #3
 800548e:	d053      	beq.n	8005538 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	2b03      	cmp	r3, #3
 8005494:	d86f      	bhi.n	8005576 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d003      	beq.n	80054a4 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d02b      	beq.n	80054fa <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 80054a2:	e068      	b.n	8005576 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80054a4:	4b93      	ldr	r3, [pc, #588]	@ (80056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	08db      	lsrs	r3, r3, #3
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	4a92      	ldr	r2, [pc, #584]	@ (80056f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80054b0:	fa22 f303 	lsr.w	r3, r2, r3
 80054b4:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	ee07 3a90 	vmov	s15, r3
 80054bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	ee07 3a90 	vmov	s15, r3
 80054c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	ee07 3a90 	vmov	s15, r3
 80054d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054d8:	ed97 6a04 	vldr	s12, [r7, #16]
 80054dc:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80056fc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80054e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054f4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80054f8:	e068      	b.n	80055cc <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	ee07 3a90 	vmov	s15, r3
 8005500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005504:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005700 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005508:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	ee07 3a90 	vmov	s15, r3
 8005512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005516:	ed97 6a04 	vldr	s12, [r7, #16]
 800551a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80056fc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800551e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005526:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800552a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800552e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005532:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005536:	e049      	b.n	80055cc <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	ee07 3a90 	vmov	s15, r3
 800553e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005542:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005704 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8005546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	ee07 3a90 	vmov	s15, r3
 8005550:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005554:	ed97 6a04 	vldr	s12, [r7, #16]
 8005558:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80056fc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800555c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005560:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005564:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005568:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800556c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005570:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005574:	e02a      	b.n	80055cc <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005576:	4b5f      	ldr	r3, [pc, #380]	@ (80056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	08db      	lsrs	r3, r3, #3
 800557c:	f003 0303 	and.w	r3, r3, #3
 8005580:	4a5d      	ldr	r2, [pc, #372]	@ (80056f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005582:	fa22 f303 	lsr.w	r3, r2, r3
 8005586:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	ee07 3a90 	vmov	s15, r3
 800558e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	ee07 3a90 	vmov	s15, r3
 8005598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800559c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	ee07 3a90 	vmov	s15, r3
 80055a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055aa:	ed97 6a04 	vldr	s12, [r7, #16]
 80055ae:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80056fc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80055b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055c6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80055ca:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80055cc:	4b49      	ldr	r3, [pc, #292]	@ (80056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055d8:	d121      	bne.n	800561e <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80055da:	4b46      	ldr	r3, [pc, #280]	@ (80056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80055dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d017      	beq.n	8005616 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80055e6:	4b43      	ldr	r3, [pc, #268]	@ (80056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80055e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ea:	0a5b      	lsrs	r3, r3, #9
 80055ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055f0:	ee07 3a90 	vmov	s15, r3
 80055f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80055f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055fc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005600:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800560c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	e006      	b.n	8005624 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	e002      	b.n	8005624 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005624:	4b33      	ldr	r3, [pc, #204]	@ (80056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800562c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005630:	d121      	bne.n	8005676 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005632:	4b30      	ldr	r3, [pc, #192]	@ (80056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d017      	beq.n	800566e <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800563e:	4b2d      	ldr	r3, [pc, #180]	@ (80056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005642:	0c1b      	lsrs	r3, r3, #16
 8005644:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005648:	ee07 3a90 	vmov	s15, r3
 800564c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005650:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005654:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005658:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800565c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005664:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	605a      	str	r2, [r3, #4]
 800566c:	e006      	b.n	800567c <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	605a      	str	r2, [r3, #4]
 8005674:	e002      	b.n	800567c <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800567c:	4b1d      	ldr	r3, [pc, #116]	@ (80056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005684:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005688:	d121      	bne.n	80056ce <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800568a:	4b1a      	ldr	r3, [pc, #104]	@ (80056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800568c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800568e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d017      	beq.n	80056c6 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005696:	4b17      	ldr	r3, [pc, #92]	@ (80056f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800569a:	0e1b      	lsrs	r3, r3, #24
 800569c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056a0:	ee07 3a90 	vmov	s15, r3
 80056a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80056a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80056ac:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80056b0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80056b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056bc:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80056c4:	e010      	b.n	80056e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	609a      	str	r2, [r3, #8]
}
 80056cc:	e00c      	b.n	80056e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	609a      	str	r2, [r3, #8]
}
 80056d4:	e008      	b.n	80056e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	609a      	str	r2, [r3, #8]
}
 80056e8:	bf00      	nop
 80056ea:	372c      	adds	r7, #44	@ 0x2c
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	44020c00 	.word	0x44020c00
 80056f8:	03d09000 	.word	0x03d09000
 80056fc:	46000000 	.word	0x46000000
 8005700:	4a742400 	.word	0x4a742400
 8005704:	4af42400 	.word	0x4af42400

08005708 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005708:	b590      	push	{r4, r7, lr}
 800570a:	b08f      	sub	sp, #60	@ 0x3c
 800570c:	af00      	add	r7, sp, #0
 800570e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005712:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005716:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 800571a:	4321      	orrs	r1, r4
 800571c:	d150      	bne.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800571e:	4b26      	ldr	r3, [pc, #152]	@ (80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005720:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005724:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005728:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800572a:	4b23      	ldr	r3, [pc, #140]	@ (80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800572c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b02      	cmp	r3, #2
 8005736:	d108      	bne.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800573e:	d104      	bne.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005740:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005744:	637b      	str	r3, [r7, #52]	@ 0x34
 8005746:	f002 bb2a 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800574a:	4b1b      	ldr	r3, [pc, #108]	@ (80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800574c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005754:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005758:	d108      	bne.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800575a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005760:	d104      	bne.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8005762:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005766:	637b      	str	r3, [r7, #52]	@ 0x34
 8005768:	f002 bb19 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800576c:	4b12      	ldr	r3, [pc, #72]	@ (80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005774:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005778:	d119      	bne.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800577a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005780:	d115      	bne.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005782:	4b0d      	ldr	r3, [pc, #52]	@ (80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800578a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800578e:	d30a      	bcc.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005790:	4b09      	ldr	r3, [pc, #36]	@ (80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	0a1b      	lsrs	r3, r3, #8
 8005796:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800579a:	4a08      	ldr	r2, [pc, #32]	@ (80057bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800579c:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80057a2:	f002 bafc 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80057aa:	f002 baf8 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80057b2:	f002 baf4 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80057b6:	bf00      	nop
 80057b8:	44020c00 	.word	0x44020c00
 80057bc:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80057c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057c4:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 80057c8:	ea50 0104 	orrs.w	r1, r0, r4
 80057cc:	f001 8275 	beq.w	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80057d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057d4:	2801      	cmp	r0, #1
 80057d6:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 80057da:	f082 82dd 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80057de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057e2:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 80057e6:	ea50 0104 	orrs.w	r1, r0, r4
 80057ea:	f001 816c 	beq.w	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 80057ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057f2:	2801      	cmp	r0, #1
 80057f4:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 80057f8:	f082 82ce 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80057fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005800:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8005804:	ea50 0104 	orrs.w	r1, r0, r4
 8005808:	f001 8602 	beq.w	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800580c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005810:	2801      	cmp	r0, #1
 8005812:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8005816:	f082 82bf 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800581a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800581e:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8005822:	ea50 0104 	orrs.w	r1, r0, r4
 8005826:	f001 854c 	beq.w	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800582a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800582e:	2801      	cmp	r0, #1
 8005830:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8005834:	f082 82b0 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005838:	e9d7 0100 	ldrd	r0, r1, [r7]
 800583c:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8005840:	ea50 0104 	orrs.w	r1, r0, r4
 8005844:	f001 849e 	beq.w	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8005848:	e9d7 0100 	ldrd	r0, r1, [r7]
 800584c:	2801      	cmp	r0, #1
 800584e:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8005852:	f082 82a1 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005856:	e9d7 0100 	ldrd	r0, r1, [r7]
 800585a:	f1a1 0420 	sub.w	r4, r1, #32
 800585e:	ea50 0104 	orrs.w	r1, r0, r4
 8005862:	f001 83e8 	beq.w	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8005866:	e9d7 0100 	ldrd	r0, r1, [r7]
 800586a:	2801      	cmp	r0, #1
 800586c:	f171 0120 	sbcs.w	r1, r1, #32
 8005870:	f082 8292 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005874:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005878:	f1a1 0410 	sub.w	r4, r1, #16
 800587c:	ea50 0104 	orrs.w	r1, r0, r4
 8005880:	f002 8256 	beq.w	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005884:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005888:	2801      	cmp	r0, #1
 800588a:	f171 0110 	sbcs.w	r1, r1, #16
 800588e:	f082 8283 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005892:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005896:	f1a1 0408 	sub.w	r4, r1, #8
 800589a:	ea50 0104 	orrs.w	r1, r0, r4
 800589e:	f002 81cc 	beq.w	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 80058a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058a6:	2801      	cmp	r0, #1
 80058a8:	f171 0108 	sbcs.w	r1, r1, #8
 80058ac:	f082 8274 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80058b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058b4:	1f0c      	subs	r4, r1, #4
 80058b6:	ea50 0104 	orrs.w	r1, r0, r4
 80058ba:	f001 8648 	beq.w	800754e <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 80058be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058c2:	2801      	cmp	r0, #1
 80058c4:	f171 0104 	sbcs.w	r1, r1, #4
 80058c8:	f082 8266 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80058cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058d0:	1e8c      	subs	r4, r1, #2
 80058d2:	ea50 0104 	orrs.w	r1, r0, r4
 80058d6:	f002 8143 	beq.w	8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 80058da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058de:	2801      	cmp	r0, #1
 80058e0:	f171 0102 	sbcs.w	r1, r1, #2
 80058e4:	f082 8258 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80058e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058ec:	1e4c      	subs	r4, r1, #1
 80058ee:	ea50 0104 	orrs.w	r1, r0, r4
 80058f2:	f002 80ce 	beq.w	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 80058f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058fa:	2801      	cmp	r0, #1
 80058fc:	f171 0101 	sbcs.w	r1, r1, #1
 8005900:	f082 824a 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005904:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005908:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800590c:	4321      	orrs	r1, r4
 800590e:	f002 8059 	beq.w	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8005912:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005916:	4cd9      	ldr	r4, [pc, #868]	@ (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005918:	42a0      	cmp	r0, r4
 800591a:	f171 0100 	sbcs.w	r1, r1, #0
 800591e:	f082 823b 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005922:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005926:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 800592a:	4321      	orrs	r1, r4
 800592c:	f001 87d9 	beq.w	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8005930:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005934:	4cd2      	ldr	r4, [pc, #840]	@ (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005936:	42a0      	cmp	r0, r4
 8005938:	f171 0100 	sbcs.w	r1, r1, #0
 800593c:	f082 822c 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005940:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005944:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8005948:	4321      	orrs	r1, r4
 800594a:	f001 8751 	beq.w	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 800594e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005952:	4ccc      	ldr	r4, [pc, #816]	@ (8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005954:	42a0      	cmp	r0, r4
 8005956:	f171 0100 	sbcs.w	r1, r1, #0
 800595a:	f082 821d 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800595e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005962:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8005966:	4321      	orrs	r1, r4
 8005968:	f001 869a 	beq.w	80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 800596c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005970:	4cc5      	ldr	r4, [pc, #788]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005972:	42a0      	cmp	r0, r4
 8005974:	f171 0100 	sbcs.w	r1, r1, #0
 8005978:	f082 820e 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800597c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005980:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8005984:	4321      	orrs	r1, r4
 8005986:	f001 8612 	beq.w	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800598a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800598e:	4cbf      	ldr	r4, [pc, #764]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8005990:	42a0      	cmp	r0, r4
 8005992:	f171 0100 	sbcs.w	r1, r1, #0
 8005996:	f082 81ff 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800599a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800599e:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 80059a2:	4321      	orrs	r1, r4
 80059a4:	f002 817e 	beq.w	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 80059a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059ac:	4cb8      	ldr	r4, [pc, #736]	@ (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80059ae:	42a0      	cmp	r0, r4
 80059b0:	f171 0100 	sbcs.w	r1, r1, #0
 80059b4:	f082 81f0 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059bc:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 80059c0:	4321      	orrs	r1, r4
 80059c2:	f000 829e 	beq.w	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 80059c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059ca:	4cb2      	ldr	r4, [pc, #712]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80059cc:	42a0      	cmp	r0, r4
 80059ce:	f171 0100 	sbcs.w	r1, r1, #0
 80059d2:	f082 81e1 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059da:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 80059de:	4321      	orrs	r1, r4
 80059e0:	f000 826d 	beq.w	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80059e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059e8:	4cab      	ldr	r4, [pc, #684]	@ (8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059ea:	42a0      	cmp	r0, r4
 80059ec:	f171 0100 	sbcs.w	r1, r1, #0
 80059f0:	f082 81d2 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059f8:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80059fc:	4321      	orrs	r1, r4
 80059fe:	f001 800d 	beq.w	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8005a02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a06:	4ca5      	ldr	r4, [pc, #660]	@ (8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005a08:	42a0      	cmp	r0, r4
 8005a0a:	f171 0100 	sbcs.w	r1, r1, #0
 8005a0e:	f082 81c3 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a16:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8005a1a:	4321      	orrs	r1, r4
 8005a1c:	f000 81d0 	beq.w	8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8005a20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a24:	4c9e      	ldr	r4, [pc, #632]	@ (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005a26:	42a0      	cmp	r0, r4
 8005a28:	f171 0100 	sbcs.w	r1, r1, #0
 8005a2c:	f082 81b4 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a34:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8005a38:	4321      	orrs	r1, r4
 8005a3a:	f000 8142 	beq.w	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8005a3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a42:	4c98      	ldr	r4, [pc, #608]	@ (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005a44:	42a0      	cmp	r0, r4
 8005a46:	f171 0100 	sbcs.w	r1, r1, #0
 8005a4a:	f082 81a5 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a52:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8005a56:	4321      	orrs	r1, r4
 8005a58:	f001 824e 	beq.w	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8005a5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a60:	4c91      	ldr	r4, [pc, #580]	@ (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005a62:	42a0      	cmp	r0, r4
 8005a64:	f171 0100 	sbcs.w	r1, r1, #0
 8005a68:	f082 8196 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a70:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8005a74:	4321      	orrs	r1, r4
 8005a76:	f001 8197 	beq.w	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8005a7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a7e:	4c8b      	ldr	r4, [pc, #556]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005a80:	42a0      	cmp	r0, r4
 8005a82:	f171 0100 	sbcs.w	r1, r1, #0
 8005a86:	f082 8187 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a8e:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8005a92:	4321      	orrs	r1, r4
 8005a94:	f001 8154 	beq.w	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8005a98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a9c:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8005aa0:	f171 0100 	sbcs.w	r1, r1, #0
 8005aa4:	f082 8178 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005aa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aac:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8005ab0:	4321      	orrs	r1, r4
 8005ab2:	f001 80b7 	beq.w	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8005ab6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aba:	f248 0401 	movw	r4, #32769	@ 0x8001
 8005abe:	42a0      	cmp	r0, r4
 8005ac0:	f171 0100 	sbcs.w	r1, r1, #0
 8005ac4:	f082 8168 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ac8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005acc:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8005ad0:	4321      	orrs	r1, r4
 8005ad2:	f001 8064 	beq.w	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8005ad6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ada:	f244 0401 	movw	r4, #16385	@ 0x4001
 8005ade:	42a0      	cmp	r0, r4
 8005ae0:	f171 0100 	sbcs.w	r1, r1, #0
 8005ae4:	f082 8158 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aec:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8005af0:	4321      	orrs	r1, r4
 8005af2:	f001 8011 	beq.w	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8005af6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005afa:	f242 0401 	movw	r4, #8193	@ 0x2001
 8005afe:	42a0      	cmp	r0, r4
 8005b00:	f171 0100 	sbcs.w	r1, r1, #0
 8005b04:	f082 8148 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b0c:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8005b10:	4321      	orrs	r1, r4
 8005b12:	f000 871e 	beq.w	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8005b16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b1a:	f241 0401 	movw	r4, #4097	@ 0x1001
 8005b1e:	42a0      	cmp	r0, r4
 8005b20:	f171 0100 	sbcs.w	r1, r1, #0
 8005b24:	f082 8138 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b2c:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8005b30:	4321      	orrs	r1, r4
 8005b32:	f000 86a8 	beq.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8005b36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b3a:	f640 0401 	movw	r4, #2049	@ 0x801
 8005b3e:	42a0      	cmp	r0, r4
 8005b40:	f171 0100 	sbcs.w	r1, r1, #0
 8005b44:	f082 8128 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b4c:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8005b50:	4321      	orrs	r1, r4
 8005b52:	f000 8632 	beq.w	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8005b56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b5a:	f240 4401 	movw	r4, #1025	@ 0x401
 8005b5e:	42a0      	cmp	r0, r4
 8005b60:	f171 0100 	sbcs.w	r1, r1, #0
 8005b64:	f082 8118 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b6c:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8005b70:	4321      	orrs	r1, r4
 8005b72:	f000 85b0 	beq.w	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8005b76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b7a:	f240 2401 	movw	r4, #513	@ 0x201
 8005b7e:	42a0      	cmp	r0, r4
 8005b80:	f171 0100 	sbcs.w	r1, r1, #0
 8005b84:	f082 8108 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b8c:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8005b90:	4321      	orrs	r1, r4
 8005b92:	f000 8535 	beq.w	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8005b96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b9a:	f240 1401 	movw	r4, #257	@ 0x101
 8005b9e:	42a0      	cmp	r0, r4
 8005ba0:	f171 0100 	sbcs.w	r1, r1, #0
 8005ba4:	f082 80f8 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ba8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bac:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8005bb0:	4321      	orrs	r1, r4
 8005bb2:	f000 84ba 	beq.w	800652a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8005bb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bba:	2881      	cmp	r0, #129	@ 0x81
 8005bbc:	f171 0100 	sbcs.w	r1, r1, #0
 8005bc0:	f082 80ea 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bc8:	2821      	cmp	r0, #33	@ 0x21
 8005bca:	f171 0100 	sbcs.w	r1, r1, #0
 8005bce:	d26f      	bcs.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005bd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bd4:	4301      	orrs	r1, r0
 8005bd6:	f002 80df 	beq.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bde:	1e42      	subs	r2, r0, #1
 8005be0:	f141 33ff 	adc.w	r3, r1, #4294967295
 8005be4:	2a20      	cmp	r2, #32
 8005be6:	f173 0100 	sbcs.w	r1, r3, #0
 8005bea:	f082 80d5 	bcs.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bee:	2a1f      	cmp	r2, #31
 8005bf0:	f202 80d2 	bhi.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bf4:	a101      	add	r1, pc, #4	@ (adr r1, 8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8005bf6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005bfa:	bf00      	nop
 8005bfc:	08005f5d 	.word	0x08005f5d
 8005c00:	08006029 	.word	0x08006029
 8005c04:	08007d99 	.word	0x08007d99
 8005c08:	080060e9 	.word	0x080060e9
 8005c0c:	08007d99 	.word	0x08007d99
 8005c10:	08007d99 	.word	0x08007d99
 8005c14:	08007d99 	.word	0x08007d99
 8005c18:	080061b9 	.word	0x080061b9
 8005c1c:	08007d99 	.word	0x08007d99
 8005c20:	08007d99 	.word	0x08007d99
 8005c24:	08007d99 	.word	0x08007d99
 8005c28:	08007d99 	.word	0x08007d99
 8005c2c:	08007d99 	.word	0x08007d99
 8005c30:	08007d99 	.word	0x08007d99
 8005c34:	08007d99 	.word	0x08007d99
 8005c38:	0800629b 	.word	0x0800629b
 8005c3c:	08007d99 	.word	0x08007d99
 8005c40:	08007d99 	.word	0x08007d99
 8005c44:	08007d99 	.word	0x08007d99
 8005c48:	08007d99 	.word	0x08007d99
 8005c4c:	08007d99 	.word	0x08007d99
 8005c50:	08007d99 	.word	0x08007d99
 8005c54:	08007d99 	.word	0x08007d99
 8005c58:	08007d99 	.word	0x08007d99
 8005c5c:	08007d99 	.word	0x08007d99
 8005c60:	08007d99 	.word	0x08007d99
 8005c64:	08007d99 	.word	0x08007d99
 8005c68:	08007d99 	.word	0x08007d99
 8005c6c:	08007d99 	.word	0x08007d99
 8005c70:	08007d99 	.word	0x08007d99
 8005c74:	08007d99 	.word	0x08007d99
 8005c78:	08006371 	.word	0x08006371
 8005c7c:	80000001 	.word	0x80000001
 8005c80:	40000001 	.word	0x40000001
 8005c84:	20000001 	.word	0x20000001
 8005c88:	10000001 	.word	0x10000001
 8005c8c:	08000001 	.word	0x08000001
 8005c90:	04000001 	.word	0x04000001
 8005c94:	00800001 	.word	0x00800001
 8005c98:	00400001 	.word	0x00400001
 8005c9c:	00200001 	.word	0x00200001
 8005ca0:	00100001 	.word	0x00100001
 8005ca4:	00080001 	.word	0x00080001
 8005ca8:	00040001 	.word	0x00040001
 8005cac:	00020001 	.word	0x00020001
 8005cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cb4:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	f000 83c4 	beq.w	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005cbe:	f002 b86b 	b.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005cc2:	4ba1      	ldr	r3, [pc, #644]	@ (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005cc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005cc8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005ccc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005cd4:	d036      	beq.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005cdc:	d86b      	bhi.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ce4:	d02b      	beq.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8005ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005cec:	d863      	bhi.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cf4:	d01b      	beq.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cfc:	d85b      	bhi.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d004      	beq.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8005d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d0a:	d008      	beq.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8005d0c:	e053      	b.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d0e:	f107 0320 	add.w	r3, r7, #32
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7ff f8ba 	bl	8004e8c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005d1c:	e04e      	b.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d1e:	f107 0314 	add.w	r3, r7, #20
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff fa1c 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005d2c:	e046      	b.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d2e:	f107 0308 	add.w	r3, r7, #8
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7ff fb7e 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005d3c:	e03e      	b.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005d3e:	4b83      	ldr	r3, [pc, #524]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005d40:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005d42:	e03b      	b.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005d44:	4b80      	ldr	r3, [pc, #512]	@ (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005d46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d4a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d50:	4b7d      	ldr	r3, [pc, #500]	@ (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d10c      	bne.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8005d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d109      	bne.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d62:	4b79      	ldr	r3, [pc, #484]	@ (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	08db      	lsrs	r3, r3, #3
 8005d68:	f003 0303 	and.w	r3, r3, #3
 8005d6c:	4a78      	ldr	r2, [pc, #480]	@ (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d72:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d74:	e01e      	b.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d76:	4b74      	ldr	r3, [pc, #464]	@ (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d82:	d106      	bne.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d8a:	d102      	bne.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005d8c:	4b71      	ldr	r3, [pc, #452]	@ (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d90:	e010      	b.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d92:	4b6d      	ldr	r3, [pc, #436]	@ (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d9e:	d106      	bne.n	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8005da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005da6:	d102      	bne.n	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005da8:	4b6b      	ldr	r3, [pc, #428]	@ (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005daa:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dac:	e002      	b.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005db2:	e003      	b.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8005db4:	e002      	b.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005dba:	bf00      	nop
          }
        }
        break;
 8005dbc:	f001 bfef 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005dc0:	4b61      	ldr	r3, [pc, #388]	@ (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005dc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005dc6:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8005dca:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005dd2:	d036      	beq.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8005dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005dda:	d86b      	bhi.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dde:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005de2:	d02b      	beq.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8005de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005dea:	d863      	bhi.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005df2:	d01b      	beq.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dfa:	d85b      	bhi.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d004      	beq.n	8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e04:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005e08:	d008      	beq.n	8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8005e0a:	e053      	b.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e0c:	f107 0320 	add.w	r3, r7, #32
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7ff f83b 	bl	8004e8c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e18:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005e1a:	e04e      	b.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e1c:	f107 0314 	add.w	r3, r7, #20
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7ff f99d 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005e2a:	e046      	b.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e2c:	f107 0308 	add.w	r3, r7, #8
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7ff faff 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005e3a:	e03e      	b.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005e3c:	4b43      	ldr	r3, [pc, #268]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005e3e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005e40:	e03b      	b.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e42:	4b41      	ldr	r3, [pc, #260]	@ (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005e44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e48:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e4e:	4b3e      	ldr	r3, [pc, #248]	@ (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d10c      	bne.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8005e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d109      	bne.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e60:	4b39      	ldr	r3, [pc, #228]	@ (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	08db      	lsrs	r3, r3, #3
 8005e66:	f003 0303 	and.w	r3, r3, #3
 8005e6a:	4a39      	ldr	r2, [pc, #228]	@ (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e70:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e72:	e01e      	b.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e74:	4b34      	ldr	r3, [pc, #208]	@ (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e80:	d106      	bne.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e88:	d102      	bne.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005e8a:	4b32      	ldr	r3, [pc, #200]	@ (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e8e:	e010      	b.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e90:	4b2d      	ldr	r3, [pc, #180]	@ (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e9c:	d106      	bne.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8005e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ea4:	d102      	bne.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005ea6:	4b2c      	ldr	r3, [pc, #176]	@ (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005ea8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005eaa:	e002      	b.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005eb0:	e003      	b.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8005eb2:	e002      	b.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005eb8:	bf00      	nop
          }
        }
        break;
 8005eba:	f001 bf70 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005ebe:	4b22      	ldr	r3, [pc, #136]	@ (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005ec0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ec8:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8005eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d108      	bne.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ed0:	f107 0320 	add.w	r3, r7, #32
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7fe ffd9 	bl	8004e8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005edc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ede:	f001 bf5e 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee4:	2b40      	cmp	r3, #64	@ 0x40
 8005ee6:	d108      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ee8:	f107 0314 	add.w	r3, r7, #20
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7ff f937 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ef6:	f001 bf52 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005efe:	f001 bf4e 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8005f02:	4b11      	ldr	r3, [pc, #68]	@ (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f0c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d108      	bne.n	8005f26 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f14:	f107 0320 	add.w	r3, r7, #32
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fe ffb7 	bl	8004e8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f20:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005f22:	f001 bf3c 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8005f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f28:	2b80      	cmp	r3, #128	@ 0x80
 8005f2a:	d108      	bne.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f2c:	f107 0314 	add.w	r3, r7, #20
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff f915 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f3a:	f001 bf30 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f42:	f001 bf2c 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005f46:	bf00      	nop
 8005f48:	44020c00 	.word	0x44020c00
 8005f4c:	00bb8000 	.word	0x00bb8000
 8005f50:	03d09000 	.word	0x03d09000
 8005f54:	003d0900 	.word	0x003d0900
 8005f58:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005f5c:	4b9d      	ldr	r3, [pc, #628]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005f5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005f62:	f003 0307 	and.w	r3, r3, #7
 8005f66:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d104      	bne.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005f6e:	f7fc ff9f 	bl	8002eb0 <HAL_RCC_GetPCLK2Freq>
 8005f72:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005f74:	f001 bf13 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8005f78:	4b96      	ldr	r3, [pc, #600]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f84:	d10a      	bne.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8005f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d107      	bne.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f8c:	f107 0314 	add.w	r3, r7, #20
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7ff f8e5 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f9a:	e043      	b.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8005f9c:	4b8d      	ldr	r3, [pc, #564]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005fa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fa8:	d10a      	bne.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8005faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d107      	bne.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fb0:	f107 0308 	add.w	r3, r7, #8
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7ff fa3d 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fbe:	e031      	b.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005fc0:	4b84      	ldr	r3, [pc, #528]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d10c      	bne.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	d109      	bne.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005fd2:	4b80      	ldr	r3, [pc, #512]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	08db      	lsrs	r3, r3, #3
 8005fd8:	f003 0303 	and.w	r3, r3, #3
 8005fdc:	4a7e      	ldr	r2, [pc, #504]	@ (80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005fde:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fe4:	e01e      	b.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8005fe6:	4b7b      	ldr	r3, [pc, #492]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ff2:	d105      	bne.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8005ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d102      	bne.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8005ffa:	4b78      	ldr	r3, [pc, #480]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ffe:	e011      	b.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006000:	4b74      	ldr	r3, [pc, #464]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006002:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b02      	cmp	r3, #2
 800600c:	d106      	bne.n	800601c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800600e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006010:	2b05      	cmp	r3, #5
 8006012:	d103      	bne.n	800601c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8006014:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006018:	637b      	str	r3, [r7, #52]	@ 0x34
 800601a:	e003      	b.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800601c:	2300      	movs	r3, #0
 800601e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006020:	f001 bebd 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006024:	f001 bebb 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006028:	4b6a      	ldr	r3, [pc, #424]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800602a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800602e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006032:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006036:	2b00      	cmp	r3, #0
 8006038:	d104      	bne.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800603a:	f7fc ff23 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 800603e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006040:	f001 bead 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006044:	4b63      	ldr	r3, [pc, #396]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800604c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006050:	d10a      	bne.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006054:	2b08      	cmp	r3, #8
 8006056:	d107      	bne.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006058:	f107 0314 	add.w	r3, r7, #20
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff f87f 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	637b      	str	r3, [r7, #52]	@ 0x34
 8006066:	e03d      	b.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8006068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606a:	2b10      	cmp	r3, #16
 800606c:	d108      	bne.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800606e:	f107 0308 	add.w	r3, r7, #8
 8006072:	4618      	mov	r0, r3
 8006074:	f7ff f9de 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800607c:	f001 be8f 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006080:	4b54      	ldr	r3, [pc, #336]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b02      	cmp	r3, #2
 800608a:	d10c      	bne.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800608c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608e:	2b18      	cmp	r3, #24
 8006090:	d109      	bne.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006092:	4b50      	ldr	r3, [pc, #320]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	08db      	lsrs	r3, r3, #3
 8006098:	f003 0303 	and.w	r3, r3, #3
 800609c:	4a4e      	ldr	r2, [pc, #312]	@ (80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800609e:	fa22 f303 	lsr.w	r3, r2, r3
 80060a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80060a4:	e01e      	b.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80060a6:	4b4b      	ldr	r3, [pc, #300]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060b2:	d105      	bne.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80060b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b6:	2b20      	cmp	r3, #32
 80060b8:	d102      	bne.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 80060ba:	4b48      	ldr	r3, [pc, #288]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80060bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80060be:	e011      	b.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80060c0:	4b44      	ldr	r3, [pc, #272]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80060c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d106      	bne.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80060ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d0:	2b28      	cmp	r3, #40	@ 0x28
 80060d2:	d103      	bne.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 80060d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80060da:	e003      	b.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060e0:	f001 be5d 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80060e4:	f001 be5b 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80060e8:	4b3a      	ldr	r3, [pc, #232]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80060ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80060ee:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80060f2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80060f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d104      	bne.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80060fa:	f7fc fec3 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 80060fe:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006100:	f001 be4d 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8006104:	4b33      	ldr	r3, [pc, #204]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800610c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006110:	d10a      	bne.n	8006128 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8006112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006114:	2b40      	cmp	r3, #64	@ 0x40
 8006116:	d107      	bne.n	8006128 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006118:	f107 0314 	add.w	r3, r7, #20
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff f81f 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	637b      	str	r3, [r7, #52]	@ 0x34
 8006126:	e045      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8006128:	4b2a      	ldr	r3, [pc, #168]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006130:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006134:	d10a      	bne.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8006136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006138:	2b80      	cmp	r3, #128	@ 0x80
 800613a:	d107      	bne.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800613c:	f107 0308 	add.w	r3, r7, #8
 8006140:	4618      	mov	r0, r3
 8006142:	f7ff f977 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	637b      	str	r3, [r7, #52]	@ 0x34
 800614a:	e033      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800614c:	4b21      	ldr	r3, [pc, #132]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b02      	cmp	r3, #2
 8006156:	d10c      	bne.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8006158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615a:	2bc0      	cmp	r3, #192	@ 0xc0
 800615c:	d109      	bne.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800615e:	4b1d      	ldr	r3, [pc, #116]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	08db      	lsrs	r3, r3, #3
 8006164:	f003 0303 	and.w	r3, r3, #3
 8006168:	4a1b      	ldr	r2, [pc, #108]	@ (80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800616a:	fa22 f303 	lsr.w	r3, r2, r3
 800616e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006170:	e020      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8006172:	4b18      	ldr	r3, [pc, #96]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800617a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800617e:	d106      	bne.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8006180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006186:	d102      	bne.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8006188:	4b14      	ldr	r3, [pc, #80]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800618a:	637b      	str	r3, [r7, #52]	@ 0x34
 800618c:	e012      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800618e:	4b11      	ldr	r3, [pc, #68]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b02      	cmp	r3, #2
 800619a:	d107      	bne.n	80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800619c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80061a2:	d103      	bne.n	80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 80061a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80061aa:	e003      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 80061ac:	2300      	movs	r3, #0
 80061ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061b0:	f001 bdf5 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80061b4:	f001 bdf3 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80061b8:	4b06      	ldr	r3, [pc, #24]	@ (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80061ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80061be:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80061c2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80061c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10a      	bne.n	80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80061ca:	f7fc fe5b 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 80061ce:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80061d0:	f001 bde5 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80061d4:	44020c00 	.word	0x44020c00
 80061d8:	03d09000 	.word	0x03d09000
 80061dc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80061e0:	4ba0      	ldr	r3, [pc, #640]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061ec:	d10b      	bne.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 80061ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061f4:	d107      	bne.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061f6:	f107 0314 	add.w	r3, r7, #20
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fe ffb0 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	637b      	str	r3, [r7, #52]	@ 0x34
 8006204:	e047      	b.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8006206:	4b97      	ldr	r3, [pc, #604]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800620e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006212:	d10b      	bne.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8006214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800621a:	d107      	bne.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800621c:	f107 0308 	add.w	r3, r7, #8
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff f907 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	637b      	str	r3, [r7, #52]	@ 0x34
 800622a:	e034      	b.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800622c:	4b8d      	ldr	r3, [pc, #564]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0302 	and.w	r3, r3, #2
 8006234:	2b02      	cmp	r3, #2
 8006236:	d10d      	bne.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8006238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800623e:	d109      	bne.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006240:	4b88      	ldr	r3, [pc, #544]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	08db      	lsrs	r3, r3, #3
 8006246:	f003 0303 	and.w	r3, r3, #3
 800624a:	4a87      	ldr	r2, [pc, #540]	@ (8006468 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800624c:	fa22 f303 	lsr.w	r3, r2, r3
 8006250:	637b      	str	r3, [r7, #52]	@ 0x34
 8006252:	e020      	b.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8006254:	4b83      	ldr	r3, [pc, #524]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800625c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006260:	d106      	bne.n	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8006262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006264:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006268:	d102      	bne.n	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800626a:	4b80      	ldr	r3, [pc, #512]	@ (800646c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800626c:	637b      	str	r3, [r7, #52]	@ 0x34
 800626e:	e012      	b.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006270:	4b7c      	ldr	r3, [pc, #496]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b02      	cmp	r3, #2
 800627c:	d107      	bne.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800627e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006280:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006284:	d103      	bne.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8006286:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800628a:	637b      	str	r3, [r7, #52]	@ 0x34
 800628c:	e003      	b.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006292:	f001 bd84 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006296:	f001 bd82 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800629a:	4b72      	ldr	r3, [pc, #456]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800629c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80062a0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80062a4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80062a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d104      	bne.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80062ac:	f7fc fdea 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 80062b0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80062b2:	f001 bd74 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80062b6:	4b6b      	ldr	r3, [pc, #428]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062c2:	d10b      	bne.n	80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80062c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ca:	d107      	bne.n	80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062cc:	f107 0314 	add.w	r3, r7, #20
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7fe ff45 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80062da:	e047      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80062dc:	4b61      	ldr	r3, [pc, #388]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062e8:	d10b      	bne.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80062ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062f0:	d107      	bne.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062f2:	f107 0308 	add.w	r3, r7, #8
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7ff f89c 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006300:	e034      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006302:	4b58      	ldr	r3, [pc, #352]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b02      	cmp	r3, #2
 800630c:	d10d      	bne.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800630e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006310:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006314:	d109      	bne.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006316:	4b53      	ldr	r3, [pc, #332]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	08db      	lsrs	r3, r3, #3
 800631c:	f003 0303 	and.w	r3, r3, #3
 8006320:	4a51      	ldr	r2, [pc, #324]	@ (8006468 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006322:	fa22 f303 	lsr.w	r3, r2, r3
 8006326:	637b      	str	r3, [r7, #52]	@ 0x34
 8006328:	e020      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800632a:	4b4e      	ldr	r3, [pc, #312]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006332:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006336:	d106      	bne.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8006338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800633e:	d102      	bne.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8006340:	4b4a      	ldr	r3, [pc, #296]	@ (800646c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006342:	637b      	str	r3, [r7, #52]	@ 0x34
 8006344:	e012      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006346:	4b47      	ldr	r3, [pc, #284]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b02      	cmp	r3, #2
 8006352:	d107      	bne.n	8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8006354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006356:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800635a:	d103      	bne.n	8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800635c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006360:	637b      	str	r3, [r7, #52]	@ 0x34
 8006362:	e003      	b.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006368:	f001 bd19 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800636c:	f001 bd17 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006370:	4b3c      	ldr	r3, [pc, #240]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006372:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006376:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800637a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800637c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637e:	2b00      	cmp	r3, #0
 8006380:	d104      	bne.n	800638c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006382:	f7fc fd7f 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 8006386:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8006388:	f001 bd09 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800638c:	4b35      	ldr	r3, [pc, #212]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006394:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006398:	d10b      	bne.n	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800639a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063a0:	d107      	bne.n	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063a2:	f107 0314 	add.w	r3, r7, #20
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fe feda 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80063b0:	e047      	b.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80063b2:	4b2c      	ldr	r3, [pc, #176]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063be:	d10b      	bne.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80063c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063c6:	d107      	bne.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063c8:	f107 0308 	add.w	r3, r7, #8
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7ff f831 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80063d6:	e034      	b.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80063d8:	4b22      	ldr	r3, [pc, #136]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d10d      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 80063e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80063ea:	d109      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80063ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	08db      	lsrs	r3, r3, #3
 80063f2:	f003 0303 	and.w	r3, r3, #3
 80063f6:	4a1c      	ldr	r2, [pc, #112]	@ (8006468 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80063f8:	fa22 f303 	lsr.w	r3, r2, r3
 80063fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80063fe:	e020      	b.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8006400:	4b18      	ldr	r3, [pc, #96]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800640c:	d106      	bne.n	800641c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800640e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006410:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006414:	d102      	bne.n	800641c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8006416:	4b15      	ldr	r3, [pc, #84]	@ (800646c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006418:	637b      	str	r3, [r7, #52]	@ 0x34
 800641a:	e012      	b.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800641c:	4b11      	ldr	r3, [pc, #68]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800641e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b02      	cmp	r3, #2
 8006428:	d107      	bne.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800642a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006430:	d103      	bne.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8006432:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006436:	637b      	str	r3, [r7, #52]	@ 0x34
 8006438:	e003      	b.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800643e:	f001 bcae 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006442:	f001 bcac 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8006446:	4b07      	ldr	r3, [pc, #28]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006448:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800644c:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8006450:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8006452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10b      	bne.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006458:	f7fc fd14 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 800645c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800645e:	f001 bc9e 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006462:	bf00      	nop
 8006464:	44020c00 	.word	0x44020c00
 8006468:	03d09000 	.word	0x03d09000
 800646c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8006470:	4ba0      	ldr	r3, [pc, #640]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006478:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800647c:	d10b      	bne.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800647e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006480:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006484:	d107      	bne.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006486:	f107 0314 	add.w	r3, r7, #20
 800648a:	4618      	mov	r0, r3
 800648c:	f7fe fe68 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	637b      	str	r3, [r7, #52]	@ 0x34
 8006494:	e047      	b.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8006496:	4b97      	ldr	r3, [pc, #604]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800649e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064a2:	d10b      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80064a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80064aa:	d107      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064ac:	f107 0308 	add.w	r3, r7, #8
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7fe ffbf 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80064ba:	e034      	b.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80064bc:	4b8d      	ldr	r3, [pc, #564]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0302 	and.w	r3, r3, #2
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d10d      	bne.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80064c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ca:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80064ce:	d109      	bne.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064d0:	4b88      	ldr	r3, [pc, #544]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	08db      	lsrs	r3, r3, #3
 80064d6:	f003 0303 	and.w	r3, r3, #3
 80064da:	4a87      	ldr	r2, [pc, #540]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80064dc:	fa22 f303 	lsr.w	r3, r2, r3
 80064e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80064e2:	e020      	b.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80064e4:	4b83      	ldr	r3, [pc, #524]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064f0:	d106      	bne.n	8006500 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80064f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064f8:	d102      	bne.n	8006500 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80064fa:	4b80      	ldr	r3, [pc, #512]	@ (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80064fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80064fe:	e012      	b.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8006500:	4b7c      	ldr	r3, [pc, #496]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006502:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b02      	cmp	r3, #2
 800650c:	d107      	bne.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800650e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006510:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006514:	d103      	bne.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8006516:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800651a:	637b      	str	r3, [r7, #52]	@ 0x34
 800651c:	e003      	b.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006522:	f001 bc3c 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006526:	f001 bc3a 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800652a:	4b72      	ldr	r3, [pc, #456]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800652c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006530:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006534:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8006536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006538:	2b00      	cmp	r3, #0
 800653a:	d104      	bne.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800653c:	f7fc fca2 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 8006540:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8006542:	f001 bc2c 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8006546:	4b6b      	ldr	r3, [pc, #428]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800654e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006552:	d10b      	bne.n	800656c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006556:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800655a:	d107      	bne.n	800656c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800655c:	f107 0314 	add.w	r3, r7, #20
 8006560:	4618      	mov	r0, r3
 8006562:	f7fe fdfd 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	637b      	str	r3, [r7, #52]	@ 0x34
 800656a:	e047      	b.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800656c:	4b61      	ldr	r3, [pc, #388]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006574:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006578:	d10b      	bne.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800657a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006580:	d107      	bne.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006582:	f107 0308 	add.w	r3, r7, #8
 8006586:	4618      	mov	r0, r3
 8006588:	f7fe ff54 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006590:	e034      	b.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8006592:	4b58      	ldr	r3, [pc, #352]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b02      	cmp	r3, #2
 800659c:	d10d      	bne.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800659e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80065a4:	d109      	bne.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80065a6:	4b53      	ldr	r3, [pc, #332]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	08db      	lsrs	r3, r3, #3
 80065ac:	f003 0303 	and.w	r3, r3, #3
 80065b0:	4a51      	ldr	r2, [pc, #324]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80065b2:	fa22 f303 	lsr.w	r3, r2, r3
 80065b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80065b8:	e020      	b.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80065ba:	4b4e      	ldr	r3, [pc, #312]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065c6:	d106      	bne.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 80065c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80065ce:	d102      	bne.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80065d0:	4b4a      	ldr	r3, [pc, #296]	@ (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80065d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80065d4:	e012      	b.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80065d6:	4b47      	ldr	r3, [pc, #284]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80065d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065dc:	f003 0302 	and.w	r3, r3, #2
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d107      	bne.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 80065e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80065ea:	d103      	bne.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 80065ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80065f2:	e003      	b.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80065f4:	2300      	movs	r3, #0
 80065f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80065f8:	f001 bbd1 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80065fc:	f001 bbcf 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8006600:	4b3c      	ldr	r3, [pc, #240]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006602:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006606:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800660a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800660c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660e:	2b00      	cmp	r3, #0
 8006610:	d104      	bne.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006612:	f7fc fc37 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 8006616:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8006618:	f001 bbc1 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800661c:	4b35      	ldr	r3, [pc, #212]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006624:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006628:	d10b      	bne.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800662a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006630:	d107      	bne.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006632:	f107 0314 	add.w	r3, r7, #20
 8006636:	4618      	mov	r0, r3
 8006638:	f7fe fd92 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006640:	e047      	b.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8006642:	4b2c      	ldr	r3, [pc, #176]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800664a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800664e:	d10b      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8006650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006652:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006656:	d107      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006658:	f107 0308 	add.w	r3, r7, #8
 800665c:	4618      	mov	r0, r3
 800665e:	f7fe fee9 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	637b      	str	r3, [r7, #52]	@ 0x34
 8006666:	e034      	b.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8006668:	4b22      	ldr	r3, [pc, #136]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	2b02      	cmp	r3, #2
 8006672:	d10d      	bne.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8006674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006676:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800667a:	d109      	bne.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800667c:	4b1d      	ldr	r3, [pc, #116]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	08db      	lsrs	r3, r3, #3
 8006682:	f003 0303 	and.w	r3, r3, #3
 8006686:	4a1c      	ldr	r2, [pc, #112]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8006688:	fa22 f303 	lsr.w	r3, r2, r3
 800668c:	637b      	str	r3, [r7, #52]	@ 0x34
 800668e:	e020      	b.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8006690:	4b18      	ldr	r3, [pc, #96]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006698:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800669c:	d106      	bne.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800669e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80066a4:	d102      	bne.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 80066a6:	4b15      	ldr	r3, [pc, #84]	@ (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80066a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80066aa:	e012      	b.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 80066ac:	4b11      	ldr	r3, [pc, #68]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80066ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066b2:	f003 0302 	and.w	r3, r3, #2
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d107      	bne.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 80066ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066bc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80066c0:	d103      	bne.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 80066c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80066c8:	e003      	b.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066ce:	f001 bb66 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80066d2:	f001 bb64 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80066d6:	4b07      	ldr	r3, [pc, #28]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80066d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80066dc:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 80066e0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80066e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10b      	bne.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80066e8:	f7fc fbcc 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 80066ec:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80066ee:	f001 bb56 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80066f2:	bf00      	nop
 80066f4:	44020c00 	.word	0x44020c00
 80066f8:	03d09000 	.word	0x03d09000
 80066fc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8006700:	4ba1      	ldr	r3, [pc, #644]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006708:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800670c:	d10b      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800670e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006710:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006714:	d107      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006716:	f107 0314 	add.w	r3, r7, #20
 800671a:	4618      	mov	r0, r3
 800671c:	f7fe fd20 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	637b      	str	r3, [r7, #52]	@ 0x34
 8006724:	e047      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8006726:	4b98      	ldr	r3, [pc, #608]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800672e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006732:	d10b      	bne.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8006734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006736:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800673a:	d107      	bne.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800673c:	f107 0308 	add.w	r3, r7, #8
 8006740:	4618      	mov	r0, r3
 8006742:	f7fe fe77 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	637b      	str	r3, [r7, #52]	@ 0x34
 800674a:	e034      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800674c:	4b8e      	ldr	r3, [pc, #568]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b02      	cmp	r3, #2
 8006756:	d10d      	bne.n	8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8006758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800675e:	d109      	bne.n	8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006760:	4b89      	ldr	r3, [pc, #548]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	08db      	lsrs	r3, r3, #3
 8006766:	f003 0303 	and.w	r3, r3, #3
 800676a:	4a88      	ldr	r2, [pc, #544]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800676c:	fa22 f303 	lsr.w	r3, r2, r3
 8006770:	637b      	str	r3, [r7, #52]	@ 0x34
 8006772:	e020      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8006774:	4b84      	ldr	r3, [pc, #528]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800677c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006780:	d106      	bne.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8006782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006784:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006788:	d102      	bne.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800678a:	4b81      	ldr	r3, [pc, #516]	@ (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800678c:	637b      	str	r3, [r7, #52]	@ 0x34
 800678e:	e012      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8006790:	4b7d      	ldr	r3, [pc, #500]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006792:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b02      	cmp	r3, #2
 800679c:	d107      	bne.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800679e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a0:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80067a4:	d103      	bne.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 80067a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ac:	e003      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067b2:	f001 baf4 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80067b6:	f001 baf2 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80067ba:	4b73      	ldr	r3, [pc, #460]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80067bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80067c0:	f003 0307 	and.w	r3, r3, #7
 80067c4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80067c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d104      	bne.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80067cc:	f7fc fb5a 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 80067d0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80067d2:	f001 bae4 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80067d6:	4b6c      	ldr	r3, [pc, #432]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067e2:	d10a      	bne.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 80067e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d107      	bne.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067ea:	f107 0314 	add.w	r3, r7, #20
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fe fcb6 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80067f8:	e043      	b.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80067fa:	4b63      	ldr	r3, [pc, #396]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006802:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006806:	d10a      	bne.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8006808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680a:	2b02      	cmp	r3, #2
 800680c:	d107      	bne.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800680e:	f107 0308 	add.w	r3, r7, #8
 8006812:	4618      	mov	r0, r3
 8006814:	f7fe fe0e 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	637b      	str	r3, [r7, #52]	@ 0x34
 800681c:	e031      	b.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800681e:	4b5a      	ldr	r3, [pc, #360]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0302 	and.w	r3, r3, #2
 8006826:	2b02      	cmp	r3, #2
 8006828:	d10c      	bne.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800682a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682c:	2b03      	cmp	r3, #3
 800682e:	d109      	bne.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006830:	4b55      	ldr	r3, [pc, #340]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	08db      	lsrs	r3, r3, #3
 8006836:	f003 0303 	and.w	r3, r3, #3
 800683a:	4a54      	ldr	r2, [pc, #336]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800683c:	fa22 f303 	lsr.w	r3, r2, r3
 8006840:	637b      	str	r3, [r7, #52]	@ 0x34
 8006842:	e01e      	b.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8006844:	4b50      	ldr	r3, [pc, #320]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800684c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006850:	d105      	bne.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8006852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006854:	2b04      	cmp	r3, #4
 8006856:	d102      	bne.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8006858:	4b4d      	ldr	r3, [pc, #308]	@ (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800685a:	637b      	str	r3, [r7, #52]	@ 0x34
 800685c:	e011      	b.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800685e:	4b4a      	ldr	r3, [pc, #296]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006860:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b02      	cmp	r3, #2
 800686a:	d106      	bne.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800686c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686e:	2b05      	cmp	r3, #5
 8006870:	d103      	bne.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8006872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006876:	637b      	str	r3, [r7, #52]	@ 0x34
 8006878:	e003      	b.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800687e:	f001 ba8e 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006882:	f001 ba8c 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8006886:	4b40      	ldr	r3, [pc, #256]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006888:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800688c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006890:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8006892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006894:	2b00      	cmp	r3, #0
 8006896:	d104      	bne.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006898:	f7fc faf4 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 800689c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800689e:	f001 ba7e 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 80068a2:	4b39      	ldr	r3, [pc, #228]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068ae:	d10a      	bne.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 80068b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b2:	2b10      	cmp	r3, #16
 80068b4:	d107      	bne.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068b6:	f107 0314 	add.w	r3, r7, #20
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fe fc50 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80068c4:	e043      	b.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80068c6:	4b30      	ldr	r3, [pc, #192]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068d2:	d10a      	bne.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80068d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d6:	2b20      	cmp	r3, #32
 80068d8:	d107      	bne.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068da:	f107 0308 	add.w	r3, r7, #8
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fe fda8 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80068e8:	e031      	b.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80068ea:	4b27      	ldr	r3, [pc, #156]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d10c      	bne.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80068f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f8:	2b30      	cmp	r3, #48	@ 0x30
 80068fa:	d109      	bne.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068fc:	4b22      	ldr	r3, [pc, #136]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	08db      	lsrs	r3, r3, #3
 8006902:	f003 0303 	and.w	r3, r3, #3
 8006906:	4a21      	ldr	r2, [pc, #132]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006908:	fa22 f303 	lsr.w	r3, r2, r3
 800690c:	637b      	str	r3, [r7, #52]	@ 0x34
 800690e:	e01e      	b.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8006910:	4b1d      	ldr	r3, [pc, #116]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800691c:	d105      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800691e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006920:	2b40      	cmp	r3, #64	@ 0x40
 8006922:	d102      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8006924:	4b1a      	ldr	r3, [pc, #104]	@ (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006926:	637b      	str	r3, [r7, #52]	@ 0x34
 8006928:	e011      	b.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800692a:	4b17      	ldr	r3, [pc, #92]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800692c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006930:	f003 0302 	and.w	r3, r3, #2
 8006934:	2b02      	cmp	r3, #2
 8006936:	d106      	bne.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8006938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693a:	2b50      	cmp	r3, #80	@ 0x50
 800693c:	d103      	bne.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800693e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006942:	637b      	str	r3, [r7, #52]	@ 0x34
 8006944:	e003      	b.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8006946:	2300      	movs	r3, #0
 8006948:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800694a:	f001 ba28 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800694e:	f001 ba26 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006952:	4b0d      	ldr	r3, [pc, #52]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006958:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800695c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800695e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006960:	2b00      	cmp	r3, #0
 8006962:	d104      	bne.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006964:	f7fc faba 	bl	8002edc <HAL_RCC_GetPCLK3Freq>
 8006968:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800696a:	f001 ba18 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800696e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006970:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006974:	d10e      	bne.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006976:	f107 0314 	add.w	r3, r7, #20
 800697a:	4618      	mov	r0, r3
 800697c:	f7fe fbf0 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006984:	f001 ba0b 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006988:	44020c00 	.word	0x44020c00
 800698c:	03d09000 	.word	0x03d09000
 8006990:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8006994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006996:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800699a:	d108      	bne.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800699c:	f107 0308 	add.w	r3, r7, #8
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7fe fd47 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069aa:	f001 b9f8 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80069ae:	4ba4      	ldr	r3, [pc, #656]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d10d      	bne.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 80069ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80069c0:	d109      	bne.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069c2:	4b9f      	ldr	r3, [pc, #636]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	08db      	lsrs	r3, r3, #3
 80069c8:	f003 0303 	and.w	r3, r3, #3
 80069cc:	4a9d      	ldr	r2, [pc, #628]	@ (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80069ce:	fa22 f303 	lsr.w	r3, r2, r3
 80069d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80069d4:	e020      	b.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80069d6:	4b9a      	ldr	r3, [pc, #616]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069e2:	d106      	bne.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 80069e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80069ea:	d102      	bne.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 80069ec:	4b96      	ldr	r3, [pc, #600]	@ (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80069ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80069f0:	e012      	b.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80069f2:	4b93      	ldr	r3, [pc, #588]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80069f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069f8:	f003 0302 	and.w	r3, r3, #2
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d107      	bne.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8006a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a02:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006a06:	d103      	bne.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8006a08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a0e:	e003      	b.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a14:	f001 b9c3 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006a18:	f001 b9c1 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006a1c:	4b88      	ldr	r3, [pc, #544]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006a1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a22:	f003 0307 	and.w	r3, r3, #7
 8006a26:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d104      	bne.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006a2e:	f7fc fa0d 	bl	8002e4c <HAL_RCC_GetHCLKFreq>
 8006a32:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8006a34:	f001 b9b3 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d104      	bne.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8006a3e:	f7fc f8d9 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8006a42:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006a44:	f001 b9ab 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d108      	bne.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a4e:	f107 0314 	add.w	r3, r7, #20
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fe fb84 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a5c:	f001 b99f 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006a60:	4b77      	ldr	r3, [pc, #476]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a6c:	d105      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a70:	2b03      	cmp	r3, #3
 8006a72:	d102      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8006a74:	4b75      	ldr	r3, [pc, #468]	@ (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8006a76:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a78:	e023      	b.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006a7a:	4b71      	ldr	r3, [pc, #452]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d10c      	bne.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8006a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a88:	2b04      	cmp	r3, #4
 8006a8a:	d109      	bne.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a8c:	4b6c      	ldr	r3, [pc, #432]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	08db      	lsrs	r3, r3, #3
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	4a6b      	ldr	r2, [pc, #428]	@ (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006a98:	fa22 f303 	lsr.w	r3, r2, r3
 8006a9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a9e:	e010      	b.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006aa0:	4b67      	ldr	r3, [pc, #412]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006aac:	d105      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8006aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab0:	2b05      	cmp	r3, #5
 8006ab2:	d102      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8006ab4:	4b64      	ldr	r3, [pc, #400]	@ (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006ab6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ab8:	e003      	b.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8006aba:	2300      	movs	r3, #0
 8006abc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006abe:	f001 b96e 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006ac2:	f001 b96c 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8006ac6:	4b5e      	ldr	r3, [pc, #376]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006ac8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006acc:	f003 0308 	and.w	r3, r3, #8
 8006ad0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8006ad2:	4b5b      	ldr	r3, [pc, #364]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006ad4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ad8:	f003 0302 	and.w	r3, r3, #2
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d106      	bne.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d103      	bne.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8006ae6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aec:	e012      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006aee:	4b54      	ldr	r3, [pc, #336]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006af0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006af4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006af8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006afc:	d106      	bne.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8006afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b00:	2b08      	cmp	r3, #8
 8006b02:	d103      	bne.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8006b04:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006b08:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b0a:	e003      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8006b10:	f001 b945 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006b14:	f001 b943 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006b18:	4b49      	ldr	r3, [pc, #292]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006b1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b22:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d104      	bne.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b2a:	f7fc f9ab 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 8006b2e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006b30:	f001 b935 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8006b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b3a:	d108      	bne.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b3c:	f107 0308 	add.w	r3, r7, #8
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fe fc77 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b4a:	f001 b928 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006b4e:	4b3c      	ldr	r3, [pc, #240]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d10d      	bne.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b60:	d109      	bne.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b62:	4b37      	ldr	r3, [pc, #220]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	08db      	lsrs	r3, r3, #3
 8006b68:	f003 0303 	and.w	r3, r3, #3
 8006b6c:	4a35      	ldr	r2, [pc, #212]	@ (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b74:	e011      	b.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006b76:	4b32      	ldr	r3, [pc, #200]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b82:	d106      	bne.n	8006b92 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8006b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b8a:	d102      	bne.n	8006b92 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8006b8c:	4b2e      	ldr	r3, [pc, #184]	@ (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006b8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b90:	e003      	b.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b96:	f001 b902 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006b9a:	f001 b900 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006b9e:	4b28      	ldr	r3, [pc, #160]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006ba0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ba4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006ba8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d104      	bne.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006bb0:	f7fc f968 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 8006bb4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006bb6:	f001 b8f2 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006bc0:	d108      	bne.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bc2:	f107 0308 	add.w	r3, r7, #8
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fe fc34 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bd0:	f001 b8e5 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0302 	and.w	r3, r3, #2
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d10d      	bne.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8006be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006be6:	d109      	bne.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006be8:	4b15      	ldr	r3, [pc, #84]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	08db      	lsrs	r3, r3, #3
 8006bee:	f003 0303 	and.w	r3, r3, #3
 8006bf2:	4a14      	ldr	r2, [pc, #80]	@ (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bfa:	e011      	b.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8006bfc:	4b10      	ldr	r3, [pc, #64]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c08:	d106      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006c10:	d102      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8006c12:	4b0d      	ldr	r3, [pc, #52]	@ (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c16:	e003      	b.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c1c:	f001 b8bf 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006c20:	f001 b8bd 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006c24:	4b06      	ldr	r3, [pc, #24]	@ (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c2a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006c2e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10c      	bne.n	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006c36:	f7fc f951 	bl	8002edc <HAL_RCC_GetPCLK3Freq>
 8006c3a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006c3c:	f001 b8af 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006c40:	44020c00 	.word	0x44020c00
 8006c44:	03d09000 	.word	0x03d09000
 8006c48:	003d0900 	.word	0x003d0900
 8006c4c:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c56:	d108      	bne.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c58:	f107 0308 	add.w	r3, r7, #8
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe fbe9 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c66:	f001 b89a 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006c6a:	4b9f      	ldr	r3, [pc, #636]	@ (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d10d      	bne.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8006c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c7c:	d109      	bne.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c7e:	4b9a      	ldr	r3, [pc, #616]	@ (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	08db      	lsrs	r3, r3, #3
 8006c84:	f003 0303 	and.w	r3, r3, #3
 8006c88:	4a98      	ldr	r2, [pc, #608]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c90:	e011      	b.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8006c92:	4b95      	ldr	r3, [pc, #596]	@ (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c9e:	d106      	bne.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8006ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ca6:	d102      	bne.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8006ca8:	4b91      	ldr	r3, [pc, #580]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006caa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cac:	e003      	b.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cb2:	f001 b874 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006cb6:	f001 b872 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006cba:	4b8b      	ldr	r3, [pc, #556]	@ (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006cbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006cc0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8006cc4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d104      	bne.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006ccc:	f7fc f906 	bl	8002edc <HAL_RCC_GetPCLK3Freq>
 8006cd0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006cd2:	f001 b864 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cdc:	d108      	bne.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cde:	f107 0308 	add.w	r3, r7, #8
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fe fba6 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cec:	f001 b857 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006cf0:	4b7d      	ldr	r3, [pc, #500]	@ (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0302 	and.w	r3, r3, #2
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d10d      	bne.n	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006d02:	d109      	bne.n	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d04:	4b78      	ldr	r3, [pc, #480]	@ (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	08db      	lsrs	r3, r3, #3
 8006d0a:	f003 0303 	and.w	r3, r3, #3
 8006d0e:	4a77      	ldr	r2, [pc, #476]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006d10:	fa22 f303 	lsr.w	r3, r2, r3
 8006d14:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d16:	e011      	b.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8006d18:	4b73      	ldr	r3, [pc, #460]	@ (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d24:	d106      	bne.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8006d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d28:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006d2c:	d102      	bne.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8006d2e:	4b70      	ldr	r3, [pc, #448]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006d30:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d32:	e003      	b.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d38:	f001 b831 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006d3c:	f001 b82f 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006d40:	4b69      	ldr	r3, [pc, #420]	@ (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006d42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d46:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006d4a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d104      	bne.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d52:	f7fc f897 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 8006d56:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006d58:	f001 b821 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d62:	d108      	bne.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d64:	f107 0308 	add.w	r3, r7, #8
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7fe fb63 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d72:	f001 b814 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006d76:	4b5c      	ldr	r3, [pc, #368]	@ (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d10e      	bne.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8006d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d88:	d10a      	bne.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d8a:	4b57      	ldr	r3, [pc, #348]	@ (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	08db      	lsrs	r3, r3, #3
 8006d90:	f003 0303 	and.w	r3, r3, #3
 8006d94:	4a55      	ldr	r2, [pc, #340]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006d96:	fa22 f303 	lsr.w	r3, r2, r3
 8006d9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d9c:	f000 bfff 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006da0:	2300      	movs	r3, #0
 8006da2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006da4:	f000 bffb 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006da8:	4b4f      	ldr	r3, [pc, #316]	@ (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006daa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006dae:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006db2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006dba:	d056      	beq.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dbe:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006dc2:	f200 808b 	bhi.w	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dcc:	d03e      	beq.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8006dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dd4:	f200 8082 	bhi.w	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dde:	d027      	beq.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8006de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006de6:	d879      	bhi.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dee:	d017      	beq.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8006df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006df6:	d871      	bhi.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d004      	beq.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e04:	d004      	beq.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8006e06:	e069      	b.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006e08:	f7fc f868 	bl	8002edc <HAL_RCC_GetPCLK3Freq>
 8006e0c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006e0e:	e068      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e10:	f107 0314 	add.w	r3, r7, #20
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fe f9a3 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006e1e:	e060      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e20:	f107 0308 	add.w	r3, r7, #8
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7fe fb05 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006e2e:	e058      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006e30:	4b2d      	ldr	r3, [pc, #180]	@ (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d103      	bne.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8006e3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e42:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006e44:	e04d      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8006e46:	2300      	movs	r3, #0
 8006e48:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006e4a:	e04a      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006e4c:	4b26      	ldr	r3, [pc, #152]	@ (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e5a:	d103      	bne.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8006e5c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006e60:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006e62:	e03e      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8006e64:	2300      	movs	r3, #0
 8006e66:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006e68:	e03b      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e70:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006e74:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e76:	4b1c      	ldr	r3, [pc, #112]	@ (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d10c      	bne.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8006e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d109      	bne.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e88:	4b17      	ldr	r3, [pc, #92]	@ (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	08db      	lsrs	r3, r3, #3
 8006e8e:	f003 0303 	and.w	r3, r3, #3
 8006e92:	4a16      	ldr	r2, [pc, #88]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006e94:	fa22 f303 	lsr.w	r3, r2, r3
 8006e98:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e9a:	e01e      	b.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e9c:	4b12      	ldr	r3, [pc, #72]	@ (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ea8:	d106      	bne.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8006eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eb0:	d102      	bne.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006eb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eb6:	e010      	b.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ec0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ec4:	d106      	bne.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8006ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ecc:	d102      	bne.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006ece:	4b09      	ldr	r3, [pc, #36]	@ (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8006ed0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ed2:	e002      	b.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006ed8:	e003      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8006eda:	e002      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006ee0:	bf00      	nop
          }
        }
        break;
 8006ee2:	f000 bf5c 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006ee6:	bf00      	nop
 8006ee8:	44020c00 	.word	0x44020c00
 8006eec:	03d09000 	.word	0x03d09000
 8006ef0:	003d0900 	.word	0x003d0900
 8006ef4:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006ef8:	4b9e      	ldr	r3, [pc, #632]	@ (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006efa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006efe:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006f02:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f06:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006f0a:	d056      	beq.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006f12:	f200 808b 	bhi.w	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f1c:	d03e      	beq.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f24:	f200 8082 	bhi.w	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006f2e:	d027      	beq.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8006f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006f36:	d879      	bhi.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f3e:	d017      	beq.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8006f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f46:	d871      	bhi.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d004      	beq.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f54:	d004      	beq.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8006f56:	e069      	b.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8006f58:	f7fb ff94 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 8006f5c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006f5e:	e068      	b.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f60:	f107 0314 	add.w	r3, r7, #20
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fe f8fb 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f6e:	e060      	b.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f70:	f107 0308 	add.w	r3, r7, #8
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7fe fa5d 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f7e:	e058      	b.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006f80:	4b7c      	ldr	r3, [pc, #496]	@ (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006f82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f86:	f003 0302 	and.w	r3, r3, #2
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d103      	bne.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8006f8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f92:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006f94:	e04d      	b.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8006f96:	2300      	movs	r3, #0
 8006f98:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006f9a:	e04a      	b.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006f9c:	4b75      	ldr	r3, [pc, #468]	@ (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006f9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fa2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006faa:	d103      	bne.n	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8006fac:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006fb0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006fb2:	e03e      	b.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006fb8:	e03b      	b.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006fba:	4b6e      	ldr	r3, [pc, #440]	@ (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006fbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006fc0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fc6:	4b6b      	ldr	r3, [pc, #428]	@ (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d10c      	bne.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8006fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d109      	bne.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006fd8:	4b66      	ldr	r3, [pc, #408]	@ (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	08db      	lsrs	r3, r3, #3
 8006fde:	f003 0303 	and.w	r3, r3, #3
 8006fe2:	4a65      	ldr	r2, [pc, #404]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8006fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fea:	e01e      	b.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fec:	4b61      	ldr	r3, [pc, #388]	@ (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ff4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ff8:	d106      	bne.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8006ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007000:	d102      	bne.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007002:	4b5e      	ldr	r3, [pc, #376]	@ (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8007004:	637b      	str	r3, [r7, #52]	@ 0x34
 8007006:	e010      	b.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007008:	4b5a      	ldr	r3, [pc, #360]	@ (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007010:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007014:	d106      	bne.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8007016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007018:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800701c:	d102      	bne.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800701e:	4b58      	ldr	r3, [pc, #352]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8007020:	637b      	str	r3, [r7, #52]	@ 0x34
 8007022:	e002      	b.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007024:	2300      	movs	r3, #0
 8007026:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007028:	e003      	b.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800702a:	e002      	b.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007030:	bf00      	nop
          }
        }
        break;
 8007032:	f000 beb4 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8007036:	4b4f      	ldr	r3, [pc, #316]	@ (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007038:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800703c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007040:	633b      	str	r3, [r7, #48]	@ 0x30
 8007042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007044:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007048:	d056      	beq.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800704a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007050:	f200 808b 	bhi.w	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007056:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800705a:	d03e      	beq.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800705c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007062:	f200 8082 	bhi.w	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007068:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800706c:	d027      	beq.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800706e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007070:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007074:	d879      	bhi.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007078:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800707c:	d017      	beq.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800707e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007080:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007084:	d871      	bhi.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007088:	2b00      	cmp	r3, #0
 800708a:	d004      	beq.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800708c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007092:	d004      	beq.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8007094:	e069      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007096:	f7fb ff21 	bl	8002edc <HAL_RCC_GetPCLK3Freq>
 800709a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800709c:	e068      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800709e:	f107 0314 	add.w	r3, r7, #20
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fe f85c 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070ac:	e060      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070ae:	f107 0308 	add.w	r3, r7, #8
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fe f9be 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070bc:	e058      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80070be:	4b2d      	ldr	r3, [pc, #180]	@ (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80070c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d103      	bne.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 80070cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070d0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80070d2:	e04d      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80070d4:	2300      	movs	r3, #0
 80070d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070d8:	e04a      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80070da:	4b26      	ldr	r3, [pc, #152]	@ (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80070dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070e8:	d103      	bne.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 80070ea:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80070ee:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80070f0:	e03e      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80070f2:	2300      	movs	r3, #0
 80070f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070f6:	e03b      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070f8:	4b1e      	ldr	r3, [pc, #120]	@ (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80070fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80070fe:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007102:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007104:	4b1b      	ldr	r3, [pc, #108]	@ (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0302 	and.w	r3, r3, #2
 800710c:	2b02      	cmp	r3, #2
 800710e:	d10c      	bne.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8007110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007112:	2b00      	cmp	r3, #0
 8007114:	d109      	bne.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007116:	4b17      	ldr	r3, [pc, #92]	@ (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	08db      	lsrs	r3, r3, #3
 800711c:	f003 0303 	and.w	r3, r3, #3
 8007120:	4a15      	ldr	r2, [pc, #84]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8007122:	fa22 f303 	lsr.w	r3, r2, r3
 8007126:	637b      	str	r3, [r7, #52]	@ 0x34
 8007128:	e01e      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800712a:	4b12      	ldr	r3, [pc, #72]	@ (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007132:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007136:	d106      	bne.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8007138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800713a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800713e:	d102      	bne.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007140:	4b0e      	ldr	r3, [pc, #56]	@ (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8007142:	637b      	str	r3, [r7, #52]	@ 0x34
 8007144:	e010      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007146:	4b0b      	ldr	r3, [pc, #44]	@ (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800714e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007152:	d106      	bne.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8007154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007156:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800715a:	d102      	bne.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800715c:	4b08      	ldr	r3, [pc, #32]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800715e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007160:	e002      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007162:	2300      	movs	r3, #0
 8007164:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007166:	e003      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8007168:	e002      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800716a:	2300      	movs	r3, #0
 800716c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800716e:	bf00      	nop
          }
        }
        break;
 8007170:	f000 be15 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007174:	44020c00 	.word	0x44020c00
 8007178:	03d09000 	.word	0x03d09000
 800717c:	003d0900 	.word	0x003d0900
 8007180:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8007184:	4b9e      	ldr	r3, [pc, #632]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007186:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800718a:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800718e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007192:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007196:	d056      	beq.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8007198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800719e:	f200 808b 	bhi.w	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80071a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071a8:	d03e      	beq.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 80071aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071b0:	f200 8082 	bhi.w	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80071b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071ba:	d027      	beq.n	800720c <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 80071bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071c2:	d879      	bhi.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80071c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071ca:	d017      	beq.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 80071cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071d2:	d871      	bhi.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80071d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d004      	beq.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 80071da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071e0:	d004      	beq.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 80071e2:	e069      	b.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80071e4:	f7fb fe7a 	bl	8002edc <HAL_RCC_GetPCLK3Freq>
 80071e8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80071ea:	e068      	b.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071ec:	f107 0314 	add.w	r3, r7, #20
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7fd ffb5 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80071fa:	e060      	b.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071fc:	f107 0308 	add.w	r3, r7, #8
 8007200:	4618      	mov	r0, r3
 8007202:	f7fe f917 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800720a:	e058      	b.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800720c:	4b7c      	ldr	r3, [pc, #496]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800720e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007212:	f003 0302 	and.w	r3, r3, #2
 8007216:	2b02      	cmp	r3, #2
 8007218:	d103      	bne.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800721a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800721e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007220:	e04d      	b.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8007222:	2300      	movs	r3, #0
 8007224:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007226:	e04a      	b.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007228:	4b75      	ldr	r3, [pc, #468]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800722a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800722e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007232:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007236:	d103      	bne.n	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8007238:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800723c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800723e:	e03e      	b.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8007240:	2300      	movs	r3, #0
 8007242:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007244:	e03b      	b.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007246:	4b6e      	ldr	r3, [pc, #440]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007248:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800724c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007250:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007252:	4b6b      	ldr	r3, [pc, #428]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b02      	cmp	r3, #2
 800725c:	d10c      	bne.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800725e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007260:	2b00      	cmp	r3, #0
 8007262:	d109      	bne.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007264:	4b66      	ldr	r3, [pc, #408]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	08db      	lsrs	r3, r3, #3
 800726a:	f003 0303 	and.w	r3, r3, #3
 800726e:	4a65      	ldr	r2, [pc, #404]	@ (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8007270:	fa22 f303 	lsr.w	r3, r2, r3
 8007274:	637b      	str	r3, [r7, #52]	@ 0x34
 8007276:	e01e      	b.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007278:	4b61      	ldr	r3, [pc, #388]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007284:	d106      	bne.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8007286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800728c:	d102      	bne.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800728e:	4b5e      	ldr	r3, [pc, #376]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8007290:	637b      	str	r3, [r7, #52]	@ 0x34
 8007292:	e010      	b.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007294:	4b5a      	ldr	r3, [pc, #360]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800729c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072a0:	d106      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 80072a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072a8:	d102      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80072aa:	4b58      	ldr	r3, [pc, #352]	@ (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80072ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ae:	e002      	b.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80072b0:	2300      	movs	r3, #0
 80072b2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80072b4:	e003      	b.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 80072b6:	e002      	b.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80072bc:	bf00      	nop
          }
        }
        break;
 80072be:	f000 bd6e 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 80072c2:	4b4f      	ldr	r3, [pc, #316]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80072c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80072c8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80072cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80072ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80072d4:	d056      	beq.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 80072d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80072dc:	f200 808b 	bhi.w	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80072e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072e6:	d03e      	beq.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 80072e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072ee:	f200 8082 	bhi.w	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80072f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80072f8:	d027      	beq.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 80072fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007300:	d879      	bhi.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007304:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007308:	d017      	beq.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800730a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007310:	d871      	bhi.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007314:	2b00      	cmp	r3, #0
 8007316:	d004      	beq.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8007318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800731e:	d004      	beq.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8007320:	e069      	b.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007322:	f7fb fddb 	bl	8002edc <HAL_RCC_GetPCLK3Freq>
 8007326:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007328:	e068      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800732a:	f107 0314 	add.w	r3, r7, #20
 800732e:	4618      	mov	r0, r3
 8007330:	f7fd ff16 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007338:	e060      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800733a:	f107 0308 	add.w	r3, r7, #8
 800733e:	4618      	mov	r0, r3
 8007340:	f7fe f878 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007348:	e058      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800734a:	4b2d      	ldr	r3, [pc, #180]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800734c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007350:	f003 0302 	and.w	r3, r3, #2
 8007354:	2b02      	cmp	r3, #2
 8007356:	d103      	bne.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8007358:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800735c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800735e:	e04d      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8007360:	2300      	movs	r3, #0
 8007362:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007364:	e04a      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007366:	4b26      	ldr	r3, [pc, #152]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007368:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800736c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007370:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007374:	d103      	bne.n	800737e <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8007376:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800737a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800737c:	e03e      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800737e:	2300      	movs	r3, #0
 8007380:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007382:	e03b      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007384:	4b1e      	ldr	r3, [pc, #120]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007386:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800738a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800738e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007390:	4b1b      	ldr	r3, [pc, #108]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b02      	cmp	r3, #2
 800739a:	d10c      	bne.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800739c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d109      	bne.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80073a2:	4b17      	ldr	r3, [pc, #92]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	08db      	lsrs	r3, r3, #3
 80073a8:	f003 0303 	and.w	r3, r3, #3
 80073ac:	4a15      	ldr	r2, [pc, #84]	@ (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80073ae:	fa22 f303 	lsr.w	r3, r2, r3
 80073b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073b4:	e01e      	b.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073b6:	4b12      	ldr	r3, [pc, #72]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073c2:	d106      	bne.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 80073c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073ca:	d102      	bne.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80073cc:	4b0e      	ldr	r3, [pc, #56]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80073ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80073d0:	e010      	b.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073de:	d106      	bne.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 80073e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073e6:	d102      	bne.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80073e8:	4b08      	ldr	r3, [pc, #32]	@ (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80073ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ec:	e002      	b.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80073f2:	e003      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 80073f4:	e002      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 80073f6:	2300      	movs	r3, #0
 80073f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073fa:	bf00      	nop
          }
        }
        break;
 80073fc:	f000 bccf 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007400:	44020c00 	.word	0x44020c00
 8007404:	03d09000 	.word	0x03d09000
 8007408:	003d0900 	.word	0x003d0900
 800740c:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8007410:	4b9e      	ldr	r3, [pc, #632]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007412:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007416:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800741a:	633b      	str	r3, [r7, #48]	@ 0x30
 800741c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007422:	d056      	beq.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8007424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007426:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800742a:	f200 808b 	bhi.w	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800742e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007430:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007434:	d03e      	beq.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8007436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800743c:	f200 8082 	bhi.w	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007442:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007446:	d027      	beq.n	8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8007448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800744e:	d879      	bhi.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007452:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007456:	d017      	beq.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8007458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800745e:	d871      	bhi.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007462:	2b00      	cmp	r3, #0
 8007464:	d004      	beq.n	8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8007466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007468:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800746c:	d004      	beq.n	8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800746e:	e069      	b.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007470:	f7fb fd34 	bl	8002edc <HAL_RCC_GetPCLK3Freq>
 8007474:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007476:	e068      	b.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007478:	f107 0314 	add.w	r3, r7, #20
 800747c:	4618      	mov	r0, r3
 800747e:	f7fd fe6f 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007486:	e060      	b.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007488:	f107 0308 	add.w	r3, r7, #8
 800748c:	4618      	mov	r0, r3
 800748e:	f7fd ffd1 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007496:	e058      	b.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007498:	4b7c      	ldr	r3, [pc, #496]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800749a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800749e:	f003 0302 	and.w	r3, r3, #2
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	d103      	bne.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 80074a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074aa:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80074ac:	e04d      	b.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80074ae:	2300      	movs	r3, #0
 80074b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80074b2:	e04a      	b.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80074b4:	4b75      	ldr	r3, [pc, #468]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80074b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074c2:	d103      	bne.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80074c4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80074c8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80074ca:	e03e      	b.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80074cc:	2300      	movs	r3, #0
 80074ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80074d0:	e03b      	b.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074d2:	4b6e      	ldr	r3, [pc, #440]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80074d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80074d8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80074dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074de:	4b6b      	ldr	r3, [pc, #428]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0302 	and.w	r3, r3, #2
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d10c      	bne.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 80074ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d109      	bne.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80074f0:	4b66      	ldr	r3, [pc, #408]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	08db      	lsrs	r3, r3, #3
 80074f6:	f003 0303 	and.w	r3, r3, #3
 80074fa:	4a65      	ldr	r2, [pc, #404]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80074fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007500:	637b      	str	r3, [r7, #52]	@ 0x34
 8007502:	e01e      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007504:	4b61      	ldr	r3, [pc, #388]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800750c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007510:	d106      	bne.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8007512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007518:	d102      	bne.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800751a:	4b5e      	ldr	r3, [pc, #376]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800751c:	637b      	str	r3, [r7, #52]	@ 0x34
 800751e:	e010      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007520:	4b5a      	ldr	r3, [pc, #360]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007528:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800752c:	d106      	bne.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800752e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007530:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007534:	d102      	bne.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007536:	4b58      	ldr	r3, [pc, #352]	@ (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007538:	637b      	str	r3, [r7, #52]	@ 0x34
 800753a:	e002      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800753c:	2300      	movs	r3, #0
 800753e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007540:	e003      	b.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8007542:	e002      	b.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8007544:	2300      	movs	r3, #0
 8007546:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007548:	bf00      	nop
          }
        }
        break;
 800754a:	f000 bc28 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800754e:	4b4f      	ldr	r3, [pc, #316]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007554:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007558:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800755a:	4b4c      	ldr	r3, [pc, #304]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007562:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007566:	d106      	bne.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8007568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756a:	2b00      	cmp	r3, #0
 800756c:	d103      	bne.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800756e:	4b4a      	ldr	r3, [pc, #296]	@ (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007570:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8007572:	f000 bc14 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8007576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007578:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800757c:	d108      	bne.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800757e:	f107 0320 	add.w	r3, r7, #32
 8007582:	4618      	mov	r0, r3
 8007584:	f7fd fc82 	bl	8004e8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800758c:	f000 bc07 	b.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8007590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007592:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007596:	d107      	bne.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007598:	f107 0314 	add.w	r3, r7, #20
 800759c:	4618      	mov	r0, r3
 800759e:	f7fd fddf 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075a6:	e3fa      	b.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80075a8:	2300      	movs	r3, #0
 80075aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075ac:	e3f7      	b.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80075ae:	4b37      	ldr	r3, [pc, #220]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80075b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075b4:	f003 0307 	and.w	r3, r3, #7
 80075b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80075ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075bc:	2b04      	cmp	r3, #4
 80075be:	d861      	bhi.n	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 80075c0:	a201      	add	r2, pc, #4	@ (adr r2, 80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 80075c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c6:	bf00      	nop
 80075c8:	080075dd 	.word	0x080075dd
 80075cc:	080075ed 	.word	0x080075ed
 80075d0:	080075fd 	.word	0x080075fd
 80075d4:	0800760d 	.word	0x0800760d
 80075d8:	08007613 	.word	0x08007613
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075dc:	f107 0320 	add.w	r3, r7, #32
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7fd fc53 	bl	8004e8c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80075e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80075ea:	e04e      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075ec:	f107 0314 	add.w	r3, r7, #20
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fd fdb5 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80075fa:	e046      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075fc:	f107 0308 	add.w	r3, r7, #8
 8007600:	4618      	mov	r0, r3
 8007602:	f7fd ff17 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800760a:	e03e      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800760c:	4b23      	ldr	r3, [pc, #140]	@ (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800760e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007610:	e03b      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007612:	4b1e      	ldr	r3, [pc, #120]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007614:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007618:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800761c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800761e:	4b1b      	ldr	r3, [pc, #108]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0302 	and.w	r3, r3, #2
 8007626:	2b02      	cmp	r3, #2
 8007628:	d10c      	bne.n	8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800762a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800762c:	2b00      	cmp	r3, #0
 800762e:	d109      	bne.n	8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007630:	4b16      	ldr	r3, [pc, #88]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	08db      	lsrs	r3, r3, #3
 8007636:	f003 0303 	and.w	r3, r3, #3
 800763a:	4a15      	ldr	r2, [pc, #84]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800763c:	fa22 f303 	lsr.w	r3, r2, r3
 8007640:	637b      	str	r3, [r7, #52]	@ 0x34
 8007642:	e01e      	b.n	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007644:	4b11      	ldr	r3, [pc, #68]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800764c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007650:	d106      	bne.n	8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8007652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007658:	d102      	bne.n	8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800765a:	4b0e      	ldr	r3, [pc, #56]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800765c:	637b      	str	r3, [r7, #52]	@ 0x34
 800765e:	e010      	b.n	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007660:	4b0a      	ldr	r3, [pc, #40]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007668:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800766c:	d106      	bne.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800766e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007670:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007674:	d102      	bne.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007676:	4b08      	ldr	r3, [pc, #32]	@ (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007678:	637b      	str	r3, [r7, #52]	@ 0x34
 800767a:	e002      	b.n	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800767c:	2300      	movs	r3, #0
 800767e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007680:	e003      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8007682:	e002      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8007684:	2300      	movs	r3, #0
 8007686:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007688:	bf00      	nop
          }
        }
        break;
 800768a:	e388      	b.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800768c:	44020c00 	.word	0x44020c00
 8007690:	03d09000 	.word	0x03d09000
 8007694:	003d0900 	.word	0x003d0900
 8007698:	007a1200 	.word	0x007a1200
 800769c:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80076a0:	4ba9      	ldr	r3, [pc, #676]	@ (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80076a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80076aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80076ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ae:	2b20      	cmp	r3, #32
 80076b0:	f200 809a 	bhi.w	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 80076b4:	a201      	add	r2, pc, #4	@ (adr r2, 80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 80076b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ba:	bf00      	nop
 80076bc:	08007741 	.word	0x08007741
 80076c0:	080077e9 	.word	0x080077e9
 80076c4:	080077e9 	.word	0x080077e9
 80076c8:	080077e9 	.word	0x080077e9
 80076cc:	080077e9 	.word	0x080077e9
 80076d0:	080077e9 	.word	0x080077e9
 80076d4:	080077e9 	.word	0x080077e9
 80076d8:	080077e9 	.word	0x080077e9
 80076dc:	08007751 	.word	0x08007751
 80076e0:	080077e9 	.word	0x080077e9
 80076e4:	080077e9 	.word	0x080077e9
 80076e8:	080077e9 	.word	0x080077e9
 80076ec:	080077e9 	.word	0x080077e9
 80076f0:	080077e9 	.word	0x080077e9
 80076f4:	080077e9 	.word	0x080077e9
 80076f8:	080077e9 	.word	0x080077e9
 80076fc:	08007761 	.word	0x08007761
 8007700:	080077e9 	.word	0x080077e9
 8007704:	080077e9 	.word	0x080077e9
 8007708:	080077e9 	.word	0x080077e9
 800770c:	080077e9 	.word	0x080077e9
 8007710:	080077e9 	.word	0x080077e9
 8007714:	080077e9 	.word	0x080077e9
 8007718:	080077e9 	.word	0x080077e9
 800771c:	08007771 	.word	0x08007771
 8007720:	080077e9 	.word	0x080077e9
 8007724:	080077e9 	.word	0x080077e9
 8007728:	080077e9 	.word	0x080077e9
 800772c:	080077e9 	.word	0x080077e9
 8007730:	080077e9 	.word	0x080077e9
 8007734:	080077e9 	.word	0x080077e9
 8007738:	080077e9 	.word	0x080077e9
 800773c:	08007777 	.word	0x08007777
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007740:	f107 0320 	add.w	r3, r7, #32
 8007744:	4618      	mov	r0, r3
 8007746:	f7fd fba1 	bl	8004e8c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800774a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800774e:	e04e      	b.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007750:	f107 0314 	add.w	r3, r7, #20
 8007754:	4618      	mov	r0, r3
 8007756:	f7fd fd03 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800775e:	e046      	b.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007760:	f107 0308 	add.w	r3, r7, #8
 8007764:	4618      	mov	r0, r3
 8007766:	f7fd fe65 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800776e:	e03e      	b.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007770:	4b76      	ldr	r3, [pc, #472]	@ (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8007772:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007774:	e03b      	b.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007776:	4b74      	ldr	r3, [pc, #464]	@ (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007778:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800777c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007780:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007782:	4b71      	ldr	r3, [pc, #452]	@ (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0302 	and.w	r3, r3, #2
 800778a:	2b02      	cmp	r3, #2
 800778c:	d10c      	bne.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800778e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007790:	2b00      	cmp	r3, #0
 8007792:	d109      	bne.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007794:	4b6c      	ldr	r3, [pc, #432]	@ (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	08db      	lsrs	r3, r3, #3
 800779a:	f003 0303 	and.w	r3, r3, #3
 800779e:	4a6c      	ldr	r2, [pc, #432]	@ (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80077a0:	fa22 f303 	lsr.w	r3, r2, r3
 80077a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80077a6:	e01e      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80077a8:	4b67      	ldr	r3, [pc, #412]	@ (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077b4:	d106      	bne.n	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 80077b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077bc:	d102      	bne.n	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80077be:	4b65      	ldr	r3, [pc, #404]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80077c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077c2:	e010      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077c4:	4b60      	ldr	r3, [pc, #384]	@ (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077d0:	d106      	bne.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 80077d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077d8:	d102      	bne.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80077da:	4b5f      	ldr	r3, [pc, #380]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80077dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80077de:	e002      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80077e0:	2300      	movs	r3, #0
 80077e2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80077e4:	e003      	b.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 80077e6:	e002      	b.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 80077e8:	2300      	movs	r3, #0
 80077ea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80077ec:	bf00      	nop
          }
        }
        break;
 80077ee:	e2d6      	b.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80077f0:	4b55      	ldr	r3, [pc, #340]	@ (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80077f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077f6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80077fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80077fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007802:	d031      	beq.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8007804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800780a:	d866      	bhi.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800780c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007810:	d027      	beq.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8007812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007814:	2bc0      	cmp	r3, #192	@ 0xc0
 8007816:	d860      	bhi.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781a:	2b80      	cmp	r3, #128	@ 0x80
 800781c:	d019      	beq.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800781e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007820:	2b80      	cmp	r3, #128	@ 0x80
 8007822:	d85a      	bhi.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800782a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782c:	2b40      	cmp	r3, #64	@ 0x40
 800782e:	d008      	beq.n	8007842 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8007830:	e053      	b.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007832:	f107 0320 	add.w	r3, r7, #32
 8007836:	4618      	mov	r0, r3
 8007838:	f7fd fb28 	bl	8004e8c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800783c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007840:	e04e      	b.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007842:	f107 0314 	add.w	r3, r7, #20
 8007846:	4618      	mov	r0, r3
 8007848:	f7fd fc8a 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007850:	e046      	b.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007852:	f107 0308 	add.w	r3, r7, #8
 8007856:	4618      	mov	r0, r3
 8007858:	f7fd fdec 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007860:	e03e      	b.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007862:	4b3a      	ldr	r3, [pc, #232]	@ (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8007864:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007866:	e03b      	b.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007868:	4b37      	ldr	r3, [pc, #220]	@ (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800786a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800786e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007872:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007874:	4b34      	ldr	r3, [pc, #208]	@ (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0302 	and.w	r3, r3, #2
 800787c:	2b02      	cmp	r3, #2
 800787e:	d10c      	bne.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8007880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007882:	2b00      	cmp	r3, #0
 8007884:	d109      	bne.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007886:	4b30      	ldr	r3, [pc, #192]	@ (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	08db      	lsrs	r3, r3, #3
 800788c:	f003 0303 	and.w	r3, r3, #3
 8007890:	4a2f      	ldr	r2, [pc, #188]	@ (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8007892:	fa22 f303 	lsr.w	r3, r2, r3
 8007896:	637b      	str	r3, [r7, #52]	@ 0x34
 8007898:	e01e      	b.n	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800789a:	4b2b      	ldr	r3, [pc, #172]	@ (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078a6:	d106      	bne.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 80078a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078ae:	d102      	bne.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80078b0:	4b28      	ldr	r3, [pc, #160]	@ (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80078b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80078b4:	e010      	b.n	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078b6:	4b24      	ldr	r3, [pc, #144]	@ (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078c2:	d106      	bne.n	80078d2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 80078c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078ca:	d102      	bne.n	80078d2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80078cc:	4b22      	ldr	r3, [pc, #136]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80078ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80078d0:	e002      	b.n	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80078d2:	2300      	movs	r3, #0
 80078d4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80078d6:	e003      	b.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 80078d8:	e002      	b.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 80078da:	2300      	movs	r3, #0
 80078dc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078de:	bf00      	nop
          }
        }
        break;
 80078e0:	e25d      	b.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80078e2:	4b19      	ldr	r3, [pc, #100]	@ (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80078e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078e8:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80078ec:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80078ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d103      	bne.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80078f4:	f7fb fadc 	bl	8002eb0 <HAL_RCC_GetPCLK2Freq>
 80078f8:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80078fa:	e250      	b.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80078fc:	4b12      	ldr	r3, [pc, #72]	@ (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007904:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007908:	d10b      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800790a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007910:	d107      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007912:	f107 0314 	add.w	r3, r7, #20
 8007916:	4618      	mov	r0, r3
 8007918:	f7fd fc22 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007920:	e04f      	b.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8007922:	4b09      	ldr	r3, [pc, #36]	@ (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800792a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800792e:	d115      	bne.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8007930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007936:	d111      	bne.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007938:	f107 0308 	add.w	r3, r7, #8
 800793c:	4618      	mov	r0, r3
 800793e:	f7fd fd79 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	637b      	str	r3, [r7, #52]	@ 0x34
 8007946:	e03c      	b.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8007948:	44020c00 	.word	0x44020c00
 800794c:	00bb8000 	.word	0x00bb8000
 8007950:	03d09000 	.word	0x03d09000
 8007954:	003d0900 	.word	0x003d0900
 8007958:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800795c:	4b94      	ldr	r3, [pc, #592]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0302 	and.w	r3, r3, #2
 8007964:	2b02      	cmp	r3, #2
 8007966:	d10d      	bne.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8007968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800796e:	d109      	bne.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007970:	4b8f      	ldr	r3, [pc, #572]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	08db      	lsrs	r3, r3, #3
 8007976:	f003 0303 	and.w	r3, r3, #3
 800797a:	4a8e      	ldr	r2, [pc, #568]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800797c:	fa22 f303 	lsr.w	r3, r2, r3
 8007980:	637b      	str	r3, [r7, #52]	@ 0x34
 8007982:	e01e      	b.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8007984:	4b8a      	ldr	r3, [pc, #552]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800798c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007990:	d106      	bne.n	80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8007992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007994:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007998:	d102      	bne.n	80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800799a:	4b87      	ldr	r3, [pc, #540]	@ (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800799c:	637b      	str	r3, [r7, #52]	@ 0x34
 800799e:	e010      	b.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80079a0:	4b83      	ldr	r3, [pc, #524]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079ac:	d106      	bne.n	80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 80079ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80079b4:	d102      	bne.n	80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 80079b6:	4b81      	ldr	r3, [pc, #516]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80079b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80079ba:	e002      	b.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 80079bc:	2300      	movs	r3, #0
 80079be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079c0:	e1ed      	b.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80079c2:	e1ec      	b.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 80079c4:	4b7a      	ldr	r3, [pc, #488]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80079c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80079ca:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80079ce:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 80079d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d103      	bne.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80079d6:	f7fb fa81 	bl	8002edc <HAL_RCC_GetPCLK3Freq>
 80079da:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80079dc:	e1df      	b.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 80079de:	4b74      	ldr	r3, [pc, #464]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079ea:	d10b      	bne.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 80079ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079f2:	d107      	bne.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079f4:	f107 0314 	add.w	r3, r7, #20
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7fd fbb1 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a02:	e045      	b.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8007a04:	4b6a      	ldr	r3, [pc, #424]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a10:	d10b      	bne.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8007a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a18:	d107      	bne.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a1a:	f107 0308 	add.w	r3, r7, #8
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7fd fd08 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a28:	e032      	b.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8007a2a:	4b61      	ldr	r3, [pc, #388]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0302 	and.w	r3, r3, #2
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d10d      	bne.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8007a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a3c:	d109      	bne.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a3e:	4b5c      	ldr	r3, [pc, #368]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	08db      	lsrs	r3, r3, #3
 8007a44:	f003 0303 	and.w	r3, r3, #3
 8007a48:	4a5a      	ldr	r2, [pc, #360]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a50:	e01e      	b.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8007a52:	4b57      	ldr	r3, [pc, #348]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a5e:	d106      	bne.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8007a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a66:	d102      	bne.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8007a68:	4b53      	ldr	r3, [pc, #332]	@ (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007a6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a6c:	e010      	b.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8007a6e:	4b50      	ldr	r3, [pc, #320]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a7a:	d106      	bne.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8007a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007a82:	d102      	bne.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8007a84:	4b4d      	ldr	r3, [pc, #308]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007a86:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a88:	e002      	b.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a8e:	e186      	b.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a90:	e185      	b.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007a92:	4b47      	ldr	r3, [pc, #284]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a98:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8007a9c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d103      	bne.n	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007aa4:	f7fb fa04 	bl	8002eb0 <HAL_RCC_GetPCLK2Freq>
 8007aa8:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007aaa:	e178      	b.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8007aac:	4b40      	ldr	r3, [pc, #256]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ab4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ab8:	d10b      	bne.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8007aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007abc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ac0:	d107      	bne.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ac2:	f107 0314 	add.w	r3, r7, #20
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fd fb4a 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ad0:	e045      	b.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8007ad2:	4b37      	ldr	r3, [pc, #220]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ada:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ade:	d10b      	bne.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ae6:	d107      	bne.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ae8:	f107 0308 	add.w	r3, r7, #8
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7fd fca1 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007af6:	e032      	b.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8007af8:	4b2d      	ldr	r3, [pc, #180]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0302 	and.w	r3, r3, #2
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d10d      	bne.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8007b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b06:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007b0a:	d109      	bne.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b0c:	4b28      	ldr	r3, [pc, #160]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	08db      	lsrs	r3, r3, #3
 8007b12:	f003 0303 	and.w	r3, r3, #3
 8007b16:	4a27      	ldr	r2, [pc, #156]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007b18:	fa22 f303 	lsr.w	r3, r2, r3
 8007b1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b1e:	e01e      	b.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8007b20:	4b23      	ldr	r3, [pc, #140]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b2c:	d106      	bne.n	8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b34:	d102      	bne.n	8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8007b36:	4b20      	ldr	r3, [pc, #128]	@ (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007b38:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b3a:	e010      	b.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8007b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b48:	d106      	bne.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007b50:	d102      	bne.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8007b52:	4b1a      	ldr	r3, [pc, #104]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007b54:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b56:	e002      	b.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b5c:	e11f      	b.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007b5e:	e11e      	b.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007b60:	4b13      	ldr	r3, [pc, #76]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007b66:	f003 0303 	and.w	r3, r3, #3
 8007b6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6e:	2b03      	cmp	r3, #3
 8007b70:	d85f      	bhi.n	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8007b72:	a201      	add	r2, pc, #4	@ (adr r2, 8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8007b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b78:	08007b89 	.word	0x08007b89
 8007b7c:	08007b91 	.word	0x08007b91
 8007b80:	08007ba1 	.word	0x08007ba1
 8007b84:	08007bc1 	.word	0x08007bc1

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007b88:	f7fb f960 	bl	8002e4c <HAL_RCC_GetHCLKFreq>
 8007b8c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007b8e:	e053      	b.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b90:	f107 0320 	add.w	r3, r7, #32
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7fd f979 	bl	8004e8c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b9e:	e04b      	b.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ba0:	f107 0314 	add.w	r3, r7, #20
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7fd fadb 	bl	8005160 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007bae:	e043      	b.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007bb0:	44020c00 	.word	0x44020c00
 8007bb4:	03d09000 	.word	0x03d09000
 8007bb8:	003d0900 	.word	0x003d0900
 8007bbc:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007bc0:	4b79      	ldr	r3, [pc, #484]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007bc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007bc6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007bca:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007bcc:	4b76      	ldr	r3, [pc, #472]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 0302 	and.w	r3, r3, #2
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d10c      	bne.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8007bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d109      	bne.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007bde:	4b72      	ldr	r3, [pc, #456]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	08db      	lsrs	r3, r3, #3
 8007be4:	f003 0303 	and.w	r3, r3, #3
 8007be8:	4a70      	ldr	r2, [pc, #448]	@ (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8007bea:	fa22 f303 	lsr.w	r3, r2, r3
 8007bee:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bf0:	e01e      	b.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007bf2:	4b6d      	ldr	r3, [pc, #436]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bfe:	d106      	bne.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8007c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c06:	d102      	bne.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007c08:	4b69      	ldr	r3, [pc, #420]	@ (8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8007c0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c0c:	e010      	b.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c0e:	4b66      	ldr	r3, [pc, #408]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c1a:	d106      	bne.n	8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8007c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c22:	d102      	bne.n	8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007c24:	4b63      	ldr	r3, [pc, #396]	@ (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8007c26:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c28:	e002      	b.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007c2e:	e003      	b.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007c30:	e002      	b.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8007c32:	2300      	movs	r3, #0
 8007c34:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007c36:	bf00      	nop
          }
        }
        break;
 8007c38:	e0b1      	b.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007c3a:	4b5b      	ldr	r3, [pc, #364]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007c3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c40:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007c44:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007c46:	4b58      	ldr	r3, [pc, #352]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007c48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c4c:	f003 0302 	and.w	r3, r3, #2
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d106      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8007c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d103      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8007c5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c60:	e01f      	b.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8007c62:	4b51      	ldr	r3, [pc, #324]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c70:	d106      	bne.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8007c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c74:	2b40      	cmp	r3, #64	@ 0x40
 8007c76:	d103      	bne.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8007c78:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c7e:	e010      	b.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007c80:	4b49      	ldr	r3, [pc, #292]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c8c:	d106      	bne.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8007c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c90:	2b80      	cmp	r3, #128	@ 0x80
 8007c92:	d103      	bne.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8007c94:	f248 0312 	movw	r3, #32786	@ 0x8012
 8007c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c9a:	e002      	b.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007ca0:	e07d      	b.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007ca2:	e07c      	b.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007ca4:	4b40      	ldr	r3, [pc, #256]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ca6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007caa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007cae:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007cb0:	4b3d      	ldr	r3, [pc, #244]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cbc:	d105      	bne.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d102      	bne.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8007cc4:	4b3c      	ldr	r3, [pc, #240]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007cc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cc8:	e031      	b.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8007cca:	4b37      	ldr	r3, [pc, #220]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cd2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007cd6:	d10a      	bne.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8007cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cda:	2b10      	cmp	r3, #16
 8007cdc:	d107      	bne.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cde:	f107 0320 	add.w	r3, r7, #32
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fd f8d2 	bl	8004e8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cea:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cec:	e01f      	b.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8007cee:	4b2e      	ldr	r3, [pc, #184]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007cf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cf4:	f003 0302 	and.w	r3, r3, #2
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d106      	bne.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8007cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfe:	2b20      	cmp	r3, #32
 8007d00:	d103      	bne.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8007d02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d06:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d08:	e011      	b.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8007d0a:	4b27      	ldr	r3, [pc, #156]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007d0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d18:	d106      	bne.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1c:	2b30      	cmp	r3, #48	@ 0x30
 8007d1e:	d103      	bne.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8007d20:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d26:	e002      	b.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007d2c:	e037      	b.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d2e:	e036      	b.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007d30:	4b1d      	ldr	r3, [pc, #116]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007d32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007d36:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007d3a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3e:	2b10      	cmp	r3, #16
 8007d40:	d107      	bne.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d42:	f107 0320 	add.w	r3, r7, #32
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fd f8a0 	bl	8004e8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007d50:	e025      	b.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8007d52:	4b15      	ldr	r3, [pc, #84]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d5e:	d10a      	bne.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8007d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d62:	2b20      	cmp	r3, #32
 8007d64:	d107      	bne.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d66:	f107 0308 	add.w	r3, r7, #8
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fd fb62 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d74:	e00f      	b.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8007d76:	4b0c      	ldr	r3, [pc, #48]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d82:	d105      	bne.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8007d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d86:	2b30      	cmp	r3, #48	@ 0x30
 8007d88:	d102      	bne.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8007d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007d8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d8e:	e002      	b.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8007d90:	2300      	movs	r3, #0
 8007d92:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8007d94:	e003      	b.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d96:	e002      	b.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d9c:	bf00      	nop
    }
  }

  return (frequency);
 8007d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	373c      	adds	r7, #60	@ 0x3c
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd90      	pop	{r4, r7, pc}
 8007da8:	44020c00 	.word	0x44020c00
 8007dac:	03d09000 	.word	0x03d09000
 8007db0:	003d0900 	.word	0x003d0900
 8007db4:	007a1200 	.word	0x007a1200
 8007db8:	02dc6c00 	.word	0x02dc6c00

08007dbc <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8007dc4:	4b48      	ldr	r3, [pc, #288]	@ (8007ee8 <RCCEx_PLL2_Config+0x12c>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a47      	ldr	r2, [pc, #284]	@ (8007ee8 <RCCEx_PLL2_Config+0x12c>)
 8007dca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007dce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007dd0:	f7f9 fc3a 	bl	8001648 <HAL_GetTick>
 8007dd4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007dd6:	e008      	b.n	8007dea <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007dd8:	f7f9 fc36 	bl	8001648 <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d901      	bls.n	8007dea <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e07a      	b.n	8007ee0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007dea:	4b3f      	ldr	r3, [pc, #252]	@ (8007ee8 <RCCEx_PLL2_Config+0x12c>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1f0      	bne.n	8007dd8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007df6:	4b3c      	ldr	r3, [pc, #240]	@ (8007ee8 <RCCEx_PLL2_Config+0x12c>)
 8007df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dfa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007dfe:	f023 0303 	bic.w	r3, r3, #3
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	6811      	ldr	r1, [r2, #0]
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	6852      	ldr	r2, [r2, #4]
 8007e0a:	0212      	lsls	r2, r2, #8
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	4936      	ldr	r1, [pc, #216]	@ (8007ee8 <RCCEx_PLL2_Config+0x12c>)
 8007e10:	4313      	orrs	r3, r2
 8007e12:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	3b01      	subs	r3, #1
 8007e24:	025b      	lsls	r3, r3, #9
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	431a      	orrs	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	041b      	lsls	r3, r3, #16
 8007e32:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007e36:	431a      	orrs	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	695b      	ldr	r3, [r3, #20]
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	061b      	lsls	r3, r3, #24
 8007e40:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007e44:	4928      	ldr	r1, [pc, #160]	@ (8007ee8 <RCCEx_PLL2_Config+0x12c>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007e4a:	4b27      	ldr	r3, [pc, #156]	@ (8007ee8 <RCCEx_PLL2_Config+0x12c>)
 8007e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e4e:	f023 020c 	bic.w	r2, r3, #12
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	4924      	ldr	r1, [pc, #144]	@ (8007ee8 <RCCEx_PLL2_Config+0x12c>)
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007e5c:	4b22      	ldr	r3, [pc, #136]	@ (8007ee8 <RCCEx_PLL2_Config+0x12c>)
 8007e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e60:	f023 0220 	bic.w	r2, r3, #32
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	491f      	ldr	r1, [pc, #124]	@ (8007ee8 <RCCEx_PLL2_Config+0x12c>)
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8007ee8 <RCCEx_PLL2_Config+0x12c>)
 8007e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e76:	491c      	ldr	r1, [pc, #112]	@ (8007ee8 <RCCEx_PLL2_Config+0x12c>)
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8007e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8007ee8 <RCCEx_PLL2_Config+0x12c>)
 8007e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e80:	4a19      	ldr	r2, [pc, #100]	@ (8007ee8 <RCCEx_PLL2_Config+0x12c>)
 8007e82:	f023 0310 	bic.w	r3, r3, #16
 8007e86:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8007e88:	4b17      	ldr	r3, [pc, #92]	@ (8007ee8 <RCCEx_PLL2_Config+0x12c>)
 8007e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e8c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e90:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	6a12      	ldr	r2, [r2, #32]
 8007e98:	00d2      	lsls	r2, r2, #3
 8007e9a:	4913      	ldr	r1, [pc, #76]	@ (8007ee8 <RCCEx_PLL2_Config+0x12c>)
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8007ea0:	4b11      	ldr	r3, [pc, #68]	@ (8007ee8 <RCCEx_PLL2_Config+0x12c>)
 8007ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea4:	4a10      	ldr	r2, [pc, #64]	@ (8007ee8 <RCCEx_PLL2_Config+0x12c>)
 8007ea6:	f043 0310 	orr.w	r3, r3, #16
 8007eaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8007eac:	4b0e      	ldr	r3, [pc, #56]	@ (8007ee8 <RCCEx_PLL2_Config+0x12c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8007ee8 <RCCEx_PLL2_Config+0x12c>)
 8007eb2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007eb6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007eb8:	f7f9 fbc6 	bl	8001648 <HAL_GetTick>
 8007ebc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ebe:	e008      	b.n	8007ed2 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ec0:	f7f9 fbc2 	bl	8001648 <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d901      	bls.n	8007ed2 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e006      	b.n	8007ee0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ed2:	4b05      	ldr	r3, [pc, #20]	@ (8007ee8 <RCCEx_PLL2_Config+0x12c>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d0f0      	beq.n	8007ec0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8007ede:	2300      	movs	r3, #0

}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	44020c00 	.word	0x44020c00

08007eec <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8007ef4:	4b48      	ldr	r3, [pc, #288]	@ (8008018 <RCCEx_PLL3_Config+0x12c>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a47      	ldr	r2, [pc, #284]	@ (8008018 <RCCEx_PLL3_Config+0x12c>)
 8007efa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007efe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007f00:	f7f9 fba2 	bl	8001648 <HAL_GetTick>
 8007f04:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f06:	e008      	b.n	8007f1a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007f08:	f7f9 fb9e 	bl	8001648 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d901      	bls.n	8007f1a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e07a      	b.n	8008010 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8008018 <RCCEx_PLL3_Config+0x12c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1f0      	bne.n	8007f08 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007f26:	4b3c      	ldr	r3, [pc, #240]	@ (8008018 <RCCEx_PLL3_Config+0x12c>)
 8007f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f2a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007f2e:	f023 0303 	bic.w	r3, r3, #3
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	6811      	ldr	r1, [r2, #0]
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	6852      	ldr	r2, [r2, #4]
 8007f3a:	0212      	lsls	r2, r2, #8
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	4936      	ldr	r1, [pc, #216]	@ (8008018 <RCCEx_PLL3_Config+0x12c>)
 8007f40:	4313      	orrs	r3, r2
 8007f42:	630b      	str	r3, [r1, #48]	@ 0x30
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	025b      	lsls	r3, r3, #9
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	431a      	orrs	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	041b      	lsls	r3, r3, #16
 8007f62:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007f66:	431a      	orrs	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	061b      	lsls	r3, r3, #24
 8007f70:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007f74:	4928      	ldr	r1, [pc, #160]	@ (8008018 <RCCEx_PLL3_Config+0x12c>)
 8007f76:	4313      	orrs	r3, r2
 8007f78:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007f7a:	4b27      	ldr	r3, [pc, #156]	@ (8008018 <RCCEx_PLL3_Config+0x12c>)
 8007f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f7e:	f023 020c 	bic.w	r2, r3, #12
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	4924      	ldr	r1, [pc, #144]	@ (8008018 <RCCEx_PLL3_Config+0x12c>)
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8007f8c:	4b22      	ldr	r3, [pc, #136]	@ (8008018 <RCCEx_PLL3_Config+0x12c>)
 8007f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f90:	f023 0220 	bic.w	r2, r3, #32
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	69db      	ldr	r3, [r3, #28]
 8007f98:	491f      	ldr	r1, [pc, #124]	@ (8008018 <RCCEx_PLL3_Config+0x12c>)
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8008018 <RCCEx_PLL3_Config+0x12c>)
 8007fa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fa6:	491c      	ldr	r1, [pc, #112]	@ (8008018 <RCCEx_PLL3_Config+0x12c>)
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8007fac:	4b1a      	ldr	r3, [pc, #104]	@ (8008018 <RCCEx_PLL3_Config+0x12c>)
 8007fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fb0:	4a19      	ldr	r2, [pc, #100]	@ (8008018 <RCCEx_PLL3_Config+0x12c>)
 8007fb2:	f023 0310 	bic.w	r3, r3, #16
 8007fb6:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8007fb8:	4b17      	ldr	r3, [pc, #92]	@ (8008018 <RCCEx_PLL3_Config+0x12c>)
 8007fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fbc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007fc0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	6a12      	ldr	r2, [r2, #32]
 8007fc8:	00d2      	lsls	r2, r2, #3
 8007fca:	4913      	ldr	r1, [pc, #76]	@ (8008018 <RCCEx_PLL3_Config+0x12c>)
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8007fd0:	4b11      	ldr	r3, [pc, #68]	@ (8008018 <RCCEx_PLL3_Config+0x12c>)
 8007fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fd4:	4a10      	ldr	r2, [pc, #64]	@ (8008018 <RCCEx_PLL3_Config+0x12c>)
 8007fd6:	f043 0310 	orr.w	r3, r3, #16
 8007fda:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8007fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8008018 <RCCEx_PLL3_Config+0x12c>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8008018 <RCCEx_PLL3_Config+0x12c>)
 8007fe2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fe6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007fe8:	f7f9 fb2e 	bl	8001648 <HAL_GetTick>
 8007fec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007fee:	e008      	b.n	8008002 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007ff0:	f7f9 fb2a 	bl	8001648 <HAL_GetTick>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d901      	bls.n	8008002 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e006      	b.n	8008010 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008002:	4b05      	ldr	r3, [pc, #20]	@ (8008018 <RCCEx_PLL3_Config+0x12c>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0f0      	beq.n	8007ff0 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	44020c00 	.word	0x44020c00

0800801c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d101      	bne.n	800802e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e049      	b.n	80080c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	d106      	bne.n	8008048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f841 	bl	80080ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2202      	movs	r2, #2
 800804c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	3304      	adds	r3, #4
 8008058:	4619      	mov	r1, r3
 800805a:	4610      	mov	r0, r2
 800805c:	f000 fa66 	bl	800852c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80080ca:	b480      	push	{r7}
 80080cc:	b083      	sub	sp, #12
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80080d2:	bf00      	nop
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
	...

080080e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d001      	beq.n	80080f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	e07c      	b.n	80081f2 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2202      	movs	r2, #2
 80080fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68da      	ldr	r2, [r3, #12]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f042 0201 	orr.w	r2, r2, #1
 800810e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a3a      	ldr	r2, [pc, #232]	@ (8008200 <HAL_TIM_Base_Start_IT+0x120>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d04a      	beq.n	80081b0 <HAL_TIM_Base_Start_IT+0xd0>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a39      	ldr	r2, [pc, #228]	@ (8008204 <HAL_TIM_Base_Start_IT+0x124>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d045      	beq.n	80081b0 <HAL_TIM_Base_Start_IT+0xd0>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800812c:	d040      	beq.n	80081b0 <HAL_TIM_Base_Start_IT+0xd0>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008136:	d03b      	beq.n	80081b0 <HAL_TIM_Base_Start_IT+0xd0>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a32      	ldr	r2, [pc, #200]	@ (8008208 <HAL_TIM_Base_Start_IT+0x128>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d036      	beq.n	80081b0 <HAL_TIM_Base_Start_IT+0xd0>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a31      	ldr	r2, [pc, #196]	@ (800820c <HAL_TIM_Base_Start_IT+0x12c>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d031      	beq.n	80081b0 <HAL_TIM_Base_Start_IT+0xd0>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a2f      	ldr	r2, [pc, #188]	@ (8008210 <HAL_TIM_Base_Start_IT+0x130>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d02c      	beq.n	80081b0 <HAL_TIM_Base_Start_IT+0xd0>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a2e      	ldr	r2, [pc, #184]	@ (8008214 <HAL_TIM_Base_Start_IT+0x134>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d027      	beq.n	80081b0 <HAL_TIM_Base_Start_IT+0xd0>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a2c      	ldr	r2, [pc, #176]	@ (8008218 <HAL_TIM_Base_Start_IT+0x138>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d022      	beq.n	80081b0 <HAL_TIM_Base_Start_IT+0xd0>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a2b      	ldr	r2, [pc, #172]	@ (800821c <HAL_TIM_Base_Start_IT+0x13c>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d01d      	beq.n	80081b0 <HAL_TIM_Base_Start_IT+0xd0>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a29      	ldr	r2, [pc, #164]	@ (8008220 <HAL_TIM_Base_Start_IT+0x140>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d018      	beq.n	80081b0 <HAL_TIM_Base_Start_IT+0xd0>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a28      	ldr	r2, [pc, #160]	@ (8008224 <HAL_TIM_Base_Start_IT+0x144>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d013      	beq.n	80081b0 <HAL_TIM_Base_Start_IT+0xd0>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a26      	ldr	r2, [pc, #152]	@ (8008228 <HAL_TIM_Base_Start_IT+0x148>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d00e      	beq.n	80081b0 <HAL_TIM_Base_Start_IT+0xd0>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a25      	ldr	r2, [pc, #148]	@ (800822c <HAL_TIM_Base_Start_IT+0x14c>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d009      	beq.n	80081b0 <HAL_TIM_Base_Start_IT+0xd0>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a23      	ldr	r2, [pc, #140]	@ (8008230 <HAL_TIM_Base_Start_IT+0x150>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d004      	beq.n	80081b0 <HAL_TIM_Base_Start_IT+0xd0>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a22      	ldr	r2, [pc, #136]	@ (8008234 <HAL_TIM_Base_Start_IT+0x154>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d115      	bne.n	80081dc <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	689a      	ldr	r2, [r3, #8]
 80081b6:	4b20      	ldr	r3, [pc, #128]	@ (8008238 <HAL_TIM_Base_Start_IT+0x158>)
 80081b8:	4013      	ands	r3, r2
 80081ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2b06      	cmp	r3, #6
 80081c0:	d015      	beq.n	80081ee <HAL_TIM_Base_Start_IT+0x10e>
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081c8:	d011      	beq.n	80081ee <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f042 0201 	orr.w	r2, r2, #1
 80081d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081da:	e008      	b.n	80081ee <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f042 0201 	orr.w	r2, r2, #1
 80081ea:	601a      	str	r2, [r3, #0]
 80081ec:	e000      	b.n	80081f0 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3714      	adds	r7, #20
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	40012c00 	.word	0x40012c00
 8008204:	50012c00 	.word	0x50012c00
 8008208:	40000400 	.word	0x40000400
 800820c:	50000400 	.word	0x50000400
 8008210:	40000800 	.word	0x40000800
 8008214:	50000800 	.word	0x50000800
 8008218:	40000c00 	.word	0x40000c00
 800821c:	50000c00 	.word	0x50000c00
 8008220:	40013400 	.word	0x40013400
 8008224:	50013400 	.word	0x50013400
 8008228:	40001800 	.word	0x40001800
 800822c:	50001800 	.word	0x50001800
 8008230:	40014000 	.word	0x40014000
 8008234:	50014000 	.word	0x50014000
 8008238:	00010007 	.word	0x00010007

0800823c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	f003 0302 	and.w	r3, r3, #2
 800825a:	2b00      	cmp	r3, #0
 800825c:	d020      	beq.n	80082a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f003 0302 	and.w	r3, r3, #2
 8008264:	2b00      	cmp	r3, #0
 8008266:	d01b      	beq.n	80082a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f06f 0202 	mvn.w	r2, #2
 8008270:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2201      	movs	r2, #1
 8008276:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	699b      	ldr	r3, [r3, #24]
 800827e:	f003 0303 	and.w	r3, r3, #3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f931 	bl	80084ee <HAL_TIM_IC_CaptureCallback>
 800828c:	e005      	b.n	800829a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f923 	bl	80084da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f934 	bl	8008502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	f003 0304 	and.w	r3, r3, #4
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d020      	beq.n	80082ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f003 0304 	and.w	r3, r3, #4
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d01b      	beq.n	80082ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f06f 0204 	mvn.w	r2, #4
 80082bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2202      	movs	r2, #2
 80082c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	699b      	ldr	r3, [r3, #24]
 80082ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d003      	beq.n	80082da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f90b 	bl	80084ee <HAL_TIM_IC_CaptureCallback>
 80082d8:	e005      	b.n	80082e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 f8fd 	bl	80084da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f90e 	bl	8008502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	f003 0308 	and.w	r3, r3, #8
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d020      	beq.n	8008338 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f003 0308 	and.w	r3, r3, #8
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d01b      	beq.n	8008338 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f06f 0208 	mvn.w	r2, #8
 8008308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2204      	movs	r2, #4
 800830e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	69db      	ldr	r3, [r3, #28]
 8008316:	f003 0303 	and.w	r3, r3, #3
 800831a:	2b00      	cmp	r3, #0
 800831c:	d003      	beq.n	8008326 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f8e5 	bl	80084ee <HAL_TIM_IC_CaptureCallback>
 8008324:	e005      	b.n	8008332 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f8d7 	bl	80084da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f8e8 	bl	8008502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	f003 0310 	and.w	r3, r3, #16
 800833e:	2b00      	cmp	r3, #0
 8008340:	d020      	beq.n	8008384 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f003 0310 	and.w	r3, r3, #16
 8008348:	2b00      	cmp	r3, #0
 800834a:	d01b      	beq.n	8008384 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f06f 0210 	mvn.w	r2, #16
 8008354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2208      	movs	r2, #8
 800835a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	69db      	ldr	r3, [r3, #28]
 8008362:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f8bf 	bl	80084ee <HAL_TIM_IC_CaptureCallback>
 8008370:	e005      	b.n	800837e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f8b1 	bl	80084da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 f8c2 	bl	8008502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	f003 0301 	and.w	r3, r3, #1
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00c      	beq.n	80083a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f003 0301 	and.w	r3, r3, #1
 8008394:	2b00      	cmp	r3, #0
 8008396:	d007      	beq.n	80083a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f06f 0201 	mvn.w	r2, #1
 80083a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7f8 fe56 	bl	8001054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d104      	bne.n	80083bc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00c      	beq.n	80083d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d007      	beq.n	80083d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80083ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f9df 	bl	8008794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00c      	beq.n	80083fa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d007      	beq.n	80083fa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80083f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f9d7 	bl	80087a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00c      	beq.n	800841e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800840a:	2b00      	cmp	r3, #0
 800840c:	d007      	beq.n	800841e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f87c 	bl	8008516 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	f003 0320 	and.w	r3, r3, #32
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00c      	beq.n	8008442 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f003 0320 	and.w	r3, r3, #32
 800842e:	2b00      	cmp	r3, #0
 8008430:	d007      	beq.n	8008442 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f06f 0220 	mvn.w	r2, #32
 800843a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f99f 	bl	8008780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00c      	beq.n	8008466 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d007      	beq.n	8008466 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800845e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f9ab 	bl	80087bc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00c      	beq.n	800848a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d007      	beq.n	800848a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 f9a3 	bl	80087d0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00c      	beq.n	80084ae <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d007      	beq.n	80084ae <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80084a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f99b 	bl	80087e4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00c      	beq.n	80084d2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d007      	beq.n	80084d2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80084ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f993 	bl	80087f8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084d2:	bf00      	nop
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084da:	b480      	push	{r7}
 80084dc:	b083      	sub	sp, #12
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084e2:	bf00      	nop
 80084e4:	370c      	adds	r7, #12
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr

080084ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084ee:	b480      	push	{r7}
 80084f0:	b083      	sub	sp, #12
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084f6:	bf00      	nop
 80084f8:	370c      	adds	r7, #12
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr

08008502 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008502:	b480      	push	{r7}
 8008504:	b083      	sub	sp, #12
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800850a:	bf00      	nop
 800850c:	370c      	adds	r7, #12
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008516:	b480      	push	{r7}
 8008518:	b083      	sub	sp, #12
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800851e:	bf00      	nop
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
	...

0800852c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a7a      	ldr	r2, [pc, #488]	@ (8008728 <TIM_Base_SetConfig+0x1fc>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d02b      	beq.n	800859c <TIM_Base_SetConfig+0x70>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a79      	ldr	r2, [pc, #484]	@ (800872c <TIM_Base_SetConfig+0x200>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d027      	beq.n	800859c <TIM_Base_SetConfig+0x70>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008552:	d023      	beq.n	800859c <TIM_Base_SetConfig+0x70>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800855a:	d01f      	beq.n	800859c <TIM_Base_SetConfig+0x70>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4a74      	ldr	r2, [pc, #464]	@ (8008730 <TIM_Base_SetConfig+0x204>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d01b      	beq.n	800859c <TIM_Base_SetConfig+0x70>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a73      	ldr	r2, [pc, #460]	@ (8008734 <TIM_Base_SetConfig+0x208>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d017      	beq.n	800859c <TIM_Base_SetConfig+0x70>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a72      	ldr	r2, [pc, #456]	@ (8008738 <TIM_Base_SetConfig+0x20c>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d013      	beq.n	800859c <TIM_Base_SetConfig+0x70>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4a71      	ldr	r2, [pc, #452]	@ (800873c <TIM_Base_SetConfig+0x210>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d00f      	beq.n	800859c <TIM_Base_SetConfig+0x70>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a70      	ldr	r2, [pc, #448]	@ (8008740 <TIM_Base_SetConfig+0x214>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d00b      	beq.n	800859c <TIM_Base_SetConfig+0x70>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a6f      	ldr	r2, [pc, #444]	@ (8008744 <TIM_Base_SetConfig+0x218>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d007      	beq.n	800859c <TIM_Base_SetConfig+0x70>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a6e      	ldr	r2, [pc, #440]	@ (8008748 <TIM_Base_SetConfig+0x21c>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d003      	beq.n	800859c <TIM_Base_SetConfig+0x70>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a6d      	ldr	r2, [pc, #436]	@ (800874c <TIM_Base_SetConfig+0x220>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d108      	bne.n	80085ae <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a5d      	ldr	r2, [pc, #372]	@ (8008728 <TIM_Base_SetConfig+0x1fc>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d05b      	beq.n	800866e <TIM_Base_SetConfig+0x142>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a5c      	ldr	r2, [pc, #368]	@ (800872c <TIM_Base_SetConfig+0x200>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d057      	beq.n	800866e <TIM_Base_SetConfig+0x142>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085c4:	d053      	beq.n	800866e <TIM_Base_SetConfig+0x142>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80085cc:	d04f      	beq.n	800866e <TIM_Base_SetConfig+0x142>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a57      	ldr	r2, [pc, #348]	@ (8008730 <TIM_Base_SetConfig+0x204>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d04b      	beq.n	800866e <TIM_Base_SetConfig+0x142>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a56      	ldr	r2, [pc, #344]	@ (8008734 <TIM_Base_SetConfig+0x208>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d047      	beq.n	800866e <TIM_Base_SetConfig+0x142>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a55      	ldr	r2, [pc, #340]	@ (8008738 <TIM_Base_SetConfig+0x20c>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d043      	beq.n	800866e <TIM_Base_SetConfig+0x142>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a54      	ldr	r2, [pc, #336]	@ (800873c <TIM_Base_SetConfig+0x210>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d03f      	beq.n	800866e <TIM_Base_SetConfig+0x142>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a53      	ldr	r2, [pc, #332]	@ (8008740 <TIM_Base_SetConfig+0x214>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d03b      	beq.n	800866e <TIM_Base_SetConfig+0x142>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a52      	ldr	r2, [pc, #328]	@ (8008744 <TIM_Base_SetConfig+0x218>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d037      	beq.n	800866e <TIM_Base_SetConfig+0x142>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4a51      	ldr	r2, [pc, #324]	@ (8008748 <TIM_Base_SetConfig+0x21c>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d033      	beq.n	800866e <TIM_Base_SetConfig+0x142>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a50      	ldr	r2, [pc, #320]	@ (800874c <TIM_Base_SetConfig+0x220>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d02f      	beq.n	800866e <TIM_Base_SetConfig+0x142>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a4f      	ldr	r2, [pc, #316]	@ (8008750 <TIM_Base_SetConfig+0x224>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d02b      	beq.n	800866e <TIM_Base_SetConfig+0x142>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a4e      	ldr	r2, [pc, #312]	@ (8008754 <TIM_Base_SetConfig+0x228>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d027      	beq.n	800866e <TIM_Base_SetConfig+0x142>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a4d      	ldr	r2, [pc, #308]	@ (8008758 <TIM_Base_SetConfig+0x22c>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d023      	beq.n	800866e <TIM_Base_SetConfig+0x142>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a4c      	ldr	r2, [pc, #304]	@ (800875c <TIM_Base_SetConfig+0x230>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d01f      	beq.n	800866e <TIM_Base_SetConfig+0x142>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a4b      	ldr	r2, [pc, #300]	@ (8008760 <TIM_Base_SetConfig+0x234>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d01b      	beq.n	800866e <TIM_Base_SetConfig+0x142>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a4a      	ldr	r2, [pc, #296]	@ (8008764 <TIM_Base_SetConfig+0x238>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d017      	beq.n	800866e <TIM_Base_SetConfig+0x142>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a49      	ldr	r2, [pc, #292]	@ (8008768 <TIM_Base_SetConfig+0x23c>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d013      	beq.n	800866e <TIM_Base_SetConfig+0x142>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a48      	ldr	r2, [pc, #288]	@ (800876c <TIM_Base_SetConfig+0x240>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d00f      	beq.n	800866e <TIM_Base_SetConfig+0x142>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a47      	ldr	r2, [pc, #284]	@ (8008770 <TIM_Base_SetConfig+0x244>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d00b      	beq.n	800866e <TIM_Base_SetConfig+0x142>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a46      	ldr	r2, [pc, #280]	@ (8008774 <TIM_Base_SetConfig+0x248>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d007      	beq.n	800866e <TIM_Base_SetConfig+0x142>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a45      	ldr	r2, [pc, #276]	@ (8008778 <TIM_Base_SetConfig+0x24c>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d003      	beq.n	800866e <TIM_Base_SetConfig+0x142>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a44      	ldr	r2, [pc, #272]	@ (800877c <TIM_Base_SetConfig+0x250>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d108      	bne.n	8008680 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	4313      	orrs	r3, r2
 800867e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	4313      	orrs	r3, r2
 800868c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	689a      	ldr	r2, [r3, #8]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a20      	ldr	r2, [pc, #128]	@ (8008728 <TIM_Base_SetConfig+0x1fc>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d023      	beq.n	80086f4 <TIM_Base_SetConfig+0x1c8>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a1f      	ldr	r2, [pc, #124]	@ (800872c <TIM_Base_SetConfig+0x200>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d01f      	beq.n	80086f4 <TIM_Base_SetConfig+0x1c8>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a24      	ldr	r2, [pc, #144]	@ (8008748 <TIM_Base_SetConfig+0x21c>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d01b      	beq.n	80086f4 <TIM_Base_SetConfig+0x1c8>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a23      	ldr	r2, [pc, #140]	@ (800874c <TIM_Base_SetConfig+0x220>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d017      	beq.n	80086f4 <TIM_Base_SetConfig+0x1c8>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a28      	ldr	r2, [pc, #160]	@ (8008768 <TIM_Base_SetConfig+0x23c>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d013      	beq.n	80086f4 <TIM_Base_SetConfig+0x1c8>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a27      	ldr	r2, [pc, #156]	@ (800876c <TIM_Base_SetConfig+0x240>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d00f      	beq.n	80086f4 <TIM_Base_SetConfig+0x1c8>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a26      	ldr	r2, [pc, #152]	@ (8008770 <TIM_Base_SetConfig+0x244>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d00b      	beq.n	80086f4 <TIM_Base_SetConfig+0x1c8>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a25      	ldr	r2, [pc, #148]	@ (8008774 <TIM_Base_SetConfig+0x248>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d007      	beq.n	80086f4 <TIM_Base_SetConfig+0x1c8>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a24      	ldr	r2, [pc, #144]	@ (8008778 <TIM_Base_SetConfig+0x24c>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d003      	beq.n	80086f4 <TIM_Base_SetConfig+0x1c8>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a23      	ldr	r2, [pc, #140]	@ (800877c <TIM_Base_SetConfig+0x250>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d103      	bne.n	80086fc <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	691a      	ldr	r2, [r3, #16]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	2b01      	cmp	r3, #1
 800870c:	d105      	bne.n	800871a <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	f023 0201 	bic.w	r2, r3, #1
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	611a      	str	r2, [r3, #16]
  }
}
 800871a:	bf00      	nop
 800871c:	3714      	adds	r7, #20
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	40012c00 	.word	0x40012c00
 800872c:	50012c00 	.word	0x50012c00
 8008730:	40000400 	.word	0x40000400
 8008734:	50000400 	.word	0x50000400
 8008738:	40000800 	.word	0x40000800
 800873c:	50000800 	.word	0x50000800
 8008740:	40000c00 	.word	0x40000c00
 8008744:	50000c00 	.word	0x50000c00
 8008748:	40013400 	.word	0x40013400
 800874c:	50013400 	.word	0x50013400
 8008750:	40001800 	.word	0x40001800
 8008754:	50001800 	.word	0x50001800
 8008758:	40001c00 	.word	0x40001c00
 800875c:	50001c00 	.word	0x50001c00
 8008760:	40002000 	.word	0x40002000
 8008764:	50002000 	.word	0x50002000
 8008768:	40014000 	.word	0x40014000
 800876c:	50014000 	.word	0x50014000
 8008770:	40014400 	.word	0x40014400
 8008774:	50014400 	.word	0x50014400
 8008778:	40014800 	.word	0x40014800
 800877c:	50014800 	.word	0x50014800

08008780 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008788:	bf00      	nop
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800879c:	bf00      	nop
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80087c4:	bf00      	nop
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80087d8:	bf00      	nop
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80087ec:	bf00      	nop
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d101      	bne.n	800881e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	e042      	b.n	80088a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008824:	2b00      	cmp	r3, #0
 8008826:	d106      	bne.n	8008836 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f7f8 fc51 	bl	80010d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2224      	movs	r2, #36	@ 0x24
 800883a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f022 0201 	bic.w	r2, r2, #1
 800884c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008852:	2b00      	cmp	r3, #0
 8008854:	d002      	beq.n	800885c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fab4 	bl	8008dc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f8c3 	bl	80089e8 <UART_SetConfig>
 8008862:	4603      	mov	r3, r0
 8008864:	2b01      	cmp	r3, #1
 8008866:	d101      	bne.n	800886c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	e01b      	b.n	80088a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	685a      	ldr	r2, [r3, #4]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800887a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689a      	ldr	r2, [r3, #8]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800888a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f042 0201 	orr.w	r2, r2, #1
 800889a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 fb33 	bl	8008f08 <UART_CheckIdleState>
 80088a2:	4603      	mov	r3, r0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b08a      	sub	sp, #40	@ 0x28
 80088b0:	af02      	add	r7, sp, #8
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	603b      	str	r3, [r7, #0]
 80088b8:	4613      	mov	r3, r2
 80088ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088c2:	2b20      	cmp	r3, #32
 80088c4:	f040 808b 	bne.w	80089de <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d002      	beq.n	80088d4 <HAL_UART_Transmit+0x28>
 80088ce:	88fb      	ldrh	r3, [r7, #6]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d101      	bne.n	80088d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	e083      	b.n	80089e0 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088e2:	2b80      	cmp	r3, #128	@ 0x80
 80088e4:	d107      	bne.n	80088f6 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	689a      	ldr	r2, [r3, #8]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80088f4:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2221      	movs	r2, #33	@ 0x21
 8008902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008906:	f7f8 fe9f 	bl	8001648 <HAL_GetTick>
 800890a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	88fa      	ldrh	r2, [r7, #6]
 8008910:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	88fa      	ldrh	r2, [r7, #6]
 8008918:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008924:	d108      	bne.n	8008938 <HAL_UART_Transmit+0x8c>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d104      	bne.n	8008938 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800892e:	2300      	movs	r3, #0
 8008930:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	61bb      	str	r3, [r7, #24]
 8008936:	e003      	b.n	8008940 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800893c:	2300      	movs	r3, #0
 800893e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008940:	e030      	b.n	80089a4 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	2200      	movs	r2, #0
 800894a:	2180      	movs	r1, #128	@ 0x80
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 fb85 	bl	800905c <UART_WaitOnFlagUntilTimeout>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d005      	beq.n	8008964 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2220      	movs	r2, #32
 800895c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008960:	2303      	movs	r3, #3
 8008962:	e03d      	b.n	80089e0 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10b      	bne.n	8008982 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	881b      	ldrh	r3, [r3, #0]
 800896e:	461a      	mov	r2, r3
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008978:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	3302      	adds	r3, #2
 800897e:	61bb      	str	r3, [r7, #24]
 8008980:	e007      	b.n	8008992 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	781a      	ldrb	r2, [r3, #0]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	3301      	adds	r3, #1
 8008990:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008998:	b29b      	uxth	r3, r3
 800899a:	3b01      	subs	r3, #1
 800899c:	b29a      	uxth	r2, r3
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1c8      	bne.n	8008942 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	2200      	movs	r2, #0
 80089b8:	2140      	movs	r1, #64	@ 0x40
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f000 fb4e 	bl	800905c <UART_WaitOnFlagUntilTimeout>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d005      	beq.n	80089d2 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2220      	movs	r2, #32
 80089ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80089ce:	2303      	movs	r3, #3
 80089d0:	e006      	b.n	80089e0 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2220      	movs	r2, #32
 80089d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	e000      	b.n	80089e0 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80089de:	2302      	movs	r3, #2
  }
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3720      	adds	r7, #32
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089ec:	b094      	sub	sp, #80	@ 0x50
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80089f2:	2300      	movs	r3, #0
 80089f4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80089f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	4b78      	ldr	r3, [pc, #480]	@ (8008be0 <UART_SetConfig+0x1f8>)
 80089fe:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a02:	689a      	ldr	r2, [r3, #8]
 8008a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	431a      	orrs	r2, r3
 8008a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	431a      	orrs	r2, r3
 8008a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a12:	69db      	ldr	r3, [r3, #28]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4971      	ldr	r1, [pc, #452]	@ (8008be4 <UART_SetConfig+0x1fc>)
 8008a20:	4019      	ands	r1, r3
 8008a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a28:	430b      	orrs	r3, r1
 8008a2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a38:	68d9      	ldr	r1, [r3, #12]
 8008a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	ea40 0301 	orr.w	r3, r0, r1
 8008a42:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	4b64      	ldr	r3, [pc, #400]	@ (8008be0 <UART_SetConfig+0x1f8>)
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d009      	beq.n	8008a68 <UART_SetConfig+0x80>
 8008a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	4b63      	ldr	r3, [pc, #396]	@ (8008be8 <UART_SetConfig+0x200>)
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d004      	beq.n	8008a68 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a60:	6a1a      	ldr	r2, [r3, #32]
 8008a62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a64:	4313      	orrs	r3, r2
 8008a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008a72:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a7c:	430b      	orrs	r3, r1
 8008a7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a86:	f023 000f 	bic.w	r0, r3, #15
 8008a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a8c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	ea40 0301 	orr.w	r3, r0, r1
 8008a96:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	4b53      	ldr	r3, [pc, #332]	@ (8008bec <UART_SetConfig+0x204>)
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d102      	bne.n	8008aa8 <UART_SetConfig+0xc0>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008aa6:	e066      	b.n	8008b76 <UART_SetConfig+0x18e>
 8008aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	4b50      	ldr	r3, [pc, #320]	@ (8008bf0 <UART_SetConfig+0x208>)
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d102      	bne.n	8008ab8 <UART_SetConfig+0xd0>
 8008ab2:	2302      	movs	r3, #2
 8008ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ab6:	e05e      	b.n	8008b76 <UART_SetConfig+0x18e>
 8008ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	4b4d      	ldr	r3, [pc, #308]	@ (8008bf4 <UART_SetConfig+0x20c>)
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d102      	bne.n	8008ac8 <UART_SetConfig+0xe0>
 8008ac2:	2304      	movs	r3, #4
 8008ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ac6:	e056      	b.n	8008b76 <UART_SetConfig+0x18e>
 8008ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	4b4a      	ldr	r3, [pc, #296]	@ (8008bf8 <UART_SetConfig+0x210>)
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d102      	bne.n	8008ad8 <UART_SetConfig+0xf0>
 8008ad2:	2308      	movs	r3, #8
 8008ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ad6:	e04e      	b.n	8008b76 <UART_SetConfig+0x18e>
 8008ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	4b47      	ldr	r3, [pc, #284]	@ (8008bfc <UART_SetConfig+0x214>)
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d102      	bne.n	8008ae8 <UART_SetConfig+0x100>
 8008ae2:	2310      	movs	r3, #16
 8008ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ae6:	e046      	b.n	8008b76 <UART_SetConfig+0x18e>
 8008ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	4b44      	ldr	r3, [pc, #272]	@ (8008c00 <UART_SetConfig+0x218>)
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d102      	bne.n	8008af8 <UART_SetConfig+0x110>
 8008af2:	2320      	movs	r3, #32
 8008af4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008af6:	e03e      	b.n	8008b76 <UART_SetConfig+0x18e>
 8008af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	4b41      	ldr	r3, [pc, #260]	@ (8008c04 <UART_SetConfig+0x21c>)
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d102      	bne.n	8008b08 <UART_SetConfig+0x120>
 8008b02:	2340      	movs	r3, #64	@ 0x40
 8008b04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b06:	e036      	b.n	8008b76 <UART_SetConfig+0x18e>
 8008b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	4b3e      	ldr	r3, [pc, #248]	@ (8008c08 <UART_SetConfig+0x220>)
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d102      	bne.n	8008b18 <UART_SetConfig+0x130>
 8008b12:	2380      	movs	r3, #128	@ 0x80
 8008b14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b16:	e02e      	b.n	8008b76 <UART_SetConfig+0x18e>
 8008b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	4b3b      	ldr	r3, [pc, #236]	@ (8008c0c <UART_SetConfig+0x224>)
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d103      	bne.n	8008b2a <UART_SetConfig+0x142>
 8008b22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008b26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b28:	e025      	b.n	8008b76 <UART_SetConfig+0x18e>
 8008b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	4b38      	ldr	r3, [pc, #224]	@ (8008c10 <UART_SetConfig+0x228>)
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d103      	bne.n	8008b3c <UART_SetConfig+0x154>
 8008b34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b3a:	e01c      	b.n	8008b76 <UART_SetConfig+0x18e>
 8008b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	4b34      	ldr	r3, [pc, #208]	@ (8008c14 <UART_SetConfig+0x22c>)
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d103      	bne.n	8008b4e <UART_SetConfig+0x166>
 8008b46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b4c:	e013      	b.n	8008b76 <UART_SetConfig+0x18e>
 8008b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	4b31      	ldr	r3, [pc, #196]	@ (8008c18 <UART_SetConfig+0x230>)
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d103      	bne.n	8008b60 <UART_SetConfig+0x178>
 8008b58:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b5e:	e00a      	b.n	8008b76 <UART_SetConfig+0x18e>
 8008b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	4b1e      	ldr	r3, [pc, #120]	@ (8008be0 <UART_SetConfig+0x1f8>)
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d103      	bne.n	8008b72 <UART_SetConfig+0x18a>
 8008b6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b70:	e001      	b.n	8008b76 <UART_SetConfig+0x18e>
 8008b72:	2300      	movs	r3, #0
 8008b74:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	4b19      	ldr	r3, [pc, #100]	@ (8008be0 <UART_SetConfig+0x1f8>)
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d005      	beq.n	8008b8c <UART_SetConfig+0x1a4>
 8008b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	4b18      	ldr	r3, [pc, #96]	@ (8008be8 <UART_SetConfig+0x200>)
 8008b86:	429a      	cmp	r2, r3
 8008b88:	f040 8094 	bne.w	8008cb4 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008b8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b8e:	2200      	movs	r2, #0
 8008b90:	623b      	str	r3, [r7, #32]
 8008b92:	627a      	str	r2, [r7, #36]	@ 0x24
 8008b94:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008b98:	f7fc fdb6 	bl	8005708 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b9c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f000 80f7 	beq.w	8008d94 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008baa:	4a1c      	ldr	r2, [pc, #112]	@ (8008c1c <UART_SetConfig+0x234>)
 8008bac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bb8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bbc:	685a      	ldr	r2, [r3, #4]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	005b      	lsls	r3, r3, #1
 8008bc2:	4413      	add	r3, r2
 8008bc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d305      	bcc.n	8008bd6 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008bd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d924      	bls.n	8008c20 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008bdc:	e069      	b.n	8008cb2 <UART_SetConfig+0x2ca>
 8008bde:	bf00      	nop
 8008be0:	44002400 	.word	0x44002400
 8008be4:	cfff69f3 	.word	0xcfff69f3
 8008be8:	54002400 	.word	0x54002400
 8008bec:	40013800 	.word	0x40013800
 8008bf0:	40004400 	.word	0x40004400
 8008bf4:	40004800 	.word	0x40004800
 8008bf8:	40004c00 	.word	0x40004c00
 8008bfc:	40005000 	.word	0x40005000
 8008c00:	40006400 	.word	0x40006400
 8008c04:	40007800 	.word	0x40007800
 8008c08:	40007c00 	.word	0x40007c00
 8008c0c:	40008000 	.word	0x40008000
 8008c10:	40006800 	.word	0x40006800
 8008c14:	40006c00 	.word	0x40006c00
 8008c18:	40008400 	.word	0x40008400
 8008c1c:	0800c790 	.word	0x0800c790
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c22:	2200      	movs	r2, #0
 8008c24:	61bb      	str	r3, [r7, #24]
 8008c26:	61fa      	str	r2, [r7, #28]
 8008c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c2c:	4a64      	ldr	r2, [pc, #400]	@ (8008dc0 <UART_SetConfig+0x3d8>)
 8008c2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	2200      	movs	r2, #0
 8008c36:	613b      	str	r3, [r7, #16]
 8008c38:	617a      	str	r2, [r7, #20]
 8008c3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008c3e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008c42:	f7f7 fc41 	bl	80004c8 <__aeabi_uldivmod>
 8008c46:	4602      	mov	r2, r0
 8008c48:	460b      	mov	r3, r1
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	f04f 0200 	mov.w	r2, #0
 8008c52:	f04f 0300 	mov.w	r3, #0
 8008c56:	020b      	lsls	r3, r1, #8
 8008c58:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008c5c:	0202      	lsls	r2, r0, #8
 8008c5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c60:	6849      	ldr	r1, [r1, #4]
 8008c62:	0849      	lsrs	r1, r1, #1
 8008c64:	2000      	movs	r0, #0
 8008c66:	460c      	mov	r4, r1
 8008c68:	4605      	mov	r5, r0
 8008c6a:	eb12 0804 	adds.w	r8, r2, r4
 8008c6e:	eb43 0905 	adc.w	r9, r3, r5
 8008c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	60bb      	str	r3, [r7, #8]
 8008c7a:	60fa      	str	r2, [r7, #12]
 8008c7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c80:	4640      	mov	r0, r8
 8008c82:	4649      	mov	r1, r9
 8008c84:	f7f7 fc20 	bl	80004c8 <__aeabi_uldivmod>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	4613      	mov	r3, r2
 8008c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c96:	d308      	bcc.n	8008caa <UART_SetConfig+0x2c2>
 8008c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c9e:	d204      	bcs.n	8008caa <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8008ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008ca6:	60da      	str	r2, [r3, #12]
 8008ca8:	e003      	b.n	8008cb2 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008cb0:	e070      	b.n	8008d94 <UART_SetConfig+0x3ac>
 8008cb2:	e06f      	b.n	8008d94 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb6:	69db      	ldr	r3, [r3, #28]
 8008cb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cbc:	d13c      	bne.n	8008d38 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008cbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	603b      	str	r3, [r7, #0]
 8008cc4:	607a      	str	r2, [r7, #4]
 8008cc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cca:	f7fc fd1d 	bl	8005708 <HAL_RCCEx_GetPeriphCLKFreq>
 8008cce:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008cd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d05e      	beq.n	8008d94 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cda:	4a39      	ldr	r2, [pc, #228]	@ (8008dc0 <UART_SetConfig+0x3d8>)
 8008cdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ce4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ce8:	005a      	lsls	r2, r3, #1
 8008cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	085b      	lsrs	r3, r3, #1
 8008cf0:	441a      	add	r2, r3
 8008cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cfe:	2b0f      	cmp	r3, #15
 8008d00:	d916      	bls.n	8008d30 <UART_SetConfig+0x348>
 8008d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d08:	d212      	bcs.n	8008d30 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	f023 030f 	bic.w	r3, r3, #15
 8008d12:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d16:	085b      	lsrs	r3, r3, #1
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	f003 0307 	and.w	r3, r3, #7
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008d22:	4313      	orrs	r3, r2
 8008d24:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008d2c:	60da      	str	r2, [r3, #12]
 8008d2e:	e031      	b.n	8008d94 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008d36:	e02d      	b.n	8008d94 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008d38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	469a      	mov	sl, r3
 8008d3e:	4693      	mov	fp, r2
 8008d40:	4650      	mov	r0, sl
 8008d42:	4659      	mov	r1, fp
 8008d44:	f7fc fce0 	bl	8005708 <HAL_RCCEx_GetPeriphCLKFreq>
 8008d48:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8008d4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d021      	beq.n	8008d94 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d54:	4a1a      	ldr	r2, [pc, #104]	@ (8008dc0 <UART_SetConfig+0x3d8>)
 8008d56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	085b      	lsrs	r3, r3, #1
 8008d68:	441a      	add	r2, r3
 8008d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d76:	2b0f      	cmp	r3, #15
 8008d78:	d909      	bls.n	8008d8e <UART_SetConfig+0x3a6>
 8008d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d80:	d205      	bcs.n	8008d8e <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	60da      	str	r2, [r3, #12]
 8008d8c:	e002      	b.n	8008d94 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d96:	2201      	movs	r2, #1
 8008d98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da6:	2200      	movs	r2, #0
 8008da8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dac:	2200      	movs	r2, #0
 8008dae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008db0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3750      	adds	r7, #80	@ 0x50
 8008db8:	46bd      	mov	sp, r7
 8008dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008dbe:	bf00      	nop
 8008dc0:	0800c790 	.word	0x0800c790

08008dc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd0:	f003 0308 	and.w	r3, r3, #8
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d00a      	beq.n	8008dee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	430a      	orrs	r2, r1
 8008dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008df2:	f003 0301 	and.w	r3, r3, #1
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00a      	beq.n	8008e10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	430a      	orrs	r2, r1
 8008e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e14:	f003 0302 	and.w	r3, r3, #2
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00a      	beq.n	8008e32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	430a      	orrs	r2, r1
 8008e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e36:	f003 0304 	and.w	r3, r3, #4
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00a      	beq.n	8008e54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	430a      	orrs	r2, r1
 8008e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e58:	f003 0310 	and.w	r3, r3, #16
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00a      	beq.n	8008e76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	430a      	orrs	r2, r1
 8008e74:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e7a:	f003 0320 	and.w	r3, r3, #32
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00a      	beq.n	8008e98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	430a      	orrs	r2, r1
 8008e96:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d01a      	beq.n	8008eda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	430a      	orrs	r2, r1
 8008eb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ebe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ec2:	d10a      	bne.n	8008eda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	430a      	orrs	r2, r1
 8008ed8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00a      	beq.n	8008efc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	430a      	orrs	r2, r1
 8008efa:	605a      	str	r2, [r3, #4]
  }
}
 8008efc:	bf00      	nop
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b098      	sub	sp, #96	@ 0x60
 8008f0c:	af02      	add	r7, sp, #8
 8008f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f18:	f7f8 fb96 	bl	8001648 <HAL_GetTick>
 8008f1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f003 0308 	and.w	r3, r3, #8
 8008f28:	2b08      	cmp	r3, #8
 8008f2a:	d12f      	bne.n	8008f8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f30:	9300      	str	r3, [sp, #0]
 8008f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f34:	2200      	movs	r2, #0
 8008f36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f88e 	bl	800905c <UART_WaitOnFlagUntilTimeout>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d022      	beq.n	8008f8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f4e:	e853 3f00 	ldrex	r3, [r3]
 8008f52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	461a      	mov	r2, r3
 8008f62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f64:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f6c:	e841 2300 	strex	r3, r2, [r1]
 8008f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d1e6      	bne.n	8008f46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2220      	movs	r2, #32
 8008f7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f88:	2303      	movs	r3, #3
 8008f8a:	e063      	b.n	8009054 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 0304 	and.w	r3, r3, #4
 8008f96:	2b04      	cmp	r3, #4
 8008f98:	d149      	bne.n	800902e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f857 	bl	800905c <UART_WaitOnFlagUntilTimeout>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d03c      	beq.n	800902e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fbc:	e853 3f00 	ldrex	r3, [r3]
 8008fc0:	623b      	str	r3, [r7, #32]
   return(result);
 8008fc2:	6a3b      	ldr	r3, [r7, #32]
 8008fc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fda:	e841 2300 	strex	r3, r2, [r1]
 8008fde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1e6      	bne.n	8008fb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	3308      	adds	r3, #8
 8008fec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	e853 3f00 	ldrex	r3, [r3]
 8008ff4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f023 0301 	bic.w	r3, r3, #1
 8008ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3308      	adds	r3, #8
 8009004:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009006:	61fa      	str	r2, [r7, #28]
 8009008:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900a:	69b9      	ldr	r1, [r7, #24]
 800900c:	69fa      	ldr	r2, [r7, #28]
 800900e:	e841 2300 	strex	r3, r2, [r1]
 8009012:	617b      	str	r3, [r7, #20]
   return(result);
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1e5      	bne.n	8008fe6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2220      	movs	r2, #32
 800901e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800902a:	2303      	movs	r3, #3
 800902c:	e012      	b.n	8009054 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2220      	movs	r2, #32
 8009032:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2220      	movs	r2, #32
 800903a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009052:	2300      	movs	r3, #0
}
 8009054:	4618      	mov	r0, r3
 8009056:	3758      	adds	r7, #88	@ 0x58
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	603b      	str	r3, [r7, #0]
 8009068:	4613      	mov	r3, r2
 800906a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800906c:	e04f      	b.n	800910e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009074:	d04b      	beq.n	800910e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009076:	f7f8 fae7 	bl	8001648 <HAL_GetTick>
 800907a:	4602      	mov	r2, r0
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	69ba      	ldr	r2, [r7, #24]
 8009082:	429a      	cmp	r2, r3
 8009084:	d302      	bcc.n	800908c <UART_WaitOnFlagUntilTimeout+0x30>
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d101      	bne.n	8009090 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800908c:	2303      	movs	r3, #3
 800908e:	e04e      	b.n	800912e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f003 0304 	and.w	r3, r3, #4
 800909a:	2b00      	cmp	r3, #0
 800909c:	d037      	beq.n	800910e <UART_WaitOnFlagUntilTimeout+0xb2>
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	2b80      	cmp	r3, #128	@ 0x80
 80090a2:	d034      	beq.n	800910e <UART_WaitOnFlagUntilTimeout+0xb2>
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	2b40      	cmp	r3, #64	@ 0x40
 80090a8:	d031      	beq.n	800910e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	69db      	ldr	r3, [r3, #28]
 80090b0:	f003 0308 	and.w	r3, r3, #8
 80090b4:	2b08      	cmp	r3, #8
 80090b6:	d110      	bne.n	80090da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2208      	movs	r2, #8
 80090be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f000 f838 	bl	8009136 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2208      	movs	r2, #8
 80090ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2200      	movs	r2, #0
 80090d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e029      	b.n	800912e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	69db      	ldr	r3, [r3, #28]
 80090e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090e8:	d111      	bne.n	800910e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80090f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f000 f81e 	bl	8009136 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2220      	movs	r2, #32
 80090fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2200      	movs	r2, #0
 8009106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800910a:	2303      	movs	r3, #3
 800910c:	e00f      	b.n	800912e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	69da      	ldr	r2, [r3, #28]
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	4013      	ands	r3, r2
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	429a      	cmp	r2, r3
 800911c:	bf0c      	ite	eq
 800911e:	2301      	moveq	r3, #1
 8009120:	2300      	movne	r3, #0
 8009122:	b2db      	uxtb	r3, r3
 8009124:	461a      	mov	r2, r3
 8009126:	79fb      	ldrb	r3, [r7, #7]
 8009128:	429a      	cmp	r2, r3
 800912a:	d0a0      	beq.n	800906e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009136:	b480      	push	{r7}
 8009138:	b095      	sub	sp, #84	@ 0x54
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009146:	e853 3f00 	ldrex	r3, [r3]
 800914a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800914c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009152:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	461a      	mov	r2, r3
 800915a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800915c:	643b      	str	r3, [r7, #64]	@ 0x40
 800915e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009160:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009162:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009164:	e841 2300 	strex	r3, r2, [r1]
 8009168:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800916a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1e6      	bne.n	800913e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	3308      	adds	r3, #8
 8009176:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009178:	6a3b      	ldr	r3, [r7, #32]
 800917a:	e853 3f00 	ldrex	r3, [r3]
 800917e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009186:	f023 0301 	bic.w	r3, r3, #1
 800918a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	3308      	adds	r3, #8
 8009192:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009194:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009196:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009198:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800919a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800919c:	e841 2300 	strex	r3, r2, [r1]
 80091a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1e3      	bne.n	8009170 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d118      	bne.n	80091e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	e853 3f00 	ldrex	r3, [r3]
 80091bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	f023 0310 	bic.w	r3, r3, #16
 80091c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	461a      	mov	r2, r3
 80091cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091ce:	61bb      	str	r3, [r7, #24]
 80091d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d2:	6979      	ldr	r1, [r7, #20]
 80091d4:	69ba      	ldr	r2, [r7, #24]
 80091d6:	e841 2300 	strex	r3, r2, [r1]
 80091da:	613b      	str	r3, [r7, #16]
   return(result);
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1e6      	bne.n	80091b0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2220      	movs	r2, #32
 80091e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80091f6:	bf00      	nop
 80091f8:	3754      	adds	r7, #84	@ 0x54
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr

08009202 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009202:	b480      	push	{r7}
 8009204:	b085      	sub	sp, #20
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009210:	2b01      	cmp	r3, #1
 8009212:	d101      	bne.n	8009218 <HAL_UARTEx_DisableFifoMode+0x16>
 8009214:	2302      	movs	r3, #2
 8009216:	e027      	b.n	8009268 <HAL_UARTEx_DisableFifoMode+0x66>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2224      	movs	r2, #36	@ 0x24
 8009224:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f022 0201 	bic.w	r2, r2, #1
 800923e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009246:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2220      	movs	r2, #32
 800925a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3714      	adds	r7, #20
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009284:	2b01      	cmp	r3, #1
 8009286:	d101      	bne.n	800928c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009288:	2302      	movs	r3, #2
 800928a:	e02d      	b.n	80092e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2224      	movs	r2, #36	@ 0x24
 8009298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f022 0201 	bic.w	r2, r2, #1
 80092b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	683a      	ldr	r2, [r7, #0]
 80092c4:	430a      	orrs	r2, r1
 80092c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 f84f 	bl	800936c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2220      	movs	r2, #32
 80092da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009300:	2b01      	cmp	r3, #1
 8009302:	d101      	bne.n	8009308 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009304:	2302      	movs	r3, #2
 8009306:	e02d      	b.n	8009364 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2224      	movs	r2, #36	@ 0x24
 8009314:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f022 0201 	bic.w	r2, r2, #1
 800932e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	430a      	orrs	r2, r1
 8009342:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 f811 	bl	800936c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2220      	movs	r2, #32
 8009356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	3710      	adds	r7, #16
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800936c:	b480      	push	{r7}
 800936e:	b085      	sub	sp, #20
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009378:	2b00      	cmp	r3, #0
 800937a:	d108      	bne.n	800938e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800938c:	e031      	b.n	80093f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800938e:	2308      	movs	r3, #8
 8009390:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009392:	2308      	movs	r3, #8
 8009394:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	0e5b      	lsrs	r3, r3, #25
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	f003 0307 	and.w	r3, r3, #7
 80093a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	0f5b      	lsrs	r3, r3, #29
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	f003 0307 	and.w	r3, r3, #7
 80093b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093b6:	7bbb      	ldrb	r3, [r7, #14]
 80093b8:	7b3a      	ldrb	r2, [r7, #12]
 80093ba:	4911      	ldr	r1, [pc, #68]	@ (8009400 <UARTEx_SetNbDataToProcess+0x94>)
 80093bc:	5c8a      	ldrb	r2, [r1, r2]
 80093be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80093c2:	7b3a      	ldrb	r2, [r7, #12]
 80093c4:	490f      	ldr	r1, [pc, #60]	@ (8009404 <UARTEx_SetNbDataToProcess+0x98>)
 80093c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
 80093d6:	7b7a      	ldrb	r2, [r7, #13]
 80093d8:	4909      	ldr	r1, [pc, #36]	@ (8009400 <UARTEx_SetNbDataToProcess+0x94>)
 80093da:	5c8a      	ldrb	r2, [r1, r2]
 80093dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80093e0:	7b7a      	ldrb	r2, [r7, #13]
 80093e2:	4908      	ldr	r1, [pc, #32]	@ (8009404 <UARTEx_SetNbDataToProcess+0x98>)
 80093e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80093f2:	bf00      	nop
 80093f4:	3714      	adds	r7, #20
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop
 8009400:	0800c7a8 	.word	0x0800c7a8
 8009404:	0800c7b0 	.word	0x0800c7b0

08009408 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b08e      	sub	sp, #56	@ 0x38
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
 8009414:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8009416:	2234      	movs	r2, #52	@ 0x34
 8009418:	2100      	movs	r1, #0
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f002 fb93 	bl	800bb46 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	f023 0303 	bic.w	r3, r3, #3
 8009426:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	68ba      	ldr	r2, [r7, #8]
 800942c:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	683a      	ldr	r2, [r7, #0]
 8009438:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	f1a3 0208 	sub.w	r2, r3, #8
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2202      	movs	r2, #2
 8009454:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800945a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	4413      	add	r3, r2
 8009460:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8009462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009464:	3b04      	subs	r3, #4
 8009466:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800946c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800946e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 8009470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009472:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009474:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8009476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009478:	3b04      	subs	r3, #4
 800947a:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800947c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800947e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8009480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800948a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800948c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 800948e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009490:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009492:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8009498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800949a:	3304      	adds	r3, #4
 800949c:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800949e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 80094a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a4:	4a1f      	ldr	r2, [pc, #124]	@ (8009524 <_tx_byte_pool_create+0x11c>)
 80094a6:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	621a      	str	r2, [r3, #32]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80094ae:	f3ef 8310 	mrs	r3, PRIMASK
 80094b2:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 80094b4:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 80094b6:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 80094b8:	b672      	cpsid	i
#endif
    return(int_posture);
 80094ba:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 80094bc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	4a19      	ldr	r2, [pc, #100]	@ (8009528 <_tx_byte_pool_create+0x120>)
 80094c2:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 80094c4:	4b19      	ldr	r3, [pc, #100]	@ (800952c <_tx_byte_pool_create+0x124>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d109      	bne.n	80094e0 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 80094cc:	4a18      	ldr	r2, [pc, #96]	@ (8009530 <_tx_byte_pool_create+0x128>)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80094de:	e011      	b.n	8009504 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 80094e0:	4b13      	ldr	r3, [pc, #76]	@ (8009530 <_tx_byte_pool_create+0x128>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 80094e6:	6a3b      	ldr	r3, [r7, #32]
 80094e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094ea:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 80094ec:	6a3b      	ldr	r3, [r7, #32]
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	69fa      	ldr	r2, [r7, #28]
 80094fc:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6a3a      	ldr	r2, [r7, #32]
 8009502:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8009504:	4b09      	ldr	r3, [pc, #36]	@ (800952c <_tx_byte_pool_create+0x124>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	3301      	adds	r3, #1
 800950a:	4a08      	ldr	r2, [pc, #32]	@ (800952c <_tx_byte_pool_create+0x124>)
 800950c:	6013      	str	r3, [r2, #0]
 800950e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009510:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	f383 8810 	msr	PRIMASK, r3
}
 8009518:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3738      	adds	r7, #56	@ 0x38
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	ffffeeee 	.word	0xffffeeee
 8009528:	42595445 	.word	0x42595445
 800952c:	200021b8 	.word	0x200021b8
 8009530:	200021b4 	.word	0x200021b4

08009534 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8009538:	f000 ff44 	bl	800a3c4 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800953c:	f001 fb4c 	bl	800abd8 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8009540:	4b12      	ldr	r3, [pc, #72]	@ (800958c <_tx_initialize_high_level+0x58>)
 8009542:	2200      	movs	r2, #0
 8009544:	601a      	str	r2, [r3, #0]
 8009546:	4b12      	ldr	r3, [pc, #72]	@ (8009590 <_tx_initialize_high_level+0x5c>)
 8009548:	2200      	movs	r2, #0
 800954a:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800954c:	4b11      	ldr	r3, [pc, #68]	@ (8009594 <_tx_initialize_high_level+0x60>)
 800954e:	2200      	movs	r2, #0
 8009550:	601a      	str	r2, [r3, #0]
 8009552:	4b11      	ldr	r3, [pc, #68]	@ (8009598 <_tx_initialize_high_level+0x64>)
 8009554:	2200      	movs	r2, #0
 8009556:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8009558:	4b10      	ldr	r3, [pc, #64]	@ (800959c <_tx_initialize_high_level+0x68>)
 800955a:	2200      	movs	r2, #0
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	4b10      	ldr	r3, [pc, #64]	@ (80095a0 <_tx_initialize_high_level+0x6c>)
 8009560:	2200      	movs	r2, #0
 8009562:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8009564:	4b0f      	ldr	r3, [pc, #60]	@ (80095a4 <_tx_initialize_high_level+0x70>)
 8009566:	2200      	movs	r2, #0
 8009568:	601a      	str	r2, [r3, #0]
 800956a:	4b0f      	ldr	r3, [pc, #60]	@ (80095a8 <_tx_initialize_high_level+0x74>)
 800956c:	2200      	movs	r2, #0
 800956e:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8009570:	4b0e      	ldr	r3, [pc, #56]	@ (80095ac <_tx_initialize_high_level+0x78>)
 8009572:	2200      	movs	r2, #0
 8009574:	601a      	str	r2, [r3, #0]
 8009576:	4b0e      	ldr	r3, [pc, #56]	@ (80095b0 <_tx_initialize_high_level+0x7c>)
 8009578:	2200      	movs	r2, #0
 800957a:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800957c:	4b0d      	ldr	r3, [pc, #52]	@ (80095b4 <_tx_initialize_high_level+0x80>)
 800957e:	2200      	movs	r2, #0
 8009580:	601a      	str	r2, [r3, #0]
 8009582:	4b0d      	ldr	r3, [pc, #52]	@ (80095b8 <_tx_initialize_high_level+0x84>)
 8009584:	2200      	movs	r2, #0
 8009586:	601a      	str	r2, [r3, #0]
#endif
}
 8009588:	bf00      	nop
 800958a:	bd80      	pop	{r7, pc}
 800958c:	2000218c 	.word	0x2000218c
 8009590:	20002190 	.word	0x20002190
 8009594:	20002194 	.word	0x20002194
 8009598:	20002198 	.word	0x20002198
 800959c:	2000219c 	.word	0x2000219c
 80095a0:	200021a0 	.word	0x200021a0
 80095a4:	200021ac 	.word	0x200021ac
 80095a8:	200021b0 	.word	0x200021b0
 80095ac:	200021b4 	.word	0x200021b4
 80095b0:	200021b8 	.word	0x200021b8
 80095b4:	200021a4 	.word	0x200021a4
 80095b8:	200021a8 	.word	0x200021a8

080095bc <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80095c0:	4b10      	ldr	r3, [pc, #64]	@ (8009604 <_tx_initialize_kernel_enter+0x48>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 80095c8:	d00c      	beq.n	80095e4 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80095ca:	4b0e      	ldr	r3, [pc, #56]	@ (8009604 <_tx_initialize_kernel_enter+0x48>)
 80095cc:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 80095d0:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 80095d2:	f7f6 fe5b 	bl	800028c <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 80095d6:	f7ff ffad 	bl	8009534 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 80095da:	4b0b      	ldr	r3, [pc, #44]	@ (8009608 <_tx_initialize_kernel_enter+0x4c>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	3301      	adds	r3, #1
 80095e0:	4a09      	ldr	r2, [pc, #36]	@ (8009608 <_tx_initialize_kernel_enter+0x4c>)
 80095e2:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80095e4:	4b07      	ldr	r3, [pc, #28]	@ (8009604 <_tx_initialize_kernel_enter+0x48>)
 80095e6:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 80095ea:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 80095ec:	4b07      	ldr	r3, [pc, #28]	@ (800960c <_tx_initialize_kernel_enter+0x50>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7f7 f8f5 	bl	80007e0 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80095f6:	4b03      	ldr	r3, [pc, #12]	@ (8009604 <_tx_initialize_kernel_enter+0x48>)
 80095f8:	2200      	movs	r2, #0
 80095fa:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80095fc:	f7f6 fe82 	bl	8000304 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8009600:	bf00      	nop
 8009602:	bd80      	pop	{r7, pc}
 8009604:	2000000c 	.word	0x2000000c
 8009608:	2000225c 	.word	0x2000225c
 800960c:	200021bc 	.word	0x200021bc

08009610 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b08e      	sub	sp, #56	@ 0x38
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800961a:	f3ef 8310 	mrs	r3, PRIMASK
 800961e:	623b      	str	r3, [r7, #32]
    return(posture);
 8009620:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8009622:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009624:	b672      	cpsid	i
    return(int_posture);
 8009626:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 8009628:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800962e:	4a37      	ldr	r2, [pc, #220]	@ (800970c <_tx_queue_cleanup+0xfc>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d161      	bne.n	80096f8 <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800963a:	683a      	ldr	r2, [r7, #0]
 800963c:	429a      	cmp	r2, r3
 800963e:	d15b      	bne.n	80096f8 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009644:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 8009646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009648:	2b00      	cmp	r3, #0
 800964a:	d055      	beq.n	80096f8 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 800964c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a2f      	ldr	r2, [pc, #188]	@ (8009710 <_tx_queue_cleanup+0x100>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d150      	bne.n	80096f8 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 8009656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800965a:	2b00      	cmp	r3, #0
 800965c:	d04c      	beq.n	80096f8 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 8009664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009668:	1e5a      	subs	r2, r3, #1
 800966a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966c:	62da      	str	r2, [r3, #44]	@ 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800966e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009672:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8009674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009676:	2b00      	cmp	r3, #0
 8009678:	d103      	bne.n	8009682 <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800967a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800967c:	2200      	movs	r2, #0
 800967e:	629a      	str	r2, [r3, #40]	@ 0x28
 8009680:	e013      	b.n	80096aa <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009686:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800968c:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800968e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009692:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8009694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009696:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009698:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 800969a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800969c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d102      	bne.n	80096aa <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 80096a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096a8:	629a      	str	r2, [r3, #40]	@ 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096ae:	2b05      	cmp	r3, #5
 80096b0:	d122      	bne.n	80096f8 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 80096b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d004      	beq.n	80096c4 <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	220b      	movs	r2, #11
 80096be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80096c2:	e003      	b.n	80096cc <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	220a      	movs	r2, #10
 80096c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80096cc:	4b11      	ldr	r3, [pc, #68]	@ (8009714 <_tx_queue_cleanup+0x104>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	3301      	adds	r3, #1
 80096d2:	4a10      	ldr	r2, [pc, #64]	@ (8009714 <_tx_queue_cleanup+0x104>)
 80096d4:	6013      	str	r3, [r2, #0]
 80096d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096d8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	f383 8810 	msr	PRIMASK, r3
}
 80096e0:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 ffb0 	bl	800a648 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80096e8:	f3ef 8310 	mrs	r3, PRIMASK
 80096ec:	61bb      	str	r3, [r7, #24]
    return(posture);
 80096ee:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80096f0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80096f2:	b672      	cpsid	i
    return(int_posture);
 80096f4:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80096f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80096f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096fa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f383 8810 	msr	PRIMASK, r3
}
 8009702:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8009704:	bf00      	nop
 8009706:	3738      	adds	r7, #56	@ 0x38
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	08009611 	.word	0x08009611
 8009710:	51554555 	.word	0x51554555
 8009714:	2000225c 	.word	0x2000225c

08009718 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b08c      	sub	sp, #48	@ 0x30
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	607a      	str	r2, [r7, #4]
 8009724:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 8009726:	2238      	movs	r2, #56	@ 0x38
 8009728:	2100      	movs	r1, #0
 800972a:	68f8      	ldr	r0, [r7, #12]
 800972c:	f002 fa0b 	bl	800bb46 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	68ba      	ldr	r2, [r7, #8]
 8009734:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009742:	fbb2 f3f3 	udiv	r3, r2, r3
 8009746:	62fb      	str	r3, [r7, #44]	@ 0x2c
    used_words =  capacity * message_size;
 8009748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	fb02 f303 	mul.w	r3, r2, r3
 8009750:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	683a      	ldr	r2, [r7, #0]
 8009756:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	699a      	ldr	r2, [r3, #24]
 800975c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	441a      	add	r2, r3
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	683a      	ldr	r2, [r7, #0]
 800976a:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009776:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800977c:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800977e:	f3ef 8310 	mrs	r3, PRIMASK
 8009782:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009784:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009786:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009788:	b672      	cpsid	i
    return(int_posture);
 800978a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 800978c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	4a18      	ldr	r2, [pc, #96]	@ (80097f4 <_tx_queue_create+0xdc>)
 8009792:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 8009794:	4b18      	ldr	r3, [pc, #96]	@ (80097f8 <_tx_queue_create+0xe0>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d109      	bne.n	80097b0 <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 800979c:	4a17      	ldr	r2, [pc, #92]	@ (80097fc <_tx_queue_create+0xe4>)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	631a      	str	r2, [r3, #48]	@ 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80097ae:	e011      	b.n	80097d4 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 80097b0:	4b12      	ldr	r3, [pc, #72]	@ (80097fc <_tx_queue_create+0xe4>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 80097b6:	6a3b      	ldr	r3, [r7, #32]
 80097b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097ba:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 80097bc:	6a3b      	ldr	r3, [r7, #32]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	635a      	str	r2, [r3, #52]	@ 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	69fa      	ldr	r2, [r7, #28]
 80097cc:	635a      	str	r2, [r3, #52]	@ 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6a3a      	ldr	r2, [r7, #32]
 80097d2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 80097d4:	4b08      	ldr	r3, [pc, #32]	@ (80097f8 <_tx_queue_create+0xe0>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	3301      	adds	r3, #1
 80097da:	4a07      	ldr	r2, [pc, #28]	@ (80097f8 <_tx_queue_create+0xe0>)
 80097dc:	6013      	str	r3, [r2, #0]
 80097de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	f383 8810 	msr	PRIMASK, r3
}
 80097e8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3730      	adds	r7, #48	@ 0x30
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	51554555 	.word	0x51554555
 80097f8:	20002198 	.word	0x20002198
 80097fc:	20002194 	.word	0x20002194

08009800 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b096      	sub	sp, #88	@ 0x58
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800980c:	2300      	movs	r3, #0
 800980e:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009810:	f3ef 8310 	mrs	r3, PRIMASK
 8009814:	633b      	str	r3, [r7, #48]	@ 0x30
    return(posture);
 8009816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    int_posture = __get_interrupt_posture();
 8009818:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800981a:	b672      	cpsid	i
    return(int_posture);
 800981c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 800981e:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009824:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	2b00      	cmp	r3, #0
 800982c:	f000 8136 	beq.w	8009a9c <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8009830:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009832:	2b00      	cmp	r3, #0
 8009834:	d13c      	bne.n	80098b0 <_tx_queue_receive+0xb0>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6a1b      	ldr	r3, [r3, #32]
 800983a:	657b      	str	r3, [r7, #84]	@ 0x54
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	653b      	str	r3, [r7, #80]	@ 0x50
            size =         queue_ptr -> tx_queue_message_size;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8009846:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009848:	1d13      	adds	r3, r2, #4
 800984a:	657b      	str	r3, [r7, #84]	@ 0x54
 800984c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800984e:	1d19      	adds	r1, r3, #4
 8009850:	6539      	str	r1, [r7, #80]	@ 0x50
 8009852:	6812      	ldr	r2, [r2, #0]
 8009854:	601a      	str	r2, [r3, #0]
 8009856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009858:	2b01      	cmp	r3, #1
 800985a:	d90e      	bls.n	800987a <_tx_queue_receive+0x7a>
 800985c:	e007      	b.n	800986e <_tx_queue_receive+0x6e>
 800985e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009860:	1d13      	adds	r3, r2, #4
 8009862:	657b      	str	r3, [r7, #84]	@ 0x54
 8009864:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009866:	1d19      	adds	r1, r3, #4
 8009868:	6539      	str	r1, [r7, #80]	@ 0x50
 800986a:	6812      	ldr	r2, [r2, #0]
 800986c:	601a      	str	r2, [r3, #0]
 800986e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009870:	3b01      	subs	r3, #1
 8009872:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009874:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1f1      	bne.n	800985e <_tx_queue_receive+0x5e>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	69db      	ldr	r3, [r3, #28]
 800987e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009880:	429a      	cmp	r2, r3
 8009882:	d102      	bne.n	800988a <_tx_queue_receive+0x8a>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	699b      	ldr	r3, [r3, #24]
 8009888:	657b      	str	r3, [r7, #84]	@ 0x54
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800988e:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	695b      	ldr	r3, [r3, #20]
 8009894:	1c5a      	adds	r2, r3, #1
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	1e5a      	subs	r2, r3, #1
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	611a      	str	r2, [r3, #16]
 80098a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80098a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098aa:	f383 8810 	msr	PRIMASK, r3
}
 80098ae:	e163      	b.n	8009b78 <_tx_queue_receive+0x378>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b4:	63fb      	str	r3, [r7, #60]	@ 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 80098b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d153      	bne.n	8009968 <_tx_queue_receive+0x168>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 80098c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098c4:	657b      	str	r3, [r7, #84]	@ 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	653b      	str	r3, [r7, #80]	@ 0x50
                size =         queue_ptr -> tx_queue_message_size;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80098d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80098d2:	1d13      	adds	r3, r2, #4
 80098d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80098d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098d8:	1d19      	adds	r1, r3, #4
 80098da:	6539      	str	r1, [r7, #80]	@ 0x50
 80098dc:	6812      	ldr	r2, [r2, #0]
 80098de:	601a      	str	r2, [r3, #0]
 80098e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d90e      	bls.n	8009904 <_tx_queue_receive+0x104>
 80098e6:	e007      	b.n	80098f8 <_tx_queue_receive+0xf8>
 80098e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80098ea:	1d13      	adds	r3, r2, #4
 80098ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80098ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098f0:	1d19      	adds	r1, r3, #4
 80098f2:	6539      	str	r1, [r7, #80]	@ 0x50
 80098f4:	6812      	ldr	r2, [r2, #0]
 80098f6:	601a      	str	r2, [r3, #0]
 80098f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098fa:	3b01      	subs	r3, #1
 80098fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009900:	2b00      	cmp	r3, #0
 8009902:	d1f1      	bne.n	80098e8 <_tx_queue_receive+0xe8>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8009904:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009906:	3b01      	subs	r3, #1
 8009908:	643b      	str	r3, [r7, #64]	@ 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800990a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800990c:	2b00      	cmp	r3, #0
 800990e:	d103      	bne.n	8009918 <_tx_queue_receive+0x118>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2200      	movs	r2, #0
 8009914:	629a      	str	r2, [r3, #40]	@ 0x28
 8009916:	e00e      	b.n	8009936 <_tx_queue_receive+0x136>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8009918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800991a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800991c:	63bb      	str	r3, [r7, #56]	@ 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009922:	629a      	str	r2, [r3, #40]	@ 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8009924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009926:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009928:	637b      	str	r3, [r7, #52]	@ 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 800992a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800992c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800992e:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 8009930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009932:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009934:	671a      	str	r2, [r3, #112]	@ 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800993a:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800993c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800993e:	2200      	movs	r2, #0
 8009940:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8009942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009944:	2200      	movs	r2, #0
 8009946:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800994a:	4b8e      	ldr	r3, [pc, #568]	@ (8009b84 <_tx_queue_receive+0x384>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	3301      	adds	r3, #1
 8009950:	4a8c      	ldr	r2, [pc, #560]	@ (8009b84 <_tx_queue_receive+0x384>)
 8009952:	6013      	str	r3, [r2, #0]
 8009954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009956:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800995a:	f383 8810 	msr	PRIMASK, r3
}
 800995e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8009960:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009962:	f000 fe71 	bl	800a648 <_tx_thread_system_resume>
 8009966:	e107      	b.n	8009b78 <_tx_queue_receive+0x378>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6a1b      	ldr	r3, [r3, #32]
 800996c:	657b      	str	r3, [r7, #84]	@ 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	653b      	str	r3, [r7, #80]	@ 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8009978:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800997a:	1d13      	adds	r3, r2, #4
 800997c:	657b      	str	r3, [r7, #84]	@ 0x54
 800997e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009980:	1d19      	adds	r1, r3, #4
 8009982:	6539      	str	r1, [r7, #80]	@ 0x50
 8009984:	6812      	ldr	r2, [r2, #0]
 8009986:	601a      	str	r2, [r3, #0]
 8009988:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800998a:	2b01      	cmp	r3, #1
 800998c:	d90e      	bls.n	80099ac <_tx_queue_receive+0x1ac>
 800998e:	e007      	b.n	80099a0 <_tx_queue_receive+0x1a0>
 8009990:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009992:	1d13      	adds	r3, r2, #4
 8009994:	657b      	str	r3, [r7, #84]	@ 0x54
 8009996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009998:	1d19      	adds	r1, r3, #4
 800999a:	6539      	str	r1, [r7, #80]	@ 0x50
 800999c:	6812      	ldr	r2, [r2, #0]
 800999e:	601a      	str	r2, [r3, #0]
 80099a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099a2:	3b01      	subs	r3, #1
 80099a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1f1      	bne.n	8009990 <_tx_queue_receive+0x190>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	69db      	ldr	r3, [r3, #28]
 80099b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d102      	bne.n	80099bc <_tx_queue_receive+0x1bc>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	699b      	ldr	r3, [r3, #24]
 80099ba:	657b      	str	r3, [r7, #84]	@ 0x54
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80099c0:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 80099c2:	4b70      	ldr	r3, [pc, #448]	@ (8009b84 <_tx_queue_receive+0x384>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	3301      	adds	r3, #1
 80099c8:	4a6e      	ldr	r2, [pc, #440]	@ (8009b84 <_tx_queue_receive+0x384>)
 80099ca:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 80099cc:	4b6d      	ldr	r3, [pc, #436]	@ (8009b84 <_tx_queue_receive+0x384>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	3b01      	subs	r3, #1
 80099d2:	4a6c      	ldr	r2, [pc, #432]	@ (8009b84 <_tx_queue_receive+0x384>)
 80099d4:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 80099d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099da:	657b      	str	r3, [r7, #84]	@ 0x54
                destination =  queue_ptr -> tx_queue_write;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099e0:	653b      	str	r3, [r7, #80]	@ 0x50
                size =         queue_ptr -> tx_queue_message_size;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80099e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80099ea:	1d13      	adds	r3, r2, #4
 80099ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80099ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099f0:	1d19      	adds	r1, r3, #4
 80099f2:	6539      	str	r1, [r7, #80]	@ 0x50
 80099f4:	6812      	ldr	r2, [r2, #0]
 80099f6:	601a      	str	r2, [r3, #0]
 80099f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d90e      	bls.n	8009a1c <_tx_queue_receive+0x21c>
 80099fe:	e007      	b.n	8009a10 <_tx_queue_receive+0x210>
 8009a00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009a02:	1d13      	adds	r3, r2, #4
 8009a04:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a08:	1d19      	adds	r1, r3, #4
 8009a0a:	6539      	str	r1, [r7, #80]	@ 0x50
 8009a0c:	6812      	ldr	r2, [r2, #0]
 8009a0e:	601a      	str	r2, [r3, #0]
 8009a10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a12:	3b01      	subs	r3, #1
 8009a14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d1f1      	bne.n	8009a00 <_tx_queue_receive+0x200>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	69db      	ldr	r3, [r3, #28]
 8009a20:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d102      	bne.n	8009a2c <_tx_queue_receive+0x22c>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	699b      	ldr	r3, [r3, #24]
 8009a2a:	653b      	str	r3, [r7, #80]	@ 0x50
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009a30:	625a      	str	r2, [r3, #36]	@ 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a36:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8009a38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	643b      	str	r3, [r7, #64]	@ 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 8009a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d103      	bne.n	8009a4c <_tx_queue_receive+0x24c>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2200      	movs	r2, #0
 8009a48:	629a      	str	r2, [r3, #40]	@ 0x28
 8009a4a:	e00e      	b.n	8009a6a <_tx_queue_receive+0x26a>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8009a4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a50:	63bb      	str	r3, [r7, #56]	@ 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a56:	629a      	str	r2, [r3, #40]	@ 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8009a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a5c:	637b      	str	r3, [r7, #52]	@ 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 8009a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009a62:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 8009a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a68:	671a      	str	r2, [r3, #112]	@ 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a6e:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a72:	2200      	movs	r2, #0
 8009a74:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8009a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8009a7e:	4b41      	ldr	r3, [pc, #260]	@ (8009b84 <_tx_queue_receive+0x384>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	3301      	adds	r3, #1
 8009a84:	4a3f      	ldr	r2, [pc, #252]	@ (8009b84 <_tx_queue_receive+0x384>)
 8009a86:	6013      	str	r3, [r2, #0]
 8009a88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a8a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009a8c:	6a3b      	ldr	r3, [r7, #32]
 8009a8e:	f383 8810 	msr	PRIMASK, r3
}
 8009a92:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8009a94:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009a96:	f000 fdd7 	bl	800a648 <_tx_thread_system_resume>
 8009a9a:	e06d      	b.n	8009b78 <_tx_queue_receive+0x378>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d062      	beq.n	8009b68 <_tx_queue_receive+0x368>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8009aa2:	4b38      	ldr	r3, [pc, #224]	@ (8009b84 <_tx_queue_receive+0x384>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d008      	beq.n	8009abc <_tx_queue_receive+0x2bc>
 8009aaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009aac:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	f383 8810 	msr	PRIMASK, r3
}
 8009ab4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 8009ab6:	230a      	movs	r3, #10
 8009ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009aba:	e05d      	b.n	8009b78 <_tx_queue_receive+0x378>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8009abc:	4b32      	ldr	r3, [pc, #200]	@ (8009b88 <_tx_queue_receive+0x388>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8009ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ac4:	4a31      	ldr	r2, [pc, #196]	@ (8009b8c <_tx_queue_receive+0x38c>)
 8009ac6:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8009ac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aca:	68fa      	ldr	r2, [r7, #12]
 8009acc:	66da      	str	r2, [r3, #108]	@ 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 8009ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	67da      	str	r2, [r3, #124]	@ 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8009ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8009adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ade:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009ae2:	1c5a      	adds	r2, r3, #1
 8009ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ae6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8009aea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d109      	bne.n	8009b04 <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009af4:	629a      	str	r2, [r3, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8009af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009af8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009afa:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8009afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009afe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009b00:	675a      	str	r2, [r3, #116]	@ 0x74
 8009b02:	e011      	b.n	8009b28 <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b08:	63bb      	str	r3, [r7, #56]	@ 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8009b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b0e:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8009b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b14:	637b      	str	r3, [r7, #52]	@ 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8009b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b1a:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8009b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b1e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009b20:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8009b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009b26:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8009b28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b2a:	1c5a      	adds	r2, r3, #1
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8009b30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b32:	2205      	movs	r2, #5
 8009b34:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009b36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b38:	2201      	movs	r2, #1
 8009b3a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8009b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8009b42:	4b10      	ldr	r3, [pc, #64]	@ (8009b84 <_tx_queue_receive+0x384>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	3301      	adds	r3, #1
 8009b48:	4a0e      	ldr	r2, [pc, #56]	@ (8009b84 <_tx_queue_receive+0x384>)
 8009b4a:	6013      	str	r3, [r2, #0]
 8009b4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b4e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	f383 8810 	msr	PRIMASK, r3
}
 8009b56:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8009b58:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009b5a:	f000 fe75 	bl	800a848 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8009b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b66:	e007      	b.n	8009b78 <_tx_queue_receive+0x378>
 8009b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b6a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	f383 8810 	msr	PRIMASK, r3
}
 8009b72:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 8009b74:	230a      	movs	r3, #10
 8009b76:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    /* Return completion status.  */
    return(status);
 8009b78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3758      	adds	r7, #88	@ 0x58
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	2000225c 	.word	0x2000225c
 8009b88:	200021c4 	.word	0x200021c4
 8009b8c:	08009611 	.word	0x08009611

08009b90 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b094      	sub	sp, #80	@ 0x50
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009ba0:	f3ef 8310 	mrs	r3, PRIMASK
 8009ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8009ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8009ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8009baa:	b672      	cpsid	i
    return(int_posture);
 8009bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 8009bae:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bb4:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	695b      	ldr	r3, [r3, #20]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f000 809b 	beq.w	8009cf6 <_tx_queue_send+0x166>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8009bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d13c      	bne.n	8009c40 <_tx_queue_send+0xb0>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	695b      	ldr	r3, [r3, #20]
 8009bca:	1e5a      	subs	r2, r3, #1
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	691b      	ldr	r3, [r3, #16]
 8009bd4:	1c5a      	adds	r2, r3, #1
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
            destination =  queue_ptr -> tx_queue_write;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009be2:	64bb      	str	r3, [r7, #72]	@ 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8009bea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009bec:	1d13      	adds	r3, r2, #4
 8009bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bf2:	1d19      	adds	r1, r3, #4
 8009bf4:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009bf6:	6812      	ldr	r2, [r2, #0]
 8009bf8:	601a      	str	r2, [r3, #0]
 8009bfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d90e      	bls.n	8009c1e <_tx_queue_send+0x8e>
 8009c00:	e007      	b.n	8009c12 <_tx_queue_send+0x82>
 8009c02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009c04:	1d13      	adds	r3, r2, #4
 8009c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c0a:	1d19      	adds	r1, r3, #4
 8009c0c:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009c0e:	6812      	ldr	r2, [r2, #0]
 8009c10:	601a      	str	r2, [r3, #0]
 8009c12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c14:	3b01      	subs	r3, #1
 8009c16:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1f1      	bne.n	8009c02 <_tx_queue_send+0x72>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	69db      	ldr	r3, [r3, #28]
 8009c22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d102      	bne.n	8009c2e <_tx_queue_send+0x9e>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	699b      	ldr	r3, [r3, #24]
 8009c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c32:	625a      	str	r2, [r3, #36]	@ 0x24
 8009c34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c36:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009c38:	6a3b      	ldr	r3, [r7, #32]
 8009c3a:	f383 8810 	msr	PRIMASK, r3
}
 8009c3e:	e0c8      	b.n	8009dd2 <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c44:	637b      	str	r3, [r7, #52]	@ 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 8009c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 8009c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d103      	bne.n	8009c5a <_tx_queue_send+0xca>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2200      	movs	r2, #0
 8009c56:	629a      	str	r2, [r3, #40]	@ 0x28
 8009c58:	e012      	b.n	8009c80 <_tx_queue_send+0xf0>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8009c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c5c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8009c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c66:	633b      	str	r3, [r7, #48]	@ 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c6c:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8009c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 8009c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c78:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 8009c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c7e:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c84:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c88:	2200      	movs	r2, #0
 8009c8a:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8009c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c94:	64bb      	str	r3, [r7, #72]	@ 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	689b      	ldr	r3, [r3, #8]
 8009c9a:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8009c9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009c9e:	1d13      	adds	r3, r2, #4
 8009ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ca4:	1d19      	adds	r1, r3, #4
 8009ca6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009ca8:	6812      	ldr	r2, [r2, #0]
 8009caa:	601a      	str	r2, [r3, #0]
 8009cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d90e      	bls.n	8009cd0 <_tx_queue_send+0x140>
 8009cb2:	e007      	b.n	8009cc4 <_tx_queue_send+0x134>
 8009cb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009cb6:	1d13      	adds	r3, r2, #4
 8009cb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009cba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cbc:	1d19      	adds	r1, r3, #4
 8009cbe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009cc0:	6812      	ldr	r2, [r2, #0]
 8009cc2:	601a      	str	r2, [r3, #0]
 8009cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d1f1      	bne.n	8009cb4 <_tx_queue_send+0x124>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8009cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8009cd8:	4b40      	ldr	r3, [pc, #256]	@ (8009ddc <_tx_queue_send+0x24c>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	3301      	adds	r3, #1
 8009cde:	4a3f      	ldr	r2, [pc, #252]	@ (8009ddc <_tx_queue_send+0x24c>)
 8009ce0:	6013      	str	r3, [r2, #0]
 8009ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ce4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ce6:	69fb      	ldr	r3, [r7, #28]
 8009ce8:	f383 8810 	msr	PRIMASK, r3
}
 8009cec:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 8009cee:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8009cf0:	f000 fcaa 	bl	800a648 <_tx_thread_system_resume>
 8009cf4:	e06d      	b.n	8009dd2 <_tx_queue_send+0x242>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d062      	beq.n	8009dc2 <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8009cfc:	4b37      	ldr	r3, [pc, #220]	@ (8009ddc <_tx_queue_send+0x24c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d008      	beq.n	8009d16 <_tx_queue_send+0x186>
 8009d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d06:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	f383 8810 	msr	PRIMASK, r3
}
 8009d0e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 8009d10:	230b      	movs	r3, #11
 8009d12:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d14:	e05d      	b.n	8009dd2 <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8009d16:	4b32      	ldr	r3, [pc, #200]	@ (8009de0 <_tx_queue_send+0x250>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8009d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d1e:	4a31      	ldr	r2, [pc, #196]	@ (8009de4 <_tx_queue_send+0x254>)
 8009d20:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8009d22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	66da      	str	r2, [r3, #108]	@ 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 8009d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d2a:	68ba      	ldr	r2, [r7, #8]
 8009d2c:	67da      	str	r2, [r3, #124]	@ 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8009d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d30:	2200      	movs	r2, #0
 8009d32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8009d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009d3c:	1c5a      	adds	r2, r3, #1
 8009d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d40:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8009d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d109      	bne.n	8009d5e <_tx_queue_send+0x1ce>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d4e:	629a      	str	r2, [r3, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8009d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d54:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8009d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d5a:	675a      	str	r2, [r3, #116]	@ 0x74
 8009d5c:	e011      	b.n	8009d82 <_tx_queue_send+0x1f2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d62:	633b      	str	r3, [r7, #48]	@ 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8009d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d68:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8009d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8009d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d74:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8009d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d7a:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d80:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8009d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d84:	1c5a      	adds	r2, r3, #1
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8009d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d8c:	2205      	movs	r2, #5
 8009d8e:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d92:	2201      	movs	r2, #1
 8009d94:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8009d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8009d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8009ddc <_tx_queue_send+0x24c>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	3301      	adds	r3, #1
 8009da2:	4a0e      	ldr	r2, [pc, #56]	@ (8009ddc <_tx_queue_send+0x24c>)
 8009da4:	6013      	str	r3, [r2, #0]
 8009da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009da8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	f383 8810 	msr	PRIMASK, r3
}
 8009db0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8009db2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8009db4:	f000 fd48 	bl	800a848 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8009db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009dbe:	643b      	str	r3, [r7, #64]	@ 0x40
 8009dc0:	e007      	b.n	8009dd2 <_tx_queue_send+0x242>
 8009dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dc4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	f383 8810 	msr	PRIMASK, r3
}
 8009dcc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 8009dce:	230b      	movs	r3, #11
 8009dd0:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    /* Return completion status.  */
    return(status);
 8009dd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3750      	adds	r7, #80	@ 0x50
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	2000225c 	.word	0x2000225c
 8009de0:	200021c4 	.word	0x200021c4
 8009de4:	08009611 	.word	0x08009611

08009de8 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b08e      	sub	sp, #56	@ 0x38
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009df2:	f3ef 8310 	mrs	r3, PRIMASK
 8009df6:	623b      	str	r3, [r7, #32]
    return(posture);
 8009df8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8009dfa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009dfc:	b672      	cpsid	i
    return(int_posture);
 8009dfe:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8009e00:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e06:	4a33      	ldr	r2, [pc, #204]	@ (8009ed4 <_tx_semaphore_cleanup+0xec>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d158      	bne.n	8009ebe <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009e12:	683a      	ldr	r2, [r7, #0]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d152      	bne.n	8009ebe <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e1c:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 8009e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d04c      	beq.n	8009ebe <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8009e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a2b      	ldr	r2, [pc, #172]	@ (8009ed8 <_tx_semaphore_cleanup+0xf0>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d147      	bne.n	8009ebe <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8009e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d043      	beq.n	8009ebe <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8009e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e3e:	691b      	ldr	r3, [r3, #16]
 8009e40:	1e5a      	subs	r2, r3, #1
 8009e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e44:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8009e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8009e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d103      	bne.n	8009e5a <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8009e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e54:	2200      	movs	r2, #0
 8009e56:	60da      	str	r2, [r3, #12]
 8009e58:	e013      	b.n	8009e82 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e64:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8009e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e6a:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8009e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e70:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8009e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d102      	bne.n	8009e82 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8009e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e80:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e86:	2b06      	cmp	r3, #6
 8009e88:	d119      	bne.n	8009ebe <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	220d      	movs	r2, #13
 8009e8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8009e92:	4b12      	ldr	r3, [pc, #72]	@ (8009edc <_tx_semaphore_cleanup+0xf4>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	3301      	adds	r3, #1
 8009e98:	4a10      	ldr	r2, [pc, #64]	@ (8009edc <_tx_semaphore_cleanup+0xf4>)
 8009e9a:	6013      	str	r3, [r2, #0]
 8009e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e9e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	f383 8810 	msr	PRIMASK, r3
}
 8009ea6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 fbcd 	bl	800a648 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009eae:	f3ef 8310 	mrs	r3, PRIMASK
 8009eb2:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009eb4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009eb6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009eb8:	b672      	cpsid	i
    return(int_posture);
 8009eba:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8009ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ec0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f383 8810 	msr	PRIMASK, r3
}
 8009ec8:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8009eca:	bf00      	nop
 8009ecc:	3738      	adds	r7, #56	@ 0x38
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	08009de9 	.word	0x08009de9
 8009ed8:	53454d41 	.word	0x53454d41
 8009edc:	2000225c 	.word	0x2000225c

08009ee0 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b08a      	sub	sp, #40	@ 0x28
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8009eec:	221c      	movs	r2, #28
 8009eee:	2100      	movs	r1, #0
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f001 fe28 	bl	800bb46 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	68ba      	ldr	r2, [r7, #8]
 8009efa:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009f02:	f3ef 8310 	mrs	r3, PRIMASK
 8009f06:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009f08:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009f0a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009f0c:	b672      	cpsid	i
    return(int_posture);
 8009f0e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8009f10:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	4a18      	ldr	r2, [pc, #96]	@ (8009f78 <_tx_semaphore_create+0x98>)
 8009f16:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8009f18:	4b18      	ldr	r3, [pc, #96]	@ (8009f7c <_tx_semaphore_create+0x9c>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d109      	bne.n	8009f34 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8009f20:	4a17      	ldr	r2, [pc, #92]	@ (8009f80 <_tx_semaphore_create+0xa0>)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	68fa      	ldr	r2, [r7, #12]
 8009f30:	619a      	str	r2, [r3, #24]
 8009f32:	e011      	b.n	8009f58 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8009f34:	4b12      	ldr	r3, [pc, #72]	@ (8009f80 <_tx_semaphore_create+0xa0>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8009f3a:	6a3b      	ldr	r3, [r7, #32]
 8009f3c:	699b      	ldr	r3, [r3, #24]
 8009f3e:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8009f40:	6a3b      	ldr	r3, [r7, #32]
 8009f42:	68fa      	ldr	r2, [r7, #12]
 8009f44:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	69fa      	ldr	r2, [r7, #28]
 8009f50:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6a3a      	ldr	r2, [r7, #32]
 8009f56:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8009f58:	4b08      	ldr	r3, [pc, #32]	@ (8009f7c <_tx_semaphore_create+0x9c>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	4a07      	ldr	r2, [pc, #28]	@ (8009f7c <_tx_semaphore_create+0x9c>)
 8009f60:	6013      	str	r3, [r2, #0]
 8009f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f64:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	f383 8810 	msr	PRIMASK, r3
}
 8009f6c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3728      	adds	r7, #40	@ 0x28
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	53454d41 	.word	0x53454d41
 8009f7c:	20002190 	.word	0x20002190
 8009f80:	2000218c 	.word	0x2000218c

08009f84 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b08e      	sub	sp, #56	@ 0x38
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009f92:	f3ef 8310 	mrs	r3, PRIMASK
 8009f96:	623b      	str	r3, [r7, #32]
    return(posture);
 8009f98:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8009f9a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009f9c:	b672      	cpsid	i
    return(int_posture);
 8009f9e:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8009fa0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d00a      	beq.n	8009fc0 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	1e5a      	subs	r2, r3, #1
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	609a      	str	r2, [r3, #8]
 8009fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009fb8:	69bb      	ldr	r3, [r7, #24]
 8009fba:	f383 8810 	msr	PRIMASK, r3
}
 8009fbe:	e068      	b.n	800a092 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d05d      	beq.n	800a082 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8009fc6:	4b35      	ldr	r3, [pc, #212]	@ (800a09c <_tx_semaphore_get+0x118>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d008      	beq.n	8009fe0 <_tx_semaphore_get+0x5c>
 8009fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	f383 8810 	msr	PRIMASK, r3
}
 8009fd8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 8009fda:	230d      	movs	r3, #13
 8009fdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fde:	e058      	b.n	800a092 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8009fe0:	4b2f      	ldr	r3, [pc, #188]	@ (800a0a0 <_tx_semaphore_get+0x11c>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8009fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fe8:	4a2e      	ldr	r2, [pc, #184]	@ (800a0a4 <_tx_semaphore_get+0x120>)
 8009fea:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8009fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8009ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009ff8:	1c5a      	adds	r2, r3, #1
 8009ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ffc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	691b      	ldr	r3, [r3, #16]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d109      	bne.n	800a01c <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a00c:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800a00e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a010:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a012:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800a014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a016:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a018:	675a      	str	r2, [r3, #116]	@ 0x74
 800a01a:	e011      	b.n	800a040 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	62bb      	str	r3, [r7, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800a022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a024:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a026:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800a028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a02c:	627b      	str	r3, [r7, #36]	@ 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800a02e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a032:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800a034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a036:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a038:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800a03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a03c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a03e:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	691b      	ldr	r3, [r3, #16]
 800a044:	1c5a      	adds	r2, r3, #1
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800a04a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a04c:	2206      	movs	r2, #6
 800a04e:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a052:	2201      	movs	r2, #1
 800a054:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800a056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a058:	683a      	ldr	r2, [r7, #0]
 800a05a:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800a05c:	4b0f      	ldr	r3, [pc, #60]	@ (800a09c <_tx_semaphore_get+0x118>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	3301      	adds	r3, #1
 800a062:	4a0e      	ldr	r2, [pc, #56]	@ (800a09c <_tx_semaphore_get+0x118>)
 800a064:	6013      	str	r3, [r2, #0]
 800a066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a068:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	f383 8810 	msr	PRIMASK, r3
}
 800a070:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800a072:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a074:	f000 fbe8 	bl	800a848 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800a078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a07a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a07e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a080:	e007      	b.n	800a092 <_tx_semaphore_get+0x10e>
 800a082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a084:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f383 8810 	msr	PRIMASK, r3
}
 800a08c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800a08e:	230d      	movs	r3, #13
 800a090:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    /* Return completion status.  */
    return(status);
 800a092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a094:	4618      	mov	r0, r3
 800a096:	3738      	adds	r7, #56	@ 0x38
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	2000225c 	.word	0x2000225c
 800a0a0:	200021c4 	.word	0x200021c4
 800a0a4:	08009de9 	.word	0x08009de9

0800a0a8 <_tx_semaphore_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_info_get(TX_SEMAPHORE *semaphore_ptr, CHAR **name, ULONG *current_value,
                    TX_THREAD **first_suspended, ULONG *suspended_count,
                    TX_SEMAPHORE **next_semaphore)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b089      	sub	sp, #36	@ 0x24
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
 800a0b4:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a0b6:	f3ef 8310 	mrs	r3, PRIMASK
 800a0ba:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a0bc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a0be:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a0c0:	b672      	cpsid	i
    return(int_posture);
 800a0c2:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800a0c4:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the semaphore.  */
    if (name != TX_NULL)
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d003      	beq.n	800a0d4 <_tx_semaphore_info_get+0x2c>
    {

        *name =  semaphore_ptr -> tx_semaphore_name;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	685a      	ldr	r2, [r3, #4]
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the current value of the semaphore.  */
    if (current_value != TX_NULL)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d003      	beq.n	800a0e2 <_tx_semaphore_info_get+0x3a>
    {

        *current_value =  semaphore_ptr -> tx_semaphore_count;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	689a      	ldr	r2, [r3, #8]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the first thread suspended on this semaphore.  */
    if (first_suspended != TX_NULL)
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d003      	beq.n	800a0f0 <_tx_semaphore_info_get+0x48>
    {

        *first_suspended =  semaphore_ptr -> tx_semaphore_suspension_list;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	68da      	ldr	r2, [r3, #12]
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the number of threads suspended on this semaphore.  */
    if (suspended_count != TX_NULL)
 800a0f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d003      	beq.n	800a0fe <_tx_semaphore_info_get+0x56>
    {

        *suspended_count =  (ULONG) semaphore_ptr -> tx_semaphore_suspended_count;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	691a      	ldr	r2, [r3, #16]
 800a0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0fc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the pointer to the next semaphore created.  */
    if (next_semaphore != TX_NULL)
 800a0fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a100:	2b00      	cmp	r3, #0
 800a102:	d003      	beq.n	800a10c <_tx_semaphore_info_get+0x64>
    {

        *next_semaphore =  semaphore_ptr -> tx_semaphore_created_next;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	695a      	ldr	r2, [r3, #20]
 800a108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a10a:	601a      	str	r2, [r3, #0]
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	f383 8810 	msr	PRIMASK, r3
}
 800a116:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3724      	adds	r7, #36	@ 0x24
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr
	...

0800a128 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b08c      	sub	sp, #48	@ 0x30
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a130:	f3ef 8310 	mrs	r3, PRIMASK
 800a134:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a136:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a138:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a13a:	b672      	cpsid	i
    return(int_posture);
 800a13c:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800a13e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	691b      	ldr	r3, [r3, #16]
 800a144:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800a146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d10a      	bne.n	800a162 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	1c5a      	adds	r2, r3, #1
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	609a      	str	r2, [r3, #8]
 800a156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a158:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	f383 8810 	msr	PRIMASK, r3
}
 800a160:	e033      	b.n	800a1ca <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800a168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a16a:	3b01      	subs	r3, #1
 800a16c:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800a16e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a170:	2b00      	cmp	r3, #0
 800a172:	d103      	bne.n	800a17c <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	60da      	str	r2, [r3, #12]
 800a17a:	e00e      	b.n	800a19a <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800a17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a17e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a180:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a3a      	ldr	r2, [r7, #32]
 800a186:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800a188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a18a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a18c:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800a18e:	6a3b      	ldr	r3, [r7, #32]
 800a190:	69fa      	ldr	r2, [r7, #28]
 800a192:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	6a3a      	ldr	r2, [r7, #32]
 800a198:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a19e:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	669a      	str	r2, [r3, #104]	@ 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800a1ae:	4b09      	ldr	r3, [pc, #36]	@ (800a1d4 <_tx_semaphore_put+0xac>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	4a07      	ldr	r2, [pc, #28]	@ (800a1d4 <_tx_semaphore_put+0xac>)
 800a1b6:	6013      	str	r3, [r2, #0]
 800a1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ba:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f383 8810 	msr	PRIMASK, r3
}
 800a1c2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800a1c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a1c6:	f000 fa3f 	bl	800a648 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3730      	adds	r7, #48	@ 0x30
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	2000225c 	.word	0x2000225c

0800a1d8 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b092      	sub	sp, #72	@ 0x48
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	607a      	str	r2, [r7, #4]
 800a1e4:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800a1ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a1ec:	21ef      	movs	r1, #239	@ 0xef
 800a1ee:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800a1f0:	f001 fca9 	bl	800bb46 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800a1f4:	22b0      	movs	r2, #176	@ 0xb0
 800a1f6:	2100      	movs	r1, #0
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f001 fca4 	bl	800bb46 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	68ba      	ldr	r2, [r7, #8]
 800a202:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	683a      	ldr	r2, [r7, #0]
 800a20e:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a214:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a21a:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a220:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a226:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a22e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a234:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2220      	movs	r2, #32
 800a23a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800a23e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a240:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800a242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a244:	3b01      	subs	r3, #1
 800a246:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a248:	4413      	add	r3, r2
 800a24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a250:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800a252:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a254:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a256:	429a      	cmp	r2, r3
 800a258:	d007      	beq.n	800a26a <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2200      	movs	r2, #0
 800a25e:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2200      	movs	r2, #0
 800a264:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800a268:	e006      	b.n	800a278 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a26e:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a274:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2203      	movs	r2, #3
 800a27c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	4a48      	ldr	r2, [pc, #288]	@ (800a3a4 <_tx_thread_create+0x1cc>)
 800a282:	655a      	str	r2, [r3, #84]	@ 0x54
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800a28a:	4947      	ldr	r1, [pc, #284]	@ (800a3a8 <_tx_thread_create+0x1d0>)
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	f7f6 f89f 	bl	80003d0 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a292:	f3ef 8310 	mrs	r3, PRIMASK
 800a296:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800a298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800a29a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a29c:	b672      	cpsid	i
    return(int_posture);
 800a29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800a2a0:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	4a41      	ldr	r2, [pc, #260]	@ (800a3ac <_tx_thread_create+0x1d4>)
 800a2a6:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800a2a8:	4b41      	ldr	r3, [pc, #260]	@ (800a3b0 <_tx_thread_create+0x1d8>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d10b      	bne.n	800a2c8 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800a2b0:	4a40      	ldr	r2, [pc, #256]	@ (800a3b4 <_tx_thread_create+0x1dc>)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800a2c6:	e016      	b.n	800a2f6 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800a2c8:	4b3a      	ldr	r3, [pc, #232]	@ (800a3b4 <_tx_thread_create+0x1dc>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800a2ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2d4:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800a2d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800a2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e0:	68fa      	ldr	r2, [r7, #12]
 800a2e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800a2f6:	4b2e      	ldr	r3, [pc, #184]	@ (800a3b0 <_tx_thread_create+0x1d8>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	4a2c      	ldr	r2, [pc, #176]	@ (800a3b0 <_tx_thread_create+0x1d8>)
 800a2fe:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800a300:	4b2d      	ldr	r3, [pc, #180]	@ (800a3b8 <_tx_thread_create+0x1e0>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	3301      	adds	r3, #1
 800a306:	4a2c      	ldr	r2, [pc, #176]	@ (800a3b8 <_tx_thread_create+0x1e0>)
 800a308:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800a30a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d129      	bne.n	800a364 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a310:	f3ef 8305 	mrs	r3, IPSR
 800a314:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 800a316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800a318:	4b28      	ldr	r3, [pc, #160]	@ (800a3bc <_tx_thread_create+0x1e4>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4313      	orrs	r3, r2
 800a31e:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800a322:	d30d      	bcc.n	800a340 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800a324:	4b26      	ldr	r3, [pc, #152]	@ (800a3c0 <_tx_thread_create+0x1e8>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800a32a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d009      	beq.n	800a344 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800a330:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a334:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800a336:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a33a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a33c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a33e:	e001      	b.n	800a344 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800a340:	2300      	movs	r3, #0
 800a342:	647b      	str	r3, [r7, #68]	@ 0x44
 800a344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a346:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a348:	6a3b      	ldr	r3, [r7, #32]
 800a34a:	f383 8810 	msr	PRIMASK, r3
}
 800a34e:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f000 f979 	bl	800a648 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800a356:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d01e      	beq.n	800a39a <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800a35c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a35e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a360:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a362:	e01a      	b.n	800a39a <_tx_thread_create+0x1c2>
 800a364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a366:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	f383 8810 	msr	PRIMASK, r3
}
 800a36e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a370:	f3ef 8310 	mrs	r3, PRIMASK
 800a374:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a376:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a378:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a37a:	b672      	cpsid	i
    return(int_posture);
 800a37c:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800a37e:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800a380:	4b0d      	ldr	r3, [pc, #52]	@ (800a3b8 <_tx_thread_create+0x1e0>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	3b01      	subs	r3, #1
 800a386:	4a0c      	ldr	r2, [pc, #48]	@ (800a3b8 <_tx_thread_create+0x1e0>)
 800a388:	6013      	str	r3, [r2, #0]
 800a38a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a38c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a38e:	69fb      	ldr	r3, [r7, #28]
 800a390:	f383 8810 	msr	PRIMASK, r3
}
 800a394:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a396:	f000 f91d 	bl	800a5d4 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800a39a:	2300      	movs	r3, #0
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3748      	adds	r7, #72	@ 0x48
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	0800ab1d 	.word	0x0800ab1d
 800a3a8:	0800a43d 	.word	0x0800a43d
 800a3ac:	54485244 	.word	0x54485244
 800a3b0:	200021d0 	.word	0x200021d0
 800a3b4:	200021cc 	.word	0x200021cc
 800a3b8:	2000225c 	.word	0x2000225c
 800a3bc:	2000000c 	.word	0x2000000c
 800a3c0:	200021c8 	.word	0x200021c8

0800a3c4 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800a3c8:	4b12      	ldr	r3, [pc, #72]	@ (800a414 <_tx_thread_initialize+0x50>)
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800a3ce:	4b12      	ldr	r3, [pc, #72]	@ (800a418 <_tx_thread_initialize+0x54>)
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 800a3d4:	4b11      	ldr	r3, [pc, #68]	@ (800a41c <_tx_thread_initialize+0x58>)
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800a3da:	4b11      	ldr	r3, [pc, #68]	@ (800a420 <_tx_thread_initialize+0x5c>)
 800a3dc:	2220      	movs	r2, #32
 800a3de:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800a3e0:	2280      	movs	r2, #128	@ 0x80
 800a3e2:	2100      	movs	r1, #0
 800a3e4:	480f      	ldr	r0, [pc, #60]	@ (800a424 <_tx_thread_initialize+0x60>)
 800a3e6:	f001 fbae 	bl	800bb46 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800a3ea:	4b0f      	ldr	r3, [pc, #60]	@ (800a428 <_tx_thread_initialize+0x64>)
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800a3f0:	4b0e      	ldr	r3, [pc, #56]	@ (800a42c <_tx_thread_initialize+0x68>)
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800a3f6:	4b0e      	ldr	r3, [pc, #56]	@ (800a430 <_tx_thread_initialize+0x6c>)
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800a3fc:	4b0d      	ldr	r3, [pc, #52]	@ (800a434 <_tx_thread_initialize+0x70>)
 800a3fe:	2200      	movs	r2, #0
 800a400:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800a402:	4b0d      	ldr	r3, [pc, #52]	@ (800a438 <_tx_thread_initialize+0x74>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 800a40a:	4a0b      	ldr	r2, [pc, #44]	@ (800a438 <_tx_thread_initialize+0x74>)
 800a40c:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800a40e:	bf00      	nop
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	200021c4 	.word	0x200021c4
 800a418:	200021c8 	.word	0x200021c8
 800a41c:	200021d4 	.word	0x200021d4
 800a420:	200021d8 	.word	0x200021d8
 800a424:	200021dc 	.word	0x200021dc
 800a428:	200021cc 	.word	0x200021cc
 800a42c:	200021d0 	.word	0x200021d0
 800a430:	2000225c 	.word	0x2000225c
 800a434:	20002260 	.word	0x20002260
 800a438:	20002264 	.word	0x20002264

0800a43c <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b088      	sub	sp, #32
 800a440:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800a442:	4b21      	ldr	r3, [pc, #132]	@ (800a4c8 <_tx_thread_shell_entry+0x8c>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800a448:	69fb      	ldr	r3, [r7, #28]
 800a44a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a44c:	69fa      	ldr	r2, [r7, #28]
 800a44e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a450:	4610      	mov	r0, r2
 800a452:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800a454:	4b1d      	ldr	r3, [pc, #116]	@ (800a4cc <_tx_thread_shell_entry+0x90>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d003      	beq.n	800a464 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800a45c:	4b1b      	ldr	r3, [pc, #108]	@ (800a4cc <_tx_thread_shell_entry+0x90>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	69f8      	ldr	r0, [r7, #28]
 800a462:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a464:	f3ef 8310 	mrs	r3, PRIMASK
 800a468:	607b      	str	r3, [r7, #4]
    return(posture);
 800a46a:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800a46c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a46e:	b672      	cpsid	i
    return(int_posture);
 800a470:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800a472:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800a474:	69fb      	ldr	r3, [r7, #28]
 800a476:	2201      	movs	r2, #1
 800a478:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	2201      	movs	r2, #1
 800a47e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	2200      	movs	r2, #0
 800a484:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800a486:	4b12      	ldr	r3, [pc, #72]	@ (800a4d0 <_tx_thread_shell_entry+0x94>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	3301      	adds	r3, #1
 800a48c:	4a10      	ldr	r2, [pc, #64]	@ (800a4d0 <_tx_thread_shell_entry+0x94>)
 800a48e:	6013      	str	r3, [r2, #0]
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	f383 8810 	msr	PRIMASK, r3
}
 800a49a:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800a49c:	f3ef 8314 	mrs	r3, CONTROL
 800a4a0:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800a4a2:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800a4a4:	617b      	str	r3, [r7, #20]
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	f023 0304 	bic.w	r3, r3, #4
 800a4ac:	617b      	str	r3, [r7, #20]
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	f383 8814 	msr	CONTROL, r3
}
 800a4b8:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800a4ba:	69f8      	ldr	r0, [r7, #28]
 800a4bc:	f000 f9c4 	bl	800a848 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800a4c0:	bf00      	nop
 800a4c2:	3720      	adds	r7, #32
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	200021c4 	.word	0x200021c4
 800a4cc:	20002260 	.word	0x20002260
 800a4d0:	2000225c 	.word	0x2000225c

0800a4d4 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b08e      	sub	sp, #56	@ 0x38
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a4dc:	f3ef 8310 	mrs	r3, PRIMASK
 800a4e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800a4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800a4e4:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800a4e6:	b672      	cpsid	i
    return(int_posture);
 800a4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800a4ea:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800a4ec:	4b35      	ldr	r3, [pc, #212]	@ (800a5c4 <_tx_thread_sleep+0xf0>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800a4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d108      	bne.n	800a50a <_tx_thread_sleep+0x36>
 800a4f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4fa:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a4fc:	6a3b      	ldr	r3, [r7, #32]
 800a4fe:	f383 8810 	msr	PRIMASK, r3
}
 800a502:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800a504:	2313      	movs	r3, #19
 800a506:	637b      	str	r3, [r7, #52]	@ 0x34
 800a508:	e056      	b.n	800a5b8 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a50a:	f3ef 8305 	mrs	r3, IPSR
 800a50e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800a510:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a512:	4b2d      	ldr	r3, [pc, #180]	@ (800a5c8 <_tx_thread_sleep+0xf4>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4313      	orrs	r3, r2
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d008      	beq.n	800a52e <_tx_thread_sleep+0x5a>
 800a51c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	f383 8810 	msr	PRIMASK, r3
}
 800a526:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800a528:	2313      	movs	r3, #19
 800a52a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a52c:	e044      	b.n	800a5b8 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800a52e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a530:	4a26      	ldr	r2, [pc, #152]	@ (800a5cc <_tx_thread_sleep+0xf8>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d108      	bne.n	800a548 <_tx_thread_sleep+0x74>
 800a536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a538:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	f383 8810 	msr	PRIMASK, r3
}
 800a540:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800a542:	2313      	movs	r3, #19
 800a544:	637b      	str	r3, [r7, #52]	@ 0x34
 800a546:	e037      	b.n	800a5b8 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d108      	bne.n	800a560 <_tx_thread_sleep+0x8c>
 800a54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a550:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	f383 8810 	msr	PRIMASK, r3
}
 800a558:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800a55a:	2300      	movs	r3, #0
 800a55c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a55e:	e02b      	b.n	800a5b8 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800a560:	4b1b      	ldr	r3, [pc, #108]	@ (800a5d0 <_tx_thread_sleep+0xfc>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d008      	beq.n	800a57a <_tx_thread_sleep+0xa6>
 800a568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a56a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f383 8810 	msr	PRIMASK, r3
}
 800a572:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800a574:	2313      	movs	r3, #19
 800a576:	637b      	str	r3, [r7, #52]	@ 0x34
 800a578:	e01e      	b.n	800a5b8 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800a57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a57c:	2204      	movs	r2, #4
 800a57e:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a582:	2201      	movs	r2, #1
 800a584:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800a586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a588:	2200      	movs	r2, #0
 800a58a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800a58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800a594:	4b0e      	ldr	r3, [pc, #56]	@ (800a5d0 <_tx_thread_sleep+0xfc>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	3301      	adds	r3, #1
 800a59a:	4a0d      	ldr	r2, [pc, #52]	@ (800a5d0 <_tx_thread_sleep+0xfc>)
 800a59c:	6013      	str	r3, [r2, #0]
 800a59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	f383 8810 	msr	PRIMASK, r3
}
 800a5a8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800a5aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a5ac:	f000 f94c 	bl	800a848 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800a5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5b6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800a5b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3738      	adds	r7, #56	@ 0x38
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	200021c4 	.word	0x200021c4
 800a5c8:	2000000c 	.word	0x2000000c
 800a5cc:	2000230c 	.word	0x2000230c
 800a5d0:	2000225c 	.word	0x2000225c

0800a5d4 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b089      	sub	sp, #36	@ 0x24
 800a5d8:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800a5da:	4b17      	ldr	r3, [pc, #92]	@ (800a638 <_tx_thread_system_preempt_check+0x64>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d121      	bne.n	800a62a <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800a5e6:	4b15      	ldr	r3, [pc, #84]	@ (800a63c <_tx_thread_system_preempt_check+0x68>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800a5ec:	4b14      	ldr	r3, [pc, #80]	@ (800a640 <_tx_thread_system_preempt_check+0x6c>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800a5f2:	69ba      	ldr	r2, [r7, #24]
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d017      	beq.n	800a62a <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800a5fa:	4b12      	ldr	r3, [pc, #72]	@ (800a644 <_tx_thread_system_preempt_check+0x70>)
 800a5fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a600:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a602:	f3ef 8305 	mrs	r3, IPSR
 800a606:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800a608:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d10c      	bne.n	800a628 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a60e:	f3ef 8310 	mrs	r3, PRIMASK
 800a612:	60fb      	str	r3, [r7, #12]
    return(posture);
 800a614:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800a616:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800a618:	b662      	cpsie	i
}
 800a61a:	bf00      	nop
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f383 8810 	msr	PRIMASK, r3
}
 800a626:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800a628:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800a62a:	bf00      	nop
 800a62c:	3724      	adds	r7, #36	@ 0x24
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr
 800a636:	bf00      	nop
 800a638:	2000225c 	.word	0x2000225c
 800a63c:	200021c4 	.word	0x200021c4
 800a640:	200021c8 	.word	0x200021c8
 800a644:	e000ed04 	.word	0xe000ed04

0800a648 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b096      	sub	sp, #88	@ 0x58
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a650:	f3ef 8310 	mrs	r3, PRIMASK
 800a654:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 800a656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 800a658:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800a65a:	b672      	cpsid	i
    return(int_posture);
 800a65c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800a65e:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a664:	2b00      	cmp	r3, #0
 800a666:	d005      	beq.n	800a674 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	334c      	adds	r3, #76	@ 0x4c
 800a66c:	4618      	mov	r0, r3
 800a66e:	f000 fb91 	bl	800ad94 <_tx_timer_system_deactivate>
 800a672:	e002      	b.n	800a67a <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800a67a:	4b6c      	ldr	r3, [pc, #432]	@ (800a82c <_tx_thread_system_resume+0x1e4>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	3b01      	subs	r3, #1
 800a680:	4a6a      	ldr	r2, [pc, #424]	@ (800a82c <_tx_thread_system_resume+0x1e4>)
 800a682:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f040 8083 	bne.w	800a794 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a692:	2b00      	cmp	r3, #0
 800a694:	f000 8097 	beq.w	800a7c6 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d172      	bne.n	800a786 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6aa:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800a6ac:	4a60      	ldr	r2, [pc, #384]	@ (800a830 <_tx_thread_system_resume+0x1e8>)
 800a6ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 800a6b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d154      	bne.n	800a766 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800a6bc:	495c      	ldr	r1, [pc, #368]	@ (800a830 <_tx_thread_system_resume+0x1e8>)
 800a6be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a6da:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800a6dc:	4b55      	ldr	r3, [pc, #340]	@ (800a834 <_tx_thread_system_resume+0x1ec>)
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	4a53      	ldr	r2, [pc, #332]	@ (800a834 <_tx_thread_system_resume+0x1ec>)
 800a6e6:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800a6e8:	4b53      	ldr	r3, [pc, #332]	@ (800a838 <_tx_thread_system_resume+0x1f0>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d269      	bcs.n	800a7c6 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800a6f2:	4a51      	ldr	r2, [pc, #324]	@ (800a838 <_tx_thread_system_resume+0x1f0>)
 800a6f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6f6:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800a6f8:	4b50      	ldr	r3, [pc, #320]	@ (800a83c <_tx_thread_system_resume+0x1f4>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800a6fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a700:	2b00      	cmp	r3, #0
 800a702:	d103      	bne.n	800a70c <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800a704:	4a4d      	ldr	r2, [pc, #308]	@ (800a83c <_tx_thread_system_resume+0x1f4>)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6013      	str	r3, [r2, #0]
 800a70a:	e05c      	b.n	800a7c6 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800a70c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a70e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a710:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a712:	429a      	cmp	r2, r3
 800a714:	d257      	bcs.n	800a7c6 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800a716:	4a49      	ldr	r2, [pc, #292]	@ (800a83c <_tx_thread_system_resume+0x1f4>)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6013      	str	r3, [r2, #0]
 800a71c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a71e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a722:	f383 8810 	msr	PRIMASK, r3
}
 800a726:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800a728:	4b40      	ldr	r3, [pc, #256]	@ (800a82c <_tx_thread_system_resume+0x1e4>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 800a72e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a730:	2b00      	cmp	r3, #0
 800a732:	d174      	bne.n	800a81e <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800a734:	4b42      	ldr	r3, [pc, #264]	@ (800a840 <_tx_thread_system_resume+0x1f8>)
 800a736:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a73a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a73c:	f3ef 8305 	mrs	r3, IPSR
 800a740:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 800a742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (_tx_ipsr_get() == 0)
 800a744:	2b00      	cmp	r3, #0
 800a746:	d10c      	bne.n	800a762 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a748:	f3ef 8310 	mrs	r3, PRIMASK
 800a74c:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800a74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 800a750:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800a752:	b662      	cpsie	i
}
 800a754:	bf00      	nop
 800a756:	6a3b      	ldr	r3, [r7, #32]
 800a758:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	f383 8810 	msr	PRIMASK, r3
}
 800a760:	bf00      	nop
}
 800a762:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800a764:	e05b      	b.n	800a81e <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800a766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a76a:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800a76c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800a772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a77c:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a782:	621a      	str	r2, [r3, #32]
 800a784:	e01f      	b.n	800a7c6 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2203      	movs	r2, #3
 800a790:	631a      	str	r2, [r3, #48]	@ 0x30
 800a792:	e018      	b.n	800a7c6 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d014      	beq.n	800a7c6 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7a0:	2b02      	cmp	r3, #2
 800a7a2:	d010      	beq.n	800a7c6 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d106      	bne.n	800a7ba <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	631a      	str	r2, [r3, #48]	@ 0x30
 800a7b8:	e005      	b.n	800a7c6 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2203      	movs	r2, #3
 800a7c4:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800a7c6:	4b1f      	ldr	r3, [pc, #124]	@ (800a844 <_tx_thread_system_resume+0x1fc>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a7cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7ce:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	f383 8810 	msr	PRIMASK, r3
}
 800a7d6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800a7d8:	4b18      	ldr	r3, [pc, #96]	@ (800a83c <_tx_thread_system_resume+0x1f4>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d020      	beq.n	800a824 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800a7e2:	4b12      	ldr	r3, [pc, #72]	@ (800a82c <_tx_thread_system_resume+0x1e4>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 800a7e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d11a      	bne.n	800a824 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800a7ee:	4b14      	ldr	r3, [pc, #80]	@ (800a840 <_tx_thread_system_resume+0x1f8>)
 800a7f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7f4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a7f6:	f3ef 8305 	mrs	r3, IPSR
 800a7fa:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a7fc:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d10f      	bne.n	800a822 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a802:	f3ef 8310 	mrs	r3, PRIMASK
 800a806:	613b      	str	r3, [r7, #16]
    return(posture);
 800a808:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800a80a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800a80c:	b662      	cpsie	i
}
 800a80e:	bf00      	nop
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	f383 8810 	msr	PRIMASK, r3
}
 800a81a:	bf00      	nop
}
 800a81c:	e001      	b.n	800a822 <_tx_thread_system_resume+0x1da>
                                return;
 800a81e:	bf00      	nop
 800a820:	e000      	b.n	800a824 <_tx_thread_system_resume+0x1dc>
 800a822:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800a824:	3758      	adds	r7, #88	@ 0x58
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	2000225c 	.word	0x2000225c
 800a830:	200021dc 	.word	0x200021dc
 800a834:	200021d4 	.word	0x200021d4
 800a838:	200021d8 	.word	0x200021d8
 800a83c:	200021c8 	.word	0x200021c8
 800a840:	e000ed04 	.word	0xe000ed04
 800a844:	200021c4 	.word	0x200021c4

0800a848 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b09e      	sub	sp, #120	@ 0x78
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800a850:	4b81      	ldr	r3, [pc, #516]	@ (800aa58 <_tx_thread_system_suspend+0x210>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a856:	f3ef 8310 	mrs	r3, PRIMASK
 800a85a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 800a85c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 800a85e:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800a860:	b672      	cpsid	i
    return(int_posture);
 800a862:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800a864:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d112      	bne.n	800a894 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a872:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800a874:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a876:	2b00      	cmp	r3, #0
 800a878:	d008      	beq.n	800a88c <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800a87a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a87c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a880:	d004      	beq.n	800a88c <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	334c      	adds	r3, #76	@ 0x4c
 800a886:	4618      	mov	r0, r3
 800a888:	f000 fa22 	bl	800acd0 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	69db      	ldr	r3, [r3, #28]
 800a890:	4a72      	ldr	r2, [pc, #456]	@ (800aa5c <_tx_thread_system_suspend+0x214>)
 800a892:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800a894:	4b72      	ldr	r3, [pc, #456]	@ (800aa60 <_tx_thread_system_suspend+0x218>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	3b01      	subs	r3, #1
 800a89a:	4a71      	ldr	r2, [pc, #452]	@ (800aa60 <_tx_thread_system_suspend+0x218>)
 800a89c:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	f040 80a6 	bne.w	800a9f4 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8b2:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6a1b      	ldr	r3, [r3, #32]
 800a8b8:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800a8ba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d015      	beq.n	800a8ee <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8c6:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800a8c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a8ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a8cc:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800a8ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8d0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a8d2:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800a8d4:	4a63      	ldr	r2, [pc, #396]	@ (800aa64 <_tx_thread_system_suspend+0x21c>)
 800a8d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a8d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d157      	bne.n	800a992 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800a8e2:	4960      	ldr	r1, [pc, #384]	@ (800aa64 <_tx_thread_system_suspend+0x21c>)
 800a8e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a8e6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a8e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a8ec:	e051      	b.n	800a992 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800a8ee:	4a5d      	ldr	r2, [pc, #372]	@ (800aa64 <_tx_thread_system_suspend+0x21c>)
 800a8f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a8f2:	2100      	movs	r1, #0
 800a8f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a8fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a900:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800a902:	4b59      	ldr	r3, [pc, #356]	@ (800aa68 <_tx_thread_system_suspend+0x220>)
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a908:	43db      	mvns	r3, r3
 800a90a:	4013      	ands	r3, r2
 800a90c:	4a56      	ldr	r2, [pc, #344]	@ (800aa68 <_tx_thread_system_suspend+0x220>)
 800a90e:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800a910:	2300      	movs	r3, #0
 800a912:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800a914:	4b54      	ldr	r3, [pc, #336]	@ (800aa68 <_tx_thread_system_suspend+0x220>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800a91a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d12b      	bne.n	800a978 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800a920:	4b52      	ldr	r3, [pc, #328]	@ (800aa6c <_tx_thread_system_suspend+0x224>)
 800a922:	2220      	movs	r2, #32
 800a924:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800a926:	4b52      	ldr	r3, [pc, #328]	@ (800aa70 <_tx_thread_system_suspend+0x228>)
 800a928:	2200      	movs	r2, #0
 800a92a:	601a      	str	r2, [r3, #0]
 800a92c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a92e:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a930:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a932:	f383 8810 	msr	PRIMASK, r3
}
 800a936:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800a938:	4b49      	ldr	r3, [pc, #292]	@ (800aa60 <_tx_thread_system_suspend+0x218>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 800a93e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a940:	2b00      	cmp	r3, #0
 800a942:	f040 8081 	bne.w	800aa48 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800a946:	4b4b      	ldr	r3, [pc, #300]	@ (800aa74 <_tx_thread_system_suspend+0x22c>)
 800a948:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a94c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a94e:	f3ef 8305 	mrs	r3, IPSR
 800a952:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 800a954:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (_tx_ipsr_get() == 0)
 800a956:	2b00      	cmp	r3, #0
 800a958:	d10c      	bne.n	800a974 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a95a:	f3ef 8310 	mrs	r3, PRIMASK
 800a95e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 800a960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 800a962:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800a964:	b662      	cpsie	i
}
 800a966:	bf00      	nop
 800a968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a96a:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a96c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a96e:	f383 8810 	msr	PRIMASK, r3
}
 800a972:	bf00      	nop
}
 800a974:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800a976:	e067      	b.n	800aa48 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800a978:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a97a:	fa93 f3a3 	rbit	r3, r3
 800a97e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a980:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a982:	fab3 f383 	clz	r3, r3
 800a986:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800a988:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a98a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a98c:	4413      	add	r3, r2
 800a98e:	4a37      	ldr	r2, [pc, #220]	@ (800aa6c <_tx_thread_system_suspend+0x224>)
 800a990:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800a992:	4b37      	ldr	r3, [pc, #220]	@ (800aa70 <_tx_thread_system_suspend+0x228>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	429a      	cmp	r2, r3
 800a99a:	d12b      	bne.n	800a9f4 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800a99c:	4b33      	ldr	r3, [pc, #204]	@ (800aa6c <_tx_thread_system_suspend+0x224>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a30      	ldr	r2, [pc, #192]	@ (800aa64 <_tx_thread_system_suspend+0x21c>)
 800a9a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9a6:	4a32      	ldr	r2, [pc, #200]	@ (800aa70 <_tx_thread_system_suspend+0x228>)
 800a9a8:	6013      	str	r3, [r2, #0]
 800a9aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a9ac:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9b0:	f383 8810 	msr	PRIMASK, r3
}
 800a9b4:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800a9b6:	4b2a      	ldr	r3, [pc, #168]	@ (800aa60 <_tx_thread_system_suspend+0x218>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 800a9bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d144      	bne.n	800aa4c <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800a9c2:	4b2c      	ldr	r3, [pc, #176]	@ (800aa74 <_tx_thread_system_suspend+0x22c>)
 800a9c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9c8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a9ca:	f3ef 8305 	mrs	r3, IPSR
 800a9ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 800a9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (_tx_ipsr_get() == 0)
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d10c      	bne.n	800a9f0 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a9d6:	f3ef 8310 	mrs	r3, PRIMASK
 800a9da:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800a9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 800a9de:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800a9e0:	b662      	cpsie	i
}
 800a9e2:	bf00      	nop
 800a9e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a9e8:	6a3b      	ldr	r3, [r7, #32]
 800a9ea:	f383 8810 	msr	PRIMASK, r3
}
 800a9ee:	bf00      	nop
}
 800a9f0:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800a9f2:	e02b      	b.n	800aa4c <_tx_thread_system_suspend+0x204>
 800a9f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a9f6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	f383 8810 	msr	PRIMASK, r3
}
 800a9fe:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800aa00:	4b1b      	ldr	r3, [pc, #108]	@ (800aa70 <_tx_thread_system_suspend+0x228>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d022      	beq.n	800aa50 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800aa0a:	4b15      	ldr	r3, [pc, #84]	@ (800aa60 <_tx_thread_system_suspend+0x218>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 800aa10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d11c      	bne.n	800aa50 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800aa16:	4b17      	ldr	r3, [pc, #92]	@ (800aa74 <_tx_thread_system_suspend+0x22c>)
 800aa18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa1c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800aa1e:	f3ef 8305 	mrs	r3, IPSR
 800aa22:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800aa24:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d10c      	bne.n	800aa44 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aa2a:	f3ef 8310 	mrs	r3, PRIMASK
 800aa2e:	617b      	str	r3, [r7, #20]
    return(posture);
 800aa30:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800aa32:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800aa34:	b662      	cpsie	i
}
 800aa36:	bf00      	nop
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f383 8810 	msr	PRIMASK, r3
}
 800aa42:	bf00      	nop
}
 800aa44:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800aa46:	e003      	b.n	800aa50 <_tx_thread_system_suspend+0x208>
                return;
 800aa48:	bf00      	nop
 800aa4a:	e002      	b.n	800aa52 <_tx_thread_system_suspend+0x20a>
            return;
 800aa4c:	bf00      	nop
 800aa4e:	e000      	b.n	800aa52 <_tx_thread_system_suspend+0x20a>
    return;
 800aa50:	bf00      	nop
}
 800aa52:	3778      	adds	r7, #120	@ 0x78
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	200021c4 	.word	0x200021c4
 800aa5c:	200027c8 	.word	0x200027c8
 800aa60:	2000225c 	.word	0x2000225c
 800aa64:	200021dc 	.word	0x200021dc
 800aa68:	200021d4 	.word	0x200021d4
 800aa6c:	200021d8 	.word	0x200021d8
 800aa70:	200021c8 	.word	0x200021c8
 800aa74:	e000ed04 	.word	0xe000ed04

0800aa78 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b087      	sub	sp, #28
 800aa7c:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800aa7e:	4b21      	ldr	r3, [pc, #132]	@ (800ab04 <_tx_thread_time_slice+0x8c>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aa84:	f3ef 8310 	mrs	r3, PRIMASK
 800aa88:	60fb      	str	r3, [r7, #12]
    return(posture);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800aa8c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aa8e:	b672      	cpsid	i
    return(int_posture);
 800aa90:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800aa92:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800aa94:	4b1c      	ldr	r3, [pc, #112]	@ (800ab08 <_tx_thread_time_slice+0x90>)
 800aa96:	2200      	movs	r2, #0
 800aa98:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d024      	beq.n	800aaea <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d120      	bne.n	800aaea <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	69da      	ldr	r2, [r3, #28]
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	699b      	ldr	r3, [r3, #24]
 800aab4:	4a15      	ldr	r2, [pc, #84]	@ (800ab0c <_tx_thread_time_slice+0x94>)
 800aab6:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	6a1b      	ldr	r3, [r3, #32]
 800aabc:	697a      	ldr	r2, [r7, #20]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d013      	beq.n	800aaea <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d10d      	bne.n	800aaea <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aad2:	697a      	ldr	r2, [r7, #20]
 800aad4:	6a12      	ldr	r2, [r2, #32]
 800aad6:	490e      	ldr	r1, [pc, #56]	@ (800ab10 <_tx_thread_time_slice+0x98>)
 800aad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800aadc:	4b0d      	ldr	r3, [pc, #52]	@ (800ab14 <_tx_thread_time_slice+0x9c>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a0b      	ldr	r2, [pc, #44]	@ (800ab10 <_tx_thread_time_slice+0x98>)
 800aae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aae6:	4a0c      	ldr	r2, [pc, #48]	@ (800ab18 <_tx_thread_time_slice+0xa0>)
 800aae8:	6013      	str	r3, [r2, #0]
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f383 8810 	msr	PRIMASK, r3
}
 800aaf4:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800aaf6:	bf00      	nop
 800aaf8:	371c      	adds	r7, #28
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	200021c4 	.word	0x200021c4
 800ab08:	2000226c 	.word	0x2000226c
 800ab0c:	200027c8 	.word	0x200027c8
 800ab10:	200021dc 	.word	0x200021dc
 800ab14:	200021d8 	.word	0x200021d8
 800ab18:	200021c8 	.word	0x200021c8

0800ab1c <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b08a      	sub	sp, #40	@ 0x28
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ab28:	f3ef 8310 	mrs	r3, PRIMASK
 800ab2c:	617b      	str	r3, [r7, #20]
    return(posture);
 800ab2e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800ab30:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ab32:	b672      	cpsid	i
    return(int_posture);
 800ab34:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800ab36:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800ab38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab3c:	2b04      	cmp	r3, #4
 800ab3e:	d10e      	bne.n	800ab5e <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800ab40:	4b13      	ldr	r3, [pc, #76]	@ (800ab90 <_tx_thread_timeout+0x74>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	3301      	adds	r3, #1
 800ab46:	4a12      	ldr	r2, [pc, #72]	@ (800ab90 <_tx_thread_timeout+0x74>)
 800ab48:	6013      	str	r3, [r2, #0]
 800ab4a:	6a3b      	ldr	r3, [r7, #32]
 800ab4c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f383 8810 	msr	PRIMASK, r3
}
 800ab54:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800ab56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ab58:	f7ff fd76 	bl	800a648 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800ab5c:	e013      	b.n	800ab86 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800ab5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab62:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800ab64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ab6a:	61bb      	str	r3, [r7, #24]
 800ab6c:	6a3b      	ldr	r3, [r7, #32]
 800ab6e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	f383 8810 	msr	PRIMASK, r3
}
 800ab76:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d003      	beq.n	800ab86 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	69b9      	ldr	r1, [r7, #24]
 800ab82:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ab84:	4798      	blx	r3
}
 800ab86:	bf00      	nop
 800ab88:	3728      	adds	r7, #40	@ 0x28
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	2000225c 	.word	0x2000225c

0800ab94 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ab9a:	f3ef 8310 	mrs	r3, PRIMASK
 800ab9e:	607b      	str	r3, [r7, #4]
    return(posture);
 800aba0:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800aba2:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aba4:	b672      	cpsid	i
    return(int_posture);
 800aba6:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800aba8:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800abaa:	4b09      	ldr	r3, [pc, #36]	@ (800abd0 <_tx_timer_expiration_process+0x3c>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	3301      	adds	r3, #1
 800abb0:	4a07      	ldr	r2, [pc, #28]	@ (800abd0 <_tx_timer_expiration_process+0x3c>)
 800abb2:	6013      	str	r3, [r2, #0]
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	f383 8810 	msr	PRIMASK, r3
}
 800abbe:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800abc0:	4804      	ldr	r0, [pc, #16]	@ (800abd4 <_tx_timer_expiration_process+0x40>)
 800abc2:	f7ff fd41 	bl	800a648 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800abc6:	bf00      	nop
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
 800abce:	bf00      	nop
 800abd0:	2000225c 	.word	0x2000225c
 800abd4:	2000230c 	.word	0x2000230c

0800abd8 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800abd8:	b590      	push	{r4, r7, lr}
 800abda:	b089      	sub	sp, #36	@ 0x24
 800abdc:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800abde:	4b28      	ldr	r3, [pc, #160]	@ (800ac80 <_tx_timer_initialize+0xa8>)
 800abe0:	2200      	movs	r2, #0
 800abe2:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800abe4:	4b27      	ldr	r3, [pc, #156]	@ (800ac84 <_tx_timer_initialize+0xac>)
 800abe6:	2200      	movs	r2, #0
 800abe8:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800abea:	4b27      	ldr	r3, [pc, #156]	@ (800ac88 <_tx_timer_initialize+0xb0>)
 800abec:	2200      	movs	r2, #0
 800abee:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800abf0:	4b26      	ldr	r3, [pc, #152]	@ (800ac8c <_tx_timer_initialize+0xb4>)
 800abf2:	2200      	movs	r2, #0
 800abf4:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800abf6:	4b26      	ldr	r3, [pc, #152]	@ (800ac90 <_tx_timer_initialize+0xb8>)
 800abf8:	2200      	movs	r2, #0
 800abfa:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800abfc:	2280      	movs	r2, #128	@ 0x80
 800abfe:	2100      	movs	r1, #0
 800ac00:	4824      	ldr	r0, [pc, #144]	@ (800ac94 <_tx_timer_initialize+0xbc>)
 800ac02:	f000 ffa0 	bl	800bb46 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800ac06:	4b24      	ldr	r3, [pc, #144]	@ (800ac98 <_tx_timer_initialize+0xc0>)
 800ac08:	4a22      	ldr	r2, [pc, #136]	@ (800ac94 <_tx_timer_initialize+0xbc>)
 800ac0a:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800ac0c:	4b23      	ldr	r3, [pc, #140]	@ (800ac9c <_tx_timer_initialize+0xc4>)
 800ac0e:	4a21      	ldr	r2, [pc, #132]	@ (800ac94 <_tx_timer_initialize+0xbc>)
 800ac10:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800ac12:	4b23      	ldr	r3, [pc, #140]	@ (800aca0 <_tx_timer_initialize+0xc8>)
 800ac14:	4a23      	ldr	r2, [pc, #140]	@ (800aca4 <_tx_timer_initialize+0xcc>)
 800ac16:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800ac18:	4b21      	ldr	r3, [pc, #132]	@ (800aca0 <_tx_timer_initialize+0xc8>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	3304      	adds	r3, #4
 800ac1e:	4a20      	ldr	r2, [pc, #128]	@ (800aca0 <_tx_timer_initialize+0xc8>)
 800ac20:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800ac22:	4b21      	ldr	r3, [pc, #132]	@ (800aca8 <_tx_timer_initialize+0xd0>)
 800ac24:	4a21      	ldr	r2, [pc, #132]	@ (800acac <_tx_timer_initialize+0xd4>)
 800ac26:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800ac28:	4b21      	ldr	r3, [pc, #132]	@ (800acb0 <_tx_timer_initialize+0xd8>)
 800ac2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ac2e:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800ac30:	4b20      	ldr	r3, [pc, #128]	@ (800acb4 <_tx_timer_initialize+0xdc>)
 800ac32:	2200      	movs	r2, #0
 800ac34:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800ac36:	4b1c      	ldr	r3, [pc, #112]	@ (800aca8 <_tx_timer_initialize+0xd0>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4a1d      	ldr	r2, [pc, #116]	@ (800acb0 <_tx_timer_initialize+0xd8>)
 800ac3c:	6812      	ldr	r2, [r2, #0]
 800ac3e:	491d      	ldr	r1, [pc, #116]	@ (800acb4 <_tx_timer_initialize+0xdc>)
 800ac40:	6809      	ldr	r1, [r1, #0]
 800ac42:	481c      	ldr	r0, [pc, #112]	@ (800acb4 <_tx_timer_initialize+0xdc>)
 800ac44:	6800      	ldr	r0, [r0, #0]
 800ac46:	2400      	movs	r4, #0
 800ac48:	9405      	str	r4, [sp, #20]
 800ac4a:	2400      	movs	r4, #0
 800ac4c:	9404      	str	r4, [sp, #16]
 800ac4e:	9003      	str	r0, [sp, #12]
 800ac50:	9102      	str	r1, [sp, #8]
 800ac52:	9201      	str	r2, [sp, #4]
 800ac54:	9300      	str	r3, [sp, #0]
 800ac56:	4b18      	ldr	r3, [pc, #96]	@ (800acb8 <_tx_timer_initialize+0xe0>)
 800ac58:	4a18      	ldr	r2, [pc, #96]	@ (800acbc <_tx_timer_initialize+0xe4>)
 800ac5a:	4919      	ldr	r1, [pc, #100]	@ (800acc0 <_tx_timer_initialize+0xe8>)
 800ac5c:	4819      	ldr	r0, [pc, #100]	@ (800acc4 <_tx_timer_initialize+0xec>)
 800ac5e:	f7ff fabb 	bl	800a1d8 <_tx_thread_create>
 800ac62:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d1e5      	bne.n	800ac36 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800ac6a:	4b17      	ldr	r3, [pc, #92]	@ (800acc8 <_tx_timer_initialize+0xf0>)
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800ac70:	4b16      	ldr	r3, [pc, #88]	@ (800accc <_tx_timer_initialize+0xf4>)
 800ac72:	2200      	movs	r2, #0
 800ac74:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800ac76:	bf00      	nop
 800ac78:	370c      	adds	r7, #12
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd90      	pop	{r4, r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	20002268 	.word	0x20002268
 800ac84:	200027c8 	.word	0x200027c8
 800ac88:	2000226c 	.word	0x2000226c
 800ac8c:	200022fc 	.word	0x200022fc
 800ac90:	20002308 	.word	0x20002308
 800ac94:	20002270 	.word	0x20002270
 800ac98:	200022f0 	.word	0x200022f0
 800ac9c:	200022f8 	.word	0x200022f8
 800aca0:	200022f4 	.word	0x200022f4
 800aca4:	200022ec 	.word	0x200022ec
 800aca8:	200023bc 	.word	0x200023bc
 800acac:	200023c8 	.word	0x200023c8
 800acb0:	200023c0 	.word	0x200023c0
 800acb4:	200023c4 	.word	0x200023c4
 800acb8:	4154494d 	.word	0x4154494d
 800acbc:	0800ae05 	.word	0x0800ae05
 800acc0:	0800c764 	.word	0x0800c764
 800acc4:	2000230c 	.word	0x2000230c
 800acc8:	20002300 	.word	0x20002300
 800accc:	20002304 	.word	0x20002304

0800acd0 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b089      	sub	sp, #36	@ 0x24
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d04a      	beq.n	800ad7a <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acea:	d046      	beq.n	800ad7a <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	699b      	ldr	r3, [r3, #24]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d142      	bne.n	800ad7a <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	2b20      	cmp	r3, #32
 800acf8:	d902      	bls.n	800ad00 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800acfa:	231f      	movs	r3, #31
 800acfc:	61bb      	str	r3, [r7, #24]
 800acfe:	e002      	b.n	800ad06 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	3b01      	subs	r3, #1
 800ad04:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800ad06:	4b20      	ldr	r3, [pc, #128]	@ (800ad88 <_tx_timer_system_activate+0xb8>)
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	4413      	add	r3, r2
 800ad10:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800ad12:	4b1e      	ldr	r3, [pc, #120]	@ (800ad8c <_tx_timer_system_activate+0xbc>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	69fa      	ldr	r2, [r7, #28]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d30b      	bcc.n	800ad34 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800ad1c:	4b1b      	ldr	r3, [pc, #108]	@ (800ad8c <_tx_timer_system_activate+0xbc>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	69fa      	ldr	r2, [r7, #28]
 800ad22:	1ad3      	subs	r3, r2, r3
 800ad24:	109b      	asrs	r3, r3, #2
 800ad26:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800ad28:	4b19      	ldr	r3, [pc, #100]	@ (800ad90 <_tx_timer_system_activate+0xc0>)
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	4413      	add	r3, r2
 800ad32:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d109      	bne.n	800ad50 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800ad48:	69fb      	ldr	r3, [r7, #28]
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	601a      	str	r2, [r3, #0]
 800ad4e:	e011      	b.n	800ad74 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	695b      	ldr	r3, [r3, #20]
 800ad5a:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	68fa      	ldr	r2, [r7, #12]
 800ad6c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	68ba      	ldr	r2, [r7, #8]
 800ad72:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	69fa      	ldr	r2, [r7, #28]
 800ad78:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800ad7a:	bf00      	nop
 800ad7c:	3724      	adds	r7, #36	@ 0x24
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr
 800ad86:	bf00      	nop
 800ad88:	200022f8 	.word	0x200022f8
 800ad8c:	200022f4 	.word	0x200022f4
 800ad90:	200022f0 	.word	0x200022f0

0800ad94 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b087      	sub	sp, #28
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	699b      	ldr	r3, [r3, #24]
 800ada0:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d026      	beq.n	800adf6 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	691b      	ldr	r3, [r3, #16]
 800adac:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d108      	bne.n	800adc8 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d117      	bne.n	800adf0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	2200      	movs	r2, #0
 800adc4:	601a      	str	r2, [r3, #0]
 800adc6:	e013      	b.n	800adf0 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	695b      	ldr	r3, [r3, #20]
 800adcc:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	693a      	ldr	r2, [r7, #16]
 800add8:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d105      	bne.n	800adf0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	697a      	ldr	r2, [r7, #20]
 800ade8:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	693a      	ldr	r2, [r7, #16]
 800adee:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	619a      	str	r2, [r3, #24]
    }
}
 800adf6:	bf00      	nop
 800adf8:	371c      	adds	r7, #28
 800adfa:	46bd      	mov	sp, r7
 800adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae00:	4770      	bx	lr
	...

0800ae04 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b098      	sub	sp, #96	@ 0x60
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	4a73      	ldr	r2, [pc, #460]	@ (800afe0 <_tx_timer_thread_entry+0x1dc>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	f040 80de 	bne.w	800afd6 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ae1a:	f3ef 8310 	mrs	r3, PRIMASK
 800ae1e:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 800ae20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 800ae22:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800ae24:	b672      	cpsid	i
    return(int_posture);
 800ae26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800ae28:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800ae2a:	4b6e      	ldr	r3, [pc, #440]	@ (800afe4 <_tx_timer_thread_entry+0x1e0>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d003      	beq.n	800ae40 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f107 020c 	add.w	r2, r7, #12
 800ae3e:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800ae40:	4b68      	ldr	r3, [pc, #416]	@ (800afe4 <_tx_timer_thread_entry+0x1e0>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2200      	movs	r2, #0
 800ae46:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800ae48:	4b66      	ldr	r3, [pc, #408]	@ (800afe4 <_tx_timer_thread_entry+0x1e0>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	3304      	adds	r3, #4
 800ae4e:	4a65      	ldr	r2, [pc, #404]	@ (800afe4 <_tx_timer_thread_entry+0x1e0>)
 800ae50:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800ae52:	4b64      	ldr	r3, [pc, #400]	@ (800afe4 <_tx_timer_thread_entry+0x1e0>)
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	4b64      	ldr	r3, [pc, #400]	@ (800afe8 <_tx_timer_thread_entry+0x1e4>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d103      	bne.n	800ae66 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800ae5e:	4b63      	ldr	r3, [pc, #396]	@ (800afec <_tx_timer_thread_entry+0x1e8>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4a60      	ldr	r2, [pc, #384]	@ (800afe4 <_tx_timer_thread_entry+0x1e0>)
 800ae64:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800ae66:	4b62      	ldr	r3, [pc, #392]	@ (800aff0 <_tx_timer_thread_entry+0x1ec>)
 800ae68:	2200      	movs	r2, #0
 800ae6a:	601a      	str	r2, [r3, #0]
 800ae6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae6e:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ae70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae72:	f383 8810 	msr	PRIMASK, r3
}
 800ae76:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ae78:	f3ef 8310 	mrs	r3, PRIMASK
 800ae7c:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 800ae7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 800ae80:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800ae82:	b672      	cpsid	i
    return(int_posture);
 800ae84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800ae86:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800ae88:	e07f      	b.n	800af8a <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	691b      	ldr	r3, [r3, #16]
 800ae92:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800ae94:	2300      	movs	r3, #0
 800ae96:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800ae98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ae9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d102      	bne.n	800aea6 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800aea0:	2300      	movs	r3, #0
 800aea2:	60fb      	str	r3, [r7, #12]
 800aea4:	e00e      	b.n	800aec4 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800aea6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aea8:	695b      	ldr	r3, [r3, #20]
 800aeaa:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800aeac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aeae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aeb0:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800aeb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aeb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aeb6:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800aeb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aeba:	f107 020c 	add.w	r2, r7, #12
 800aebe:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800aec0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aec2:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800aec4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2b20      	cmp	r3, #32
 800aeca:	d911      	bls.n	800aef0 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800aecc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800aed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aed6:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800aed8:	2300      	movs	r3, #0
 800aeda:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800aedc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aede:	f107 0208 	add.w	r2, r7, #8
 800aee2:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800aee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aee6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aee8:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800aeea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aeec:	60bb      	str	r3, [r7, #8]
 800aeee:	e01a      	b.n	800af26 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800aef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aef2:	689b      	ldr	r3, [r3, #8]
 800aef4:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800aef6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aef8:	68db      	ldr	r3, [r3, #12]
 800aefa:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800aefc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aefe:	685a      	ldr	r2, [r3, #4]
 800af00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af02:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800af04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d009      	beq.n	800af20 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800af0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af0e:	f107 0208 	add.w	r2, r7, #8
 800af12:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800af14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800af18:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800af1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af1c:	60bb      	str	r3, [r7, #8]
 800af1e:	e002      	b.n	800af26 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800af20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af22:	2200      	movs	r2, #0
 800af24:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800af26:	4a33      	ldr	r2, [pc, #204]	@ (800aff4 <_tx_timer_thread_entry+0x1f0>)
 800af28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af2a:	6013      	str	r3, [r2, #0]
 800af2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af32:	f383 8810 	msr	PRIMASK, r3
}
 800af36:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800af38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d002      	beq.n	800af44 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800af3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800af40:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800af42:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800af44:	f3ef 8310 	mrs	r3, PRIMASK
 800af48:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800af4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800af4c:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800af4e:	b672      	cpsid	i
    return(int_posture);
 800af50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800af52:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800af54:	4b27      	ldr	r3, [pc, #156]	@ (800aff4 <_tx_timer_thread_entry+0x1f0>)
 800af56:	2200      	movs	r2, #0
 800af58:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800af5e:	429a      	cmp	r2, r3
 800af60:	d105      	bne.n	800af6e <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800af62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af64:	2200      	movs	r2, #0
 800af66:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800af68:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800af6a:	f7ff feb1 	bl	800acd0 <_tx_timer_system_activate>
 800af6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af70:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	f383 8810 	msr	PRIMASK, r3
}
 800af78:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800af7a:	f3ef 8310 	mrs	r3, PRIMASK
 800af7e:	623b      	str	r3, [r7, #32]
    return(posture);
 800af80:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800af82:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800af84:	b672      	cpsid	i
    return(int_posture);
 800af86:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800af88:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f47f af7c 	bne.w	800ae8a <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800af92:	4b17      	ldr	r3, [pc, #92]	@ (800aff0 <_tx_timer_thread_entry+0x1ec>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d116      	bne.n	800afc8 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800af9a:	4b17      	ldr	r3, [pc, #92]	@ (800aff8 <_tx_timer_thread_entry+0x1f4>)
 800af9c:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800af9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afa0:	2203      	movs	r2, #3
 800afa2:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800afa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afa6:	2201      	movs	r2, #1
 800afa8:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800afaa:	4b14      	ldr	r3, [pc, #80]	@ (800affc <_tx_timer_thread_entry+0x1f8>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	3301      	adds	r3, #1
 800afb0:	4a12      	ldr	r2, [pc, #72]	@ (800affc <_tx_timer_thread_entry+0x1f8>)
 800afb2:	6013      	str	r3, [r2, #0]
 800afb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800afb6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	f383 8810 	msr	PRIMASK, r3
}
 800afbe:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800afc0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800afc2:	f7ff fc41 	bl	800a848 <_tx_thread_system_suspend>
 800afc6:	e728      	b.n	800ae1a <_tx_timer_thread_entry+0x16>
 800afc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800afca:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	f383 8810 	msr	PRIMASK, r3
}
 800afd2:	bf00      	nop
            TX_DISABLE
 800afd4:	e721      	b.n	800ae1a <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800afd6:	bf00      	nop
 800afd8:	3760      	adds	r7, #96	@ 0x60
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	4154494d 	.word	0x4154494d
 800afe4:	200022f8 	.word	0x200022f8
 800afe8:	200022f4 	.word	0x200022f4
 800afec:	200022f0 	.word	0x200022f0
 800aff0:	200022fc 	.word	0x200022fc
 800aff4:	20002308 	.word	0x20002308
 800aff8:	2000230c 	.word	0x2000230c
 800affc:	2000225c 	.word	0x2000225c

0800b000 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b092      	sub	sp, #72	@ 0x48
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	607a      	str	r2, [r7, #4]
 800b00c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800b00e:	2300      	movs	r3, #0
 800b010:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d102      	bne.n	800b01e <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800b018:	2302      	movs	r3, #2
 800b01a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b01c:	e075      	b.n	800b10a <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800b01e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b020:	2b34      	cmp	r3, #52	@ 0x34
 800b022:	d002      	beq.n	800b02a <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800b024:	2302      	movs	r3, #2
 800b026:	647b      	str	r3, [r7, #68]	@ 0x44
 800b028:	e06f      	b.n	800b10a <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b02a:	f3ef 8310 	mrs	r3, PRIMASK
 800b02e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800b030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800b032:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800b034:	b672      	cpsid	i
    return(int_posture);
 800b036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800b038:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800b03a:	4b3b      	ldr	r3, [pc, #236]	@ (800b128 <_txe_byte_pool_create+0x128>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	3301      	adds	r3, #1
 800b040:	4a39      	ldr	r2, [pc, #228]	@ (800b128 <_txe_byte_pool_create+0x128>)
 800b042:	6013      	str	r3, [r2, #0]
 800b044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b046:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b04a:	f383 8810 	msr	PRIMASK, r3
}
 800b04e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800b050:	4b36      	ldr	r3, [pc, #216]	@ (800b12c <_txe_byte_pool_create+0x12c>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800b056:	2300      	movs	r3, #0
 800b058:	643b      	str	r3, [r7, #64]	@ 0x40
 800b05a:	e009      	b.n	800b070 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b060:	429a      	cmp	r2, r3
 800b062:	d00b      	beq.n	800b07c <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800b064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800b06a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b06c:	3301      	adds	r3, #1
 800b06e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b070:	4b2f      	ldr	r3, [pc, #188]	@ (800b130 <_txe_byte_pool_create+0x130>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b076:	429a      	cmp	r2, r3
 800b078:	d3f0      	bcc.n	800b05c <_txe_byte_pool_create+0x5c>
 800b07a:	e000      	b.n	800b07e <_txe_byte_pool_create+0x7e>
                break;
 800b07c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b07e:	f3ef 8310 	mrs	r3, PRIMASK
 800b082:	623b      	str	r3, [r7, #32]
    return(posture);
 800b084:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b086:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b088:	b672      	cpsid	i
    return(int_posture);
 800b08a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800b08c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800b08e:	4b26      	ldr	r3, [pc, #152]	@ (800b128 <_txe_byte_pool_create+0x128>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	3b01      	subs	r3, #1
 800b094:	4a24      	ldr	r2, [pc, #144]	@ (800b128 <_txe_byte_pool_create+0x128>)
 800b096:	6013      	str	r3, [r2, #0]
 800b098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b09a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b09e:	f383 8810 	msr	PRIMASK, r3
}
 800b0a2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800b0a4:	f7ff fa96 	bl	800a5d4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800b0a8:	68fa      	ldr	r2, [r7, #12]
 800b0aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d102      	bne.n	800b0b6 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800b0b0:	2302      	movs	r3, #2
 800b0b2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0b4:	e029      	b.n	800b10a <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d102      	bne.n	800b0c2 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800b0bc:	2303      	movs	r3, #3
 800b0be:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0c0:	e023      	b.n	800b10a <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	2b63      	cmp	r3, #99	@ 0x63
 800b0c6:	d802      	bhi.n	800b0ce <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800b0c8:	2305      	movs	r3, #5
 800b0ca:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0cc:	e01d      	b.n	800b10a <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800b0ce:	4b19      	ldr	r3, [pc, #100]	@ (800b134 <_txe_byte_pool_create+0x134>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800b0d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0d6:	4a18      	ldr	r2, [pc, #96]	@ (800b138 <_txe_byte_pool_create+0x138>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d101      	bne.n	800b0e0 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800b0dc:	2313      	movs	r3, #19
 800b0de:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b0e0:	f3ef 8305 	mrs	r3, IPSR
 800b0e4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800b0e6:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800b0e8:	4b14      	ldr	r3, [pc, #80]	@ (800b13c <_txe_byte_pool_create+0x13c>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d00b      	beq.n	800b10a <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b0f2:	f3ef 8305 	mrs	r3, IPSR
 800b0f6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b0f8:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800b0fa:	4b10      	ldr	r3, [pc, #64]	@ (800b13c <_txe_byte_pool_create+0x13c>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4313      	orrs	r3, r2
 800b100:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800b104:	d201      	bcs.n	800b10a <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800b106:	2313      	movs	r3, #19
 800b108:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800b10a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d106      	bne.n	800b11e <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	687a      	ldr	r2, [r7, #4]
 800b114:	68b9      	ldr	r1, [r7, #8]
 800b116:	68f8      	ldr	r0, [r7, #12]
 800b118:	f7fe f976 	bl	8009408 <_tx_byte_pool_create>
 800b11c:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800b11e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b120:	4618      	mov	r0, r3
 800b122:	3748      	adds	r7, #72	@ 0x48
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	2000225c 	.word	0x2000225c
 800b12c:	200021b4 	.word	0x200021b4
 800b130:	200021b8 	.word	0x200021b8
 800b134:	200021c4 	.word	0x200021c4
 800b138:	2000230c 	.word	0x2000230c
 800b13c:	2000000c 	.word	0x2000000c

0800b140 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b094      	sub	sp, #80	@ 0x50
 800b144:	af02      	add	r7, sp, #8
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	607a      	str	r2, [r7, #4]
 800b14c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800b14e:	2300      	movs	r3, #0
 800b150:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d102      	bne.n	800b15e <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800b158:	2309      	movs	r3, #9
 800b15a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b15c:	e083      	b.n	800b266 <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 800b15e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b160:	2b38      	cmp	r3, #56	@ 0x38
 800b162:	d002      	beq.n	800b16a <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800b164:	2309      	movs	r3, #9
 800b166:	647b      	str	r3, [r7, #68]	@ 0x44
 800b168:	e07d      	b.n	800b266 <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b16a:	f3ef 8310 	mrs	r3, PRIMASK
 800b16e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800b170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800b172:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800b174:	b672      	cpsid	i
    return(int_posture);
 800b176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800b178:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800b17a:	4b43      	ldr	r3, [pc, #268]	@ (800b288 <_txe_queue_create+0x148>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	3301      	adds	r3, #1
 800b180:	4a41      	ldr	r2, [pc, #260]	@ (800b288 <_txe_queue_create+0x148>)
 800b182:	6013      	str	r3, [r2, #0]
 800b184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b186:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b18a:	f383 8810 	msr	PRIMASK, r3
}
 800b18e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 800b190:	4b3e      	ldr	r3, [pc, #248]	@ (800b28c <_txe_queue_create+0x14c>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800b196:	2300      	movs	r3, #0
 800b198:	643b      	str	r3, [r7, #64]	@ 0x40
 800b19a:	e009      	b.n	800b1b0 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 800b19c:	68fa      	ldr	r2, [r7, #12]
 800b19e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d00b      	beq.n	800b1bc <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 800b1a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800b1aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	643b      	str	r3, [r7, #64]	@ 0x40
 800b1b0:	4b37      	ldr	r3, [pc, #220]	@ (800b290 <_txe_queue_create+0x150>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d3f0      	bcc.n	800b19c <_txe_queue_create+0x5c>
 800b1ba:	e000      	b.n	800b1be <_txe_queue_create+0x7e>
                break;
 800b1bc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b1be:	f3ef 8310 	mrs	r3, PRIMASK
 800b1c2:	623b      	str	r3, [r7, #32]
    return(posture);
 800b1c4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b1c6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b1c8:	b672      	cpsid	i
    return(int_posture);
 800b1ca:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800b1cc:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800b1ce:	4b2e      	ldr	r3, [pc, #184]	@ (800b288 <_txe_queue_create+0x148>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	3b01      	subs	r3, #1
 800b1d4:	4a2c      	ldr	r2, [pc, #176]	@ (800b288 <_txe_queue_create+0x148>)
 800b1d6:	6013      	str	r3, [r2, #0]
 800b1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1da:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1de:	f383 8810 	msr	PRIMASK, r3
}
 800b1e2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800b1e4:	f7ff f9f6 	bl	800a5d4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d102      	bne.n	800b1f6 <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 800b1f0:	2309      	movs	r3, #9
 800b1f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1f4:	e037      	b.n	800b266 <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d102      	bne.n	800b202 <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 800b1fc:	2303      	movs	r3, #3
 800b1fe:	647b      	str	r3, [r7, #68]	@ 0x44
 800b200:	e031      	b.n	800b266 <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d102      	bne.n	800b20e <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800b208:	2305      	movs	r3, #5
 800b20a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b20c:	e02b      	b.n	800b266 <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2b10      	cmp	r3, #16
 800b212:	d902      	bls.n	800b21a <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800b214:	2305      	movs	r3, #5
 800b216:	647b      	str	r3, [r7, #68]	@ 0x44
 800b218:	e025      	b.n	800b266 <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 800b21a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b21c:	089b      	lsrs	r3, r3, #2
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	429a      	cmp	r2, r3
 800b222:	d902      	bls.n	800b22a <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 800b224:	2305      	movs	r3, #5
 800b226:	647b      	str	r3, [r7, #68]	@ 0x44
 800b228:	e01d      	b.n	800b266 <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800b22a:	4b1a      	ldr	r3, [pc, #104]	@ (800b294 <_txe_queue_create+0x154>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800b230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b232:	4a19      	ldr	r2, [pc, #100]	@ (800b298 <_txe_queue_create+0x158>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d101      	bne.n	800b23c <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800b238:	2313      	movs	r3, #19
 800b23a:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b23c:	f3ef 8305 	mrs	r3, IPSR
 800b240:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800b242:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800b244:	4b15      	ldr	r3, [pc, #84]	@ (800b29c <_txe_queue_create+0x15c>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4313      	orrs	r3, r2
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d00b      	beq.n	800b266 <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b24e:	f3ef 8305 	mrs	r3, IPSR
 800b252:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b254:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800b256:	4b11      	ldr	r3, [pc, #68]	@ (800b29c <_txe_queue_create+0x15c>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4313      	orrs	r3, r2
 800b25c:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800b260:	d201      	bcs.n	800b266 <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800b262:	2313      	movs	r3, #19
 800b264:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800b266:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d108      	bne.n	800b27e <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 800b26c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b26e:	9300      	str	r3, [sp, #0]
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	687a      	ldr	r2, [r7, #4]
 800b274:	68b9      	ldr	r1, [r7, #8]
 800b276:	68f8      	ldr	r0, [r7, #12]
 800b278:	f7fe fa4e 	bl	8009718 <_tx_queue_create>
 800b27c:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800b27e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b280:	4618      	mov	r0, r3
 800b282:	3748      	adds	r7, #72	@ 0x48
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	2000225c 	.word	0x2000225c
 800b28c:	20002194 	.word	0x20002194
 800b290:	20002198 	.word	0x20002198
 800b294:	200021c4 	.word	0x200021c4
 800b298:	2000230c 	.word	0x2000230c
 800b29c:	2000000c 	.word	0x2000000c

0800b2a0 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b088      	sub	sp, #32
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d102      	bne.n	800b2bc <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800b2b6:	2309      	movs	r3, #9
 800b2b8:	61fb      	str	r3, [r7, #28]
 800b2ba:	e025      	b.n	800b308 <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a18      	ldr	r2, [pc, #96]	@ (800b324 <_txe_queue_receive+0x84>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d002      	beq.n	800b2cc <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800b2c6:	2309      	movs	r3, #9
 800b2c8:	61fb      	str	r3, [r7, #28]
 800b2ca:	e01d      	b.n	800b308 <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d102      	bne.n	800b2d8 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800b2d2:	2303      	movs	r3, #3
 800b2d4:	61fb      	str	r3, [r7, #28]
 800b2d6:	e017      	b.n	800b308 <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d014      	beq.n	800b308 <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b2de:	f3ef 8305 	mrs	r3, IPSR
 800b2e2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b2e4:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800b2e6:	4b10      	ldr	r3, [pc, #64]	@ (800b328 <_txe_queue_receive+0x88>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d002      	beq.n	800b2f6 <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800b2f0:	2304      	movs	r3, #4
 800b2f2:	61fb      	str	r3, [r7, #28]
 800b2f4:	e008      	b.n	800b308 <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800b2f6:	4b0d      	ldr	r3, [pc, #52]	@ (800b32c <_txe_queue_receive+0x8c>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	4a0c      	ldr	r2, [pc, #48]	@ (800b330 <_txe_queue_receive+0x90>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d101      	bne.n	800b308 <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800b304:	2304      	movs	r3, #4
 800b306:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d105      	bne.n	800b31a <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	68b9      	ldr	r1, [r7, #8]
 800b312:	68f8      	ldr	r0, [r7, #12]
 800b314:	f7fe fa74 	bl	8009800 <_tx_queue_receive>
 800b318:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800b31a:	69fb      	ldr	r3, [r7, #28]
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3720      	adds	r7, #32
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}
 800b324:	51554555 	.word	0x51554555
 800b328:	2000000c 	.word	0x2000000c
 800b32c:	200021c4 	.word	0x200021c4
 800b330:	2000230c 	.word	0x2000230c

0800b334 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b088      	sub	sp, #32
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800b340:	2300      	movs	r3, #0
 800b342:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d102      	bne.n	800b350 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800b34a:	2309      	movs	r3, #9
 800b34c:	61fb      	str	r3, [r7, #28]
 800b34e:	e025      	b.n	800b39c <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4a18      	ldr	r2, [pc, #96]	@ (800b3b8 <_txe_queue_send+0x84>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d002      	beq.n	800b360 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800b35a:	2309      	movs	r3, #9
 800b35c:	61fb      	str	r3, [r7, #28]
 800b35e:	e01d      	b.n	800b39c <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d102      	bne.n	800b36c <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800b366:	2303      	movs	r3, #3
 800b368:	61fb      	str	r3, [r7, #28]
 800b36a:	e017      	b.n	800b39c <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d014      	beq.n	800b39c <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b372:	f3ef 8305 	mrs	r3, IPSR
 800b376:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b378:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800b37a:	4b10      	ldr	r3, [pc, #64]	@ (800b3bc <_txe_queue_send+0x88>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4313      	orrs	r3, r2
 800b380:	2b00      	cmp	r3, #0
 800b382:	d002      	beq.n	800b38a <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800b384:	2304      	movs	r3, #4
 800b386:	61fb      	str	r3, [r7, #28]
 800b388:	e008      	b.n	800b39c <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800b38a:	4b0d      	ldr	r3, [pc, #52]	@ (800b3c0 <_txe_queue_send+0x8c>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	4a0c      	ldr	r2, [pc, #48]	@ (800b3c4 <_txe_queue_send+0x90>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d101      	bne.n	800b39c <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800b398:	2304      	movs	r3, #4
 800b39a:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d105      	bne.n	800b3ae <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	68b9      	ldr	r1, [r7, #8]
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	f7fe fbf2 	bl	8009b90 <_tx_queue_send>
 800b3ac:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800b3ae:	69fb      	ldr	r3, [r7, #28]
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3720      	adds	r7, #32
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	51554555 	.word	0x51554555
 800b3bc:	2000000c 	.word	0x2000000c
 800b3c0:	200021c4 	.word	0x200021c4
 800b3c4:	2000230c 	.word	0x2000230c

0800b3c8 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b092      	sub	sp, #72	@ 0x48
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	607a      	str	r2, [r7, #4]
 800b3d4:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d102      	bne.n	800b3e6 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800b3e0:	230c      	movs	r3, #12
 800b3e2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3e4:	e054      	b.n	800b490 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	2b1c      	cmp	r3, #28
 800b3ea:	d002      	beq.n	800b3f2 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800b3ec:	230c      	movs	r3, #12
 800b3ee:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3f0:	e04e      	b.n	800b490 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b3f2:	f3ef 8310 	mrs	r3, PRIMASK
 800b3f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800b3f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800b3fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800b3fc:	b672      	cpsid	i
    return(int_posture);
 800b3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800b400:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800b402:	4b36      	ldr	r3, [pc, #216]	@ (800b4dc <_txe_semaphore_create+0x114>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	3301      	adds	r3, #1
 800b408:	4a34      	ldr	r2, [pc, #208]	@ (800b4dc <_txe_semaphore_create+0x114>)
 800b40a:	6013      	str	r3, [r2, #0]
 800b40c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b40e:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b412:	f383 8810 	msr	PRIMASK, r3
}
 800b416:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800b418:	4b31      	ldr	r3, [pc, #196]	@ (800b4e0 <_txe_semaphore_create+0x118>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800b41e:	2300      	movs	r3, #0
 800b420:	643b      	str	r3, [r7, #64]	@ 0x40
 800b422:	e009      	b.n	800b438 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b428:	429a      	cmp	r2, r3
 800b42a:	d00b      	beq.n	800b444 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800b42c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b42e:	695b      	ldr	r3, [r3, #20]
 800b430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800b432:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b434:	3301      	adds	r3, #1
 800b436:	643b      	str	r3, [r7, #64]	@ 0x40
 800b438:	4b2a      	ldr	r3, [pc, #168]	@ (800b4e4 <_txe_semaphore_create+0x11c>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b43e:	429a      	cmp	r2, r3
 800b440:	d3f0      	bcc.n	800b424 <_txe_semaphore_create+0x5c>
 800b442:	e000      	b.n	800b446 <_txe_semaphore_create+0x7e>
                break;
 800b444:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b446:	f3ef 8310 	mrs	r3, PRIMASK
 800b44a:	623b      	str	r3, [r7, #32]
    return(posture);
 800b44c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b44e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b450:	b672      	cpsid	i
    return(int_posture);
 800b452:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800b454:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800b456:	4b21      	ldr	r3, [pc, #132]	@ (800b4dc <_txe_semaphore_create+0x114>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	3b01      	subs	r3, #1
 800b45c:	4a1f      	ldr	r2, [pc, #124]	@ (800b4dc <_txe_semaphore_create+0x114>)
 800b45e:	6013      	str	r3, [r2, #0]
 800b460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b462:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b466:	f383 8810 	msr	PRIMASK, r3
}
 800b46a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800b46c:	f7ff f8b2 	bl	800a5d4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800b470:	68fa      	ldr	r2, [r7, #12]
 800b472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b474:	429a      	cmp	r2, r3
 800b476:	d102      	bne.n	800b47e <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800b478:	230c      	movs	r3, #12
 800b47a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b47c:	e008      	b.n	800b490 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800b47e:	4b1a      	ldr	r3, [pc, #104]	@ (800b4e8 <_txe_semaphore_create+0x120>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800b484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b486:	4a19      	ldr	r2, [pc, #100]	@ (800b4ec <_txe_semaphore_create+0x124>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d101      	bne.n	800b490 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800b48c:	2313      	movs	r3, #19
 800b48e:	647b      	str	r3, [r7, #68]	@ 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800b490:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b492:	2b00      	cmp	r3, #0
 800b494:	d114      	bne.n	800b4c0 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b496:	f3ef 8305 	mrs	r3, IPSR
 800b49a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800b49c:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800b49e:	4b14      	ldr	r3, [pc, #80]	@ (800b4f0 <_txe_semaphore_create+0x128>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d00b      	beq.n	800b4c0 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b4a8:	f3ef 8305 	mrs	r3, IPSR
 800b4ac:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b4ae:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800b4b0:	4b0f      	ldr	r3, [pc, #60]	@ (800b4f0 <_txe_semaphore_create+0x128>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800b4ba:	d201      	bcs.n	800b4c0 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800b4bc:	2313      	movs	r3, #19
 800b4be:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800b4c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d105      	bne.n	800b4d2 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	68b9      	ldr	r1, [r7, #8]
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f7fe fd08 	bl	8009ee0 <_tx_semaphore_create>
 800b4d0:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800b4d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3748      	adds	r7, #72	@ 0x48
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	2000225c 	.word	0x2000225c
 800b4e0:	2000218c 	.word	0x2000218c
 800b4e4:	20002190 	.word	0x20002190
 800b4e8:	200021c4 	.word	0x200021c4
 800b4ec:	2000230c 	.word	0x2000230c
 800b4f0:	2000000c 	.word	0x2000000c

0800b4f4 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b086      	sub	sp, #24
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800b4fe:	2300      	movs	r3, #0
 800b500:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d102      	bne.n	800b50e <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800b508:	230c      	movs	r3, #12
 800b50a:	617b      	str	r3, [r7, #20]
 800b50c:	e01f      	b.n	800b54e <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a15      	ldr	r2, [pc, #84]	@ (800b568 <_txe_semaphore_get+0x74>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d002      	beq.n	800b51e <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800b518:	230c      	movs	r3, #12
 800b51a:	617b      	str	r3, [r7, #20]
 800b51c:	e017      	b.n	800b54e <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d014      	beq.n	800b54e <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b524:	f3ef 8305 	mrs	r3, IPSR
 800b528:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800b52a:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800b52c:	4b0f      	ldr	r3, [pc, #60]	@ (800b56c <_txe_semaphore_get+0x78>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4313      	orrs	r3, r2
 800b532:	2b00      	cmp	r3, #0
 800b534:	d002      	beq.n	800b53c <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800b536:	2304      	movs	r3, #4
 800b538:	617b      	str	r3, [r7, #20]
 800b53a:	e008      	b.n	800b54e <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800b53c:	4b0c      	ldr	r3, [pc, #48]	@ (800b570 <_txe_semaphore_get+0x7c>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	4a0b      	ldr	r2, [pc, #44]	@ (800b574 <_txe_semaphore_get+0x80>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d101      	bne.n	800b54e <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800b54a:	2304      	movs	r3, #4
 800b54c:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d104      	bne.n	800b55e <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800b554:	6839      	ldr	r1, [r7, #0]
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f7fe fd14 	bl	8009f84 <_tx_semaphore_get>
 800b55c:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800b55e:	697b      	ldr	r3, [r7, #20]
}
 800b560:	4618      	mov	r0, r3
 800b562:	3718      	adds	r7, #24
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	53454d41 	.word	0x53454d41
 800b56c:	2000000c 	.word	0x2000000c
 800b570:	200021c4 	.word	0x200021c4
 800b574:	2000230c 	.word	0x2000230c

0800b578 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d102      	bne.n	800b58c <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800b586:	230c      	movs	r3, #12
 800b588:	60fb      	str	r3, [r7, #12]
 800b58a:	e00b      	b.n	800b5a4 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a07      	ldr	r2, [pc, #28]	@ (800b5b0 <_txe_semaphore_put+0x38>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d002      	beq.n	800b59c <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800b596:	230c      	movs	r3, #12
 800b598:	60fb      	str	r3, [r7, #12]
 800b59a:	e003      	b.n	800b5a4 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f7fe fdc3 	bl	800a128 <_tx_semaphore_put>
 800b5a2:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3710      	adds	r7, #16
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	53454d41 	.word	0x53454d41

0800b5b4 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b09a      	sub	sp, #104	@ 0x68
 800b5b8:	af06      	add	r7, sp, #24
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	607a      	str	r2, [r7, #4]
 800b5c0:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d102      	bne.n	800b5d2 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800b5cc:	230e      	movs	r3, #14
 800b5ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b5d0:	e0bb      	b.n	800b74a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800b5d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b5d4:	2bb0      	cmp	r3, #176	@ 0xb0
 800b5d6:	d002      	beq.n	800b5de <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800b5d8:	230e      	movs	r3, #14
 800b5da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b5dc:	e0b5      	b.n	800b74a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b5de:	f3ef 8310 	mrs	r3, PRIMASK
 800b5e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800b5e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800b5e6:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800b5e8:	b672      	cpsid	i
    return(int_posture);
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800b5ec:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800b5ee:	4b64      	ldr	r3, [pc, #400]	@ (800b780 <_txe_thread_create+0x1cc>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	4a62      	ldr	r2, [pc, #392]	@ (800b780 <_txe_thread_create+0x1cc>)
 800b5f6:	6013      	str	r3, [r2, #0]
 800b5f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b5fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5fe:	f383 8810 	msr	PRIMASK, r3
}
 800b602:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800b604:	2300      	movs	r3, #0
 800b606:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 800b608:	4b5e      	ldr	r3, [pc, #376]	@ (800b784 <_txe_thread_create+0x1d0>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800b60e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b610:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800b612:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b614:	3b01      	subs	r3, #1
 800b616:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b618:	4413      	add	r3, r2
 800b61a:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800b61c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b61e:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800b620:	2300      	movs	r3, #0
 800b622:	647b      	str	r3, [r7, #68]	@ 0x44
 800b624:	e02b      	b.n	800b67e <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800b626:	68fa      	ldr	r2, [r7, #12]
 800b628:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d101      	bne.n	800b632 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800b62e:	2301      	movs	r3, #1
 800b630:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800b632:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b634:	2b01      	cmp	r3, #1
 800b636:	d028      	beq.n	800b68a <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800b638:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b63e:	429a      	cmp	r2, r3
 800b640:	d308      	bcc.n	800b654 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800b642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b644:	691b      	ldr	r3, [r3, #16]
 800b646:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b648:	429a      	cmp	r2, r3
 800b64a:	d203      	bcs.n	800b654 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800b64c:	2300      	movs	r3, #0
 800b64e:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800b650:	2301      	movs	r3, #1
 800b652:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800b654:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d308      	bcc.n	800b670 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800b65e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b660:	691b      	ldr	r3, [r3, #16]
 800b662:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b664:	429a      	cmp	r2, r3
 800b666:	d203      	bcs.n	800b670 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800b668:	2300      	movs	r3, #0
 800b66a:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800b66c:	2301      	movs	r3, #1
 800b66e:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800b670:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b676:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800b678:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b67a:	3301      	adds	r3, #1
 800b67c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b67e:	4b42      	ldr	r3, [pc, #264]	@ (800b788 <_txe_thread_create+0x1d4>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b684:	429a      	cmp	r2, r3
 800b686:	d3ce      	bcc.n	800b626 <_txe_thread_create+0x72>
 800b688:	e000      	b.n	800b68c <_txe_thread_create+0xd8>
                break;
 800b68a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b68c:	f3ef 8310 	mrs	r3, PRIMASK
 800b690:	61fb      	str	r3, [r7, #28]
    return(posture);
 800b692:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800b694:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b696:	b672      	cpsid	i
    return(int_posture);
 800b698:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800b69a:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800b69c:	4b38      	ldr	r3, [pc, #224]	@ (800b780 <_txe_thread_create+0x1cc>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	3b01      	subs	r3, #1
 800b6a2:	4a37      	ldr	r2, [pc, #220]	@ (800b780 <_txe_thread_create+0x1cc>)
 800b6a4:	6013      	str	r3, [r2, #0]
 800b6a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6a8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b6aa:	6a3b      	ldr	r3, [r7, #32]
 800b6ac:	f383 8810 	msr	PRIMASK, r3
}
 800b6b0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800b6b2:	f7fe ff8f 	bl	800a5d4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800b6b6:	68fa      	ldr	r2, [r7, #12]
 800b6b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d102      	bne.n	800b6c4 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800b6be:	230e      	movs	r3, #14
 800b6c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6c2:	e042      	b.n	800b74a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800b6c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d102      	bne.n	800b6d0 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800b6ca:	2303      	movs	r3, #3
 800b6cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6ce:	e03c      	b.n	800b74a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d102      	bne.n	800b6dc <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800b6d6:	2303      	movs	r3, #3
 800b6d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6da:	e036      	b.n	800b74a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800b6dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6de:	2bc7      	cmp	r3, #199	@ 0xc7
 800b6e0:	d802      	bhi.n	800b6e8 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800b6e2:	2305      	movs	r3, #5
 800b6e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6e6:	e030      	b.n	800b74a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800b6e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b6ea:	2b1f      	cmp	r3, #31
 800b6ec:	d902      	bls.n	800b6f4 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800b6ee:	230f      	movs	r3, #15
 800b6f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6f2:	e02a      	b.n	800b74a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800b6f4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b6f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d902      	bls.n	800b702 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800b6fc:	2318      	movs	r3, #24
 800b6fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b700:	e023      	b.n	800b74a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800b702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b704:	2b01      	cmp	r3, #1
 800b706:	d902      	bls.n	800b70e <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800b708:	2310      	movs	r3, #16
 800b70a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b70c:	e01d      	b.n	800b74a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800b70e:	4b1f      	ldr	r3, [pc, #124]	@ (800b78c <_txe_thread_create+0x1d8>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800b714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b716:	4a1e      	ldr	r2, [pc, #120]	@ (800b790 <_txe_thread_create+0x1dc>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d101      	bne.n	800b720 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800b71c:	2313      	movs	r3, #19
 800b71e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b720:	f3ef 8305 	mrs	r3, IPSR
 800b724:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b726:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800b728:	4b1a      	ldr	r3, [pc, #104]	@ (800b794 <_txe_thread_create+0x1e0>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4313      	orrs	r3, r2
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d00b      	beq.n	800b74a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b732:	f3ef 8305 	mrs	r3, IPSR
 800b736:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800b738:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800b73a:	4b16      	ldr	r3, [pc, #88]	@ (800b794 <_txe_thread_create+0x1e0>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4313      	orrs	r3, r2
 800b740:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800b744:	d201      	bcs.n	800b74a <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800b746:	2313      	movs	r3, #19
 800b748:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800b74a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d112      	bne.n	800b776 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800b750:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b752:	9305      	str	r3, [sp, #20]
 800b754:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b756:	9304      	str	r3, [sp, #16]
 800b758:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b75a:	9303      	str	r3, [sp, #12]
 800b75c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b75e:	9302      	str	r3, [sp, #8]
 800b760:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b762:	9301      	str	r3, [sp, #4]
 800b764:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b766:	9300      	str	r3, [sp, #0]
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	68b9      	ldr	r1, [r7, #8]
 800b76e:	68f8      	ldr	r0, [r7, #12]
 800b770:	f7fe fd32 	bl	800a1d8 <_tx_thread_create>
 800b774:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800b776:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3750      	adds	r7, #80	@ 0x50
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	2000225c 	.word	0x2000225c
 800b784:	200021cc 	.word	0x200021cc
 800b788:	200021d0 	.word	0x200021d0
 800b78c:	200021c4 	.word	0x200021c4
 800b790:	2000230c 	.word	0x2000230c
 800b794:	2000000c 	.word	0x2000000c

0800b798 <__sflush_r>:
 800b798:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7a0:	0716      	lsls	r6, r2, #28
 800b7a2:	4605      	mov	r5, r0
 800b7a4:	460c      	mov	r4, r1
 800b7a6:	d454      	bmi.n	800b852 <__sflush_r+0xba>
 800b7a8:	684b      	ldr	r3, [r1, #4]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	dc02      	bgt.n	800b7b4 <__sflush_r+0x1c>
 800b7ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	dd48      	ble.n	800b846 <__sflush_r+0xae>
 800b7b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b7b6:	2e00      	cmp	r6, #0
 800b7b8:	d045      	beq.n	800b846 <__sflush_r+0xae>
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b7c0:	682f      	ldr	r7, [r5, #0]
 800b7c2:	6a21      	ldr	r1, [r4, #32]
 800b7c4:	602b      	str	r3, [r5, #0]
 800b7c6:	d030      	beq.n	800b82a <__sflush_r+0x92>
 800b7c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b7ca:	89a3      	ldrh	r3, [r4, #12]
 800b7cc:	0759      	lsls	r1, r3, #29
 800b7ce:	d505      	bpl.n	800b7dc <__sflush_r+0x44>
 800b7d0:	6863      	ldr	r3, [r4, #4]
 800b7d2:	1ad2      	subs	r2, r2, r3
 800b7d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b7d6:	b10b      	cbz	r3, 800b7dc <__sflush_r+0x44>
 800b7d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b7da:	1ad2      	subs	r2, r2, r3
 800b7dc:	2300      	movs	r3, #0
 800b7de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b7e0:	6a21      	ldr	r1, [r4, #32]
 800b7e2:	4628      	mov	r0, r5
 800b7e4:	47b0      	blx	r6
 800b7e6:	1c43      	adds	r3, r0, #1
 800b7e8:	89a3      	ldrh	r3, [r4, #12]
 800b7ea:	d106      	bne.n	800b7fa <__sflush_r+0x62>
 800b7ec:	6829      	ldr	r1, [r5, #0]
 800b7ee:	291d      	cmp	r1, #29
 800b7f0:	d82b      	bhi.n	800b84a <__sflush_r+0xb2>
 800b7f2:	4a2a      	ldr	r2, [pc, #168]	@ (800b89c <__sflush_r+0x104>)
 800b7f4:	410a      	asrs	r2, r1
 800b7f6:	07d6      	lsls	r6, r2, #31
 800b7f8:	d427      	bmi.n	800b84a <__sflush_r+0xb2>
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	04d9      	lsls	r1, r3, #19
 800b7fe:	6062      	str	r2, [r4, #4]
 800b800:	6922      	ldr	r2, [r4, #16]
 800b802:	6022      	str	r2, [r4, #0]
 800b804:	d504      	bpl.n	800b810 <__sflush_r+0x78>
 800b806:	1c42      	adds	r2, r0, #1
 800b808:	d101      	bne.n	800b80e <__sflush_r+0x76>
 800b80a:	682b      	ldr	r3, [r5, #0]
 800b80c:	b903      	cbnz	r3, 800b810 <__sflush_r+0x78>
 800b80e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b810:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b812:	602f      	str	r7, [r5, #0]
 800b814:	b1b9      	cbz	r1, 800b846 <__sflush_r+0xae>
 800b816:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b81a:	4299      	cmp	r1, r3
 800b81c:	d002      	beq.n	800b824 <__sflush_r+0x8c>
 800b81e:	4628      	mov	r0, r5
 800b820:	f000 fa0e 	bl	800bc40 <_free_r>
 800b824:	2300      	movs	r3, #0
 800b826:	6363      	str	r3, [r4, #52]	@ 0x34
 800b828:	e00d      	b.n	800b846 <__sflush_r+0xae>
 800b82a:	2301      	movs	r3, #1
 800b82c:	4628      	mov	r0, r5
 800b82e:	47b0      	blx	r6
 800b830:	4602      	mov	r2, r0
 800b832:	1c50      	adds	r0, r2, #1
 800b834:	d1c9      	bne.n	800b7ca <__sflush_r+0x32>
 800b836:	682b      	ldr	r3, [r5, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d0c6      	beq.n	800b7ca <__sflush_r+0x32>
 800b83c:	2b1d      	cmp	r3, #29
 800b83e:	d001      	beq.n	800b844 <__sflush_r+0xac>
 800b840:	2b16      	cmp	r3, #22
 800b842:	d11d      	bne.n	800b880 <__sflush_r+0xe8>
 800b844:	602f      	str	r7, [r5, #0]
 800b846:	2000      	movs	r0, #0
 800b848:	e021      	b.n	800b88e <__sflush_r+0xf6>
 800b84a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b84e:	b21b      	sxth	r3, r3
 800b850:	e01a      	b.n	800b888 <__sflush_r+0xf0>
 800b852:	690f      	ldr	r7, [r1, #16]
 800b854:	2f00      	cmp	r7, #0
 800b856:	d0f6      	beq.n	800b846 <__sflush_r+0xae>
 800b858:	0793      	lsls	r3, r2, #30
 800b85a:	680e      	ldr	r6, [r1, #0]
 800b85c:	600f      	str	r7, [r1, #0]
 800b85e:	bf0c      	ite	eq
 800b860:	694b      	ldreq	r3, [r1, #20]
 800b862:	2300      	movne	r3, #0
 800b864:	eba6 0807 	sub.w	r8, r6, r7
 800b868:	608b      	str	r3, [r1, #8]
 800b86a:	f1b8 0f00 	cmp.w	r8, #0
 800b86e:	ddea      	ble.n	800b846 <__sflush_r+0xae>
 800b870:	4643      	mov	r3, r8
 800b872:	463a      	mov	r2, r7
 800b874:	6a21      	ldr	r1, [r4, #32]
 800b876:	4628      	mov	r0, r5
 800b878:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b87a:	47b0      	blx	r6
 800b87c:	2800      	cmp	r0, #0
 800b87e:	dc08      	bgt.n	800b892 <__sflush_r+0xfa>
 800b880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b884:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b888:	f04f 30ff 	mov.w	r0, #4294967295
 800b88c:	81a3      	strh	r3, [r4, #12]
 800b88e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b892:	4407      	add	r7, r0
 800b894:	eba8 0800 	sub.w	r8, r8, r0
 800b898:	e7e7      	b.n	800b86a <__sflush_r+0xd2>
 800b89a:	bf00      	nop
 800b89c:	dfbffffe 	.word	0xdfbffffe

0800b8a0 <_fflush_r>:
 800b8a0:	b538      	push	{r3, r4, r5, lr}
 800b8a2:	690b      	ldr	r3, [r1, #16]
 800b8a4:	4605      	mov	r5, r0
 800b8a6:	460c      	mov	r4, r1
 800b8a8:	b913      	cbnz	r3, 800b8b0 <_fflush_r+0x10>
 800b8aa:	2500      	movs	r5, #0
 800b8ac:	4628      	mov	r0, r5
 800b8ae:	bd38      	pop	{r3, r4, r5, pc}
 800b8b0:	b118      	cbz	r0, 800b8ba <_fflush_r+0x1a>
 800b8b2:	6a03      	ldr	r3, [r0, #32]
 800b8b4:	b90b      	cbnz	r3, 800b8ba <_fflush_r+0x1a>
 800b8b6:	f000 f8bb 	bl	800ba30 <__sinit>
 800b8ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d0f3      	beq.n	800b8aa <_fflush_r+0xa>
 800b8c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b8c4:	07d0      	lsls	r0, r2, #31
 800b8c6:	d404      	bmi.n	800b8d2 <_fflush_r+0x32>
 800b8c8:	0599      	lsls	r1, r3, #22
 800b8ca:	d402      	bmi.n	800b8d2 <_fflush_r+0x32>
 800b8cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8ce:	f000 f9b4 	bl	800bc3a <__retarget_lock_acquire_recursive>
 800b8d2:	4628      	mov	r0, r5
 800b8d4:	4621      	mov	r1, r4
 800b8d6:	f7ff ff5f 	bl	800b798 <__sflush_r>
 800b8da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b8dc:	4605      	mov	r5, r0
 800b8de:	07da      	lsls	r2, r3, #31
 800b8e0:	d4e4      	bmi.n	800b8ac <_fflush_r+0xc>
 800b8e2:	89a3      	ldrh	r3, [r4, #12]
 800b8e4:	059b      	lsls	r3, r3, #22
 800b8e6:	d4e1      	bmi.n	800b8ac <_fflush_r+0xc>
 800b8e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8ea:	f000 f9a7 	bl	800bc3c <__retarget_lock_release_recursive>
 800b8ee:	e7dd      	b.n	800b8ac <_fflush_r+0xc>

0800b8f0 <fflush>:
 800b8f0:	4601      	mov	r1, r0
 800b8f2:	b920      	cbnz	r0, 800b8fe <fflush+0xe>
 800b8f4:	4a04      	ldr	r2, [pc, #16]	@ (800b908 <fflush+0x18>)
 800b8f6:	4905      	ldr	r1, [pc, #20]	@ (800b90c <fflush+0x1c>)
 800b8f8:	4805      	ldr	r0, [pc, #20]	@ (800b910 <fflush+0x20>)
 800b8fa:	f000 b8b1 	b.w	800ba60 <_fwalk_sglue>
 800b8fe:	4b05      	ldr	r3, [pc, #20]	@ (800b914 <fflush+0x24>)
 800b900:	6818      	ldr	r0, [r3, #0]
 800b902:	f7ff bfcd 	b.w	800b8a0 <_fflush_r>
 800b906:	bf00      	nop
 800b908:	20000010 	.word	0x20000010
 800b90c:	0800b8a1 	.word	0x0800b8a1
 800b910:	20000020 	.word	0x20000020
 800b914:	2000001c 	.word	0x2000001c

0800b918 <std>:
 800b918:	2300      	movs	r3, #0
 800b91a:	b510      	push	{r4, lr}
 800b91c:	4604      	mov	r4, r0
 800b91e:	6083      	str	r3, [r0, #8]
 800b920:	8181      	strh	r1, [r0, #12]
 800b922:	4619      	mov	r1, r3
 800b924:	6643      	str	r3, [r0, #100]	@ 0x64
 800b926:	81c2      	strh	r2, [r0, #14]
 800b928:	2208      	movs	r2, #8
 800b92a:	6183      	str	r3, [r0, #24]
 800b92c:	e9c0 3300 	strd	r3, r3, [r0]
 800b930:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b934:	305c      	adds	r0, #92	@ 0x5c
 800b936:	f000 f906 	bl	800bb46 <memset>
 800b93a:	4b0d      	ldr	r3, [pc, #52]	@ (800b970 <std+0x58>)
 800b93c:	6224      	str	r4, [r4, #32]
 800b93e:	6263      	str	r3, [r4, #36]	@ 0x24
 800b940:	4b0c      	ldr	r3, [pc, #48]	@ (800b974 <std+0x5c>)
 800b942:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b944:	4b0c      	ldr	r3, [pc, #48]	@ (800b978 <std+0x60>)
 800b946:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b948:	4b0c      	ldr	r3, [pc, #48]	@ (800b97c <std+0x64>)
 800b94a:	6323      	str	r3, [r4, #48]	@ 0x30
 800b94c:	4b0c      	ldr	r3, [pc, #48]	@ (800b980 <std+0x68>)
 800b94e:	429c      	cmp	r4, r3
 800b950:	d006      	beq.n	800b960 <std+0x48>
 800b952:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b956:	4294      	cmp	r4, r2
 800b958:	d002      	beq.n	800b960 <std+0x48>
 800b95a:	33d0      	adds	r3, #208	@ 0xd0
 800b95c:	429c      	cmp	r4, r3
 800b95e:	d105      	bne.n	800b96c <std+0x54>
 800b960:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b968:	f000 b966 	b.w	800bc38 <__retarget_lock_init_recursive>
 800b96c:	bd10      	pop	{r4, pc}
 800b96e:	bf00      	nop
 800b970:	0800bac1 	.word	0x0800bac1
 800b974:	0800bae3 	.word	0x0800bae3
 800b978:	0800bb1b 	.word	0x0800bb1b
 800b97c:	0800bb3f 	.word	0x0800bb3f
 800b980:	200027cc 	.word	0x200027cc

0800b984 <stdio_exit_handler>:
 800b984:	4a02      	ldr	r2, [pc, #8]	@ (800b990 <stdio_exit_handler+0xc>)
 800b986:	4903      	ldr	r1, [pc, #12]	@ (800b994 <stdio_exit_handler+0x10>)
 800b988:	4803      	ldr	r0, [pc, #12]	@ (800b998 <stdio_exit_handler+0x14>)
 800b98a:	f000 b869 	b.w	800ba60 <_fwalk_sglue>
 800b98e:	bf00      	nop
 800b990:	20000010 	.word	0x20000010
 800b994:	0800b8a1 	.word	0x0800b8a1
 800b998:	20000020 	.word	0x20000020

0800b99c <cleanup_stdio>:
 800b99c:	6841      	ldr	r1, [r0, #4]
 800b99e:	4b0c      	ldr	r3, [pc, #48]	@ (800b9d0 <cleanup_stdio+0x34>)
 800b9a0:	4299      	cmp	r1, r3
 800b9a2:	b510      	push	{r4, lr}
 800b9a4:	4604      	mov	r4, r0
 800b9a6:	d001      	beq.n	800b9ac <cleanup_stdio+0x10>
 800b9a8:	f7ff ff7a 	bl	800b8a0 <_fflush_r>
 800b9ac:	68a1      	ldr	r1, [r4, #8]
 800b9ae:	4b09      	ldr	r3, [pc, #36]	@ (800b9d4 <cleanup_stdio+0x38>)
 800b9b0:	4299      	cmp	r1, r3
 800b9b2:	d002      	beq.n	800b9ba <cleanup_stdio+0x1e>
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f7ff ff73 	bl	800b8a0 <_fflush_r>
 800b9ba:	68e1      	ldr	r1, [r4, #12]
 800b9bc:	4b06      	ldr	r3, [pc, #24]	@ (800b9d8 <cleanup_stdio+0x3c>)
 800b9be:	4299      	cmp	r1, r3
 800b9c0:	d004      	beq.n	800b9cc <cleanup_stdio+0x30>
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9c8:	f7ff bf6a 	b.w	800b8a0 <_fflush_r>
 800b9cc:	bd10      	pop	{r4, pc}
 800b9ce:	bf00      	nop
 800b9d0:	200027cc 	.word	0x200027cc
 800b9d4:	20002834 	.word	0x20002834
 800b9d8:	2000289c 	.word	0x2000289c

0800b9dc <global_stdio_init.part.0>:
 800b9dc:	b510      	push	{r4, lr}
 800b9de:	4b0b      	ldr	r3, [pc, #44]	@ (800ba0c <global_stdio_init.part.0+0x30>)
 800b9e0:	2104      	movs	r1, #4
 800b9e2:	4c0b      	ldr	r4, [pc, #44]	@ (800ba10 <global_stdio_init.part.0+0x34>)
 800b9e4:	4a0b      	ldr	r2, [pc, #44]	@ (800ba14 <global_stdio_init.part.0+0x38>)
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	601a      	str	r2, [r3, #0]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	f7ff ff94 	bl	800b918 <std>
 800b9f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	2109      	movs	r1, #9
 800b9f8:	f7ff ff8e 	bl	800b918 <std>
 800b9fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ba00:	2202      	movs	r2, #2
 800ba02:	2112      	movs	r1, #18
 800ba04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba08:	f7ff bf86 	b.w	800b918 <std>
 800ba0c:	20002904 	.word	0x20002904
 800ba10:	200027cc 	.word	0x200027cc
 800ba14:	0800b985 	.word	0x0800b985

0800ba18 <__sfp_lock_acquire>:
 800ba18:	4801      	ldr	r0, [pc, #4]	@ (800ba20 <__sfp_lock_acquire+0x8>)
 800ba1a:	f000 b90e 	b.w	800bc3a <__retarget_lock_acquire_recursive>
 800ba1e:	bf00      	nop
 800ba20:	2000290d 	.word	0x2000290d

0800ba24 <__sfp_lock_release>:
 800ba24:	4801      	ldr	r0, [pc, #4]	@ (800ba2c <__sfp_lock_release+0x8>)
 800ba26:	f000 b909 	b.w	800bc3c <__retarget_lock_release_recursive>
 800ba2a:	bf00      	nop
 800ba2c:	2000290d 	.word	0x2000290d

0800ba30 <__sinit>:
 800ba30:	b510      	push	{r4, lr}
 800ba32:	4604      	mov	r4, r0
 800ba34:	f7ff fff0 	bl	800ba18 <__sfp_lock_acquire>
 800ba38:	6a23      	ldr	r3, [r4, #32]
 800ba3a:	b11b      	cbz	r3, 800ba44 <__sinit+0x14>
 800ba3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba40:	f7ff bff0 	b.w	800ba24 <__sfp_lock_release>
 800ba44:	4b04      	ldr	r3, [pc, #16]	@ (800ba58 <__sinit+0x28>)
 800ba46:	6223      	str	r3, [r4, #32]
 800ba48:	4b04      	ldr	r3, [pc, #16]	@ (800ba5c <__sinit+0x2c>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d1f5      	bne.n	800ba3c <__sinit+0xc>
 800ba50:	f7ff ffc4 	bl	800b9dc <global_stdio_init.part.0>
 800ba54:	e7f2      	b.n	800ba3c <__sinit+0xc>
 800ba56:	bf00      	nop
 800ba58:	0800b99d 	.word	0x0800b99d
 800ba5c:	20002904 	.word	0x20002904

0800ba60 <_fwalk_sglue>:
 800ba60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba64:	4607      	mov	r7, r0
 800ba66:	4688      	mov	r8, r1
 800ba68:	4614      	mov	r4, r2
 800ba6a:	2600      	movs	r6, #0
 800ba6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba70:	f1b9 0901 	subs.w	r9, r9, #1
 800ba74:	d505      	bpl.n	800ba82 <_fwalk_sglue+0x22>
 800ba76:	6824      	ldr	r4, [r4, #0]
 800ba78:	2c00      	cmp	r4, #0
 800ba7a:	d1f7      	bne.n	800ba6c <_fwalk_sglue+0xc>
 800ba7c:	4630      	mov	r0, r6
 800ba7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba82:	89ab      	ldrh	r3, [r5, #12]
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d907      	bls.n	800ba98 <_fwalk_sglue+0x38>
 800ba88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	d003      	beq.n	800ba98 <_fwalk_sglue+0x38>
 800ba90:	4629      	mov	r1, r5
 800ba92:	4638      	mov	r0, r7
 800ba94:	47c0      	blx	r8
 800ba96:	4306      	orrs	r6, r0
 800ba98:	3568      	adds	r5, #104	@ 0x68
 800ba9a:	e7e9      	b.n	800ba70 <_fwalk_sglue+0x10>

0800ba9c <iprintf>:
 800ba9c:	b40f      	push	{r0, r1, r2, r3}
 800ba9e:	b507      	push	{r0, r1, r2, lr}
 800baa0:	4906      	ldr	r1, [pc, #24]	@ (800babc <iprintf+0x20>)
 800baa2:	ab04      	add	r3, sp, #16
 800baa4:	6808      	ldr	r0, [r1, #0]
 800baa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800baaa:	6881      	ldr	r1, [r0, #8]
 800baac:	9301      	str	r3, [sp, #4]
 800baae:	f000 f9e9 	bl	800be84 <_vfiprintf_r>
 800bab2:	b003      	add	sp, #12
 800bab4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bab8:	b004      	add	sp, #16
 800baba:	4770      	bx	lr
 800babc:	2000001c 	.word	0x2000001c

0800bac0 <__sread>:
 800bac0:	b510      	push	{r4, lr}
 800bac2:	460c      	mov	r4, r1
 800bac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bac8:	f000 f868 	bl	800bb9c <_read_r>
 800bacc:	2800      	cmp	r0, #0
 800bace:	bfab      	itete	ge
 800bad0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bad2:	89a3      	ldrhlt	r3, [r4, #12]
 800bad4:	181b      	addge	r3, r3, r0
 800bad6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bada:	bfac      	ite	ge
 800badc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bade:	81a3      	strhlt	r3, [r4, #12]
 800bae0:	bd10      	pop	{r4, pc}

0800bae2 <__swrite>:
 800bae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bae6:	461f      	mov	r7, r3
 800bae8:	898b      	ldrh	r3, [r1, #12]
 800baea:	4605      	mov	r5, r0
 800baec:	460c      	mov	r4, r1
 800baee:	05db      	lsls	r3, r3, #23
 800baf0:	4616      	mov	r6, r2
 800baf2:	d505      	bpl.n	800bb00 <__swrite+0x1e>
 800baf4:	2302      	movs	r3, #2
 800baf6:	2200      	movs	r2, #0
 800baf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bafc:	f000 f83c 	bl	800bb78 <_lseek_r>
 800bb00:	89a3      	ldrh	r3, [r4, #12]
 800bb02:	4632      	mov	r2, r6
 800bb04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb08:	4628      	mov	r0, r5
 800bb0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bb0e:	81a3      	strh	r3, [r4, #12]
 800bb10:	463b      	mov	r3, r7
 800bb12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb16:	f000 b853 	b.w	800bbc0 <_write_r>

0800bb1a <__sseek>:
 800bb1a:	b510      	push	{r4, lr}
 800bb1c:	460c      	mov	r4, r1
 800bb1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb22:	f000 f829 	bl	800bb78 <_lseek_r>
 800bb26:	1c43      	adds	r3, r0, #1
 800bb28:	89a3      	ldrh	r3, [r4, #12]
 800bb2a:	bf15      	itete	ne
 800bb2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bb2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bb32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bb36:	81a3      	strheq	r3, [r4, #12]
 800bb38:	bf18      	it	ne
 800bb3a:	81a3      	strhne	r3, [r4, #12]
 800bb3c:	bd10      	pop	{r4, pc}

0800bb3e <__sclose>:
 800bb3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb42:	f000 b809 	b.w	800bb58 <_close_r>

0800bb46 <memset>:
 800bb46:	4402      	add	r2, r0
 800bb48:	4603      	mov	r3, r0
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d100      	bne.n	800bb50 <memset+0xa>
 800bb4e:	4770      	bx	lr
 800bb50:	f803 1b01 	strb.w	r1, [r3], #1
 800bb54:	e7f9      	b.n	800bb4a <memset+0x4>
	...

0800bb58 <_close_r>:
 800bb58:	b538      	push	{r3, r4, r5, lr}
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	4d05      	ldr	r5, [pc, #20]	@ (800bb74 <_close_r+0x1c>)
 800bb5e:	4604      	mov	r4, r0
 800bb60:	4608      	mov	r0, r1
 800bb62:	602b      	str	r3, [r5, #0]
 800bb64:	f7f5 fc23 	bl	80013ae <_close>
 800bb68:	1c43      	adds	r3, r0, #1
 800bb6a:	d102      	bne.n	800bb72 <_close_r+0x1a>
 800bb6c:	682b      	ldr	r3, [r5, #0]
 800bb6e:	b103      	cbz	r3, 800bb72 <_close_r+0x1a>
 800bb70:	6023      	str	r3, [r4, #0]
 800bb72:	bd38      	pop	{r3, r4, r5, pc}
 800bb74:	20002908 	.word	0x20002908

0800bb78 <_lseek_r>:
 800bb78:	b538      	push	{r3, r4, r5, lr}
 800bb7a:	4604      	mov	r4, r0
 800bb7c:	4d06      	ldr	r5, [pc, #24]	@ (800bb98 <_lseek_r+0x20>)
 800bb7e:	4608      	mov	r0, r1
 800bb80:	4611      	mov	r1, r2
 800bb82:	2200      	movs	r2, #0
 800bb84:	602a      	str	r2, [r5, #0]
 800bb86:	461a      	mov	r2, r3
 800bb88:	f7f5 fc38 	bl	80013fc <_lseek>
 800bb8c:	1c43      	adds	r3, r0, #1
 800bb8e:	d102      	bne.n	800bb96 <_lseek_r+0x1e>
 800bb90:	682b      	ldr	r3, [r5, #0]
 800bb92:	b103      	cbz	r3, 800bb96 <_lseek_r+0x1e>
 800bb94:	6023      	str	r3, [r4, #0]
 800bb96:	bd38      	pop	{r3, r4, r5, pc}
 800bb98:	20002908 	.word	0x20002908

0800bb9c <_read_r>:
 800bb9c:	b538      	push	{r3, r4, r5, lr}
 800bb9e:	4604      	mov	r4, r0
 800bba0:	4d06      	ldr	r5, [pc, #24]	@ (800bbbc <_read_r+0x20>)
 800bba2:	4608      	mov	r0, r1
 800bba4:	4611      	mov	r1, r2
 800bba6:	2200      	movs	r2, #0
 800bba8:	602a      	str	r2, [r5, #0]
 800bbaa:	461a      	mov	r2, r3
 800bbac:	f7f5 fbc6 	bl	800133c <_read>
 800bbb0:	1c43      	adds	r3, r0, #1
 800bbb2:	d102      	bne.n	800bbba <_read_r+0x1e>
 800bbb4:	682b      	ldr	r3, [r5, #0]
 800bbb6:	b103      	cbz	r3, 800bbba <_read_r+0x1e>
 800bbb8:	6023      	str	r3, [r4, #0]
 800bbba:	bd38      	pop	{r3, r4, r5, pc}
 800bbbc:	20002908 	.word	0x20002908

0800bbc0 <_write_r>:
 800bbc0:	b538      	push	{r3, r4, r5, lr}
 800bbc2:	4604      	mov	r4, r0
 800bbc4:	4d06      	ldr	r5, [pc, #24]	@ (800bbe0 <_write_r+0x20>)
 800bbc6:	4608      	mov	r0, r1
 800bbc8:	4611      	mov	r1, r2
 800bbca:	2200      	movs	r2, #0
 800bbcc:	602a      	str	r2, [r5, #0]
 800bbce:	461a      	mov	r2, r3
 800bbd0:	f7f5 fbd1 	bl	8001376 <_write>
 800bbd4:	1c43      	adds	r3, r0, #1
 800bbd6:	d102      	bne.n	800bbde <_write_r+0x1e>
 800bbd8:	682b      	ldr	r3, [r5, #0]
 800bbda:	b103      	cbz	r3, 800bbde <_write_r+0x1e>
 800bbdc:	6023      	str	r3, [r4, #0]
 800bbde:	bd38      	pop	{r3, r4, r5, pc}
 800bbe0:	20002908 	.word	0x20002908

0800bbe4 <__errno>:
 800bbe4:	4b01      	ldr	r3, [pc, #4]	@ (800bbec <__errno+0x8>)
 800bbe6:	6818      	ldr	r0, [r3, #0]
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	2000001c 	.word	0x2000001c

0800bbf0 <__libc_init_array>:
 800bbf0:	b570      	push	{r4, r5, r6, lr}
 800bbf2:	4d0d      	ldr	r5, [pc, #52]	@ (800bc28 <__libc_init_array+0x38>)
 800bbf4:	2600      	movs	r6, #0
 800bbf6:	4c0d      	ldr	r4, [pc, #52]	@ (800bc2c <__libc_init_array+0x3c>)
 800bbf8:	1b64      	subs	r4, r4, r5
 800bbfa:	10a4      	asrs	r4, r4, #2
 800bbfc:	42a6      	cmp	r6, r4
 800bbfe:	d109      	bne.n	800bc14 <__libc_init_array+0x24>
 800bc00:	4d0b      	ldr	r5, [pc, #44]	@ (800bc30 <__libc_init_array+0x40>)
 800bc02:	2600      	movs	r6, #0
 800bc04:	4c0b      	ldr	r4, [pc, #44]	@ (800bc34 <__libc_init_array+0x44>)
 800bc06:	f000 fd1d 	bl	800c644 <_init>
 800bc0a:	1b64      	subs	r4, r4, r5
 800bc0c:	10a4      	asrs	r4, r4, #2
 800bc0e:	42a6      	cmp	r6, r4
 800bc10:	d105      	bne.n	800bc1e <__libc_init_array+0x2e>
 800bc12:	bd70      	pop	{r4, r5, r6, pc}
 800bc14:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc18:	3601      	adds	r6, #1
 800bc1a:	4798      	blx	r3
 800bc1c:	e7ee      	b.n	800bbfc <__libc_init_array+0xc>
 800bc1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc22:	3601      	adds	r6, #1
 800bc24:	4798      	blx	r3
 800bc26:	e7f2      	b.n	800bc0e <__libc_init_array+0x1e>
 800bc28:	0800c7f4 	.word	0x0800c7f4
 800bc2c:	0800c7f4 	.word	0x0800c7f4
 800bc30:	0800c7f4 	.word	0x0800c7f4
 800bc34:	0800c7f8 	.word	0x0800c7f8

0800bc38 <__retarget_lock_init_recursive>:
 800bc38:	4770      	bx	lr

0800bc3a <__retarget_lock_acquire_recursive>:
 800bc3a:	4770      	bx	lr

0800bc3c <__retarget_lock_release_recursive>:
 800bc3c:	4770      	bx	lr
	...

0800bc40 <_free_r>:
 800bc40:	b538      	push	{r3, r4, r5, lr}
 800bc42:	4605      	mov	r5, r0
 800bc44:	2900      	cmp	r1, #0
 800bc46:	d041      	beq.n	800bccc <_free_r+0x8c>
 800bc48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc4c:	1f0c      	subs	r4, r1, #4
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	bfb8      	it	lt
 800bc52:	18e4      	addlt	r4, r4, r3
 800bc54:	f000 f8e0 	bl	800be18 <__malloc_lock>
 800bc58:	4a1d      	ldr	r2, [pc, #116]	@ (800bcd0 <_free_r+0x90>)
 800bc5a:	6813      	ldr	r3, [r2, #0]
 800bc5c:	b933      	cbnz	r3, 800bc6c <_free_r+0x2c>
 800bc5e:	6063      	str	r3, [r4, #4]
 800bc60:	6014      	str	r4, [r2, #0]
 800bc62:	4628      	mov	r0, r5
 800bc64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc68:	f000 b8dc 	b.w	800be24 <__malloc_unlock>
 800bc6c:	42a3      	cmp	r3, r4
 800bc6e:	d908      	bls.n	800bc82 <_free_r+0x42>
 800bc70:	6820      	ldr	r0, [r4, #0]
 800bc72:	1821      	adds	r1, r4, r0
 800bc74:	428b      	cmp	r3, r1
 800bc76:	bf01      	itttt	eq
 800bc78:	6819      	ldreq	r1, [r3, #0]
 800bc7a:	685b      	ldreq	r3, [r3, #4]
 800bc7c:	1809      	addeq	r1, r1, r0
 800bc7e:	6021      	streq	r1, [r4, #0]
 800bc80:	e7ed      	b.n	800bc5e <_free_r+0x1e>
 800bc82:	461a      	mov	r2, r3
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	b10b      	cbz	r3, 800bc8c <_free_r+0x4c>
 800bc88:	42a3      	cmp	r3, r4
 800bc8a:	d9fa      	bls.n	800bc82 <_free_r+0x42>
 800bc8c:	6811      	ldr	r1, [r2, #0]
 800bc8e:	1850      	adds	r0, r2, r1
 800bc90:	42a0      	cmp	r0, r4
 800bc92:	d10b      	bne.n	800bcac <_free_r+0x6c>
 800bc94:	6820      	ldr	r0, [r4, #0]
 800bc96:	4401      	add	r1, r0
 800bc98:	1850      	adds	r0, r2, r1
 800bc9a:	6011      	str	r1, [r2, #0]
 800bc9c:	4283      	cmp	r3, r0
 800bc9e:	d1e0      	bne.n	800bc62 <_free_r+0x22>
 800bca0:	6818      	ldr	r0, [r3, #0]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	4408      	add	r0, r1
 800bca6:	6053      	str	r3, [r2, #4]
 800bca8:	6010      	str	r0, [r2, #0]
 800bcaa:	e7da      	b.n	800bc62 <_free_r+0x22>
 800bcac:	d902      	bls.n	800bcb4 <_free_r+0x74>
 800bcae:	230c      	movs	r3, #12
 800bcb0:	602b      	str	r3, [r5, #0]
 800bcb2:	e7d6      	b.n	800bc62 <_free_r+0x22>
 800bcb4:	6820      	ldr	r0, [r4, #0]
 800bcb6:	1821      	adds	r1, r4, r0
 800bcb8:	428b      	cmp	r3, r1
 800bcba:	bf02      	ittt	eq
 800bcbc:	6819      	ldreq	r1, [r3, #0]
 800bcbe:	685b      	ldreq	r3, [r3, #4]
 800bcc0:	1809      	addeq	r1, r1, r0
 800bcc2:	6063      	str	r3, [r4, #4]
 800bcc4:	bf08      	it	eq
 800bcc6:	6021      	streq	r1, [r4, #0]
 800bcc8:	6054      	str	r4, [r2, #4]
 800bcca:	e7ca      	b.n	800bc62 <_free_r+0x22>
 800bccc:	bd38      	pop	{r3, r4, r5, pc}
 800bcce:	bf00      	nop
 800bcd0:	20002914 	.word	0x20002914

0800bcd4 <sbrk_aligned>:
 800bcd4:	b570      	push	{r4, r5, r6, lr}
 800bcd6:	4e0f      	ldr	r6, [pc, #60]	@ (800bd14 <sbrk_aligned+0x40>)
 800bcd8:	460c      	mov	r4, r1
 800bcda:	4605      	mov	r5, r0
 800bcdc:	6831      	ldr	r1, [r6, #0]
 800bcde:	b911      	cbnz	r1, 800bce6 <sbrk_aligned+0x12>
 800bce0:	f000 fc0e 	bl	800c500 <_sbrk_r>
 800bce4:	6030      	str	r0, [r6, #0]
 800bce6:	4621      	mov	r1, r4
 800bce8:	4628      	mov	r0, r5
 800bcea:	f000 fc09 	bl	800c500 <_sbrk_r>
 800bcee:	1c43      	adds	r3, r0, #1
 800bcf0:	d103      	bne.n	800bcfa <sbrk_aligned+0x26>
 800bcf2:	f04f 34ff 	mov.w	r4, #4294967295
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	bd70      	pop	{r4, r5, r6, pc}
 800bcfa:	1cc4      	adds	r4, r0, #3
 800bcfc:	f024 0403 	bic.w	r4, r4, #3
 800bd00:	42a0      	cmp	r0, r4
 800bd02:	d0f8      	beq.n	800bcf6 <sbrk_aligned+0x22>
 800bd04:	1a21      	subs	r1, r4, r0
 800bd06:	4628      	mov	r0, r5
 800bd08:	f000 fbfa 	bl	800c500 <_sbrk_r>
 800bd0c:	3001      	adds	r0, #1
 800bd0e:	d1f2      	bne.n	800bcf6 <sbrk_aligned+0x22>
 800bd10:	e7ef      	b.n	800bcf2 <sbrk_aligned+0x1e>
 800bd12:	bf00      	nop
 800bd14:	20002910 	.word	0x20002910

0800bd18 <_malloc_r>:
 800bd18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd1c:	1ccd      	adds	r5, r1, #3
 800bd1e:	4606      	mov	r6, r0
 800bd20:	f025 0503 	bic.w	r5, r5, #3
 800bd24:	3508      	adds	r5, #8
 800bd26:	2d0c      	cmp	r5, #12
 800bd28:	bf38      	it	cc
 800bd2a:	250c      	movcc	r5, #12
 800bd2c:	2d00      	cmp	r5, #0
 800bd2e:	db01      	blt.n	800bd34 <_malloc_r+0x1c>
 800bd30:	42a9      	cmp	r1, r5
 800bd32:	d904      	bls.n	800bd3e <_malloc_r+0x26>
 800bd34:	230c      	movs	r3, #12
 800bd36:	6033      	str	r3, [r6, #0]
 800bd38:	2000      	movs	r0, #0
 800bd3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800be14 <_malloc_r+0xfc>
 800bd42:	f000 f869 	bl	800be18 <__malloc_lock>
 800bd46:	f8d8 3000 	ldr.w	r3, [r8]
 800bd4a:	461c      	mov	r4, r3
 800bd4c:	bb44      	cbnz	r4, 800bda0 <_malloc_r+0x88>
 800bd4e:	4629      	mov	r1, r5
 800bd50:	4630      	mov	r0, r6
 800bd52:	f7ff ffbf 	bl	800bcd4 <sbrk_aligned>
 800bd56:	1c43      	adds	r3, r0, #1
 800bd58:	4604      	mov	r4, r0
 800bd5a:	d158      	bne.n	800be0e <_malloc_r+0xf6>
 800bd5c:	f8d8 4000 	ldr.w	r4, [r8]
 800bd60:	4627      	mov	r7, r4
 800bd62:	2f00      	cmp	r7, #0
 800bd64:	d143      	bne.n	800bdee <_malloc_r+0xd6>
 800bd66:	2c00      	cmp	r4, #0
 800bd68:	d04b      	beq.n	800be02 <_malloc_r+0xea>
 800bd6a:	6823      	ldr	r3, [r4, #0]
 800bd6c:	4639      	mov	r1, r7
 800bd6e:	4630      	mov	r0, r6
 800bd70:	eb04 0903 	add.w	r9, r4, r3
 800bd74:	f000 fbc4 	bl	800c500 <_sbrk_r>
 800bd78:	4581      	cmp	r9, r0
 800bd7a:	d142      	bne.n	800be02 <_malloc_r+0xea>
 800bd7c:	6821      	ldr	r1, [r4, #0]
 800bd7e:	4630      	mov	r0, r6
 800bd80:	1a6d      	subs	r5, r5, r1
 800bd82:	4629      	mov	r1, r5
 800bd84:	f7ff ffa6 	bl	800bcd4 <sbrk_aligned>
 800bd88:	3001      	adds	r0, #1
 800bd8a:	d03a      	beq.n	800be02 <_malloc_r+0xea>
 800bd8c:	6823      	ldr	r3, [r4, #0]
 800bd8e:	442b      	add	r3, r5
 800bd90:	6023      	str	r3, [r4, #0]
 800bd92:	f8d8 3000 	ldr.w	r3, [r8]
 800bd96:	685a      	ldr	r2, [r3, #4]
 800bd98:	bb62      	cbnz	r2, 800bdf4 <_malloc_r+0xdc>
 800bd9a:	f8c8 7000 	str.w	r7, [r8]
 800bd9e:	e00f      	b.n	800bdc0 <_malloc_r+0xa8>
 800bda0:	6822      	ldr	r2, [r4, #0]
 800bda2:	1b52      	subs	r2, r2, r5
 800bda4:	d420      	bmi.n	800bde8 <_malloc_r+0xd0>
 800bda6:	2a0b      	cmp	r2, #11
 800bda8:	d917      	bls.n	800bdda <_malloc_r+0xc2>
 800bdaa:	1961      	adds	r1, r4, r5
 800bdac:	42a3      	cmp	r3, r4
 800bdae:	6025      	str	r5, [r4, #0]
 800bdb0:	bf18      	it	ne
 800bdb2:	6059      	strne	r1, [r3, #4]
 800bdb4:	6863      	ldr	r3, [r4, #4]
 800bdb6:	bf08      	it	eq
 800bdb8:	f8c8 1000 	streq.w	r1, [r8]
 800bdbc:	5162      	str	r2, [r4, r5]
 800bdbe:	604b      	str	r3, [r1, #4]
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	f000 f82f 	bl	800be24 <__malloc_unlock>
 800bdc6:	f104 000b 	add.w	r0, r4, #11
 800bdca:	1d23      	adds	r3, r4, #4
 800bdcc:	f020 0007 	bic.w	r0, r0, #7
 800bdd0:	1ac2      	subs	r2, r0, r3
 800bdd2:	bf1c      	itt	ne
 800bdd4:	1a1b      	subne	r3, r3, r0
 800bdd6:	50a3      	strne	r3, [r4, r2]
 800bdd8:	e7af      	b.n	800bd3a <_malloc_r+0x22>
 800bdda:	6862      	ldr	r2, [r4, #4]
 800bddc:	42a3      	cmp	r3, r4
 800bdde:	bf0c      	ite	eq
 800bde0:	f8c8 2000 	streq.w	r2, [r8]
 800bde4:	605a      	strne	r2, [r3, #4]
 800bde6:	e7eb      	b.n	800bdc0 <_malloc_r+0xa8>
 800bde8:	4623      	mov	r3, r4
 800bdea:	6864      	ldr	r4, [r4, #4]
 800bdec:	e7ae      	b.n	800bd4c <_malloc_r+0x34>
 800bdee:	463c      	mov	r4, r7
 800bdf0:	687f      	ldr	r7, [r7, #4]
 800bdf2:	e7b6      	b.n	800bd62 <_malloc_r+0x4a>
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	42a3      	cmp	r3, r4
 800bdfa:	d1fb      	bne.n	800bdf4 <_malloc_r+0xdc>
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	6053      	str	r3, [r2, #4]
 800be00:	e7de      	b.n	800bdc0 <_malloc_r+0xa8>
 800be02:	230c      	movs	r3, #12
 800be04:	4630      	mov	r0, r6
 800be06:	6033      	str	r3, [r6, #0]
 800be08:	f000 f80c 	bl	800be24 <__malloc_unlock>
 800be0c:	e794      	b.n	800bd38 <_malloc_r+0x20>
 800be0e:	6005      	str	r5, [r0, #0]
 800be10:	e7d6      	b.n	800bdc0 <_malloc_r+0xa8>
 800be12:	bf00      	nop
 800be14:	20002914 	.word	0x20002914

0800be18 <__malloc_lock>:
 800be18:	4801      	ldr	r0, [pc, #4]	@ (800be20 <__malloc_lock+0x8>)
 800be1a:	f7ff bf0e 	b.w	800bc3a <__retarget_lock_acquire_recursive>
 800be1e:	bf00      	nop
 800be20:	2000290c 	.word	0x2000290c

0800be24 <__malloc_unlock>:
 800be24:	4801      	ldr	r0, [pc, #4]	@ (800be2c <__malloc_unlock+0x8>)
 800be26:	f7ff bf09 	b.w	800bc3c <__retarget_lock_release_recursive>
 800be2a:	bf00      	nop
 800be2c:	2000290c 	.word	0x2000290c

0800be30 <__sfputc_r>:
 800be30:	6893      	ldr	r3, [r2, #8]
 800be32:	3b01      	subs	r3, #1
 800be34:	2b00      	cmp	r3, #0
 800be36:	6093      	str	r3, [r2, #8]
 800be38:	b410      	push	{r4}
 800be3a:	da08      	bge.n	800be4e <__sfputc_r+0x1e>
 800be3c:	6994      	ldr	r4, [r2, #24]
 800be3e:	42a3      	cmp	r3, r4
 800be40:	db01      	blt.n	800be46 <__sfputc_r+0x16>
 800be42:	290a      	cmp	r1, #10
 800be44:	d103      	bne.n	800be4e <__sfputc_r+0x1e>
 800be46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be4a:	f000 bac5 	b.w	800c3d8 <__swbuf_r>
 800be4e:	6813      	ldr	r3, [r2, #0]
 800be50:	1c58      	adds	r0, r3, #1
 800be52:	6010      	str	r0, [r2, #0]
 800be54:	4608      	mov	r0, r1
 800be56:	7019      	strb	r1, [r3, #0]
 800be58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be5c:	4770      	bx	lr

0800be5e <__sfputs_r>:
 800be5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be60:	4606      	mov	r6, r0
 800be62:	460f      	mov	r7, r1
 800be64:	4614      	mov	r4, r2
 800be66:	18d5      	adds	r5, r2, r3
 800be68:	42ac      	cmp	r4, r5
 800be6a:	d101      	bne.n	800be70 <__sfputs_r+0x12>
 800be6c:	2000      	movs	r0, #0
 800be6e:	e007      	b.n	800be80 <__sfputs_r+0x22>
 800be70:	463a      	mov	r2, r7
 800be72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be76:	4630      	mov	r0, r6
 800be78:	f7ff ffda 	bl	800be30 <__sfputc_r>
 800be7c:	1c43      	adds	r3, r0, #1
 800be7e:	d1f3      	bne.n	800be68 <__sfputs_r+0xa>
 800be80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800be84 <_vfiprintf_r>:
 800be84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be88:	460d      	mov	r5, r1
 800be8a:	b09d      	sub	sp, #116	@ 0x74
 800be8c:	4614      	mov	r4, r2
 800be8e:	4698      	mov	r8, r3
 800be90:	4606      	mov	r6, r0
 800be92:	b118      	cbz	r0, 800be9c <_vfiprintf_r+0x18>
 800be94:	6a03      	ldr	r3, [r0, #32]
 800be96:	b90b      	cbnz	r3, 800be9c <_vfiprintf_r+0x18>
 800be98:	f7ff fdca 	bl	800ba30 <__sinit>
 800be9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be9e:	07d9      	lsls	r1, r3, #31
 800bea0:	d405      	bmi.n	800beae <_vfiprintf_r+0x2a>
 800bea2:	89ab      	ldrh	r3, [r5, #12]
 800bea4:	059a      	lsls	r2, r3, #22
 800bea6:	d402      	bmi.n	800beae <_vfiprintf_r+0x2a>
 800bea8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800beaa:	f7ff fec6 	bl	800bc3a <__retarget_lock_acquire_recursive>
 800beae:	89ab      	ldrh	r3, [r5, #12]
 800beb0:	071b      	lsls	r3, r3, #28
 800beb2:	d501      	bpl.n	800beb8 <_vfiprintf_r+0x34>
 800beb4:	692b      	ldr	r3, [r5, #16]
 800beb6:	b99b      	cbnz	r3, 800bee0 <_vfiprintf_r+0x5c>
 800beb8:	4629      	mov	r1, r5
 800beba:	4630      	mov	r0, r6
 800bebc:	f000 faca 	bl	800c454 <__swsetup_r>
 800bec0:	b170      	cbz	r0, 800bee0 <_vfiprintf_r+0x5c>
 800bec2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bec4:	07dc      	lsls	r4, r3, #31
 800bec6:	d504      	bpl.n	800bed2 <_vfiprintf_r+0x4e>
 800bec8:	f04f 30ff 	mov.w	r0, #4294967295
 800becc:	b01d      	add	sp, #116	@ 0x74
 800bece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bed2:	89ab      	ldrh	r3, [r5, #12]
 800bed4:	0598      	lsls	r0, r3, #22
 800bed6:	d4f7      	bmi.n	800bec8 <_vfiprintf_r+0x44>
 800bed8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800beda:	f7ff feaf 	bl	800bc3c <__retarget_lock_release_recursive>
 800bede:	e7f3      	b.n	800bec8 <_vfiprintf_r+0x44>
 800bee0:	2300      	movs	r3, #0
 800bee2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bee6:	f04f 0901 	mov.w	r9, #1
 800beea:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800c0a0 <_vfiprintf_r+0x21c>
 800beee:	9309      	str	r3, [sp, #36]	@ 0x24
 800bef0:	2320      	movs	r3, #32
 800bef2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bef6:	2330      	movs	r3, #48	@ 0x30
 800bef8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800befc:	4623      	mov	r3, r4
 800befe:	469a      	mov	sl, r3
 800bf00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf04:	b10a      	cbz	r2, 800bf0a <_vfiprintf_r+0x86>
 800bf06:	2a25      	cmp	r2, #37	@ 0x25
 800bf08:	d1f9      	bne.n	800befe <_vfiprintf_r+0x7a>
 800bf0a:	ebba 0b04 	subs.w	fp, sl, r4
 800bf0e:	d00b      	beq.n	800bf28 <_vfiprintf_r+0xa4>
 800bf10:	465b      	mov	r3, fp
 800bf12:	4622      	mov	r2, r4
 800bf14:	4629      	mov	r1, r5
 800bf16:	4630      	mov	r0, r6
 800bf18:	f7ff ffa1 	bl	800be5e <__sfputs_r>
 800bf1c:	3001      	adds	r0, #1
 800bf1e:	f000 80a7 	beq.w	800c070 <_vfiprintf_r+0x1ec>
 800bf22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf24:	445a      	add	r2, fp
 800bf26:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf28:	f89a 3000 	ldrb.w	r3, [sl]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	f000 809f 	beq.w	800c070 <_vfiprintf_r+0x1ec>
 800bf32:	2300      	movs	r3, #0
 800bf34:	f04f 32ff 	mov.w	r2, #4294967295
 800bf38:	f10a 0a01 	add.w	sl, sl, #1
 800bf3c:	9304      	str	r3, [sp, #16]
 800bf3e:	9307      	str	r3, [sp, #28]
 800bf40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf44:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf4a:	4654      	mov	r4, sl
 800bf4c:	2205      	movs	r2, #5
 800bf4e:	4854      	ldr	r0, [pc, #336]	@ (800c0a0 <_vfiprintf_r+0x21c>)
 800bf50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf54:	f000 fae4 	bl	800c520 <memchr>
 800bf58:	9a04      	ldr	r2, [sp, #16]
 800bf5a:	b9d8      	cbnz	r0, 800bf94 <_vfiprintf_r+0x110>
 800bf5c:	06d1      	lsls	r1, r2, #27
 800bf5e:	bf44      	itt	mi
 800bf60:	2320      	movmi	r3, #32
 800bf62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf66:	0713      	lsls	r3, r2, #28
 800bf68:	bf44      	itt	mi
 800bf6a:	232b      	movmi	r3, #43	@ 0x2b
 800bf6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf70:	f89a 3000 	ldrb.w	r3, [sl]
 800bf74:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf76:	d015      	beq.n	800bfa4 <_vfiprintf_r+0x120>
 800bf78:	9a07      	ldr	r2, [sp, #28]
 800bf7a:	4654      	mov	r4, sl
 800bf7c:	2000      	movs	r0, #0
 800bf7e:	f04f 0c0a 	mov.w	ip, #10
 800bf82:	4621      	mov	r1, r4
 800bf84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf88:	3b30      	subs	r3, #48	@ 0x30
 800bf8a:	2b09      	cmp	r3, #9
 800bf8c:	d94b      	bls.n	800c026 <_vfiprintf_r+0x1a2>
 800bf8e:	b1b0      	cbz	r0, 800bfbe <_vfiprintf_r+0x13a>
 800bf90:	9207      	str	r2, [sp, #28]
 800bf92:	e014      	b.n	800bfbe <_vfiprintf_r+0x13a>
 800bf94:	eba0 0308 	sub.w	r3, r0, r8
 800bf98:	46a2      	mov	sl, r4
 800bf9a:	fa09 f303 	lsl.w	r3, r9, r3
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	9304      	str	r3, [sp, #16]
 800bfa2:	e7d2      	b.n	800bf4a <_vfiprintf_r+0xc6>
 800bfa4:	9b03      	ldr	r3, [sp, #12]
 800bfa6:	1d19      	adds	r1, r3, #4
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	9103      	str	r1, [sp, #12]
 800bfae:	bfbb      	ittet	lt
 800bfb0:	425b      	neglt	r3, r3
 800bfb2:	f042 0202 	orrlt.w	r2, r2, #2
 800bfb6:	9307      	strge	r3, [sp, #28]
 800bfb8:	9307      	strlt	r3, [sp, #28]
 800bfba:	bfb8      	it	lt
 800bfbc:	9204      	strlt	r2, [sp, #16]
 800bfbe:	7823      	ldrb	r3, [r4, #0]
 800bfc0:	2b2e      	cmp	r3, #46	@ 0x2e
 800bfc2:	d10a      	bne.n	800bfda <_vfiprintf_r+0x156>
 800bfc4:	7863      	ldrb	r3, [r4, #1]
 800bfc6:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfc8:	d132      	bne.n	800c030 <_vfiprintf_r+0x1ac>
 800bfca:	9b03      	ldr	r3, [sp, #12]
 800bfcc:	3402      	adds	r4, #2
 800bfce:	1d1a      	adds	r2, r3, #4
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bfd6:	9203      	str	r2, [sp, #12]
 800bfd8:	9305      	str	r3, [sp, #20]
 800bfda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c0b0 <_vfiprintf_r+0x22c>
 800bfde:	2203      	movs	r2, #3
 800bfe0:	7821      	ldrb	r1, [r4, #0]
 800bfe2:	4650      	mov	r0, sl
 800bfe4:	f000 fa9c 	bl	800c520 <memchr>
 800bfe8:	b138      	cbz	r0, 800bffa <_vfiprintf_r+0x176>
 800bfea:	eba0 000a 	sub.w	r0, r0, sl
 800bfee:	2240      	movs	r2, #64	@ 0x40
 800bff0:	9b04      	ldr	r3, [sp, #16]
 800bff2:	3401      	adds	r4, #1
 800bff4:	4082      	lsls	r2, r0
 800bff6:	4313      	orrs	r3, r2
 800bff8:	9304      	str	r3, [sp, #16]
 800bffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bffe:	2206      	movs	r2, #6
 800c000:	4828      	ldr	r0, [pc, #160]	@ (800c0a4 <_vfiprintf_r+0x220>)
 800c002:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c006:	f000 fa8b 	bl	800c520 <memchr>
 800c00a:	2800      	cmp	r0, #0
 800c00c:	d03f      	beq.n	800c08e <_vfiprintf_r+0x20a>
 800c00e:	4b26      	ldr	r3, [pc, #152]	@ (800c0a8 <_vfiprintf_r+0x224>)
 800c010:	bb1b      	cbnz	r3, 800c05a <_vfiprintf_r+0x1d6>
 800c012:	9b03      	ldr	r3, [sp, #12]
 800c014:	3307      	adds	r3, #7
 800c016:	f023 0307 	bic.w	r3, r3, #7
 800c01a:	3308      	adds	r3, #8
 800c01c:	9303      	str	r3, [sp, #12]
 800c01e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c020:	443b      	add	r3, r7
 800c022:	9309      	str	r3, [sp, #36]	@ 0x24
 800c024:	e76a      	b.n	800befc <_vfiprintf_r+0x78>
 800c026:	fb0c 3202 	mla	r2, ip, r2, r3
 800c02a:	460c      	mov	r4, r1
 800c02c:	2001      	movs	r0, #1
 800c02e:	e7a8      	b.n	800bf82 <_vfiprintf_r+0xfe>
 800c030:	2300      	movs	r3, #0
 800c032:	3401      	adds	r4, #1
 800c034:	f04f 0c0a 	mov.w	ip, #10
 800c038:	4619      	mov	r1, r3
 800c03a:	9305      	str	r3, [sp, #20]
 800c03c:	4620      	mov	r0, r4
 800c03e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c042:	3a30      	subs	r2, #48	@ 0x30
 800c044:	2a09      	cmp	r2, #9
 800c046:	d903      	bls.n	800c050 <_vfiprintf_r+0x1cc>
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d0c6      	beq.n	800bfda <_vfiprintf_r+0x156>
 800c04c:	9105      	str	r1, [sp, #20]
 800c04e:	e7c4      	b.n	800bfda <_vfiprintf_r+0x156>
 800c050:	fb0c 2101 	mla	r1, ip, r1, r2
 800c054:	4604      	mov	r4, r0
 800c056:	2301      	movs	r3, #1
 800c058:	e7f0      	b.n	800c03c <_vfiprintf_r+0x1b8>
 800c05a:	ab03      	add	r3, sp, #12
 800c05c:	462a      	mov	r2, r5
 800c05e:	a904      	add	r1, sp, #16
 800c060:	4630      	mov	r0, r6
 800c062:	9300      	str	r3, [sp, #0]
 800c064:	4b11      	ldr	r3, [pc, #68]	@ (800c0ac <_vfiprintf_r+0x228>)
 800c066:	f3af 8000 	nop.w
 800c06a:	4607      	mov	r7, r0
 800c06c:	1c78      	adds	r0, r7, #1
 800c06e:	d1d6      	bne.n	800c01e <_vfiprintf_r+0x19a>
 800c070:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c072:	07d9      	lsls	r1, r3, #31
 800c074:	d405      	bmi.n	800c082 <_vfiprintf_r+0x1fe>
 800c076:	89ab      	ldrh	r3, [r5, #12]
 800c078:	059a      	lsls	r2, r3, #22
 800c07a:	d402      	bmi.n	800c082 <_vfiprintf_r+0x1fe>
 800c07c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c07e:	f7ff fddd 	bl	800bc3c <__retarget_lock_release_recursive>
 800c082:	89ab      	ldrh	r3, [r5, #12]
 800c084:	065b      	lsls	r3, r3, #25
 800c086:	f53f af1f 	bmi.w	800bec8 <_vfiprintf_r+0x44>
 800c08a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c08c:	e71e      	b.n	800becc <_vfiprintf_r+0x48>
 800c08e:	ab03      	add	r3, sp, #12
 800c090:	462a      	mov	r2, r5
 800c092:	a904      	add	r1, sp, #16
 800c094:	4630      	mov	r0, r6
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	4b04      	ldr	r3, [pc, #16]	@ (800c0ac <_vfiprintf_r+0x228>)
 800c09a:	f000 f87d 	bl	800c198 <_printf_i>
 800c09e:	e7e4      	b.n	800c06a <_vfiprintf_r+0x1e6>
 800c0a0:	0800c7b8 	.word	0x0800c7b8
 800c0a4:	0800c7c2 	.word	0x0800c7c2
 800c0a8:	00000000 	.word	0x00000000
 800c0ac:	0800be5f 	.word	0x0800be5f
 800c0b0:	0800c7be 	.word	0x0800c7be

0800c0b4 <_printf_common>:
 800c0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0b8:	4616      	mov	r6, r2
 800c0ba:	4698      	mov	r8, r3
 800c0bc:	688a      	ldr	r2, [r1, #8]
 800c0be:	4607      	mov	r7, r0
 800c0c0:	690b      	ldr	r3, [r1, #16]
 800c0c2:	460c      	mov	r4, r1
 800c0c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	bfb8      	it	lt
 800c0cc:	4613      	movlt	r3, r2
 800c0ce:	6033      	str	r3, [r6, #0]
 800c0d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c0d4:	b10a      	cbz	r2, 800c0da <_printf_common+0x26>
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	6033      	str	r3, [r6, #0]
 800c0da:	6823      	ldr	r3, [r4, #0]
 800c0dc:	0699      	lsls	r1, r3, #26
 800c0de:	bf42      	ittt	mi
 800c0e0:	6833      	ldrmi	r3, [r6, #0]
 800c0e2:	3302      	addmi	r3, #2
 800c0e4:	6033      	strmi	r3, [r6, #0]
 800c0e6:	6825      	ldr	r5, [r4, #0]
 800c0e8:	f015 0506 	ands.w	r5, r5, #6
 800c0ec:	d106      	bne.n	800c0fc <_printf_common+0x48>
 800c0ee:	f104 0a19 	add.w	sl, r4, #25
 800c0f2:	68e3      	ldr	r3, [r4, #12]
 800c0f4:	6832      	ldr	r2, [r6, #0]
 800c0f6:	1a9b      	subs	r3, r3, r2
 800c0f8:	42ab      	cmp	r3, r5
 800c0fa:	dc2b      	bgt.n	800c154 <_printf_common+0xa0>
 800c0fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c100:	6822      	ldr	r2, [r4, #0]
 800c102:	3b00      	subs	r3, #0
 800c104:	bf18      	it	ne
 800c106:	2301      	movne	r3, #1
 800c108:	0692      	lsls	r2, r2, #26
 800c10a:	d430      	bmi.n	800c16e <_printf_common+0xba>
 800c10c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c110:	4641      	mov	r1, r8
 800c112:	4638      	mov	r0, r7
 800c114:	47c8      	blx	r9
 800c116:	3001      	adds	r0, #1
 800c118:	d023      	beq.n	800c162 <_printf_common+0xae>
 800c11a:	6823      	ldr	r3, [r4, #0]
 800c11c:	341a      	adds	r4, #26
 800c11e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800c122:	f003 0306 	and.w	r3, r3, #6
 800c126:	2b04      	cmp	r3, #4
 800c128:	bf0a      	itet	eq
 800c12a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800c12e:	2500      	movne	r5, #0
 800c130:	6833      	ldreq	r3, [r6, #0]
 800c132:	f04f 0600 	mov.w	r6, #0
 800c136:	bf08      	it	eq
 800c138:	1aed      	subeq	r5, r5, r3
 800c13a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c13e:	bf08      	it	eq
 800c140:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c144:	4293      	cmp	r3, r2
 800c146:	bfc4      	itt	gt
 800c148:	1a9b      	subgt	r3, r3, r2
 800c14a:	18ed      	addgt	r5, r5, r3
 800c14c:	42b5      	cmp	r5, r6
 800c14e:	d11a      	bne.n	800c186 <_printf_common+0xd2>
 800c150:	2000      	movs	r0, #0
 800c152:	e008      	b.n	800c166 <_printf_common+0xb2>
 800c154:	2301      	movs	r3, #1
 800c156:	4652      	mov	r2, sl
 800c158:	4641      	mov	r1, r8
 800c15a:	4638      	mov	r0, r7
 800c15c:	47c8      	blx	r9
 800c15e:	3001      	adds	r0, #1
 800c160:	d103      	bne.n	800c16a <_printf_common+0xb6>
 800c162:	f04f 30ff 	mov.w	r0, #4294967295
 800c166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c16a:	3501      	adds	r5, #1
 800c16c:	e7c1      	b.n	800c0f2 <_printf_common+0x3e>
 800c16e:	18e1      	adds	r1, r4, r3
 800c170:	1c5a      	adds	r2, r3, #1
 800c172:	2030      	movs	r0, #48	@ 0x30
 800c174:	3302      	adds	r3, #2
 800c176:	4422      	add	r2, r4
 800c178:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c17c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c180:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c184:	e7c2      	b.n	800c10c <_printf_common+0x58>
 800c186:	2301      	movs	r3, #1
 800c188:	4622      	mov	r2, r4
 800c18a:	4641      	mov	r1, r8
 800c18c:	4638      	mov	r0, r7
 800c18e:	47c8      	blx	r9
 800c190:	3001      	adds	r0, #1
 800c192:	d0e6      	beq.n	800c162 <_printf_common+0xae>
 800c194:	3601      	adds	r6, #1
 800c196:	e7d9      	b.n	800c14c <_printf_common+0x98>

0800c198 <_printf_i>:
 800c198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c19c:	7e0f      	ldrb	r7, [r1, #24]
 800c19e:	4691      	mov	r9, r2
 800c1a0:	4680      	mov	r8, r0
 800c1a2:	460c      	mov	r4, r1
 800c1a4:	2f78      	cmp	r7, #120	@ 0x78
 800c1a6:	469a      	mov	sl, r3
 800c1a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c1aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c1ae:	d807      	bhi.n	800c1c0 <_printf_i+0x28>
 800c1b0:	2f62      	cmp	r7, #98	@ 0x62
 800c1b2:	d80a      	bhi.n	800c1ca <_printf_i+0x32>
 800c1b4:	2f00      	cmp	r7, #0
 800c1b6:	f000 80d2 	beq.w	800c35e <_printf_i+0x1c6>
 800c1ba:	2f58      	cmp	r7, #88	@ 0x58
 800c1bc:	f000 80b9 	beq.w	800c332 <_printf_i+0x19a>
 800c1c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c1c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c1c8:	e03a      	b.n	800c240 <_printf_i+0xa8>
 800c1ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c1ce:	2b15      	cmp	r3, #21
 800c1d0:	d8f6      	bhi.n	800c1c0 <_printf_i+0x28>
 800c1d2:	a101      	add	r1, pc, #4	@ (adr r1, 800c1d8 <_printf_i+0x40>)
 800c1d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c1d8:	0800c231 	.word	0x0800c231
 800c1dc:	0800c245 	.word	0x0800c245
 800c1e0:	0800c1c1 	.word	0x0800c1c1
 800c1e4:	0800c1c1 	.word	0x0800c1c1
 800c1e8:	0800c1c1 	.word	0x0800c1c1
 800c1ec:	0800c1c1 	.word	0x0800c1c1
 800c1f0:	0800c245 	.word	0x0800c245
 800c1f4:	0800c1c1 	.word	0x0800c1c1
 800c1f8:	0800c1c1 	.word	0x0800c1c1
 800c1fc:	0800c1c1 	.word	0x0800c1c1
 800c200:	0800c1c1 	.word	0x0800c1c1
 800c204:	0800c345 	.word	0x0800c345
 800c208:	0800c26f 	.word	0x0800c26f
 800c20c:	0800c2ff 	.word	0x0800c2ff
 800c210:	0800c1c1 	.word	0x0800c1c1
 800c214:	0800c1c1 	.word	0x0800c1c1
 800c218:	0800c367 	.word	0x0800c367
 800c21c:	0800c1c1 	.word	0x0800c1c1
 800c220:	0800c26f 	.word	0x0800c26f
 800c224:	0800c1c1 	.word	0x0800c1c1
 800c228:	0800c1c1 	.word	0x0800c1c1
 800c22c:	0800c307 	.word	0x0800c307
 800c230:	6833      	ldr	r3, [r6, #0]
 800c232:	1d1a      	adds	r2, r3, #4
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	6032      	str	r2, [r6, #0]
 800c238:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c23c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c240:	2301      	movs	r3, #1
 800c242:	e09d      	b.n	800c380 <_printf_i+0x1e8>
 800c244:	6833      	ldr	r3, [r6, #0]
 800c246:	6820      	ldr	r0, [r4, #0]
 800c248:	1d19      	adds	r1, r3, #4
 800c24a:	6031      	str	r1, [r6, #0]
 800c24c:	0606      	lsls	r6, r0, #24
 800c24e:	d501      	bpl.n	800c254 <_printf_i+0xbc>
 800c250:	681d      	ldr	r5, [r3, #0]
 800c252:	e003      	b.n	800c25c <_printf_i+0xc4>
 800c254:	0645      	lsls	r5, r0, #25
 800c256:	d5fb      	bpl.n	800c250 <_printf_i+0xb8>
 800c258:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c25c:	2d00      	cmp	r5, #0
 800c25e:	da03      	bge.n	800c268 <_printf_i+0xd0>
 800c260:	232d      	movs	r3, #45	@ 0x2d
 800c262:	426d      	negs	r5, r5
 800c264:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c268:	4859      	ldr	r0, [pc, #356]	@ (800c3d0 <_printf_i+0x238>)
 800c26a:	230a      	movs	r3, #10
 800c26c:	e011      	b.n	800c292 <_printf_i+0xfa>
 800c26e:	6821      	ldr	r1, [r4, #0]
 800c270:	6833      	ldr	r3, [r6, #0]
 800c272:	0608      	lsls	r0, r1, #24
 800c274:	f853 5b04 	ldr.w	r5, [r3], #4
 800c278:	d402      	bmi.n	800c280 <_printf_i+0xe8>
 800c27a:	0649      	lsls	r1, r1, #25
 800c27c:	bf48      	it	mi
 800c27e:	b2ad      	uxthmi	r5, r5
 800c280:	2f6f      	cmp	r7, #111	@ 0x6f
 800c282:	6033      	str	r3, [r6, #0]
 800c284:	4852      	ldr	r0, [pc, #328]	@ (800c3d0 <_printf_i+0x238>)
 800c286:	bf14      	ite	ne
 800c288:	230a      	movne	r3, #10
 800c28a:	2308      	moveq	r3, #8
 800c28c:	2100      	movs	r1, #0
 800c28e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c292:	6866      	ldr	r6, [r4, #4]
 800c294:	2e00      	cmp	r6, #0
 800c296:	60a6      	str	r6, [r4, #8]
 800c298:	bfa2      	ittt	ge
 800c29a:	6821      	ldrge	r1, [r4, #0]
 800c29c:	f021 0104 	bicge.w	r1, r1, #4
 800c2a0:	6021      	strge	r1, [r4, #0]
 800c2a2:	b90d      	cbnz	r5, 800c2a8 <_printf_i+0x110>
 800c2a4:	2e00      	cmp	r6, #0
 800c2a6:	d04b      	beq.n	800c340 <_printf_i+0x1a8>
 800c2a8:	4616      	mov	r6, r2
 800c2aa:	fbb5 f1f3 	udiv	r1, r5, r3
 800c2ae:	fb03 5711 	mls	r7, r3, r1, r5
 800c2b2:	5dc7      	ldrb	r7, [r0, r7]
 800c2b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c2b8:	462f      	mov	r7, r5
 800c2ba:	460d      	mov	r5, r1
 800c2bc:	42bb      	cmp	r3, r7
 800c2be:	d9f4      	bls.n	800c2aa <_printf_i+0x112>
 800c2c0:	2b08      	cmp	r3, #8
 800c2c2:	d10b      	bne.n	800c2dc <_printf_i+0x144>
 800c2c4:	6823      	ldr	r3, [r4, #0]
 800c2c6:	07df      	lsls	r7, r3, #31
 800c2c8:	d508      	bpl.n	800c2dc <_printf_i+0x144>
 800c2ca:	6923      	ldr	r3, [r4, #16]
 800c2cc:	6861      	ldr	r1, [r4, #4]
 800c2ce:	4299      	cmp	r1, r3
 800c2d0:	bfde      	ittt	le
 800c2d2:	2330      	movle	r3, #48	@ 0x30
 800c2d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c2d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c2dc:	1b92      	subs	r2, r2, r6
 800c2de:	6122      	str	r2, [r4, #16]
 800c2e0:	464b      	mov	r3, r9
 800c2e2:	aa03      	add	r2, sp, #12
 800c2e4:	4621      	mov	r1, r4
 800c2e6:	4640      	mov	r0, r8
 800c2e8:	f8cd a000 	str.w	sl, [sp]
 800c2ec:	f7ff fee2 	bl	800c0b4 <_printf_common>
 800c2f0:	3001      	adds	r0, #1
 800c2f2:	d14a      	bne.n	800c38a <_printf_i+0x1f2>
 800c2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2f8:	b004      	add	sp, #16
 800c2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2fe:	6823      	ldr	r3, [r4, #0]
 800c300:	f043 0320 	orr.w	r3, r3, #32
 800c304:	6023      	str	r3, [r4, #0]
 800c306:	2778      	movs	r7, #120	@ 0x78
 800c308:	4832      	ldr	r0, [pc, #200]	@ (800c3d4 <_printf_i+0x23c>)
 800c30a:	6823      	ldr	r3, [r4, #0]
 800c30c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c310:	061f      	lsls	r7, r3, #24
 800c312:	6831      	ldr	r1, [r6, #0]
 800c314:	f851 5b04 	ldr.w	r5, [r1], #4
 800c318:	d402      	bmi.n	800c320 <_printf_i+0x188>
 800c31a:	065f      	lsls	r7, r3, #25
 800c31c:	bf48      	it	mi
 800c31e:	b2ad      	uxthmi	r5, r5
 800c320:	6031      	str	r1, [r6, #0]
 800c322:	07d9      	lsls	r1, r3, #31
 800c324:	bf44      	itt	mi
 800c326:	f043 0320 	orrmi.w	r3, r3, #32
 800c32a:	6023      	strmi	r3, [r4, #0]
 800c32c:	b11d      	cbz	r5, 800c336 <_printf_i+0x19e>
 800c32e:	2310      	movs	r3, #16
 800c330:	e7ac      	b.n	800c28c <_printf_i+0xf4>
 800c332:	4827      	ldr	r0, [pc, #156]	@ (800c3d0 <_printf_i+0x238>)
 800c334:	e7e9      	b.n	800c30a <_printf_i+0x172>
 800c336:	6823      	ldr	r3, [r4, #0]
 800c338:	f023 0320 	bic.w	r3, r3, #32
 800c33c:	6023      	str	r3, [r4, #0]
 800c33e:	e7f6      	b.n	800c32e <_printf_i+0x196>
 800c340:	4616      	mov	r6, r2
 800c342:	e7bd      	b.n	800c2c0 <_printf_i+0x128>
 800c344:	6833      	ldr	r3, [r6, #0]
 800c346:	6825      	ldr	r5, [r4, #0]
 800c348:	1d18      	adds	r0, r3, #4
 800c34a:	6961      	ldr	r1, [r4, #20]
 800c34c:	6030      	str	r0, [r6, #0]
 800c34e:	062e      	lsls	r6, r5, #24
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	d501      	bpl.n	800c358 <_printf_i+0x1c0>
 800c354:	6019      	str	r1, [r3, #0]
 800c356:	e002      	b.n	800c35e <_printf_i+0x1c6>
 800c358:	0668      	lsls	r0, r5, #25
 800c35a:	d5fb      	bpl.n	800c354 <_printf_i+0x1bc>
 800c35c:	8019      	strh	r1, [r3, #0]
 800c35e:	2300      	movs	r3, #0
 800c360:	4616      	mov	r6, r2
 800c362:	6123      	str	r3, [r4, #16]
 800c364:	e7bc      	b.n	800c2e0 <_printf_i+0x148>
 800c366:	6833      	ldr	r3, [r6, #0]
 800c368:	2100      	movs	r1, #0
 800c36a:	1d1a      	adds	r2, r3, #4
 800c36c:	6032      	str	r2, [r6, #0]
 800c36e:	681e      	ldr	r6, [r3, #0]
 800c370:	6862      	ldr	r2, [r4, #4]
 800c372:	4630      	mov	r0, r6
 800c374:	f000 f8d4 	bl	800c520 <memchr>
 800c378:	b108      	cbz	r0, 800c37e <_printf_i+0x1e6>
 800c37a:	1b80      	subs	r0, r0, r6
 800c37c:	6060      	str	r0, [r4, #4]
 800c37e:	6863      	ldr	r3, [r4, #4]
 800c380:	6123      	str	r3, [r4, #16]
 800c382:	2300      	movs	r3, #0
 800c384:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c388:	e7aa      	b.n	800c2e0 <_printf_i+0x148>
 800c38a:	6923      	ldr	r3, [r4, #16]
 800c38c:	4632      	mov	r2, r6
 800c38e:	4649      	mov	r1, r9
 800c390:	4640      	mov	r0, r8
 800c392:	47d0      	blx	sl
 800c394:	3001      	adds	r0, #1
 800c396:	d0ad      	beq.n	800c2f4 <_printf_i+0x15c>
 800c398:	6823      	ldr	r3, [r4, #0]
 800c39a:	079b      	lsls	r3, r3, #30
 800c39c:	d413      	bmi.n	800c3c6 <_printf_i+0x22e>
 800c39e:	68e0      	ldr	r0, [r4, #12]
 800c3a0:	9b03      	ldr	r3, [sp, #12]
 800c3a2:	4298      	cmp	r0, r3
 800c3a4:	bfb8      	it	lt
 800c3a6:	4618      	movlt	r0, r3
 800c3a8:	e7a6      	b.n	800c2f8 <_printf_i+0x160>
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	4632      	mov	r2, r6
 800c3ae:	4649      	mov	r1, r9
 800c3b0:	4640      	mov	r0, r8
 800c3b2:	47d0      	blx	sl
 800c3b4:	3001      	adds	r0, #1
 800c3b6:	d09d      	beq.n	800c2f4 <_printf_i+0x15c>
 800c3b8:	3501      	adds	r5, #1
 800c3ba:	68e3      	ldr	r3, [r4, #12]
 800c3bc:	9903      	ldr	r1, [sp, #12]
 800c3be:	1a5b      	subs	r3, r3, r1
 800c3c0:	42ab      	cmp	r3, r5
 800c3c2:	dcf2      	bgt.n	800c3aa <_printf_i+0x212>
 800c3c4:	e7eb      	b.n	800c39e <_printf_i+0x206>
 800c3c6:	2500      	movs	r5, #0
 800c3c8:	f104 0619 	add.w	r6, r4, #25
 800c3cc:	e7f5      	b.n	800c3ba <_printf_i+0x222>
 800c3ce:	bf00      	nop
 800c3d0:	0800c7c9 	.word	0x0800c7c9
 800c3d4:	0800c7da 	.word	0x0800c7da

0800c3d8 <__swbuf_r>:
 800c3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3da:	460e      	mov	r6, r1
 800c3dc:	4614      	mov	r4, r2
 800c3de:	4605      	mov	r5, r0
 800c3e0:	b118      	cbz	r0, 800c3ea <__swbuf_r+0x12>
 800c3e2:	6a03      	ldr	r3, [r0, #32]
 800c3e4:	b90b      	cbnz	r3, 800c3ea <__swbuf_r+0x12>
 800c3e6:	f7ff fb23 	bl	800ba30 <__sinit>
 800c3ea:	69a3      	ldr	r3, [r4, #24]
 800c3ec:	60a3      	str	r3, [r4, #8]
 800c3ee:	89a3      	ldrh	r3, [r4, #12]
 800c3f0:	071a      	lsls	r2, r3, #28
 800c3f2:	d501      	bpl.n	800c3f8 <__swbuf_r+0x20>
 800c3f4:	6923      	ldr	r3, [r4, #16]
 800c3f6:	b943      	cbnz	r3, 800c40a <__swbuf_r+0x32>
 800c3f8:	4621      	mov	r1, r4
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	f000 f82a 	bl	800c454 <__swsetup_r>
 800c400:	b118      	cbz	r0, 800c40a <__swbuf_r+0x32>
 800c402:	f04f 37ff 	mov.w	r7, #4294967295
 800c406:	4638      	mov	r0, r7
 800c408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c40a:	6823      	ldr	r3, [r4, #0]
 800c40c:	b2f6      	uxtb	r6, r6
 800c40e:	6922      	ldr	r2, [r4, #16]
 800c410:	4637      	mov	r7, r6
 800c412:	1a98      	subs	r0, r3, r2
 800c414:	6963      	ldr	r3, [r4, #20]
 800c416:	4283      	cmp	r3, r0
 800c418:	dc05      	bgt.n	800c426 <__swbuf_r+0x4e>
 800c41a:	4621      	mov	r1, r4
 800c41c:	4628      	mov	r0, r5
 800c41e:	f7ff fa3f 	bl	800b8a0 <_fflush_r>
 800c422:	2800      	cmp	r0, #0
 800c424:	d1ed      	bne.n	800c402 <__swbuf_r+0x2a>
 800c426:	68a3      	ldr	r3, [r4, #8]
 800c428:	3b01      	subs	r3, #1
 800c42a:	60a3      	str	r3, [r4, #8]
 800c42c:	6823      	ldr	r3, [r4, #0]
 800c42e:	1c5a      	adds	r2, r3, #1
 800c430:	6022      	str	r2, [r4, #0]
 800c432:	701e      	strb	r6, [r3, #0]
 800c434:	1c43      	adds	r3, r0, #1
 800c436:	6962      	ldr	r2, [r4, #20]
 800c438:	429a      	cmp	r2, r3
 800c43a:	d004      	beq.n	800c446 <__swbuf_r+0x6e>
 800c43c:	89a3      	ldrh	r3, [r4, #12]
 800c43e:	07db      	lsls	r3, r3, #31
 800c440:	d5e1      	bpl.n	800c406 <__swbuf_r+0x2e>
 800c442:	2e0a      	cmp	r6, #10
 800c444:	d1df      	bne.n	800c406 <__swbuf_r+0x2e>
 800c446:	4621      	mov	r1, r4
 800c448:	4628      	mov	r0, r5
 800c44a:	f7ff fa29 	bl	800b8a0 <_fflush_r>
 800c44e:	2800      	cmp	r0, #0
 800c450:	d0d9      	beq.n	800c406 <__swbuf_r+0x2e>
 800c452:	e7d6      	b.n	800c402 <__swbuf_r+0x2a>

0800c454 <__swsetup_r>:
 800c454:	b538      	push	{r3, r4, r5, lr}
 800c456:	4b29      	ldr	r3, [pc, #164]	@ (800c4fc <__swsetup_r+0xa8>)
 800c458:	4605      	mov	r5, r0
 800c45a:	460c      	mov	r4, r1
 800c45c:	6818      	ldr	r0, [r3, #0]
 800c45e:	b118      	cbz	r0, 800c468 <__swsetup_r+0x14>
 800c460:	6a03      	ldr	r3, [r0, #32]
 800c462:	b90b      	cbnz	r3, 800c468 <__swsetup_r+0x14>
 800c464:	f7ff fae4 	bl	800ba30 <__sinit>
 800c468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c46c:	0719      	lsls	r1, r3, #28
 800c46e:	d422      	bmi.n	800c4b6 <__swsetup_r+0x62>
 800c470:	06da      	lsls	r2, r3, #27
 800c472:	d407      	bmi.n	800c484 <__swsetup_r+0x30>
 800c474:	2209      	movs	r2, #9
 800c476:	602a      	str	r2, [r5, #0]
 800c478:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c47c:	f04f 30ff 	mov.w	r0, #4294967295
 800c480:	81a3      	strh	r3, [r4, #12]
 800c482:	e033      	b.n	800c4ec <__swsetup_r+0x98>
 800c484:	0758      	lsls	r0, r3, #29
 800c486:	d512      	bpl.n	800c4ae <__swsetup_r+0x5a>
 800c488:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c48a:	b141      	cbz	r1, 800c49e <__swsetup_r+0x4a>
 800c48c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c490:	4299      	cmp	r1, r3
 800c492:	d002      	beq.n	800c49a <__swsetup_r+0x46>
 800c494:	4628      	mov	r0, r5
 800c496:	f7ff fbd3 	bl	800bc40 <_free_r>
 800c49a:	2300      	movs	r3, #0
 800c49c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c49e:	89a3      	ldrh	r3, [r4, #12]
 800c4a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c4a4:	81a3      	strh	r3, [r4, #12]
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	6063      	str	r3, [r4, #4]
 800c4aa:	6923      	ldr	r3, [r4, #16]
 800c4ac:	6023      	str	r3, [r4, #0]
 800c4ae:	89a3      	ldrh	r3, [r4, #12]
 800c4b0:	f043 0308 	orr.w	r3, r3, #8
 800c4b4:	81a3      	strh	r3, [r4, #12]
 800c4b6:	6923      	ldr	r3, [r4, #16]
 800c4b8:	b94b      	cbnz	r3, 800c4ce <__swsetup_r+0x7a>
 800c4ba:	89a3      	ldrh	r3, [r4, #12]
 800c4bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c4c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4c4:	d003      	beq.n	800c4ce <__swsetup_r+0x7a>
 800c4c6:	4621      	mov	r1, r4
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	f000 f85c 	bl	800c586 <__smakebuf_r>
 800c4ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4d2:	f013 0201 	ands.w	r2, r3, #1
 800c4d6:	d00a      	beq.n	800c4ee <__swsetup_r+0x9a>
 800c4d8:	2200      	movs	r2, #0
 800c4da:	60a2      	str	r2, [r4, #8]
 800c4dc:	6962      	ldr	r2, [r4, #20]
 800c4de:	4252      	negs	r2, r2
 800c4e0:	61a2      	str	r2, [r4, #24]
 800c4e2:	6922      	ldr	r2, [r4, #16]
 800c4e4:	b942      	cbnz	r2, 800c4f8 <__swsetup_r+0xa4>
 800c4e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c4ea:	d1c5      	bne.n	800c478 <__swsetup_r+0x24>
 800c4ec:	bd38      	pop	{r3, r4, r5, pc}
 800c4ee:	0799      	lsls	r1, r3, #30
 800c4f0:	bf58      	it	pl
 800c4f2:	6962      	ldrpl	r2, [r4, #20]
 800c4f4:	60a2      	str	r2, [r4, #8]
 800c4f6:	e7f4      	b.n	800c4e2 <__swsetup_r+0x8e>
 800c4f8:	2000      	movs	r0, #0
 800c4fa:	e7f7      	b.n	800c4ec <__swsetup_r+0x98>
 800c4fc:	2000001c 	.word	0x2000001c

0800c500 <_sbrk_r>:
 800c500:	b538      	push	{r3, r4, r5, lr}
 800c502:	2300      	movs	r3, #0
 800c504:	4d05      	ldr	r5, [pc, #20]	@ (800c51c <_sbrk_r+0x1c>)
 800c506:	4604      	mov	r4, r0
 800c508:	4608      	mov	r0, r1
 800c50a:	602b      	str	r3, [r5, #0]
 800c50c:	f7f4 ff84 	bl	8001418 <_sbrk>
 800c510:	1c43      	adds	r3, r0, #1
 800c512:	d102      	bne.n	800c51a <_sbrk_r+0x1a>
 800c514:	682b      	ldr	r3, [r5, #0]
 800c516:	b103      	cbz	r3, 800c51a <_sbrk_r+0x1a>
 800c518:	6023      	str	r3, [r4, #0]
 800c51a:	bd38      	pop	{r3, r4, r5, pc}
 800c51c:	20002908 	.word	0x20002908

0800c520 <memchr>:
 800c520:	b2c9      	uxtb	r1, r1
 800c522:	4603      	mov	r3, r0
 800c524:	4402      	add	r2, r0
 800c526:	b510      	push	{r4, lr}
 800c528:	4293      	cmp	r3, r2
 800c52a:	4618      	mov	r0, r3
 800c52c:	d101      	bne.n	800c532 <memchr+0x12>
 800c52e:	2000      	movs	r0, #0
 800c530:	e003      	b.n	800c53a <memchr+0x1a>
 800c532:	7804      	ldrb	r4, [r0, #0]
 800c534:	3301      	adds	r3, #1
 800c536:	428c      	cmp	r4, r1
 800c538:	d1f6      	bne.n	800c528 <memchr+0x8>
 800c53a:	bd10      	pop	{r4, pc}

0800c53c <__swhatbuf_r>:
 800c53c:	b570      	push	{r4, r5, r6, lr}
 800c53e:	460c      	mov	r4, r1
 800c540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c544:	b096      	sub	sp, #88	@ 0x58
 800c546:	4615      	mov	r5, r2
 800c548:	2900      	cmp	r1, #0
 800c54a:	461e      	mov	r6, r3
 800c54c:	da0c      	bge.n	800c568 <__swhatbuf_r+0x2c>
 800c54e:	89a3      	ldrh	r3, [r4, #12]
 800c550:	2100      	movs	r1, #0
 800c552:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c556:	bf14      	ite	ne
 800c558:	2340      	movne	r3, #64	@ 0x40
 800c55a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c55e:	2000      	movs	r0, #0
 800c560:	6031      	str	r1, [r6, #0]
 800c562:	602b      	str	r3, [r5, #0]
 800c564:	b016      	add	sp, #88	@ 0x58
 800c566:	bd70      	pop	{r4, r5, r6, pc}
 800c568:	466a      	mov	r2, sp
 800c56a:	f000 f849 	bl	800c600 <_fstat_r>
 800c56e:	2800      	cmp	r0, #0
 800c570:	dbed      	blt.n	800c54e <__swhatbuf_r+0x12>
 800c572:	9901      	ldr	r1, [sp, #4]
 800c574:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c578:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c57c:	4259      	negs	r1, r3
 800c57e:	4159      	adcs	r1, r3
 800c580:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c584:	e7eb      	b.n	800c55e <__swhatbuf_r+0x22>

0800c586 <__smakebuf_r>:
 800c586:	898b      	ldrh	r3, [r1, #12]
 800c588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c58a:	079d      	lsls	r5, r3, #30
 800c58c:	4606      	mov	r6, r0
 800c58e:	460c      	mov	r4, r1
 800c590:	d507      	bpl.n	800c5a2 <__smakebuf_r+0x1c>
 800c592:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c596:	6023      	str	r3, [r4, #0]
 800c598:	6123      	str	r3, [r4, #16]
 800c59a:	2301      	movs	r3, #1
 800c59c:	6163      	str	r3, [r4, #20]
 800c59e:	b003      	add	sp, #12
 800c5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5a2:	ab01      	add	r3, sp, #4
 800c5a4:	466a      	mov	r2, sp
 800c5a6:	f7ff ffc9 	bl	800c53c <__swhatbuf_r>
 800c5aa:	9f00      	ldr	r7, [sp, #0]
 800c5ac:	4605      	mov	r5, r0
 800c5ae:	4630      	mov	r0, r6
 800c5b0:	4639      	mov	r1, r7
 800c5b2:	f7ff fbb1 	bl	800bd18 <_malloc_r>
 800c5b6:	b948      	cbnz	r0, 800c5cc <__smakebuf_r+0x46>
 800c5b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5bc:	059a      	lsls	r2, r3, #22
 800c5be:	d4ee      	bmi.n	800c59e <__smakebuf_r+0x18>
 800c5c0:	f023 0303 	bic.w	r3, r3, #3
 800c5c4:	f043 0302 	orr.w	r3, r3, #2
 800c5c8:	81a3      	strh	r3, [r4, #12]
 800c5ca:	e7e2      	b.n	800c592 <__smakebuf_r+0xc>
 800c5cc:	89a3      	ldrh	r3, [r4, #12]
 800c5ce:	6020      	str	r0, [r4, #0]
 800c5d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5d4:	81a3      	strh	r3, [r4, #12]
 800c5d6:	9b01      	ldr	r3, [sp, #4]
 800c5d8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c5dc:	b15b      	cbz	r3, 800c5f6 <__smakebuf_r+0x70>
 800c5de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5e2:	4630      	mov	r0, r6
 800c5e4:	f000 f81e 	bl	800c624 <_isatty_r>
 800c5e8:	b128      	cbz	r0, 800c5f6 <__smakebuf_r+0x70>
 800c5ea:	89a3      	ldrh	r3, [r4, #12]
 800c5ec:	f023 0303 	bic.w	r3, r3, #3
 800c5f0:	f043 0301 	orr.w	r3, r3, #1
 800c5f4:	81a3      	strh	r3, [r4, #12]
 800c5f6:	89a3      	ldrh	r3, [r4, #12]
 800c5f8:	431d      	orrs	r5, r3
 800c5fa:	81a5      	strh	r5, [r4, #12]
 800c5fc:	e7cf      	b.n	800c59e <__smakebuf_r+0x18>
	...

0800c600 <_fstat_r>:
 800c600:	b538      	push	{r3, r4, r5, lr}
 800c602:	2300      	movs	r3, #0
 800c604:	4d06      	ldr	r5, [pc, #24]	@ (800c620 <_fstat_r+0x20>)
 800c606:	4604      	mov	r4, r0
 800c608:	4608      	mov	r0, r1
 800c60a:	4611      	mov	r1, r2
 800c60c:	602b      	str	r3, [r5, #0]
 800c60e:	f7f4 feda 	bl	80013c6 <_fstat>
 800c612:	1c43      	adds	r3, r0, #1
 800c614:	d102      	bne.n	800c61c <_fstat_r+0x1c>
 800c616:	682b      	ldr	r3, [r5, #0]
 800c618:	b103      	cbz	r3, 800c61c <_fstat_r+0x1c>
 800c61a:	6023      	str	r3, [r4, #0]
 800c61c:	bd38      	pop	{r3, r4, r5, pc}
 800c61e:	bf00      	nop
 800c620:	20002908 	.word	0x20002908

0800c624 <_isatty_r>:
 800c624:	b538      	push	{r3, r4, r5, lr}
 800c626:	2300      	movs	r3, #0
 800c628:	4d05      	ldr	r5, [pc, #20]	@ (800c640 <_isatty_r+0x1c>)
 800c62a:	4604      	mov	r4, r0
 800c62c:	4608      	mov	r0, r1
 800c62e:	602b      	str	r3, [r5, #0]
 800c630:	f7f4 fed9 	bl	80013e6 <_isatty>
 800c634:	1c43      	adds	r3, r0, #1
 800c636:	d102      	bne.n	800c63e <_isatty_r+0x1a>
 800c638:	682b      	ldr	r3, [r5, #0]
 800c63a:	b103      	cbz	r3, 800c63e <_isatty_r+0x1a>
 800c63c:	6023      	str	r3, [r4, #0]
 800c63e:	bd38      	pop	{r3, r4, r5, pc}
 800c640:	20002908 	.word	0x20002908

0800c644 <_init>:
 800c644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c646:	bf00      	nop
 800c648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c64a:	bc08      	pop	{r3}
 800c64c:	469e      	mov	lr, r3
 800c64e:	4770      	bx	lr

0800c650 <_fini>:
 800c650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c652:	bf00      	nop
 800c654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c656:	bc08      	pop	{r3}
 800c658:	469e      	mov	lr, r3
 800c65a:	4770      	bx	lr
