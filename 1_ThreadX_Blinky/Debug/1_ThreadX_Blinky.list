
1_ThreadX_Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bec  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003e38  08003e38  00004e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e9c  08003e9c  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  08003e9c  08003e9c  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e9c  08003e9c  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e9c  08003e9c  00004e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ea0  08003ea0  00004ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003ea4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018f0  20000010  08003eb4  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001900  08003eb4  00005900  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a2b  00000000  00000000  00005046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a36  00000000  00000000  00019a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  0001d4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b3e  00000000  00000000  0001e448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033a96  00000000  00000000  0001ef86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e9e  00000000  00000000  00052a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00141a22  00000000  00000000  000698ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ab2dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f0  00000000  00000000  001ab320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000fe  00000000  00000000  001aec10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000010 	.word	0x20000010
 8000268:	00000000 	.word	0x00000000
 800026c:	08003e20 	.word	0x08003e20

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000014 	.word	0x20000014
 8000288:	08003e20 	.word	0x08003e20

0800028c <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 800028c:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800028e:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000292:	4917      	ldr	r1, [pc, #92]	@ (80002f0 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000294:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000298:	4816      	ldr	r0, [pc, #88]	@ (80002f4 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 800029a:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 800029c:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002a0:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002a2:	4815      	ldr	r0, [pc, #84]	@ (80002f8 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002a4:	4912      	ldr	r1, [pc, #72]	@ (80002f0 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002a6:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002a8:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002aa:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002ae:	4913      	ldr	r1, [pc, #76]	@ (80002fc <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002b0:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002b2:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002b6:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002b8:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002bc:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002c0:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002c4:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002c8:	490d      	ldr	r1, [pc, #52]	@ (8000300 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002ca:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ce:	4770      	bx	lr

080002d0 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002d0:	f7ff bffe 	b.w	80002d0 <__tx_BadHandler>

080002d4 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002d4:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002d6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002da:	4770      	bx	lr

080002dc <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002dc:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002de:	f000 f897 	bl	8000410 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002e6:	4770      	bx	lr

080002e8 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002e8:	f7ff bffe 	b.w	80002e8 <__tx_NMIHandler>

080002ec <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002ec:	f7ff bffe 	b.w	80002ec <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002f0:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002f4:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002f8:	200012f4 	.word	0x200012f4
    LDR     r1, =SYSTICK_CYCLES
 80002fc:	0026259f 	.word	0x0026259f
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000300:	40ff0000 	.word	0x40ff0000

08000304 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000304:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000308:	4a2d      	ldr	r2, [pc, #180]	@ (80003c0 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 800030a:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 800030c:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000310:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000314:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000318:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800031a:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800031e:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000322:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 8000326:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800032a:	f3bf 8f6f 	isb	sy

0800032e <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800032e:	e7fe      	b.n	800032e <__tx_wait_here>

08000330 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000330:	4824      	ldr	r0, [pc, #144]	@ (80003c4 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000332:	4a25      	ldr	r2, [pc, #148]	@ (80003c8 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000334:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000338:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800033a:	b191      	cbz	r1, 8000362 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 800033c:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800033e:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000342:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000346:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 800034a:	d101      	bne.n	8000350 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 800034c:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000350 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000350:	4c1e      	ldr	r4, [pc, #120]	@ (80003cc <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000352:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000356:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800035a:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 800035c:	b10d      	cbz	r5, 8000362 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800035e:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000360:	6023      	str	r3, [r4, #0]

08000362 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000362:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000364:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000366:	b1d1      	cbz	r1, 800039e <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000368:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800036a:	b662      	cpsie	i

0800036c <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 800036c:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800036e:	4c17      	ldr	r4, [pc, #92]	@ (80003cc <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000370:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000372:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000376:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000378:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 800037a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800037e:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000382:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000386:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800038a:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800038e:	d101      	bne.n	8000394 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000390:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000394 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000394:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000398:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 800039c:	4770      	bx	lr

0800039e <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800039e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003a0:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003a2:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003a4:	b909      	cbnz	r1, 80003aa <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a6:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003a8:	e7f9      	b.n	800039e <__tx_ts_wait>

080003aa <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003aa:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003ae:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003b2:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003b6:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003b8:	e7d8      	b.n	800036c <__tx_ts_restore>
 80003ba:	bf00      	nop

080003bc <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003bc:	4770      	bx	lr
 80003be:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003c0:	20001390 	.word	0x20001390
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c4:	200012f8 	.word	0x200012f8
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c8:	200012fc 	.word	0x200012fc
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003cc:	200018fc 	.word	0x200018fc

080003d0 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003d0:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003d2:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003d6:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003da:	f06f 0343 	mvn.w	r3, #67	@ 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003de:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003e0:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e4:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003e6:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003e8:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003ea:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003ec:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003ee:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003f0:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003f2:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f4:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003f6:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003fa:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003fc:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    STR     r3, [r2, #56]                           // Store initial lr
 8000402:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000404:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000406:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800040a:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800040c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800040e:	4770      	bx	lr

08000410 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000410:	4922      	ldr	r1, [pc, #136]	@ (800049c <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000412:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000414:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000418:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800041a:	4b21      	ldr	r3, [pc, #132]	@ (80004a0 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800041c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800041e:	b13a      	cbz	r2, 8000430 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000420:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000424:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000426:	b91a      	cbnz	r2, 8000430 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000428:	4b1e      	ldr	r3, [pc, #120]	@ (80004a4 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 800042a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800042e:	6018      	str	r0, [r3, #0]

08000430 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000430:	491d      	ldr	r1, [pc, #116]	@ (80004a8 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000432:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000434:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000436:	b122      	cbz	r2, 8000442 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000438:	4b1c      	ldr	r3, [pc, #112]	@ (80004ac <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 800043a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800043e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000440:	e008      	b.n	8000454 <__tx_timer_done>

08000442 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000442:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000446:	4b1a      	ldr	r3, [pc, #104]	@ (80004b0 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000448:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800044a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800044c:	d101      	bne.n	8000452 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800044e:	4b19      	ldr	r3, [pc, #100]	@ (80004b4 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000450:	6818      	ldr	r0, [r3, #0]

08000452 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000452:	6008      	str	r0, [r1, #0]

08000454 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000454:	4b13      	ldr	r3, [pc, #76]	@ (80004a4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000456:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000458:	b912      	cbnz	r2, 8000460 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800045a:	4914      	ldr	r1, [pc, #80]	@ (80004ac <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800045c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800045e:	b1c8      	cbz	r0, 8000494 <__tx_timer_nothing_expired>

08000460 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000460:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000462:	4912      	ldr	r1, [pc, #72]	@ (80004ac <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000464:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000466:	b108      	cbz	r0, 800046c <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000468:	f003 f8e6 	bl	8003638 <_tx_timer_expiration_process>

0800046c <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800046c:	4b0d      	ldr	r3, [pc, #52]	@ (80004a4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800046e:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000470:	b172      	cbz	r2, 8000490 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000472:	f003 f853 	bl	800351c <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000476:	4810      	ldr	r0, [pc, #64]	@ (80004b8 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000478:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800047a:	b949      	cbnz	r1, 8000490 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800047c:	480f      	ldr	r0, [pc, #60]	@ (80004bc <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800047e:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000480:	4a0f      	ldr	r2, [pc, #60]	@ (80004c0 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000482:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000484:	480f      	ldr	r0, [pc, #60]	@ (80004c4 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800048a:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800048c:	d000      	beq.n	8000490 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800048e:	6002      	str	r2, [r0, #0]

08000490 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000490:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000494 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000494:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000498:	4770      	bx	lr
 800049a:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800049c:	2000139c 	.word	0x2000139c
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004a0:	200018fc 	.word	0x200018fc
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a4:	200013a0 	.word	0x200013a0
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004a8:	2000142c 	.word	0x2000142c
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004ac:	20001430 	.word	0x20001430
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004b0:	20001428 	.word	0x20001428
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b4:	20001424 	.word	0x20001424
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004b8:	20001390 	.word	0x20001390
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004bc:	200012f8 	.word	0x200012f8
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004c0:	200012fc 	.word	0x200012fc
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c4:	e000ed04 	.word	0xe000ed04

080004c8 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80004d4:	2334      	movs	r3, #52	@ 0x34
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004dc:	4a0b      	ldr	r2, [pc, #44]	@ (800050c <tx_application_define+0x44>)
 80004de:	490c      	ldr	r1, [pc, #48]	@ (8000510 <tx_application_define+0x48>)
 80004e0:	480c      	ldr	r0, [pc, #48]	@ (8000514 <tx_application_define+0x4c>)
 80004e2:	f003 fadf 	bl	8003aa4 <_txe_byte_pool_create>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d10a      	bne.n	8000502 <tx_application_define+0x3a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80004ec:	4b09      	ldr	r3, [pc, #36]	@ (8000514 <tx_application_define+0x4c>)
 80004ee:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80004f0:	68b8      	ldr	r0, [r7, #8]
 80004f2:	f000 f811 	bl	8000518 <App_ThreadX_Init>
 80004f6:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80004fe:	bf00      	nop
 8000500:	e7fd      	b.n	80004fe <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000502:	bf00      	nop
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c
 8000510:	08003e38 	.word	0x08003e38
 8000514:	2000042c 	.word	0x2000042c

08000518 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08c      	sub	sp, #48	@ 0x30
 800051c:	af08      	add	r7, sp, #32
 800051e:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  tx_thread_create(&thread_ptr1, "LD1_thread", LD1_thread_entry, 0x1234, thread_stack1, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);
 8000524:	23b0      	movs	r3, #176	@ 0xb0
 8000526:	9306      	str	r3, [sp, #24]
 8000528:	2301      	movs	r3, #1
 800052a:	9305      	str	r3, [sp, #20]
 800052c:	2301      	movs	r3, #1
 800052e:	9304      	str	r3, [sp, #16]
 8000530:	230f      	movs	r3, #15
 8000532:	9303      	str	r3, [sp, #12]
 8000534:	230f      	movs	r3, #15
 8000536:	9302      	str	r3, [sp, #8]
 8000538:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	4b1d      	ldr	r3, [pc, #116]	@ (80005b4 <App_ThreadX_Init+0x9c>)
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	f241 2334 	movw	r3, #4660	@ 0x1234
 8000546:	4a1c      	ldr	r2, [pc, #112]	@ (80005b8 <App_ThreadX_Init+0xa0>)
 8000548:	491c      	ldr	r1, [pc, #112]	@ (80005bc <App_ThreadX_Init+0xa4>)
 800054a:	481d      	ldr	r0, [pc, #116]	@ (80005c0 <App_ThreadX_Init+0xa8>)
 800054c:	f003 fb4a 	bl	8003be4 <_txe_thread_create>
  tx_thread_create(&thread_ptr2, "LD2_thread", LD2_thread_entry, 0x1234, thread_stack2, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);
 8000550:	23b0      	movs	r3, #176	@ 0xb0
 8000552:	9306      	str	r3, [sp, #24]
 8000554:	2301      	movs	r3, #1
 8000556:	9305      	str	r3, [sp, #20]
 8000558:	2301      	movs	r3, #1
 800055a:	9304      	str	r3, [sp, #16]
 800055c:	230f      	movs	r3, #15
 800055e:	9303      	str	r3, [sp, #12]
 8000560:	230f      	movs	r3, #15
 8000562:	9302      	str	r3, [sp, #8]
 8000564:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	4b16      	ldr	r3, [pc, #88]	@ (80005c4 <App_ThreadX_Init+0xac>)
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	f241 2334 	movw	r3, #4660	@ 0x1234
 8000572:	4a15      	ldr	r2, [pc, #84]	@ (80005c8 <App_ThreadX_Init+0xb0>)
 8000574:	4915      	ldr	r1, [pc, #84]	@ (80005cc <App_ThreadX_Init+0xb4>)
 8000576:	4816      	ldr	r0, [pc, #88]	@ (80005d0 <App_ThreadX_Init+0xb8>)
 8000578:	f003 fb34 	bl	8003be4 <_txe_thread_create>
  tx_thread_create(&thread_ptr3, "LD3_thread", LD3_thread_entry, 0x1234, thread_stack3, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);
 800057c:	23b0      	movs	r3, #176	@ 0xb0
 800057e:	9306      	str	r3, [sp, #24]
 8000580:	2301      	movs	r3, #1
 8000582:	9305      	str	r3, [sp, #20]
 8000584:	2301      	movs	r3, #1
 8000586:	9304      	str	r3, [sp, #16]
 8000588:	230f      	movs	r3, #15
 800058a:	9303      	str	r3, [sp, #12]
 800058c:	230f      	movs	r3, #15
 800058e:	9302      	str	r3, [sp, #8]
 8000590:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	4b0f      	ldr	r3, [pc, #60]	@ (80005d4 <App_ThreadX_Init+0xbc>)
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	f241 2334 	movw	r3, #4660	@ 0x1234
 800059e:	4a0e      	ldr	r2, [pc, #56]	@ (80005d8 <App_ThreadX_Init+0xc0>)
 80005a0:	490e      	ldr	r1, [pc, #56]	@ (80005dc <App_ThreadX_Init+0xc4>)
 80005a2:	480f      	ldr	r0, [pc, #60]	@ (80005e0 <App_ThreadX_Init+0xc8>)
 80005a4:	f003 fb1e 	bl	8003be4 <_txe_thread_create>
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80005a8:	68fb      	ldr	r3, [r7, #12]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000460 	.word	0x20000460
 80005b8:	080005f1 	.word	0x080005f1
 80005bc:	08003e4c 	.word	0x08003e4c
 80005c0:	20000860 	.word	0x20000860
 80005c4:	20000910 	.word	0x20000910
 80005c8:	08000611 	.word	0x08000611
 80005cc:	08003e58 	.word	0x08003e58
 80005d0:	20000d10 	.word	0x20000d10
 80005d4:	20000dc0 	.word	0x20000dc0
 80005d8:	08000631 	.word	0x08000631
 80005dc:	08003e64 	.word	0x08003e64
 80005e0:	200011c0 	.word	0x200011c0

080005e4 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80005e8:	f002 fb1e 	bl	8002c28 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <LD1_thread_entry>:

/* USER CODE BEGIN 1 */
VOID LD1_thread_entry (ULONG initial_input){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80005f8:	2101      	movs	r1, #1
 80005fa:	4804      	ldr	r0, [pc, #16]	@ (800060c <LD1_thread_entry+0x1c>)
 80005fc:	f000 fe72 	bl	80012e4 <HAL_GPIO_TogglePin>
		tx_thread_sleep(100);
 8000600:	2064      	movs	r0, #100	@ 0x64
 8000602:	f002 fcb9 	bl	8002f78 <_tx_thread_sleep>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000606:	bf00      	nop
 8000608:	e7f6      	b.n	80005f8 <LD1_thread_entry+0x8>
 800060a:	bf00      	nop
 800060c:	42020400 	.word	0x42020400

08000610 <LD2_thread_entry>:
	}

}
VOID LD2_thread_entry (ULONG initial_input){
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000618:	2110      	movs	r1, #16
 800061a:	4804      	ldr	r0, [pc, #16]	@ (800062c <LD2_thread_entry+0x1c>)
 800061c:	f000 fe62 	bl	80012e4 <HAL_GPIO_TogglePin>
		tx_thread_sleep(200);
 8000620:	20c8      	movs	r0, #200	@ 0xc8
 8000622:	f002 fca9 	bl	8002f78 <_tx_thread_sleep>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000626:	bf00      	nop
 8000628:	e7f6      	b.n	8000618 <LD2_thread_entry+0x8>
 800062a:	bf00      	nop
 800062c:	42021400 	.word	0x42021400

08000630 <LD3_thread_entry>:
	}

}
VOID LD3_thread_entry (ULONG initial_input){
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000638:	2110      	movs	r1, #16
 800063a:	4804      	ldr	r0, [pc, #16]	@ (800064c <LD3_thread_entry+0x1c>)
 800063c:	f000 fe52 	bl	80012e4 <HAL_GPIO_TogglePin>
		tx_thread_sleep(300);
 8000640:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000644:	f002 fc98 	bl	8002f78 <_tx_thread_sleep>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000648:	bf00      	nop
 800064a:	e7f5      	b.n	8000638 <LD3_thread_entry+0x8>
 800064c:	42021800 	.word	0x42021800

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f000 fb5c 	bl	8000d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f808 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f000 f880 	bl	8000760 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000660:	f000 f86a 	bl	8000738 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000664:	f7ff ffbe 	bl	80005e4 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <main+0x18>

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b09c      	sub	sp, #112	@ 0x70
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2250      	movs	r2, #80	@ 0x50
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f003 fba4 	bl	8003dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
 8000690:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000692:	4b28      	ldr	r3, [pc, #160]	@ (8000734 <SystemClock_Config+0xc8>)
 8000694:	691b      	ldr	r3, [r3, #16]
 8000696:	4a27      	ldr	r2, [pc, #156]	@ (8000734 <SystemClock_Config+0xc8>)
 8000698:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800069c:	6113      	str	r3, [r2, #16]
 800069e:	4b25      	ldr	r3, [pc, #148]	@ (8000734 <SystemClock_Config+0xc8>)
 80006a0:	691b      	ldr	r3, [r3, #16]
 80006a2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006aa:	bf00      	nop
 80006ac:	4b21      	ldr	r3, [pc, #132]	@ (8000734 <SystemClock_Config+0xc8>)
 80006ae:	695b      	ldr	r3, [r3, #20]
 80006b0:	f003 0308 	and.w	r3, r3, #8
 80006b4:	2b08      	cmp	r3, #8
 80006b6:	d1f9      	bne.n	80006ac <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b8:	2301      	movs	r3, #1
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006bc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80006c6:	2303      	movs	r3, #3
 80006c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ca:	2304      	movs	r3, #4
 80006cc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 80006ce:	23fa      	movs	r3, #250	@ 0xfa
 80006d0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006da:	2302      	movs	r3, #2
 80006dc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 80006de:	2304      	movs	r3, #4
 80006e0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 fe42 	bl	8001378 <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006fa:	f000 f9b9 	bl	8000a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	231f      	movs	r3, #31
 8000700:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2303      	movs	r3, #3
 8000704:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000716:	f107 0308 	add.w	r3, r7, #8
 800071a:	2105      	movs	r1, #5
 800071c:	4618      	mov	r0, r3
 800071e:	f001 fa63 	bl	8001be8 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000728:	f000 f9a2 	bl	8000a70 <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3770      	adds	r7, #112	@ 0x70
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	44020800 	.word	0x44020800

08000738 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800073c:	2000      	movs	r0, #0
 800073e:	f000 fdeb 	bl	8001318 <HAL_ICACHE_ConfigAssociativityMode>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000748:	f000 f992 	bl	8000a70 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800074c:	f000 fe04 	bl	8001358 <HAL_ICACHE_Enable>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000756:	f000 f98b 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08e      	sub	sp, #56	@ 0x38
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000776:	4bad      	ldr	r3, [pc, #692]	@ (8000a2c <MX_GPIO_Init+0x2cc>)
 8000778:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800077c:	4aab      	ldr	r2, [pc, #684]	@ (8000a2c <MX_GPIO_Init+0x2cc>)
 800077e:	f043 0310 	orr.w	r3, r3, #16
 8000782:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000786:	4ba9      	ldr	r3, [pc, #676]	@ (8000a2c <MX_GPIO_Init+0x2cc>)
 8000788:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800078c:	f003 0310 	and.w	r3, r3, #16
 8000790:	623b      	str	r3, [r7, #32]
 8000792:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000794:	4ba5      	ldr	r3, [pc, #660]	@ (8000a2c <MX_GPIO_Init+0x2cc>)
 8000796:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800079a:	4aa4      	ldr	r2, [pc, #656]	@ (8000a2c <MX_GPIO_Init+0x2cc>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007a4:	4ba1      	ldr	r3, [pc, #644]	@ (8000a2c <MX_GPIO_Init+0x2cc>)
 80007a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	61fb      	str	r3, [r7, #28]
 80007b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007b2:	4b9e      	ldr	r3, [pc, #632]	@ (8000a2c <MX_GPIO_Init+0x2cc>)
 80007b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007b8:	4a9c      	ldr	r2, [pc, #624]	@ (8000a2c <MX_GPIO_Init+0x2cc>)
 80007ba:	f043 0320 	orr.w	r3, r3, #32
 80007be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007c2:	4b9a      	ldr	r3, [pc, #616]	@ (8000a2c <MX_GPIO_Init+0x2cc>)
 80007c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007c8:	f003 0320 	and.w	r3, r3, #32
 80007cc:	61bb      	str	r3, [r7, #24]
 80007ce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d0:	4b96      	ldr	r3, [pc, #600]	@ (8000a2c <MX_GPIO_Init+0x2cc>)
 80007d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007d6:	4a95      	ldr	r2, [pc, #596]	@ (8000a2c <MX_GPIO_Init+0x2cc>)
 80007d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007dc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007e0:	4b92      	ldr	r3, [pc, #584]	@ (8000a2c <MX_GPIO_Init+0x2cc>)
 80007e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b8f      	ldr	r3, [pc, #572]	@ (8000a2c <MX_GPIO_Init+0x2cc>)
 80007f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007f4:	4a8d      	ldr	r2, [pc, #564]	@ (8000a2c <MX_GPIO_Init+0x2cc>)
 80007f6:	f043 0301 	orr.w	r3, r3, #1
 80007fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007fe:	4b8b      	ldr	r3, [pc, #556]	@ (8000a2c <MX_GPIO_Init+0x2cc>)
 8000800:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080c:	4b87      	ldr	r3, [pc, #540]	@ (8000a2c <MX_GPIO_Init+0x2cc>)
 800080e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000812:	4a86      	ldr	r2, [pc, #536]	@ (8000a2c <MX_GPIO_Init+0x2cc>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800081c:	4b83      	ldr	r3, [pc, #524]	@ (8000a2c <MX_GPIO_Init+0x2cc>)
 800081e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082a:	4b80      	ldr	r3, [pc, #512]	@ (8000a2c <MX_GPIO_Init+0x2cc>)
 800082c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000830:	4a7e      	ldr	r2, [pc, #504]	@ (8000a2c <MX_GPIO_Init+0x2cc>)
 8000832:	f043 0308 	orr.w	r3, r3, #8
 8000836:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800083a:	4b7c      	ldr	r3, [pc, #496]	@ (8000a2c <MX_GPIO_Init+0x2cc>)
 800083c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000840:	f003 0308 	and.w	r3, r3, #8
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000848:	4b78      	ldr	r3, [pc, #480]	@ (8000a2c <MX_GPIO_Init+0x2cc>)
 800084a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800084e:	4a77      	ldr	r2, [pc, #476]	@ (8000a2c <MX_GPIO_Init+0x2cc>)
 8000850:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000854:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000858:	4b74      	ldr	r3, [pc, #464]	@ (8000a2c <MX_GPIO_Init+0x2cc>)
 800085a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800085e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	2110      	movs	r1, #16
 800086a:	4871      	ldr	r0, [pc, #452]	@ (8000a30 <MX_GPIO_Init+0x2d0>)
 800086c:	f000 fd22 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	2101      	movs	r1, #1
 8000874:	486f      	ldr	r0, [pc, #444]	@ (8000a34 <MX_GPIO_Init+0x2d4>)
 8000876:	f000 fd1d 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2110      	movs	r1, #16
 800087e:	486e      	ldr	r0, [pc, #440]	@ (8000a38 <MX_GPIO_Init+0x2d8>)
 8000880:	f000 fd18 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000884:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088a:	4b6c      	ldr	r3, [pc, #432]	@ (8000a3c <MX_GPIO_Init+0x2dc>)
 800088c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000896:	4619      	mov	r1, r3
 8000898:	4869      	ldr	r0, [pc, #420]	@ (8000a40 <MX_GPIO_Init+0x2e0>)
 800089a:	f000 fbb9 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800089e:	2310      	movs	r3, #16
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b2:	4619      	mov	r1, r3
 80008b4:	485e      	ldr	r0, [pc, #376]	@ (8000a30 <MX_GPIO_Init+0x2d0>)
 80008b6:	f000 fbab 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008ba:	2332      	movs	r3, #50	@ 0x32
 80008bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c6:	2302      	movs	r3, #2
 80008c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008ca:	230b      	movs	r3, #11
 80008cc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d2:	4619      	mov	r1, r3
 80008d4:	485a      	ldr	r0, [pc, #360]	@ (8000a40 <MX_GPIO_Init+0x2e0>)
 80008d6:	f000 fb9b 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008da:	2386      	movs	r3, #134	@ 0x86
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e6:	2302      	movs	r3, #2
 80008e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008ea:	230b      	movs	r3, #11
 80008ec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f2:	4619      	mov	r1, r3
 80008f4:	4853      	ldr	r0, [pc, #332]	@ (8000a44 <MX_GPIO_Init+0x2e4>)
 80008f6:	f000 fb8b 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80008fa:	2310      	movs	r3, #16
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008fe:	2303      	movs	r3, #3
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090a:	4619      	mov	r1, r3
 800090c:	484d      	ldr	r0, [pc, #308]	@ (8000a44 <MX_GPIO_Init+0x2e4>)
 800090e:	f000 fb7f 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000912:	2301      	movs	r3, #1
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000926:	4619      	mov	r1, r3
 8000928:	4842      	ldr	r0, [pc, #264]	@ (8000a34 <MX_GPIO_Init+0x2d4>)
 800092a:	f000 fb71 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 800092e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000934:	2303      	movs	r3, #3
 8000936:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000940:	4619      	mov	r1, r3
 8000942:	483c      	ldr	r0, [pc, #240]	@ (8000a34 <MX_GPIO_Init+0x2d4>)
 8000944:	f000 fb64 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000948:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000956:	2302      	movs	r3, #2
 8000958:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800095a:	230b      	movs	r3, #11
 800095c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000962:	4619      	mov	r1, r3
 8000964:	4833      	ldr	r0, [pc, #204]	@ (8000a34 <MX_GPIO_Init+0x2d4>)
 8000966:	f000 fb53 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800096a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800097c:	2307      	movs	r3, #7
 800097e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000980:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000984:	4619      	mov	r1, r3
 8000986:	4830      	ldr	r0, [pc, #192]	@ (8000a48 <MX_GPIO_Init+0x2e8>)
 8000988:	f000 fb42 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800098c:	2310      	movs	r3, #16
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a0:	4619      	mov	r1, r3
 80009a2:	4825      	ldr	r0, [pc, #148]	@ (8000a38 <MX_GPIO_Init+0x2d8>)
 80009a4:	f000 fb34 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80009a8:	2380      	movs	r3, #128	@ 0x80
 80009aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ac:	4b23      	ldr	r3, [pc, #140]	@ (8000a3c <MX_GPIO_Init+0x2dc>)
 80009ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b8:	4619      	mov	r1, r3
 80009ba:	481f      	ldr	r0, [pc, #124]	@ (8000a38 <MX_GPIO_Init+0x2d8>)
 80009bc:	f000 fb28 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80009c0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80009d2:	230a      	movs	r3, #10
 80009d4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009da:	4619      	mov	r1, r3
 80009dc:	4819      	ldr	r0, [pc, #100]	@ (8000a44 <MX_GPIO_Init+0x2e4>)
 80009de:	f000 fb17 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 80009e2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80009e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f0:	2302      	movs	r3, #2
 80009f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009f4:	230b      	movs	r3, #11
 80009f6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009fc:	4619      	mov	r1, r3
 80009fe:	480e      	ldr	r0, [pc, #56]	@ (8000a38 <MX_GPIO_Init+0x2d8>)
 8000a00:	f000 fb06 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000a04:	23c0      	movs	r3, #192	@ 0xc0
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000a14:	2308      	movs	r3, #8
 8000a16:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <MX_GPIO_Init+0x2d4>)
 8000a20:	f000 faf6 	bl	8001010 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a24:	bf00      	nop
 8000a26:	3738      	adds	r7, #56	@ 0x38
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	44020c00 	.word	0x44020c00
 8000a30:	42021400 	.word	0x42021400
 8000a34:	42020400 	.word	0x42020400
 8000a38:	42021800 	.word	0x42021800
 8000a3c:	10110000 	.word	0x10110000
 8000a40:	42020800 	.word	0x42020800
 8000a44:	42020000 	.word	0x42020000
 8000a48:	42020c00 	.word	0x42020c00

08000a4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a04      	ldr	r2, [pc, #16]	@ (8000a6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d101      	bne.n	8000a62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a5e:	f000 f97f 	bl	8000d60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40001000 	.word	0x40001000

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <Error_Handler+0x8>

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
	...

08000a8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08e      	sub	sp, #56	@ 0x38
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a94:	4b33      	ldr	r3, [pc, #204]	@ (8000b64 <HAL_InitTick+0xd8>)
 8000a96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000a9a:	4a32      	ldr	r2, [pc, #200]	@ (8000b64 <HAL_InitTick+0xd8>)
 8000a9c:	f043 0310 	orr.w	r3, r3, #16
 8000aa0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000aa4:	4b2f      	ldr	r3, [pc, #188]	@ (8000b64 <HAL_InitTick+0xd8>)
 8000aa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000aaa:	f003 0310 	and.w	r3, r3, #16
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ab2:	f107 020c 	add.w	r2, r7, #12
 8000ab6:	f107 0310 	add.w	r3, r7, #16
 8000aba:	4611      	mov	r1, r2
 8000abc:	4618      	mov	r0, r3
 8000abe:	f001 fba9 	bl	8002214 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d103      	bne.n	8000ad4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000acc:	f001 fb8c 	bl	80021e8 <HAL_RCC_GetPCLK1Freq>
 8000ad0:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ad2:	e004      	b.n	8000ade <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ad4:	f001 fb88 	bl	80021e8 <HAL_RCC_GetPCLK1Freq>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8000ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ae0:	095b      	lsrs	r3, r3, #5
 8000ae2:	4a21      	ldr	r2, [pc, #132]	@ (8000b68 <HAL_InitTick+0xdc>)
 8000ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae8:	09db      	lsrs	r3, r3, #7
 8000aea:	3b01      	subs	r3, #1
 8000aec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000aee:	4b1f      	ldr	r3, [pc, #124]	@ (8000b6c <HAL_InitTick+0xe0>)
 8000af0:	4a1f      	ldr	r2, [pc, #124]	@ (8000b70 <HAL_InitTick+0xe4>)
 8000af2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 8000af4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <HAL_InitTick+0xe0>)
 8000af6:	2263      	movs	r2, #99	@ 0x63
 8000af8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000afa:	4a1c      	ldr	r2, [pc, #112]	@ (8000b6c <HAL_InitTick+0xe0>)
 8000afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000afe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b00:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <HAL_InitTick+0xe0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b06:	4b19      	ldr	r3, [pc, #100]	@ (8000b6c <HAL_InitTick+0xe0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000b0c:	4817      	ldr	r0, [pc, #92]	@ (8000b6c <HAL_InitTick+0xe0>)
 8000b0e:	f001 fbb9 	bl	8002284 <HAL_TIM_Base_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d118      	bne.n	8000b52 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b20:	4812      	ldr	r0, [pc, #72]	@ (8000b6c <HAL_InitTick+0xe0>)
 8000b22:	f001 fc11 	bl	8002348 <HAL_TIM_Base_Start_IT>
 8000b26:	4603      	mov	r3, r0
 8000b28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d10e      	bne.n	8000b52 <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b0f      	cmp	r3, #15
 8000b38:	d808      	bhi.n	8000b4c <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	6879      	ldr	r1, [r7, #4]
 8000b3e:	2031      	movs	r0, #49	@ 0x31
 8000b40:	f000 f9e6 	bl	8000f10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b44:	4a0b      	ldr	r2, [pc, #44]	@ (8000b74 <HAL_InitTick+0xe8>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6013      	str	r3, [r2, #0]
 8000b4a:	e002      	b.n	8000b52 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000b52:	2031      	movs	r0, #49	@ 0x31
 8000b54:	f000 f9f6 	bl	8000f44 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8000b58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3738      	adds	r7, #56	@ 0x38
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	44020c00 	.word	0x44020c00
 8000b68:	0a7c5ac5 	.word	0x0a7c5ac5
 8000b6c:	20001270 	.word	0x20001270
 8000b70:	40001000 	.word	0x40001000
 8000b74:	20000004 	.word	0x20000004

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <NMI_Handler+0x4>

08000b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <MemManage_Handler+0x4>

08000b90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <UsageFault_Handler+0x4>

08000ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bb4:	4802      	ldr	r0, [pc, #8]	@ (8000bc0 <TIM6_IRQHandler+0x10>)
 8000bb6:	f001 fc75 	bl	80024a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20001270 	.word	0x20001270

08000bc4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bca:	4b35      	ldr	r3, [pc, #212]	@ (8000ca0 <SystemInit+0xdc>)
 8000bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bd0:	4a33      	ldr	r2, [pc, #204]	@ (8000ca0 <SystemInit+0xdc>)
 8000bd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bd6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000bda:	4b32      	ldr	r3, [pc, #200]	@ (8000ca4 <SystemInit+0xe0>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000be0:	4b30      	ldr	r3, [pc, #192]	@ (8000ca4 <SystemInit+0xe0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000be6:	4b2f      	ldr	r3, [pc, #188]	@ (8000ca4 <SystemInit+0xe0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000bec:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca4 <SystemInit+0xe0>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	492c      	ldr	r1, [pc, #176]	@ (8000ca4 <SystemInit+0xe0>)
 8000bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca8 <SystemInit+0xe4>)
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000bf8:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca4 <SystemInit+0xe0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000bfe:	4b29      	ldr	r3, [pc, #164]	@ (8000ca4 <SystemInit+0xe0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000c04:	4b27      	ldr	r3, [pc, #156]	@ (8000ca4 <SystemInit+0xe0>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000c0a:	4b26      	ldr	r3, [pc, #152]	@ (8000ca4 <SystemInit+0xe0>)
 8000c0c:	4a27      	ldr	r2, [pc, #156]	@ (8000cac <SystemInit+0xe8>)
 8000c0e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000c10:	4b24      	ldr	r3, [pc, #144]	@ (8000ca4 <SystemInit+0xe0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000c16:	4b23      	ldr	r3, [pc, #140]	@ (8000ca4 <SystemInit+0xe0>)
 8000c18:	4a24      	ldr	r2, [pc, #144]	@ (8000cac <SystemInit+0xe8>)
 8000c1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000c1c:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <SystemInit+0xe0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000c22:	4b20      	ldr	r3, [pc, #128]	@ (8000ca4 <SystemInit+0xe0>)
 8000c24:	4a21      	ldr	r2, [pc, #132]	@ (8000cac <SystemInit+0xe8>)
 8000c26:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000c28:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca4 <SystemInit+0xe0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca4 <SystemInit+0xe0>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca4 <SystemInit+0xe0>)
 8000c34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c38:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca4 <SystemInit+0xe0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c40:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <SystemInit+0xdc>)
 8000c42:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c46:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000c48:	4b19      	ldr	r3, [pc, #100]	@ (8000cb0 <SystemInit+0xec>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000c50:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000c58:	d003      	beq.n	8000c62 <SystemInit+0x9e>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000c60:	d117      	bne.n	8000c92 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000c62:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <SystemInit+0xec>)
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d005      	beq.n	8000c7a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000c6e:	4b10      	ldr	r3, [pc, #64]	@ (8000cb0 <SystemInit+0xec>)
 8000c70:	4a10      	ldr	r2, [pc, #64]	@ (8000cb4 <SystemInit+0xf0>)
 8000c72:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000c74:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <SystemInit+0xec>)
 8000c76:	4a10      	ldr	r2, [pc, #64]	@ (8000cb8 <SystemInit+0xf4>)
 8000c78:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb0 <SystemInit+0xec>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	4a0c      	ldr	r2, [pc, #48]	@ (8000cb0 <SystemInit+0xec>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000c86:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <SystemInit+0xec>)
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	4a09      	ldr	r2, [pc, #36]	@ (8000cb0 <SystemInit+0xec>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	61d3      	str	r3, [r2, #28]
  }
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00
 8000ca4:	44020c00 	.word	0x44020c00
 8000ca8:	eae2eae3 	.word	0xeae2eae3
 8000cac:	01010280 	.word	0x01010280
 8000cb0:	40022000 	.word	0x40022000
 8000cb4:	08192a3b 	.word	0x08192a3b
 8000cb8:	4c5d6e7f 	.word	0x4c5d6e7f

08000cbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cbc:	480d      	ldr	r0, [pc, #52]	@ (8000cf4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cbe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cc0:	f7ff ff80 	bl	8000bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc4:	480c      	ldr	r0, [pc, #48]	@ (8000cf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc6:	490d      	ldr	r1, [pc, #52]	@ (8000cfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d00 <LoopForever+0xe>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cdc:	4c0a      	ldr	r4, [pc, #40]	@ (8000d08 <LoopForever+0x16>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cea:	f003 f875 	bl	8003dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cee:	f7ff fcaf 	bl	8000650 <main>

08000cf2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cf2:	e7fe      	b.n	8000cf2 <LoopForever>
  ldr   r0, =_estack
 8000cf4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d00:	08003ea4 	.word	0x08003ea4
  ldr r2, =_sbss
 8000d04:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d08:	20001900 	.word	0x20001900

08000d0c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC1_IRQHandler>
	...

08000d10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d14:	2003      	movs	r0, #3
 8000d16:	f000 f8f0 	bl	8000efa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000d1a:	f001 f91d 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <HAL_Init+0x44>)
 8000d22:	6a1b      	ldr	r3, [r3, #32]
 8000d24:	f003 030f 	and.w	r3, r3, #15
 8000d28:	490b      	ldr	r1, [pc, #44]	@ (8000d58 <HAL_Init+0x48>)
 8000d2a:	5ccb      	ldrb	r3, [r1, r3]
 8000d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d30:	4a0a      	ldr	r2, [pc, #40]	@ (8000d5c <HAL_Init+0x4c>)
 8000d32:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000d34:	2004      	movs	r0, #4
 8000d36:	f000 f913 	bl	8000f60 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d3a:	200f      	movs	r0, #15
 8000d3c:	f7ff fea6 	bl	8000a8c <HAL_InitTick>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e002      	b.n	8000d50 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d4a:	f7ff fe97 	bl	8000a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	44020c00 	.word	0x44020c00
 8000d58:	08003e84 	.word	0x08003e84
 8000d5c:	20000000 	.word	0x20000000

08000d60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d64:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_IncTick+0x20>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_IncTick+0x24>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a04      	ldr	r2, [pc, #16]	@ (8000d84 <HAL_IncTick+0x24>)
 8000d72:	6013      	str	r3, [r2, #0]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000008 	.word	0x20000008
 8000d84:	200012bc 	.word	0x200012bc

08000d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	@ (8000d9c <HAL_GetTick+0x14>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	200012bc 	.word	0x200012bc

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	@ (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	@ (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	4907      	ldr	r1, [pc, #28]	@ (8000e3c <__NVIC_EnableIRQ+0x38>)
 8000e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db0a      	blt.n	8000e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	490c      	ldr	r1, [pc, #48]	@ (8000e8c <__NVIC_SetPriority+0x4c>)
 8000e5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e5e:	0112      	lsls	r2, r2, #4
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	440b      	add	r3, r1
 8000e64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e68:	e00a      	b.n	8000e80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4908      	ldr	r1, [pc, #32]	@ (8000e90 <__NVIC_SetPriority+0x50>)
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	3b04      	subs	r3, #4
 8000e78:	0112      	lsls	r2, r2, #4
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	761a      	strb	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000e100 	.word	0xe000e100
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	@ 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf28      	it	cs
 8000eb2:	2304      	movcs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d902      	bls.n	8000ec4 <NVIC_EncodePriority+0x30>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3b03      	subs	r3, #3
 8000ec2:	e000      	b.n	8000ec6 <NVIC_EncodePriority+0x32>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	4313      	orrs	r3, r2
         );
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	@ 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ff4c 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f1e:	f7ff ff63 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f22:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	68b9      	ldr	r1, [r7, #8]
 8000f28:	6978      	ldr	r0, [r7, #20]
 8000f2a:	f7ff ffb3 	bl	8000e94 <NVIC_EncodePriority>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f34:	4611      	mov	r1, r2
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff82 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f3c:	bf00      	nop
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ff56 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	d844      	bhi.n	8000ff8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8000f74 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f74:	08000f97 	.word	0x08000f97
 8000f78:	08000fb5 	.word	0x08000fb5
 8000f7c:	08000fd7 	.word	0x08000fd7
 8000f80:	08000ff9 	.word	0x08000ff9
 8000f84:	08000f89 	.word	0x08000f89
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000f88:	4b1f      	ldr	r3, [pc, #124]	@ (8001008 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a1e      	ldr	r2, [pc, #120]	@ (8001008 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000f8e:	f043 0304 	orr.w	r3, r3, #4
 8000f92:	6013      	str	r3, [r2, #0]
      break;
 8000f94:	e031      	b.n	8000ffa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000f96:	4b1c      	ldr	r3, [pc, #112]	@ (8001008 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8001008 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000f9c:	f023 0304 	bic.w	r3, r3, #4
 8000fa0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800100c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000fa4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000fa8:	4a18      	ldr	r2, [pc, #96]	@ (800100c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000faa:	f023 030c 	bic.w	r3, r3, #12
 8000fae:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000fb2:	e022      	b.n	8000ffa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000fb4:	4b14      	ldr	r3, [pc, #80]	@ (8001008 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a13      	ldr	r2, [pc, #76]	@ (8001008 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fba:	f023 0304 	bic.w	r3, r3, #4
 8000fbe:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8000fc0:	4b12      	ldr	r3, [pc, #72]	@ (800100c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000fc2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000fc6:	f023 030c 	bic.w	r3, r3, #12
 8000fca:	4a10      	ldr	r2, [pc, #64]	@ (800100c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000fd4:	e011      	b.n	8000ffa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a0b      	ldr	r2, [pc, #44]	@ (8001008 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fdc:	f023 0304 	bic.w	r3, r3, #4
 8000fe0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000fe4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000fe8:	f023 030c 	bic.w	r3, r3, #12
 8000fec:	4a07      	ldr	r2, [pc, #28]	@ (800100c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000fee:	f043 0308 	orr.w	r3, r3, #8
 8000ff2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000ff6:	e000      	b.n	8000ffa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000ff8:	bf00      	nop
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000e010 	.word	0xe000e010
 800100c:	44020c00 	.word	0x44020c00

08001010 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001010:	b480      	push	{r7}
 8001012:	b087      	sub	sp, #28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800101e:	e136      	b.n	800128e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	2101      	movs	r1, #1
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	fa01 f303 	lsl.w	r3, r1, r3
 800102c:	4013      	ands	r3, r2
 800102e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	f000 8128 	beq.w	8001288 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x38>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b12      	cmp	r3, #18
 8001046:	d125      	bne.n	8001094 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	08da      	lsrs	r2, r3, #3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3208      	adds	r2, #8
 8001050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001054:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	220f      	movs	r2, #15
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	4013      	ands	r3, r2
 800106a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	f003 020f 	and.w	r2, r3, #15
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	4313      	orrs	r3, r2
 8001084:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	08da      	lsrs	r2, r3, #3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3208      	adds	r2, #8
 800108e:	6979      	ldr	r1, [r7, #20]
 8001090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	4013      	ands	r3, r2
 80010aa:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0203 	and.w	r2, r3, #3
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	4313      	orrs	r3, r2
 80010c0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d00b      	beq.n	80010e8 <HAL_GPIO_Init+0xd8>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d007      	beq.n	80010e8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010dc:	2b11      	cmp	r3, #17
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b12      	cmp	r3, #18
 80010e6:	d130      	bne.n	800114a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	2203      	movs	r2, #3
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	4013      	ands	r3, r2
 80010fe:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	68da      	ldr	r2, [r3, #12]
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	4313      	orrs	r3, r2
 8001110:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800111e:	2201      	movs	r2, #1
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	4013      	ands	r3, r2
 800112c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	091b      	lsrs	r3, r3, #4
 8001134:	f003 0201 	and.w	r2, r3, #1
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4313      	orrs	r3, r2
 8001142:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b03      	cmp	r3, #3
 8001150:	d017      	beq.n	8001182 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	697a      	ldr	r2, [r7, #20]
 8001166:	4013      	ands	r3, r2
 8001168:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	4313      	orrs	r3, r2
 800117a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d07c      	beq.n	8001288 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800118e:	4a47      	ldr	r2, [pc, #284]	@ (80012ac <HAL_GPIO_Init+0x29c>)
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	089b      	lsrs	r3, r3, #2
 8001194:	3318      	adds	r3, #24
 8001196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	220f      	movs	r2, #15
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	4013      	ands	r3, r2
 80011b0:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	0a9a      	lsrs	r2, r3, #10
 80011b6:	4b3e      	ldr	r3, [pc, #248]	@ (80012b0 <HAL_GPIO_Init+0x2a0>)
 80011b8:	4013      	ands	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	f002 0203 	and.w	r2, r2, #3
 80011c0:	00d2      	lsls	r2, r2, #3
 80011c2:	4093      	lsls	r3, r2
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80011ca:	4938      	ldr	r1, [pc, #224]	@ (80012ac <HAL_GPIO_Init+0x29c>)
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	089b      	lsrs	r3, r3, #2
 80011d0:	3318      	adds	r3, #24
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80011d8:	4b34      	ldr	r3, [pc, #208]	@ (80012ac <HAL_GPIO_Init+0x29c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	4013      	ands	r3, r2
 80011e6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80011fc:	4a2b      	ldr	r2, [pc, #172]	@ (80012ac <HAL_GPIO_Init+0x29c>)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001202:	4b2a      	ldr	r3, [pc, #168]	@ (80012ac <HAL_GPIO_Init+0x29c>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	43db      	mvns	r3, r3
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	4013      	ands	r3, r2
 8001210:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4313      	orrs	r3, r2
 8001224:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001226:	4a21      	ldr	r2, [pc, #132]	@ (80012ac <HAL_GPIO_Init+0x29c>)
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800122c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ac <HAL_GPIO_Init+0x29c>)
 800122e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001232:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	43db      	mvns	r3, r3
 8001238:	697a      	ldr	r2, [r7, #20]
 800123a:	4013      	ands	r3, r2
 800123c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4313      	orrs	r3, r2
 8001250:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001252:	4a16      	ldr	r2, [pc, #88]	@ (80012ac <HAL_GPIO_Init+0x29c>)
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800125a:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <HAL_GPIO_Init+0x29c>)
 800125c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001260:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	43db      	mvns	r3, r3
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4013      	ands	r3, r2
 800126a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4313      	orrs	r3, r2
 800127e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001280:	4a0a      	ldr	r2, [pc, #40]	@ (80012ac <HAL_GPIO_Init+0x29c>)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	3301      	adds	r3, #1
 800128c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	fa22 f303 	lsr.w	r3, r2, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	f47f aec1 	bne.w	8001020 <HAL_GPIO_Init+0x10>
  }
}
 800129e:	bf00      	nop
 80012a0:	bf00      	nop
 80012a2:	371c      	adds	r7, #28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	44022000 	.word	0x44022000
 80012b0:	002f7f7f 	.word	0x002f7f7f

080012b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]
 80012c0:	4613      	mov	r3, r2
 80012c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012c4:	787b      	ldrb	r3, [r7, #1]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012d0:	e002      	b.n	80012d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012d2:	887a      	ldrh	r2, [r7, #2]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012f6:	887a      	ldrh	r2, [r7, #2]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4013      	ands	r3, r2
 80012fc:	041a      	lsls	r2, r3, #16
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	43d9      	mvns	r1, r3
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	400b      	ands	r3, r1
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	619a      	str	r2, [r3, #24]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001320:	2300      	movs	r3, #0
 8001322:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001324:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
 8001334:	e007      	b.n	8001346 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001336:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f023 0204 	bic.w	r2, r3, #4
 800133e:	4905      	ldr	r1, [pc, #20]	@ (8001354 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4313      	orrs	r3, r2
 8001344:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001346:	7bfb      	ldrb	r3, [r7, #15]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	40030400 	.word	0x40030400

08001358 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800135c:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <HAL_ICACHE_Enable+0x1c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a04      	ldr	r2, [pc, #16]	@ (8001374 <HAL_ICACHE_Enable+0x1c>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	40030400 	.word	0x40030400

08001378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d102      	bne.n	800138c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	f000 bc28 	b.w	8001bdc <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800138c:	4b94      	ldr	r3, [pc, #592]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	f003 0318 	and.w	r3, r3, #24
 8001394:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001396:	4b92      	ldr	r3, [pc, #584]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 8001398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0310 	and.w	r3, r3, #16
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d05b      	beq.n	8001464 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	d005      	beq.n	80013be <HAL_RCC_OscConfig+0x46>
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	2b18      	cmp	r3, #24
 80013b6:	d114      	bne.n	80013e2 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d111      	bne.n	80013e2 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d102      	bne.n	80013cc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	f000 bc08 	b.w	8001bdc <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80013cc:	4b84      	ldr	r3, [pc, #528]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	041b      	lsls	r3, r3, #16
 80013da:	4981      	ldr	r1, [pc, #516]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80013e0:	e040      	b.n	8001464 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d023      	beq.n	8001432 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80013ea:	4b7d      	ldr	r3, [pc, #500]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a7c      	ldr	r2, [pc, #496]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 80013f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f6:	f7ff fcc7 	bl	8000d88 <HAL_GetTick>
 80013fa:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80013fe:	f7ff fcc3 	bl	8000d88 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e3e5      	b.n	8001bdc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001410:	4b73      	ldr	r3, [pc, #460]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f0      	beq.n	80013fe <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800141c:	4b70      	ldr	r3, [pc, #448]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	041b      	lsls	r3, r3, #16
 800142a:	496d      	ldr	r1, [pc, #436]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 800142c:	4313      	orrs	r3, r2
 800142e:	618b      	str	r3, [r1, #24]
 8001430:	e018      	b.n	8001464 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001432:	4b6b      	ldr	r3, [pc, #428]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a6a      	ldr	r2, [pc, #424]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 8001438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800143c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143e:	f7ff fca3 	bl	8000d88 <HAL_GetTick>
 8001442:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001446:	f7ff fc9f 	bl	8000d88 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e3c1      	b.n	8001bdc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001458:	4b61      	ldr	r3, [pc, #388]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1f0      	bne.n	8001446 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 80a0 	beq.w	80015b2 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	2b10      	cmp	r3, #16
 8001476:	d005      	beq.n	8001484 <HAL_RCC_OscConfig+0x10c>
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	2b18      	cmp	r3, #24
 800147c:	d109      	bne.n	8001492 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	2b03      	cmp	r3, #3
 8001482:	d106      	bne.n	8001492 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	f040 8092 	bne.w	80015b2 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e3a4      	b.n	8001bdc <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800149a:	d106      	bne.n	80014aa <HAL_RCC_OscConfig+0x132>
 800149c:	4b50      	ldr	r3, [pc, #320]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a4f      	ldr	r2, [pc, #316]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 80014a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	e058      	b.n	800155c <HAL_RCC_OscConfig+0x1e4>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d112      	bne.n	80014d8 <HAL_RCC_OscConfig+0x160>
 80014b2:	4b4b      	ldr	r3, [pc, #300]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a4a      	ldr	r2, [pc, #296]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 80014b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4b48      	ldr	r3, [pc, #288]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a47      	ldr	r2, [pc, #284]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 80014c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	4b45      	ldr	r3, [pc, #276]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a44      	ldr	r2, [pc, #272]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 80014d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e041      	b.n	800155c <HAL_RCC_OscConfig+0x1e4>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014e0:	d112      	bne.n	8001508 <HAL_RCC_OscConfig+0x190>
 80014e2:	4b3f      	ldr	r3, [pc, #252]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a3e      	ldr	r2, [pc, #248]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 80014e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	4b3c      	ldr	r3, [pc, #240]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a3b      	ldr	r2, [pc, #236]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 80014f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	4b39      	ldr	r3, [pc, #228]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a38      	ldr	r2, [pc, #224]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 8001500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e029      	b.n	800155c <HAL_RCC_OscConfig+0x1e4>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001510:	d112      	bne.n	8001538 <HAL_RCC_OscConfig+0x1c0>
 8001512:	4b33      	ldr	r3, [pc, #204]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a32      	ldr	r2, [pc, #200]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 8001518:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	4b30      	ldr	r3, [pc, #192]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a2f      	ldr	r2, [pc, #188]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 8001524:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	4b2d      	ldr	r3, [pc, #180]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a2c      	ldr	r2, [pc, #176]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 8001530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e011      	b.n	800155c <HAL_RCC_OscConfig+0x1e4>
 8001538:	4b29      	ldr	r3, [pc, #164]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a28      	ldr	r2, [pc, #160]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 800153e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b26      	ldr	r3, [pc, #152]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a25      	ldr	r2, [pc, #148]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 800154a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	4b23      	ldr	r3, [pc, #140]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a22      	ldr	r2, [pc, #136]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 8001556:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800155a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d013      	beq.n	800158c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff fc10 	bl	8000d88 <HAL_GetTick>
 8001568:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800156c:	f7ff fc0c 	bl	8000d88 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b64      	cmp	r3, #100	@ 0x64
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e32e      	b.n	8001bdc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800157e:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0f0      	beq.n	800156c <HAL_RCC_OscConfig+0x1f4>
 800158a:	e012      	b.n	80015b2 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158c:	f7ff fbfc 	bl	8000d88 <HAL_GetTick>
 8001590:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001594:	f7ff fbf8 	bl	8000d88 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	@ 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e31a      	b.n	8001bdc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015a6:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <HAL_RCC_OscConfig+0x268>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 809a 	beq.w	80016f4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d005      	beq.n	80015d2 <HAL_RCC_OscConfig+0x25a>
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	2b18      	cmp	r3, #24
 80015ca:	d149      	bne.n	8001660 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d146      	bne.n	8001660 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d104      	bne.n	80015e4 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e2fe      	b.n	8001bdc <HAL_RCC_OscConfig+0x864>
 80015de:	bf00      	nop
 80015e0:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d11c      	bne.n	8001624 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80015ea:	4b9a      	ldr	r3, [pc, #616]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0218 	and.w	r2, r3, #24
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d014      	beq.n	8001624 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80015fa:	4b96      	ldr	r3, [pc, #600]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f023 0218 	bic.w	r2, r3, #24
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	4993      	ldr	r1, [pc, #588]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 8001608:	4313      	orrs	r3, r2
 800160a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 800160c:	f000 fdd0 	bl	80021b0 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001610:	4b91      	ldr	r3, [pc, #580]	@ (8001858 <HAL_RCC_OscConfig+0x4e0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fa39 	bl	8000a8c <HAL_InitTick>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e2db      	b.n	8001bdc <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001624:	f7ff fbb0 	bl	8000d88 <HAL_GetTick>
 8001628:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800162c:	f7ff fbac 	bl	8000d88 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e2ce      	b.n	8001bdc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800163e:	4b85      	ldr	r3, [pc, #532]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800164a:	4b82      	ldr	r3, [pc, #520]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	041b      	lsls	r3, r3, #16
 8001658:	497e      	ldr	r1, [pc, #504]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 800165a:	4313      	orrs	r3, r2
 800165c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800165e:	e049      	b.n	80016f4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d02c      	beq.n	80016c2 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001668:	4b7a      	ldr	r3, [pc, #488]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f023 0218 	bic.w	r2, r3, #24
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	4977      	ldr	r1, [pc, #476]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800167a:	4b76      	ldr	r3, [pc, #472]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a75      	ldr	r2, [pc, #468]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001686:	f7ff fb7f 	bl	8000d88 <HAL_GetTick>
 800168a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800168e:	f7ff fb7b 	bl	8000d88 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e29d      	b.n	8001bdc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016a0:	4b6c      	ldr	r3, [pc, #432]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0f0      	beq.n	800168e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80016ac:	4b69      	ldr	r3, [pc, #420]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	041b      	lsls	r3, r3, #16
 80016ba:	4966      	ldr	r1, [pc, #408]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	610b      	str	r3, [r1, #16]
 80016c0:	e018      	b.n	80016f4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016c2:	4b64      	ldr	r3, [pc, #400]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a63      	ldr	r2, [pc, #396]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 80016c8:	f023 0301 	bic.w	r3, r3, #1
 80016cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ce:	f7ff fb5b 	bl	8000d88 <HAL_GetTick>
 80016d2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80016d6:	f7ff fb57 	bl	8000d88 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e279      	b.n	8001bdc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016e8:	4b5a      	ldr	r3, [pc, #360]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1f0      	bne.n	80016d6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d03c      	beq.n	800177a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01c      	beq.n	8001742 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001708:	4b52      	ldr	r3, [pc, #328]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 800170a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800170e:	4a51      	ldr	r2, [pc, #324]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 8001710:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001714:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001718:	f7ff fb36 	bl	8000d88 <HAL_GetTick>
 800171c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001720:	f7ff fb32 	bl	8000d88 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e254      	b.n	8001bdc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001732:	4b48      	ldr	r3, [pc, #288]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 8001734:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001738:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0ef      	beq.n	8001720 <HAL_RCC_OscConfig+0x3a8>
 8001740:	e01b      	b.n	800177a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001742:	4b44      	ldr	r3, [pc, #272]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 8001744:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001748:	4a42      	ldr	r2, [pc, #264]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 800174a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800174e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001752:	f7ff fb19 	bl	8000d88 <HAL_GetTick>
 8001756:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800175a:	f7ff fb15 	bl	8000d88 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e237      	b.n	8001bdc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800176c:	4b39      	ldr	r3, [pc, #228]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 800176e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001772:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1ef      	bne.n	800175a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 80d2 	beq.w	800192c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001788:	4b34      	ldr	r3, [pc, #208]	@ (800185c <HAL_RCC_OscConfig+0x4e4>)
 800178a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b00      	cmp	r3, #0
 8001792:	d118      	bne.n	80017c6 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001794:	4b31      	ldr	r3, [pc, #196]	@ (800185c <HAL_RCC_OscConfig+0x4e4>)
 8001796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001798:	4a30      	ldr	r2, [pc, #192]	@ (800185c <HAL_RCC_OscConfig+0x4e4>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017a0:	f7ff faf2 	bl	8000d88 <HAL_GetTick>
 80017a4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a8:	f7ff faee 	bl	8000d88 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e210      	b.n	8001bdc <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80017ba:	4b28      	ldr	r3, [pc, #160]	@ (800185c <HAL_RCC_OscConfig+0x4e4>)
 80017bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d108      	bne.n	80017e0 <HAL_RCC_OscConfig+0x468>
 80017ce:	4b21      	ldr	r3, [pc, #132]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 80017d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017d4:	4a1f      	ldr	r2, [pc, #124]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017de:	e074      	b.n	80018ca <HAL_RCC_OscConfig+0x552>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d118      	bne.n	800181a <HAL_RCC_OscConfig+0x4a2>
 80017e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 80017ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017ee:	4a19      	ldr	r2, [pc, #100]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 80017f0:	f023 0301 	bic.w	r3, r3, #1
 80017f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017f8:	4b16      	ldr	r3, [pc, #88]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 80017fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017fe:	4a15      	ldr	r2, [pc, #84]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 8001800:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001804:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001808:	4b12      	ldr	r3, [pc, #72]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 800180a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800180e:	4a11      	ldr	r2, [pc, #68]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 8001810:	f023 0304 	bic.w	r3, r3, #4
 8001814:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001818:	e057      	b.n	80018ca <HAL_RCC_OscConfig+0x552>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2b05      	cmp	r3, #5
 8001820:	d11e      	bne.n	8001860 <HAL_RCC_OscConfig+0x4e8>
 8001822:	4b0c      	ldr	r3, [pc, #48]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 8001824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001828:	4a0a      	ldr	r2, [pc, #40]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 800182a:	f043 0304 	orr.w	r3, r3, #4
 800182e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001832:	4b08      	ldr	r3, [pc, #32]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 8001834:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001838:	4a06      	ldr	r2, [pc, #24]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 800183a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800183e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001842:	4b04      	ldr	r3, [pc, #16]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 8001844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001848:	4a02      	ldr	r2, [pc, #8]	@ (8001854 <HAL_RCC_OscConfig+0x4dc>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001852:	e03a      	b.n	80018ca <HAL_RCC_OscConfig+0x552>
 8001854:	44020c00 	.word	0x44020c00
 8001858:	20000004 	.word	0x20000004
 800185c:	44020800 	.word	0x44020800
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b85      	cmp	r3, #133	@ 0x85
 8001866:	d118      	bne.n	800189a <HAL_RCC_OscConfig+0x522>
 8001868:	4ba2      	ldr	r3, [pc, #648]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 800186a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800186e:	4aa1      	ldr	r2, [pc, #644]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 8001870:	f043 0304 	orr.w	r3, r3, #4
 8001874:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001878:	4b9e      	ldr	r3, [pc, #632]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 800187a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800187e:	4a9d      	ldr	r2, [pc, #628]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 8001880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001884:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001888:	4b9a      	ldr	r3, [pc, #616]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 800188a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800188e:	4a99      	ldr	r2, [pc, #612]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001898:	e017      	b.n	80018ca <HAL_RCC_OscConfig+0x552>
 800189a:	4b96      	ldr	r3, [pc, #600]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 800189c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018a0:	4a94      	ldr	r2, [pc, #592]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 80018a2:	f023 0301 	bic.w	r3, r3, #1
 80018a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80018aa:	4b92      	ldr	r3, [pc, #584]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 80018ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018b0:	4a90      	ldr	r2, [pc, #576]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 80018b2:	f023 0304 	bic.w	r3, r3, #4
 80018b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80018ba:	4b8e      	ldr	r3, [pc, #568]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 80018bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018c0:	4a8c      	ldr	r2, [pc, #560]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 80018c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80018c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d016      	beq.n	8001900 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d2:	f7ff fa59 	bl	8000d88 <HAL_GetTick>
 80018d6:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018d8:	e00a      	b.n	80018f0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018da:	f7ff fa55 	bl	8000d88 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e175      	b.n	8001bdc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018f0:	4b80      	ldr	r3, [pc, #512]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 80018f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0ed      	beq.n	80018da <HAL_RCC_OscConfig+0x562>
 80018fe:	e015      	b.n	800192c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001900:	f7ff fa42 	bl	8000d88 <HAL_GetTick>
 8001904:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001906:	e00a      	b.n	800191e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001908:	f7ff fa3e 	bl	8000d88 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001916:	4293      	cmp	r3, r2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e15e      	b.n	8001bdc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800191e:	4b75      	ldr	r3, [pc, #468]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 8001920:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1ed      	bne.n	8001908 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0320 	and.w	r3, r3, #32
 8001934:	2b00      	cmp	r3, #0
 8001936:	d036      	beq.n	80019a6 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193c:	2b00      	cmp	r3, #0
 800193e:	d019      	beq.n	8001974 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001940:	4b6c      	ldr	r3, [pc, #432]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a6b      	ldr	r2, [pc, #428]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 8001946:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800194a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194c:	f7ff fa1c 	bl	8000d88 <HAL_GetTick>
 8001950:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001954:	f7ff fa18 	bl	8000d88 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e13a      	b.n	8001bdc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001966:	4b63      	ldr	r3, [pc, #396]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0x5dc>
 8001972:	e018      	b.n	80019a6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001974:	4b5f      	ldr	r3, [pc, #380]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a5e      	ldr	r2, [pc, #376]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 800197a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800197e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001980:	f7ff fa02 	bl	8000d88 <HAL_GetTick>
 8001984:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001988:	f7ff f9fe 	bl	8000d88 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e120      	b.n	8001bdc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800199a:	4b56      	ldr	r3, [pc, #344]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 8115 	beq.w	8001bda <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	2b18      	cmp	r3, #24
 80019b4:	f000 80af 	beq.w	8001b16 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019bc:	2b02      	cmp	r3, #2
 80019be:	f040 8086 	bne.w	8001ace <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80019c2:	4b4c      	ldr	r3, [pc, #304]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a4b      	ldr	r2, [pc, #300]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 80019c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ce:	f7ff f9db 	bl	8000d88 <HAL_GetTick>
 80019d2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80019d6:	f7ff f9d7 	bl	8000d88 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e0f9      	b.n	8001bdc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80019e8:	4b42      	ldr	r3, [pc, #264]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1f0      	bne.n	80019d6 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80019f4:	4b3f      	ldr	r3, [pc, #252]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 80019f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80019fc:	f023 0303 	bic.w	r3, r3, #3
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a08:	0212      	lsls	r2, r2, #8
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	4939      	ldr	r1, [pc, #228]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	628b      	str	r3, [r1, #40]	@ 0x28
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a16:	3b01      	subs	r3, #1
 8001a18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a20:	3b01      	subs	r3, #1
 8001a22:	025b      	lsls	r3, r3, #9
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	041b      	lsls	r3, r3, #16
 8001a30:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	061b      	lsls	r3, r3, #24
 8001a3e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001a42:	492c      	ldr	r1, [pc, #176]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001a48:	4b2a      	ldr	r3, [pc, #168]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 8001a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a4c:	4a29      	ldr	r2, [pc, #164]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 8001a4e:	f023 0310 	bic.w	r3, r3, #16
 8001a52:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a58:	4a26      	ldr	r2, [pc, #152]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001a5e:	4b25      	ldr	r3, [pc, #148]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 8001a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a62:	4a24      	ldr	r2, [pc, #144]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 8001a64:	f043 0310 	orr.w	r3, r3, #16
 8001a68:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001a6a:	4b22      	ldr	r3, [pc, #136]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6e:	f023 020c 	bic.w	r2, r3, #12
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a76:	491f      	ldr	r1, [pc, #124]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a80:	f023 0220 	bic.w	r2, r3, #32
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a88:	491a      	ldr	r1, [pc, #104]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a8e:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 8001a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a92:	4a18      	ldr	r2, [pc, #96]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 8001a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a98:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001a9a:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a15      	ldr	r2, [pc, #84]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 8001aa0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa6:	f7ff f96f 	bl	8000d88 <HAL_GetTick>
 8001aaa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001aae:	f7ff f96b 	bl	8000d88 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e08d      	b.n	8001bdc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x736>
 8001acc:	e085      	b.n	8001bda <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001ace:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a08      	ldr	r2, [pc, #32]	@ (8001af4 <HAL_RCC_OscConfig+0x77c>)
 8001ad4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ada:	f7ff f955 	bl	8000d88 <HAL_GetTick>
 8001ade:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001ae0:	e00a      	b.n	8001af8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001ae2:	f7ff f951 	bl	8000d88 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d903      	bls.n	8001af8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e073      	b.n	8001bdc <HAL_RCC_OscConfig+0x864>
 8001af4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001af8:	4b3a      	ldr	r3, [pc, #232]	@ (8001be4 <HAL_RCC_OscConfig+0x86c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1ee      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001b04:	4b37      	ldr	r3, [pc, #220]	@ (8001be4 <HAL_RCC_OscConfig+0x86c>)
 8001b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b08:	4a36      	ldr	r2, [pc, #216]	@ (8001be4 <HAL_RCC_OscConfig+0x86c>)
 8001b0a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001b0e:	f023 0303 	bic.w	r3, r3, #3
 8001b12:	6293      	str	r3, [r2, #40]	@ 0x28
 8001b14:	e061      	b.n	8001bda <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001b16:	4b33      	ldr	r3, [pc, #204]	@ (8001be4 <HAL_RCC_OscConfig+0x86c>)
 8001b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b1c:	4b31      	ldr	r3, [pc, #196]	@ (8001be4 <HAL_RCC_OscConfig+0x86c>)
 8001b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b20:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d031      	beq.n	8001b8e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	f003 0203 	and.w	r2, r3, #3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d12a      	bne.n	8001b8e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	0a1b      	lsrs	r3, r3, #8
 8001b3c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d122      	bne.n	8001b8e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b52:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d11a      	bne.n	8001b8e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	0a5b      	lsrs	r3, r3, #9
 8001b5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b64:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d111      	bne.n	8001b8e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	0c1b      	lsrs	r3, r3, #16
 8001b6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b76:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d108      	bne.n	8001b8e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	0e1b      	lsrs	r3, r3, #24
 8001b80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b88:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d001      	beq.n	8001b92 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e024      	b.n	8001bdc <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001b92:	4b14      	ldr	r3, [pc, #80]	@ (8001be4 <HAL_RCC_OscConfig+0x86c>)
 8001b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b96:	08db      	lsrs	r3, r3, #3
 8001b98:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d01a      	beq.n	8001bda <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8001be4 <HAL_RCC_OscConfig+0x86c>)
 8001ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba8:	4a0e      	ldr	r2, [pc, #56]	@ (8001be4 <HAL_RCC_OscConfig+0x86c>)
 8001baa:	f023 0310 	bic.w	r3, r3, #16
 8001bae:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb0:	f7ff f8ea 	bl	8000d88 <HAL_GetTick>
 8001bb4:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001bb6:	bf00      	nop
 8001bb8:	f7ff f8e6 	bl	8000d88 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d0f9      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc8:	4a06      	ldr	r2, [pc, #24]	@ (8001be4 <HAL_RCC_OscConfig+0x86c>)
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001bce:	4b05      	ldr	r3, [pc, #20]	@ (8001be4 <HAL_RCC_OscConfig+0x86c>)
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd2:	4a04      	ldr	r2, [pc, #16]	@ (8001be4 <HAL_RCC_OscConfig+0x86c>)
 8001bd4:	f043 0310 	orr.w	r3, r3, #16
 8001bd8:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3720      	adds	r7, #32
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	44020c00 	.word	0x44020c00

08001be8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e19e      	b.n	8001f3a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bfc:	4b83      	ldr	r3, [pc, #524]	@ (8001e0c <HAL_RCC_ClockConfig+0x224>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 030f 	and.w	r3, r3, #15
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d910      	bls.n	8001c2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0a:	4b80      	ldr	r3, [pc, #512]	@ (8001e0c <HAL_RCC_ClockConfig+0x224>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 020f 	bic.w	r2, r3, #15
 8001c12:	497e      	ldr	r1, [pc, #504]	@ (8001e0c <HAL_RCC_ClockConfig+0x224>)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1a:	4b7c      	ldr	r3, [pc, #496]	@ (8001e0c <HAL_RCC_ClockConfig+0x224>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e186      	b.n	8001f3a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0310 	and.w	r3, r3, #16
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d012      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	695a      	ldr	r2, [r3, #20]
 8001c3c:	4b74      	ldr	r3, [pc, #464]	@ (8001e10 <HAL_RCC_ClockConfig+0x228>)
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d909      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001c4a:	4b71      	ldr	r3, [pc, #452]	@ (8001e10 <HAL_RCC_ClockConfig+0x228>)
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	021b      	lsls	r3, r3, #8
 8001c58:	496d      	ldr	r1, [pc, #436]	@ (8001e10 <HAL_RCC_ClockConfig+0x228>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d012      	beq.n	8001c90 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691a      	ldr	r2, [r3, #16]
 8001c6e:	4b68      	ldr	r3, [pc, #416]	@ (8001e10 <HAL_RCC_ClockConfig+0x228>)
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	091b      	lsrs	r3, r3, #4
 8001c74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d909      	bls.n	8001c90 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001c7c:	4b64      	ldr	r3, [pc, #400]	@ (8001e10 <HAL_RCC_ClockConfig+0x228>)
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	4961      	ldr	r1, [pc, #388]	@ (8001e10 <HAL_RCC_ClockConfig+0x228>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d010      	beq.n	8001cbe <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	4b5b      	ldr	r3, [pc, #364]	@ (8001e10 <HAL_RCC_ClockConfig+0x228>)
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d908      	bls.n	8001cbe <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001cac:	4b58      	ldr	r3, [pc, #352]	@ (8001e10 <HAL_RCC_ClockConfig+0x228>)
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	4955      	ldr	r1, [pc, #340]	@ (8001e10 <HAL_RCC_ClockConfig+0x228>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d010      	beq.n	8001cec <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	4b50      	ldr	r3, [pc, #320]	@ (8001e10 <HAL_RCC_ClockConfig+0x228>)
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d908      	bls.n	8001cec <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001cda:	4b4d      	ldr	r3, [pc, #308]	@ (8001e10 <HAL_RCC_ClockConfig+0x228>)
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	f023 020f 	bic.w	r2, r3, #15
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	494a      	ldr	r1, [pc, #296]	@ (8001e10 <HAL_RCC_ClockConfig+0x228>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 8093 	beq.w	8001e20 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d107      	bne.n	8001d12 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001d02:	4b43      	ldr	r3, [pc, #268]	@ (8001e10 <HAL_RCC_ClockConfig+0x228>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d121      	bne.n	8001d52 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e113      	b.n	8001f3a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d107      	bne.n	8001d2a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d1a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e10 <HAL_RCC_ClockConfig+0x228>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d115      	bne.n	8001d52 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e107      	b.n	8001f3a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d107      	bne.n	8001d42 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001d32:	4b37      	ldr	r3, [pc, #220]	@ (8001e10 <HAL_RCC_ClockConfig+0x228>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d109      	bne.n	8001d52 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e0fb      	b.n	8001f3a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d42:	4b33      	ldr	r3, [pc, #204]	@ (8001e10 <HAL_RCC_ClockConfig+0x228>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e0f3      	b.n	8001f3a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8001d52:	4b2f      	ldr	r3, [pc, #188]	@ (8001e10 <HAL_RCC_ClockConfig+0x228>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	f023 0203 	bic.w	r2, r3, #3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	492c      	ldr	r1, [pc, #176]	@ (8001e10 <HAL_RCC_ClockConfig+0x228>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d64:	f7ff f810 	bl	8000d88 <HAL_GetTick>
 8001d68:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d112      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d72:	e00a      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001d74:	f7ff f808 	bl	8000d88 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e0d7      	b.n	8001f3a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d8a:	4b21      	ldr	r3, [pc, #132]	@ (8001e10 <HAL_RCC_ClockConfig+0x228>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	f003 0318 	and.w	r3, r3, #24
 8001d92:	2b18      	cmp	r3, #24
 8001d94:	d1ee      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x18c>
 8001d96:	e043      	b.n	8001e20 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d112      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001da0:	e00a      	b.n	8001db8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001da2:	f7fe fff1 	bl	8000d88 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e0c0      	b.n	8001f3a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001db8:	4b15      	ldr	r3, [pc, #84]	@ (8001e10 <HAL_RCC_ClockConfig+0x228>)
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	f003 0318 	and.w	r3, r3, #24
 8001dc0:	2b10      	cmp	r3, #16
 8001dc2:	d1ee      	bne.n	8001da2 <HAL_RCC_ClockConfig+0x1ba>
 8001dc4:	e02c      	b.n	8001e20 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d122      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001dce:	e00a      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd0:	f7fe ffda 	bl	8000d88 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e0a9      	b.n	8001f3a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001de6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <HAL_RCC_ClockConfig+0x228>)
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	f003 0318 	and.w	r3, r3, #24
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d1ee      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x1e8>
 8001df2:	e015      	b.n	8001e20 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001df4:	f7fe ffc8 	bl	8000d88 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d906      	bls.n	8001e14 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e097      	b.n	8001f3a <HAL_RCC_ClockConfig+0x352>
 8001e0a:	bf00      	nop
 8001e0c:	40022000 	.word	0x40022000
 8001e10:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e14:	4b4b      	ldr	r3, [pc, #300]	@ (8001f44 <HAL_RCC_ClockConfig+0x35c>)
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	f003 0318 	and.w	r3, r3, #24
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1e9      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d010      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	4b44      	ldr	r3, [pc, #272]	@ (8001f44 <HAL_RCC_ClockConfig+0x35c>)
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	f003 030f 	and.w	r3, r3, #15
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d208      	bcs.n	8001e4e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001e3c:	4b41      	ldr	r3, [pc, #260]	@ (8001f44 <HAL_RCC_ClockConfig+0x35c>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	f023 020f 	bic.w	r2, r3, #15
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	493e      	ldr	r1, [pc, #248]	@ (8001f44 <HAL_RCC_ClockConfig+0x35c>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e4e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f48 <HAL_RCC_ClockConfig+0x360>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d210      	bcs.n	8001e7e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f48 <HAL_RCC_ClockConfig+0x360>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f023 020f 	bic.w	r2, r3, #15
 8001e64:	4938      	ldr	r1, [pc, #224]	@ (8001f48 <HAL_RCC_ClockConfig+0x360>)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6c:	4b36      	ldr	r3, [pc, #216]	@ (8001f48 <HAL_RCC_ClockConfig+0x360>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d001      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e05d      	b.n	8001f3a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d010      	beq.n	8001eac <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8001f44 <HAL_RCC_ClockConfig+0x35c>)
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d208      	bcs.n	8001eac <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001f44 <HAL_RCC_ClockConfig+0x35c>)
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	4927      	ldr	r1, [pc, #156]	@ (8001f44 <HAL_RCC_ClockConfig+0x35c>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d012      	beq.n	8001ede <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691a      	ldr	r2, [r3, #16]
 8001ebc:	4b21      	ldr	r3, [pc, #132]	@ (8001f44 <HAL_RCC_ClockConfig+0x35c>)
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d209      	bcs.n	8001ede <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001eca:	4b1e      	ldr	r3, [pc, #120]	@ (8001f44 <HAL_RCC_ClockConfig+0x35c>)
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	011b      	lsls	r3, r3, #4
 8001ed8:	491a      	ldr	r1, [pc, #104]	@ (8001f44 <HAL_RCC_ClockConfig+0x35c>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0310 	and.w	r3, r3, #16
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d012      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695a      	ldr	r2, [r3, #20]
 8001eee:	4b15      	ldr	r3, [pc, #84]	@ (8001f44 <HAL_RCC_ClockConfig+0x35c>)
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	0a1b      	lsrs	r3, r3, #8
 8001ef4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d209      	bcs.n	8001f10 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001efc:	4b11      	ldr	r3, [pc, #68]	@ (8001f44 <HAL_RCC_ClockConfig+0x35c>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	021b      	lsls	r3, r3, #8
 8001f0a:	490e      	ldr	r1, [pc, #56]	@ (8001f44 <HAL_RCC_ClockConfig+0x35c>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001f10:	f000 f822 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8001f14:	4602      	mov	r2, r0
 8001f16:	4b0b      	ldr	r3, [pc, #44]	@ (8001f44 <HAL_RCC_ClockConfig+0x35c>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	490b      	ldr	r1, [pc, #44]	@ (8001f4c <HAL_RCC_ClockConfig+0x364>)
 8001f20:	5ccb      	ldrb	r3, [r1, r3]
 8001f22:	fa22 f303 	lsr.w	r3, r2, r3
 8001f26:	4a0a      	ldr	r2, [pc, #40]	@ (8001f50 <HAL_RCC_ClockConfig+0x368>)
 8001f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f54 <HAL_RCC_ClockConfig+0x36c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fdac 	bl	8000a8c <HAL_InitTick>
 8001f34:	4603      	mov	r3, r0
 8001f36:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8001f38:	7afb      	ldrb	r3, [r7, #11]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	44020c00 	.word	0x44020c00
 8001f48:	40022000 	.word	0x40022000
 8001f4c:	08003e84 	.word	0x08003e84
 8001f50:	20000000 	.word	0x20000000
 8001f54:	20000004 	.word	0x20000004

08001f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	@ 0x24
 8001f5c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8001f5e:	4b8c      	ldr	r3, [pc, #560]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	f003 0318 	and.w	r3, r3, #24
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d102      	bne.n	8001f70 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001f6a:	4b8a      	ldr	r3, [pc, #552]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x23c>)
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	e107      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f70:	4b87      	ldr	r3, [pc, #540]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	f003 0318 	and.w	r3, r3, #24
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d112      	bne.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001f7c:	4b84      	ldr	r3, [pc, #528]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0320 	and.w	r3, r3, #32
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d009      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001f88:	4b81      	ldr	r3, [pc, #516]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x238>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	08db      	lsrs	r3, r3, #3
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	4a81      	ldr	r2, [pc, #516]	@ (8002198 <HAL_RCC_GetSysClockFreq+0x240>)
 8001f94:	fa22 f303 	lsr.w	r3, r2, r3
 8001f98:	61fb      	str	r3, [r7, #28]
 8001f9a:	e0f1      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8001f9c:	4b7e      	ldr	r3, [pc, #504]	@ (8002198 <HAL_RCC_GetSysClockFreq+0x240>)
 8001f9e:	61fb      	str	r3, [r7, #28]
 8001fa0:	e0ee      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fa2:	4b7b      	ldr	r3, [pc, #492]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x238>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f003 0318 	and.w	r3, r3, #24
 8001faa:	2b10      	cmp	r3, #16
 8001fac:	d102      	bne.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fae:	4b7b      	ldr	r3, [pc, #492]	@ (800219c <HAL_RCC_GetSysClockFreq+0x244>)
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	e0e5      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fb4:	4b76      	ldr	r3, [pc, #472]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x238>)
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	f003 0318 	and.w	r3, r3, #24
 8001fbc:	2b18      	cmp	r3, #24
 8001fbe:	f040 80dd 	bne.w	800217c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001fc2:	4b73      	ldr	r3, [pc, #460]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x238>)
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8001fcc:	4b70      	ldr	r3, [pc, #448]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x238>)
 8001fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd0:	0a1b      	lsrs	r3, r3, #8
 8001fd2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fd6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001fd8:	4b6d      	ldr	r3, [pc, #436]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x238>)
 8001fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001fe4:	4b6a      	ldr	r3, [pc, #424]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x238>)
 8001fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8001fe8:	08db      	lsrs	r3, r3, #3
 8001fea:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	fb02 f303 	mul.w	r3, r2, r3
 8001ff4:	ee07 3a90 	vmov	s15, r3
 8001ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ffc:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 80b7 	beq.w	8002176 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d003      	beq.n	8002016 <HAL_RCC_GetSysClockFreq+0xbe>
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2b03      	cmp	r3, #3
 8002012:	d056      	beq.n	80020c2 <HAL_RCC_GetSysClockFreq+0x16a>
 8002014:	e077      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002016:	4b5e      	ldr	r3, [pc, #376]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x238>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0320 	and.w	r3, r3, #32
 800201e:	2b00      	cmp	r3, #0
 8002020:	d02d      	beq.n	800207e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002022:	4b5b      	ldr	r3, [pc, #364]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x238>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	08db      	lsrs	r3, r3, #3
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	4a5a      	ldr	r2, [pc, #360]	@ (8002198 <HAL_RCC_GetSysClockFreq+0x240>)
 800202e:	fa22 f303 	lsr.w	r3, r2, r3
 8002032:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	ee07 3a90 	vmov	s15, r3
 800203a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	ee07 3a90 	vmov	s15, r3
 8002044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800204c:	4b50      	ldr	r3, [pc, #320]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x238>)
 800204e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002054:	ee07 3a90 	vmov	s15, r3
 8002058:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800205c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002060:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80021a0 <HAL_RCC_GetSysClockFreq+0x248>
 8002064:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002068:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800206c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002070:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002078:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800207c:	e065      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	ee07 3a90 	vmov	s15, r3
 8002084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002088:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80021a4 <HAL_RCC_GetSysClockFreq+0x24c>
 800208c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002090:	4b3f      	ldr	r3, [pc, #252]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x238>)
 8002092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002098:	ee07 3a90 	vmov	s15, r3
 800209c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80020a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80020a4:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80021a0 <HAL_RCC_GetSysClockFreq+0x248>
 80020a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80020ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80020b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80020b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020bc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80020c0:	e043      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	ee07 3a90 	vmov	s15, r3
 80020c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020cc:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80021a8 <HAL_RCC_GetSysClockFreq+0x250>
 80020d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x238>)
 80020d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020dc:	ee07 3a90 	vmov	s15, r3
 80020e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80020e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80020e8:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80021a0 <HAL_RCC_GetSysClockFreq+0x248>
 80020ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80020f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80020f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80020fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002100:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002104:	e021      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	ee07 3a90 	vmov	s15, r3
 800210c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002110:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80021ac <HAL_RCC_GetSysClockFreq+0x254>
 8002114:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002118:	4b1d      	ldr	r3, [pc, #116]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x238>)
 800211a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800211c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002120:	ee07 3a90 	vmov	s15, r3
 8002124:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002128:	ed97 6a02 	vldr	s12, [r7, #8]
 800212c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80021a0 <HAL_RCC_GetSysClockFreq+0x248>
 8002130:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002134:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002138:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800213c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002144:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002148:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800214a:	4b11      	ldr	r3, [pc, #68]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x238>)
 800214c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800214e:	0a5b      	lsrs	r3, r3, #9
 8002150:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002154:	3301      	adds	r3, #1
 8002156:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	ee07 3a90 	vmov	s15, r3
 800215e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002162:	edd7 6a06 	vldr	s13, [r7, #24]
 8002166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800216a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800216e:	ee17 3a90 	vmov	r3, s15
 8002172:	61fb      	str	r3, [r7, #28]
 8002174:	e004      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	e001      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800217c:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <HAL_RCC_GetSysClockFreq+0x240>)
 800217e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002180:	69fb      	ldr	r3, [r7, #28]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3724      	adds	r7, #36	@ 0x24
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	44020c00 	.word	0x44020c00
 8002194:	003d0900 	.word	0x003d0900
 8002198:	03d09000 	.word	0x03d09000
 800219c:	007a1200 	.word	0x007a1200
 80021a0:	46000000 	.word	0x46000000
 80021a4:	4c742400 	.word	0x4c742400
 80021a8:	4af42400 	.word	0x4af42400
 80021ac:	4a742400 	.word	0x4a742400

080021b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80021b4:	f7ff fed0 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 80021b8:	4602      	mov	r2, r0
 80021ba:	4b08      	ldr	r3, [pc, #32]	@ (80021dc <HAL_RCC_GetHCLKFreq+0x2c>)
 80021bc:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80021be:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80021c2:	4907      	ldr	r1, [pc, #28]	@ (80021e0 <HAL_RCC_GetHCLKFreq+0x30>)
 80021c4:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80021c6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80021ca:	fa22 f303 	lsr.w	r3, r2, r3
 80021ce:	4a05      	ldr	r2, [pc, #20]	@ (80021e4 <HAL_RCC_GetHCLKFreq+0x34>)
 80021d0:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80021d2:	4b04      	ldr	r3, [pc, #16]	@ (80021e4 <HAL_RCC_GetHCLKFreq+0x34>)
 80021d4:	681b      	ldr	r3, [r3, #0]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	44020c00 	.word	0x44020c00
 80021e0:	08003e84 	.word	0x08003e84
 80021e4:	20000000 	.word	0x20000000

080021e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80021ec:	f7ff ffe0 	bl	80021b0 <HAL_RCC_GetHCLKFreq>
 80021f0:	4602      	mov	r2, r0
 80021f2:	4b06      	ldr	r3, [pc, #24]	@ (800220c <HAL_RCC_GetPCLK1Freq+0x24>)
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	091b      	lsrs	r3, r3, #4
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	4904      	ldr	r1, [pc, #16]	@ (8002210 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021fe:	5ccb      	ldrb	r3, [r1, r3]
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002208:	4618      	mov	r0, r3
 800220a:	bd80      	pop	{r7, pc}
 800220c:	44020c00 	.word	0x44020c00
 8002210:	08003e94 	.word	0x08003e94

08002214 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	221f      	movs	r2, #31
 8002222:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8002224:	4b15      	ldr	r3, [pc, #84]	@ (800227c <HAL_RCC_GetClockConfig+0x68>)
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	f003 0203 	and.w	r2, r3, #3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8002230:	4b12      	ldr	r3, [pc, #72]	@ (800227c <HAL_RCC_GetClockConfig+0x68>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f003 020f 	and.w	r2, r3, #15
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	091b      	lsrs	r3, r3, #4
 800224e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002262:	4b07      	ldr	r3, [pc, #28]	@ (8002280 <HAL_RCC_GetClockConfig+0x6c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 020f 	and.w	r2, r3, #15
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	601a      	str	r2, [r3, #0]
}
 800226e:	bf00      	nop
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	44020c00 	.word	0x44020c00
 8002280:	40022000 	.word	0x40022000

08002284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e049      	b.n	800232a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d106      	bne.n	80022b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f841 	bl	8002332 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2202      	movs	r2, #2
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3304      	adds	r3, #4
 80022c0:	4619      	mov	r1, r3
 80022c2:	4610      	mov	r0, r2
 80022c4:	f000 fa66 	bl	8002794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b01      	cmp	r3, #1
 800235a:	d001      	beq.n	8002360 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e07c      	b.n	800245a <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2202      	movs	r2, #2
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a3a      	ldr	r2, [pc, #232]	@ (8002468 <HAL_TIM_Base_Start_IT+0x120>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d04a      	beq.n	8002418 <HAL_TIM_Base_Start_IT+0xd0>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a39      	ldr	r2, [pc, #228]	@ (800246c <HAL_TIM_Base_Start_IT+0x124>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d045      	beq.n	8002418 <HAL_TIM_Base_Start_IT+0xd0>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002394:	d040      	beq.n	8002418 <HAL_TIM_Base_Start_IT+0xd0>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800239e:	d03b      	beq.n	8002418 <HAL_TIM_Base_Start_IT+0xd0>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a32      	ldr	r2, [pc, #200]	@ (8002470 <HAL_TIM_Base_Start_IT+0x128>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d036      	beq.n	8002418 <HAL_TIM_Base_Start_IT+0xd0>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a31      	ldr	r2, [pc, #196]	@ (8002474 <HAL_TIM_Base_Start_IT+0x12c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d031      	beq.n	8002418 <HAL_TIM_Base_Start_IT+0xd0>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a2f      	ldr	r2, [pc, #188]	@ (8002478 <HAL_TIM_Base_Start_IT+0x130>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d02c      	beq.n	8002418 <HAL_TIM_Base_Start_IT+0xd0>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a2e      	ldr	r2, [pc, #184]	@ (800247c <HAL_TIM_Base_Start_IT+0x134>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d027      	beq.n	8002418 <HAL_TIM_Base_Start_IT+0xd0>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a2c      	ldr	r2, [pc, #176]	@ (8002480 <HAL_TIM_Base_Start_IT+0x138>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d022      	beq.n	8002418 <HAL_TIM_Base_Start_IT+0xd0>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a2b      	ldr	r2, [pc, #172]	@ (8002484 <HAL_TIM_Base_Start_IT+0x13c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d01d      	beq.n	8002418 <HAL_TIM_Base_Start_IT+0xd0>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a29      	ldr	r2, [pc, #164]	@ (8002488 <HAL_TIM_Base_Start_IT+0x140>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d018      	beq.n	8002418 <HAL_TIM_Base_Start_IT+0xd0>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a28      	ldr	r2, [pc, #160]	@ (800248c <HAL_TIM_Base_Start_IT+0x144>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d013      	beq.n	8002418 <HAL_TIM_Base_Start_IT+0xd0>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a26      	ldr	r2, [pc, #152]	@ (8002490 <HAL_TIM_Base_Start_IT+0x148>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00e      	beq.n	8002418 <HAL_TIM_Base_Start_IT+0xd0>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a25      	ldr	r2, [pc, #148]	@ (8002494 <HAL_TIM_Base_Start_IT+0x14c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d009      	beq.n	8002418 <HAL_TIM_Base_Start_IT+0xd0>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a23      	ldr	r2, [pc, #140]	@ (8002498 <HAL_TIM_Base_Start_IT+0x150>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d004      	beq.n	8002418 <HAL_TIM_Base_Start_IT+0xd0>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a22      	ldr	r2, [pc, #136]	@ (800249c <HAL_TIM_Base_Start_IT+0x154>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d115      	bne.n	8002444 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	4b20      	ldr	r3, [pc, #128]	@ (80024a0 <HAL_TIM_Base_Start_IT+0x158>)
 8002420:	4013      	ands	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b06      	cmp	r3, #6
 8002428:	d015      	beq.n	8002456 <HAL_TIM_Base_Start_IT+0x10e>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002430:	d011      	beq.n	8002456 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0201 	orr.w	r2, r2, #1
 8002440:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002442:	e008      	b.n	8002456 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0201 	orr.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	e000      	b.n	8002458 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002456:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40012c00 	.word	0x40012c00
 800246c:	50012c00 	.word	0x50012c00
 8002470:	40000400 	.word	0x40000400
 8002474:	50000400 	.word	0x50000400
 8002478:	40000800 	.word	0x40000800
 800247c:	50000800 	.word	0x50000800
 8002480:	40000c00 	.word	0x40000c00
 8002484:	50000c00 	.word	0x50000c00
 8002488:	40013400 	.word	0x40013400
 800248c:	50013400 	.word	0x50013400
 8002490:	40001800 	.word	0x40001800
 8002494:	50001800 	.word	0x50001800
 8002498:	40014000 	.word	0x40014000
 800249c:	50014000 	.word	0x50014000
 80024a0:	00010007 	.word	0x00010007

080024a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d020      	beq.n	8002508 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d01b      	beq.n	8002508 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0202 	mvn.w	r2, #2
 80024d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f931 	bl	8002756 <HAL_TIM_IC_CaptureCallback>
 80024f4:	e005      	b.n	8002502 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f923 	bl	8002742 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f934 	bl	800276a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	2b00      	cmp	r3, #0
 8002510:	d020      	beq.n	8002554 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d01b      	beq.n	8002554 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f06f 0204 	mvn.w	r2, #4
 8002524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2202      	movs	r2, #2
 800252a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f90b 	bl	8002756 <HAL_TIM_IC_CaptureCallback>
 8002540:	e005      	b.n	800254e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f8fd 	bl	8002742 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f90e 	bl	800276a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d020      	beq.n	80025a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01b      	beq.n	80025a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0208 	mvn.w	r2, #8
 8002570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2204      	movs	r2, #4
 8002576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f8e5 	bl	8002756 <HAL_TIM_IC_CaptureCallback>
 800258c:	e005      	b.n	800259a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f8d7 	bl	8002742 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 f8e8 	bl	800276a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d020      	beq.n	80025ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d01b      	beq.n	80025ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0210 	mvn.w	r2, #16
 80025bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2208      	movs	r2, #8
 80025c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f8bf 	bl	8002756 <HAL_TIM_IC_CaptureCallback>
 80025d8:	e005      	b.n	80025e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f8b1 	bl	8002742 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f8c2 	bl	800276a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00c      	beq.n	8002610 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d007      	beq.n	8002610 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0201 	mvn.w	r2, #1
 8002608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7fe fa1e 	bl	8000a4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002616:	2b00      	cmp	r3, #0
 8002618:	d104      	bne.n	8002624 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00c      	beq.n	800263e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800262a:	2b00      	cmp	r3, #0
 800262c:	d007      	beq.n	800263e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f9df 	bl	80029fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00c      	beq.n	8002662 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800264e:	2b00      	cmp	r3, #0
 8002650:	d007      	beq.n	8002662 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800265a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f9d7 	bl	8002a10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00c      	beq.n	8002686 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002672:	2b00      	cmp	r3, #0
 8002674:	d007      	beq.n	8002686 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800267e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f87c 	bl	800277e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f003 0320 	and.w	r3, r3, #32
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00c      	beq.n	80026aa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 0320 	and.w	r3, r3, #32
 8002696:	2b00      	cmp	r3, #0
 8002698:	d007      	beq.n	80026aa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f06f 0220 	mvn.w	r2, #32
 80026a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f99f 	bl	80029e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00c      	beq.n	80026ce <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80026c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f9ab 	bl	8002a24 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00c      	beq.n	80026f2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80026ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f9a3 	bl	8002a38 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00c      	beq.n	8002716 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d007      	beq.n	8002716 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800270e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f99b 	bl	8002a4c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00c      	beq.n	800273a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d007      	beq.n	800273a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f993 	bl	8002a60 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800273a:	bf00      	nop
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a7a      	ldr	r2, [pc, #488]	@ (8002990 <TIM_Base_SetConfig+0x1fc>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d02b      	beq.n	8002804 <TIM_Base_SetConfig+0x70>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a79      	ldr	r2, [pc, #484]	@ (8002994 <TIM_Base_SetConfig+0x200>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d027      	beq.n	8002804 <TIM_Base_SetConfig+0x70>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ba:	d023      	beq.n	8002804 <TIM_Base_SetConfig+0x70>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027c2:	d01f      	beq.n	8002804 <TIM_Base_SetConfig+0x70>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a74      	ldr	r2, [pc, #464]	@ (8002998 <TIM_Base_SetConfig+0x204>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d01b      	beq.n	8002804 <TIM_Base_SetConfig+0x70>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a73      	ldr	r2, [pc, #460]	@ (800299c <TIM_Base_SetConfig+0x208>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d017      	beq.n	8002804 <TIM_Base_SetConfig+0x70>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a72      	ldr	r2, [pc, #456]	@ (80029a0 <TIM_Base_SetConfig+0x20c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d013      	beq.n	8002804 <TIM_Base_SetConfig+0x70>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a71      	ldr	r2, [pc, #452]	@ (80029a4 <TIM_Base_SetConfig+0x210>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d00f      	beq.n	8002804 <TIM_Base_SetConfig+0x70>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a70      	ldr	r2, [pc, #448]	@ (80029a8 <TIM_Base_SetConfig+0x214>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d00b      	beq.n	8002804 <TIM_Base_SetConfig+0x70>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a6f      	ldr	r2, [pc, #444]	@ (80029ac <TIM_Base_SetConfig+0x218>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d007      	beq.n	8002804 <TIM_Base_SetConfig+0x70>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a6e      	ldr	r2, [pc, #440]	@ (80029b0 <TIM_Base_SetConfig+0x21c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d003      	beq.n	8002804 <TIM_Base_SetConfig+0x70>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a6d      	ldr	r2, [pc, #436]	@ (80029b4 <TIM_Base_SetConfig+0x220>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d108      	bne.n	8002816 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800280a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a5d      	ldr	r2, [pc, #372]	@ (8002990 <TIM_Base_SetConfig+0x1fc>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d05b      	beq.n	80028d6 <TIM_Base_SetConfig+0x142>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a5c      	ldr	r2, [pc, #368]	@ (8002994 <TIM_Base_SetConfig+0x200>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d057      	beq.n	80028d6 <TIM_Base_SetConfig+0x142>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800282c:	d053      	beq.n	80028d6 <TIM_Base_SetConfig+0x142>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002834:	d04f      	beq.n	80028d6 <TIM_Base_SetConfig+0x142>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a57      	ldr	r2, [pc, #348]	@ (8002998 <TIM_Base_SetConfig+0x204>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d04b      	beq.n	80028d6 <TIM_Base_SetConfig+0x142>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a56      	ldr	r2, [pc, #344]	@ (800299c <TIM_Base_SetConfig+0x208>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d047      	beq.n	80028d6 <TIM_Base_SetConfig+0x142>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a55      	ldr	r2, [pc, #340]	@ (80029a0 <TIM_Base_SetConfig+0x20c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d043      	beq.n	80028d6 <TIM_Base_SetConfig+0x142>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a54      	ldr	r2, [pc, #336]	@ (80029a4 <TIM_Base_SetConfig+0x210>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d03f      	beq.n	80028d6 <TIM_Base_SetConfig+0x142>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a53      	ldr	r2, [pc, #332]	@ (80029a8 <TIM_Base_SetConfig+0x214>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d03b      	beq.n	80028d6 <TIM_Base_SetConfig+0x142>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a52      	ldr	r2, [pc, #328]	@ (80029ac <TIM_Base_SetConfig+0x218>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d037      	beq.n	80028d6 <TIM_Base_SetConfig+0x142>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a51      	ldr	r2, [pc, #324]	@ (80029b0 <TIM_Base_SetConfig+0x21c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d033      	beq.n	80028d6 <TIM_Base_SetConfig+0x142>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a50      	ldr	r2, [pc, #320]	@ (80029b4 <TIM_Base_SetConfig+0x220>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d02f      	beq.n	80028d6 <TIM_Base_SetConfig+0x142>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a4f      	ldr	r2, [pc, #316]	@ (80029b8 <TIM_Base_SetConfig+0x224>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d02b      	beq.n	80028d6 <TIM_Base_SetConfig+0x142>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a4e      	ldr	r2, [pc, #312]	@ (80029bc <TIM_Base_SetConfig+0x228>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d027      	beq.n	80028d6 <TIM_Base_SetConfig+0x142>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a4d      	ldr	r2, [pc, #308]	@ (80029c0 <TIM_Base_SetConfig+0x22c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d023      	beq.n	80028d6 <TIM_Base_SetConfig+0x142>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a4c      	ldr	r2, [pc, #304]	@ (80029c4 <TIM_Base_SetConfig+0x230>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d01f      	beq.n	80028d6 <TIM_Base_SetConfig+0x142>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a4b      	ldr	r2, [pc, #300]	@ (80029c8 <TIM_Base_SetConfig+0x234>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d01b      	beq.n	80028d6 <TIM_Base_SetConfig+0x142>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a4a      	ldr	r2, [pc, #296]	@ (80029cc <TIM_Base_SetConfig+0x238>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d017      	beq.n	80028d6 <TIM_Base_SetConfig+0x142>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a49      	ldr	r2, [pc, #292]	@ (80029d0 <TIM_Base_SetConfig+0x23c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d013      	beq.n	80028d6 <TIM_Base_SetConfig+0x142>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a48      	ldr	r2, [pc, #288]	@ (80029d4 <TIM_Base_SetConfig+0x240>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d00f      	beq.n	80028d6 <TIM_Base_SetConfig+0x142>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a47      	ldr	r2, [pc, #284]	@ (80029d8 <TIM_Base_SetConfig+0x244>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d00b      	beq.n	80028d6 <TIM_Base_SetConfig+0x142>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a46      	ldr	r2, [pc, #280]	@ (80029dc <TIM_Base_SetConfig+0x248>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d007      	beq.n	80028d6 <TIM_Base_SetConfig+0x142>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a45      	ldr	r2, [pc, #276]	@ (80029e0 <TIM_Base_SetConfig+0x24c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d003      	beq.n	80028d6 <TIM_Base_SetConfig+0x142>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a44      	ldr	r2, [pc, #272]	@ (80029e4 <TIM_Base_SetConfig+0x250>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d108      	bne.n	80028e8 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a20      	ldr	r2, [pc, #128]	@ (8002990 <TIM_Base_SetConfig+0x1fc>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d023      	beq.n	800295c <TIM_Base_SetConfig+0x1c8>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a1f      	ldr	r2, [pc, #124]	@ (8002994 <TIM_Base_SetConfig+0x200>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d01f      	beq.n	800295c <TIM_Base_SetConfig+0x1c8>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a24      	ldr	r2, [pc, #144]	@ (80029b0 <TIM_Base_SetConfig+0x21c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d01b      	beq.n	800295c <TIM_Base_SetConfig+0x1c8>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a23      	ldr	r2, [pc, #140]	@ (80029b4 <TIM_Base_SetConfig+0x220>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d017      	beq.n	800295c <TIM_Base_SetConfig+0x1c8>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a28      	ldr	r2, [pc, #160]	@ (80029d0 <TIM_Base_SetConfig+0x23c>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d013      	beq.n	800295c <TIM_Base_SetConfig+0x1c8>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a27      	ldr	r2, [pc, #156]	@ (80029d4 <TIM_Base_SetConfig+0x240>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d00f      	beq.n	800295c <TIM_Base_SetConfig+0x1c8>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a26      	ldr	r2, [pc, #152]	@ (80029d8 <TIM_Base_SetConfig+0x244>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d00b      	beq.n	800295c <TIM_Base_SetConfig+0x1c8>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a25      	ldr	r2, [pc, #148]	@ (80029dc <TIM_Base_SetConfig+0x248>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d007      	beq.n	800295c <TIM_Base_SetConfig+0x1c8>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a24      	ldr	r2, [pc, #144]	@ (80029e0 <TIM_Base_SetConfig+0x24c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d003      	beq.n	800295c <TIM_Base_SetConfig+0x1c8>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a23      	ldr	r2, [pc, #140]	@ (80029e4 <TIM_Base_SetConfig+0x250>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d103      	bne.n	8002964 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b01      	cmp	r3, #1
 8002974:	d105      	bne.n	8002982 <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	f023 0201 	bic.w	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	611a      	str	r2, [r3, #16]
  }
}
 8002982:	bf00      	nop
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40012c00 	.word	0x40012c00
 8002994:	50012c00 	.word	0x50012c00
 8002998:	40000400 	.word	0x40000400
 800299c:	50000400 	.word	0x50000400
 80029a0:	40000800 	.word	0x40000800
 80029a4:	50000800 	.word	0x50000800
 80029a8:	40000c00 	.word	0x40000c00
 80029ac:	50000c00 	.word	0x50000c00
 80029b0:	40013400 	.word	0x40013400
 80029b4:	50013400 	.word	0x50013400
 80029b8:	40001800 	.word	0x40001800
 80029bc:	50001800 	.word	0x50001800
 80029c0:	40001c00 	.word	0x40001c00
 80029c4:	50001c00 	.word	0x50001c00
 80029c8:	40002000 	.word	0x40002000
 80029cc:	50002000 	.word	0x50002000
 80029d0:	40014000 	.word	0x40014000
 80029d4:	50014000 	.word	0x50014000
 80029d8:	40014400 	.word	0x40014400
 80029dc:	50014400 	.word	0x50014400
 80029e0:	40014800 	.word	0x40014800
 80029e4:	50014800 	.word	0x50014800

080029e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08e      	sub	sp, #56	@ 0x38
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8002a82:	2234      	movs	r2, #52	@ 0x34
 8002a84:	2100      	movs	r1, #0
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f001 f99e 	bl	8003dc8 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	f023 0303 	bic.w	r3, r3, #3
 8002a92:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	f1a3 0208 	sub.w	r2, r3, #8
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8002ac6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	4413      	add	r3, r2
 8002acc:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8002ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ad0:	3b04      	subs	r3, #4
 8002ad2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8002ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 8002adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ae0:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8002ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ae4:	3b04      	subs	r3, #4
 8002ae6:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8002ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8002af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 8002afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002afc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002afe:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8002b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b06:	3304      	adds	r3, #4
 8002b08:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8002b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8002b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b10:	4a1f      	ldr	r2, [pc, #124]	@ (8002b90 <_tx_byte_pool_create+0x11c>)
 8002b12:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	621a      	str	r2, [r3, #32]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b1e:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 8002b20:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 8002b22:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8002b24:	b672      	cpsid	i
#endif
    return(int_posture);
 8002b26:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8002b28:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4a19      	ldr	r2, [pc, #100]	@ (8002b94 <_tx_byte_pool_create+0x120>)
 8002b2e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8002b30:	4b19      	ldr	r3, [pc, #100]	@ (8002b98 <_tx_byte_pool_create+0x124>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d109      	bne.n	8002b4c <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8002b38:	4a18      	ldr	r2, [pc, #96]	@ (8002b9c <_tx_byte_pool_create+0x128>)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b4a:	e011      	b.n	8002b70 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8002b4c:	4b13      	ldr	r3, [pc, #76]	@ (8002b9c <_tx_byte_pool_create+0x128>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b56:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	69fa      	ldr	r2, [r7, #28]
 8002b68:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6a3a      	ldr	r2, [r7, #32]
 8002b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8002b70:	4b09      	ldr	r3, [pc, #36]	@ (8002b98 <_tx_byte_pool_create+0x124>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3301      	adds	r3, #1
 8002b76:	4a08      	ldr	r2, [pc, #32]	@ (8002b98 <_tx_byte_pool_create+0x124>)
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	f383 8810 	msr	PRIMASK, r3
}
 8002b84:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3738      	adds	r7, #56	@ 0x38
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	ffffeeee 	.word	0xffffeeee
 8002b94:	42595445 	.word	0x42595445
 8002b98:	200012ec 	.word	0x200012ec
 8002b9c:	200012e8 	.word	0x200012e8

08002ba0 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8002ba4:	f000 f960 	bl	8002e68 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8002ba8:	f000 fd68 	bl	800367c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8002bac:	4b12      	ldr	r3, [pc, #72]	@ (8002bf8 <_tx_initialize_high_level+0x58>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	4b12      	ldr	r3, [pc, #72]	@ (8002bfc <_tx_initialize_high_level+0x5c>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8002bb8:	4b11      	ldr	r3, [pc, #68]	@ (8002c00 <_tx_initialize_high_level+0x60>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	4b11      	ldr	r3, [pc, #68]	@ (8002c04 <_tx_initialize_high_level+0x64>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8002bc4:	4b10      	ldr	r3, [pc, #64]	@ (8002c08 <_tx_initialize_high_level+0x68>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	4b10      	ldr	r3, [pc, #64]	@ (8002c0c <_tx_initialize_high_level+0x6c>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8002bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c10 <_tx_initialize_high_level+0x70>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8002c14 <_tx_initialize_high_level+0x74>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8002c18 <_tx_initialize_high_level+0x78>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	4b0e      	ldr	r3, [pc, #56]	@ (8002c1c <_tx_initialize_high_level+0x7c>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8002be8:	4b0d      	ldr	r3, [pc, #52]	@ (8002c20 <_tx_initialize_high_level+0x80>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	4b0d      	ldr	r3, [pc, #52]	@ (8002c24 <_tx_initialize_high_level+0x84>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
#endif
}
 8002bf4:	bf00      	nop
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	200012c0 	.word	0x200012c0
 8002bfc:	200012c4 	.word	0x200012c4
 8002c00:	200012c8 	.word	0x200012c8
 8002c04:	200012cc 	.word	0x200012cc
 8002c08:	200012d0 	.word	0x200012d0
 8002c0c:	200012d4 	.word	0x200012d4
 8002c10:	200012e0 	.word	0x200012e0
 8002c14:	200012e4 	.word	0x200012e4
 8002c18:	200012e8 	.word	0x200012e8
 8002c1c:	200012ec 	.word	0x200012ec
 8002c20:	200012d8 	.word	0x200012d8
 8002c24:	200012dc 	.word	0x200012dc

08002c28 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8002c2c:	4b10      	ldr	r3, [pc, #64]	@ (8002c70 <_tx_initialize_kernel_enter+0x48>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 8002c34:	d00c      	beq.n	8002c50 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8002c36:	4b0e      	ldr	r3, [pc, #56]	@ (8002c70 <_tx_initialize_kernel_enter+0x48>)
 8002c38:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8002c3c:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8002c3e:	f7fd fb25 	bl	800028c <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8002c42:	f7ff ffad 	bl	8002ba0 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8002c46:	4b0b      	ldr	r3, [pc, #44]	@ (8002c74 <_tx_initialize_kernel_enter+0x4c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	4a09      	ldr	r2, [pc, #36]	@ (8002c74 <_tx_initialize_kernel_enter+0x4c>)
 8002c4e:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8002c50:	4b07      	ldr	r3, [pc, #28]	@ (8002c70 <_tx_initialize_kernel_enter+0x48>)
 8002c52:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8002c56:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8002c58:	4b07      	ldr	r3, [pc, #28]	@ (8002c78 <_tx_initialize_kernel_enter+0x50>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fd fc33 	bl	80004c8 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8002c62:	4b03      	ldr	r3, [pc, #12]	@ (8002c70 <_tx_initialize_kernel_enter+0x48>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8002c68:	f7fd fb4c 	bl	8000304 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8002c6c:	bf00      	nop
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	2000000c 	.word	0x2000000c
 8002c74:	20001390 	.word	0x20001390
 8002c78:	200012f0 	.word	0x200012f0

08002c7c <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b092      	sub	sp, #72	@ 0x48
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8002c8e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002c90:	21ef      	movs	r1, #239	@ 0xef
 8002c92:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002c94:	f001 f898 	bl	8003dc8 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8002c98:	22b0      	movs	r2, #176	@ 0xb0
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f001 f893 	bl	8003dc8 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002cb8:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002cbe:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002cc4:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002cca:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002cd2:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002cd8:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8002ce2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8002ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002cec:	4413      	add	r3, r2
 8002cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002cf4:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8002cf6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002cf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d007      	beq.n	8002d0e <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8002d0c:	e006      	b.n	8002d1c <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d12:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d18:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2203      	movs	r2, #3
 8002d20:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4a48      	ldr	r2, [pc, #288]	@ (8002e48 <_tx_thread_create+0x1cc>)
 8002d26:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8002d2e:	4947      	ldr	r1, [pc, #284]	@ (8002e4c <_tx_thread_create+0x1d0>)
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f7fd fb4d 	bl	80003d0 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002d36:	f3ef 8310 	mrs	r3, PRIMASK
 8002d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8002d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8002d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8002d40:	b672      	cpsid	i
    return(int_posture);
 8002d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8002d44:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4a41      	ldr	r2, [pc, #260]	@ (8002e50 <_tx_thread_create+0x1d4>)
 8002d4a:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8002d4c:	4b41      	ldr	r3, [pc, #260]	@ (8002e54 <_tx_thread_create+0x1d8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10b      	bne.n	8002d6c <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8002d54:	4a40      	ldr	r2, [pc, #256]	@ (8002e58 <_tx_thread_create+0x1dc>)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8002d6a:	e016      	b.n	8002d9a <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8002d6c:	4b3a      	ldr	r3, [pc, #232]	@ (8002e58 <_tx_thread_create+0x1dc>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8002d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d78:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8002d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8002d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8002d9a:	4b2e      	ldr	r3, [pc, #184]	@ (8002e54 <_tx_thread_create+0x1d8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	4a2c      	ldr	r2, [pc, #176]	@ (8002e54 <_tx_thread_create+0x1d8>)
 8002da2:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8002da4:	4b2d      	ldr	r3, [pc, #180]	@ (8002e5c <_tx_thread_create+0x1e0>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	3301      	adds	r3, #1
 8002daa:	4a2c      	ldr	r2, [pc, #176]	@ (8002e5c <_tx_thread_create+0x1e0>)
 8002dac:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8002dae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d129      	bne.n	8002e08 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002db4:	f3ef 8305 	mrs	r3, IPSR
 8002db8:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 8002dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8002dbc:	4b28      	ldr	r3, [pc, #160]	@ (8002e60 <_tx_thread_create+0x1e4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8002dc6:	d30d      	bcc.n	8002de4 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8002dc8:	4b26      	ldr	r3, [pc, #152]	@ (8002e64 <_tx_thread_create+0x1e8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8002dce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d009      	beq.n	8002de8 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8002dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd8:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8002dda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002de0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002de2:	e001      	b.n	8002de8 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dea:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002dec:	6a3b      	ldr	r3, [r7, #32]
 8002dee:	f383 8810 	msr	PRIMASK, r3
}
 8002df2:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 f979 	bl	80030ec <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8002dfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01e      	beq.n	8002e3e <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8002e00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e04:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e06:	e01a      	b.n	8002e3e <_tx_thread_create+0x1c2>
 8002e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e0a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f383 8810 	msr	PRIMASK, r3
}
 8002e12:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002e14:	f3ef 8310 	mrs	r3, PRIMASK
 8002e18:	61bb      	str	r3, [r7, #24]
    return(posture);
 8002e1a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8002e1c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002e1e:	b672      	cpsid	i
    return(int_posture);
 8002e20:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8002e22:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8002e24:	4b0d      	ldr	r3, [pc, #52]	@ (8002e5c <_tx_thread_create+0x1e0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	4a0c      	ldr	r2, [pc, #48]	@ (8002e5c <_tx_thread_create+0x1e0>)
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e30:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	f383 8810 	msr	PRIMASK, r3
}
 8002e38:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8002e3a:	f000 f91d 	bl	8003078 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3748      	adds	r7, #72	@ 0x48
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	080035c1 	.word	0x080035c1
 8002e4c:	08002ee1 	.word	0x08002ee1
 8002e50:	54485244 	.word	0x54485244
 8002e54:	20001304 	.word	0x20001304
 8002e58:	20001300 	.word	0x20001300
 8002e5c:	20001390 	.word	0x20001390
 8002e60:	2000000c 	.word	0x2000000c
 8002e64:	200012fc 	.word	0x200012fc

08002e68 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8002e6c:	4b12      	ldr	r3, [pc, #72]	@ (8002eb8 <_tx_thread_initialize+0x50>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8002e72:	4b12      	ldr	r3, [pc, #72]	@ (8002ebc <_tx_thread_initialize+0x54>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 8002e78:	4b11      	ldr	r3, [pc, #68]	@ (8002ec0 <_tx_thread_initialize+0x58>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8002e7e:	4b11      	ldr	r3, [pc, #68]	@ (8002ec4 <_tx_thread_initialize+0x5c>)
 8002e80:	2220      	movs	r2, #32
 8002e82:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8002e84:	2280      	movs	r2, #128	@ 0x80
 8002e86:	2100      	movs	r1, #0
 8002e88:	480f      	ldr	r0, [pc, #60]	@ (8002ec8 <_tx_thread_initialize+0x60>)
 8002e8a:	f000 ff9d 	bl	8003dc8 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8002e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8002ecc <_tx_thread_initialize+0x64>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8002e94:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed0 <_tx_thread_initialize+0x68>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8002e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed4 <_tx_thread_initialize+0x6c>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8002ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed8 <_tx_thread_initialize+0x70>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8002edc <_tx_thread_initialize+0x74>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 8002eae:	4a0b      	ldr	r2, [pc, #44]	@ (8002edc <_tx_thread_initialize+0x74>)
 8002eb0:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	200012f8 	.word	0x200012f8
 8002ebc:	200012fc 	.word	0x200012fc
 8002ec0:	20001308 	.word	0x20001308
 8002ec4:	2000130c 	.word	0x2000130c
 8002ec8:	20001310 	.word	0x20001310
 8002ecc:	20001300 	.word	0x20001300
 8002ed0:	20001304 	.word	0x20001304
 8002ed4:	20001390 	.word	0x20001390
 8002ed8:	20001394 	.word	0x20001394
 8002edc:	20001398 	.word	0x20001398

08002ee0 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8002ee6:	4b21      	ldr	r3, [pc, #132]	@ (8002f6c <_tx_thread_shell_entry+0x8c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8002ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f70 <_tx_thread_shell_entry+0x90>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8002f00:	4b1b      	ldr	r3, [pc, #108]	@ (8002f70 <_tx_thread_shell_entry+0x90>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	69f8      	ldr	r0, [r7, #28]
 8002f06:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002f08:	f3ef 8310 	mrs	r3, PRIMASK
 8002f0c:	607b      	str	r3, [r7, #4]
    return(posture);
 8002f0e:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8002f10:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002f12:	b672      	cpsid	i
    return(int_posture);
 8002f14:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8002f16:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	2201      	movs	r2, #1
 8002f22:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2200      	movs	r2, #0
 8002f28:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8002f2a:	4b12      	ldr	r3, [pc, #72]	@ (8002f74 <_tx_thread_shell_entry+0x94>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	4a10      	ldr	r2, [pc, #64]	@ (8002f74 <_tx_thread_shell_entry+0x94>)
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f383 8810 	msr	PRIMASK, r3
}
 8002f3e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8002f40:	f3ef 8314 	mrs	r3, CONTROL
 8002f44:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8002f46:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f023 0304 	bic.w	r3, r3, #4
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f383 8814 	msr	CONTROL, r3
}
 8002f5c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8002f5e:	69f8      	ldr	r0, [r7, #28]
 8002f60:	f000 f9c4 	bl	80032ec <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8002f64:	bf00      	nop
 8002f66:	3720      	adds	r7, #32
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	200012f8 	.word	0x200012f8
 8002f70:	20001394 	.word	0x20001394
 8002f74:	20001390 	.word	0x20001390

08002f78 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08e      	sub	sp, #56	@ 0x38
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002f80:	f3ef 8310 	mrs	r3, PRIMASK
 8002f84:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8002f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8002f88:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8002f8a:	b672      	cpsid	i
    return(int_posture);
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8002f8e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8002f90:	4b35      	ldr	r3, [pc, #212]	@ (8003068 <_tx_thread_sleep+0xf0>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8002f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d108      	bne.n	8002fae <_tx_thread_sleep+0x36>
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	f383 8810 	msr	PRIMASK, r3
}
 8002fa6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8002fa8:	2313      	movs	r3, #19
 8002faa:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fac:	e056      	b.n	800305c <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002fae:	f3ef 8305 	mrs	r3, IPSR
 8002fb2:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8002fb4:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8002fb6:	4b2d      	ldr	r3, [pc, #180]	@ (800306c <_tx_thread_sleep+0xf4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <_tx_thread_sleep+0x5a>
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	f383 8810 	msr	PRIMASK, r3
}
 8002fca:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8002fcc:	2313      	movs	r3, #19
 8002fce:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fd0:	e044      	b.n	800305c <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8002fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd4:	4a26      	ldr	r2, [pc, #152]	@ (8003070 <_tx_thread_sleep+0xf8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d108      	bne.n	8002fec <_tx_thread_sleep+0x74>
 8002fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fdc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f383 8810 	msr	PRIMASK, r3
}
 8002fe4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8002fe6:	2313      	movs	r3, #19
 8002fe8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fea:	e037      	b.n	800305c <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d108      	bne.n	8003004 <_tx_thread_sleep+0x8c>
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f383 8810 	msr	PRIMASK, r3
}
 8002ffc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8002ffe:	2300      	movs	r3, #0
 8003000:	637b      	str	r3, [r7, #52]	@ 0x34
 8003002:	e02b      	b.n	800305c <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8003004:	4b1b      	ldr	r3, [pc, #108]	@ (8003074 <_tx_thread_sleep+0xfc>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <_tx_thread_sleep+0xa6>
 800300c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800300e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f383 8810 	msr	PRIMASK, r3
}
 8003016:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8003018:	2313      	movs	r3, #19
 800301a:	637b      	str	r3, [r7, #52]	@ 0x34
 800301c:	e01e      	b.n	800305c <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800301e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003020:	2204      	movs	r2, #4
 8003022:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8003024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003026:	2201      	movs	r2, #1
 8003028:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800302a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800302c:	2200      	movs	r2, #0
 800302e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8003032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8003038:	4b0e      	ldr	r3, [pc, #56]	@ (8003074 <_tx_thread_sleep+0xfc>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3301      	adds	r3, #1
 800303e:	4a0d      	ldr	r2, [pc, #52]	@ (8003074 <_tx_thread_sleep+0xfc>)
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003044:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f383 8810 	msr	PRIMASK, r3
}
 800304c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800304e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003050:	f000 f94c 	bl	80032ec <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8003054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003056:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800305a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800305c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800305e:	4618      	mov	r0, r3
 8003060:	3738      	adds	r7, #56	@ 0x38
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	200012f8 	.word	0x200012f8
 800306c:	2000000c 	.word	0x2000000c
 8003070:	20001440 	.word	0x20001440
 8003074:	20001390 	.word	0x20001390

08003078 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	@ 0x24
 800307c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800307e:	4b17      	ldr	r3, [pc, #92]	@ (80030dc <_tx_thread_system_preempt_check+0x64>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d121      	bne.n	80030ce <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800308a:	4b15      	ldr	r3, [pc, #84]	@ (80030e0 <_tx_thread_system_preempt_check+0x68>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8003090:	4b14      	ldr	r3, [pc, #80]	@ (80030e4 <_tx_thread_system_preempt_check+0x6c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	429a      	cmp	r2, r3
 800309c:	d017      	beq.n	80030ce <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800309e:	4b12      	ldr	r3, [pc, #72]	@ (80030e8 <_tx_thread_system_preempt_check+0x70>)
 80030a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030a4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80030a6:	f3ef 8305 	mrs	r3, IPSR
 80030aa:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80030ac:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10c      	bne.n	80030cc <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80030b2:	f3ef 8310 	mrs	r3, PRIMASK
 80030b6:	60fb      	str	r3, [r7, #12]
    return(posture);
 80030b8:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 80030ba:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80030bc:	b662      	cpsie	i
}
 80030be:	bf00      	nop
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f383 8810 	msr	PRIMASK, r3
}
 80030ca:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 80030cc:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 80030ce:	bf00      	nop
 80030d0:	3724      	adds	r7, #36	@ 0x24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	20001390 	.word	0x20001390
 80030e0:	200012f8 	.word	0x200012f8
 80030e4:	200012fc 	.word	0x200012fc
 80030e8:	e000ed04 	.word	0xe000ed04

080030ec <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b096      	sub	sp, #88	@ 0x58
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80030f4:	f3ef 8310 	mrs	r3, PRIMASK
 80030f8:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 80030fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 80030fc:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80030fe:	b672      	cpsid	i
    return(int_posture);
 8003100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8003102:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	334c      	adds	r3, #76	@ 0x4c
 8003110:	4618      	mov	r0, r3
 8003112:	f000 fb91 	bl	8003838 <_tx_timer_system_deactivate>
 8003116:	e002      	b.n	800311e <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800311e:	4b6c      	ldr	r3, [pc, #432]	@ (80032d0 <_tx_thread_system_resume+0x1e4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3b01      	subs	r3, #1
 8003124:	4a6a      	ldr	r2, [pc, #424]	@ (80032d0 <_tx_thread_system_resume+0x1e4>)
 8003126:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800312c:	2b00      	cmp	r3, #0
 800312e:	f040 8083 	bne.w	8003238 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 8097 	beq.w	800326a <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003140:	2b00      	cmp	r3, #0
 8003142:	d172      	bne.n	800322a <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314e:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8003150:	4a60      	ldr	r2, [pc, #384]	@ (80032d4 <_tx_thread_system_resume+0x1e8>)
 8003152:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003158:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 800315a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800315c:	2b00      	cmp	r3, #0
 800315e:	d154      	bne.n	800320a <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8003160:	495c      	ldr	r1, [pc, #368]	@ (80032d4 <_tx_thread_system_resume+0x1e8>)
 8003162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8003176:	2201      	movs	r2, #1
 8003178:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8003180:	4b55      	ldr	r3, [pc, #340]	@ (80032d8 <_tx_thread_system_resume+0x1ec>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003186:	4313      	orrs	r3, r2
 8003188:	4a53      	ldr	r2, [pc, #332]	@ (80032d8 <_tx_thread_system_resume+0x1ec>)
 800318a:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800318c:	4b53      	ldr	r3, [pc, #332]	@ (80032dc <_tx_thread_system_resume+0x1f0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003192:	429a      	cmp	r2, r3
 8003194:	d269      	bcs.n	800326a <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8003196:	4a51      	ldr	r2, [pc, #324]	@ (80032dc <_tx_thread_system_resume+0x1f0>)
 8003198:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800319a:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800319c:	4b50      	ldr	r3, [pc, #320]	@ (80032e0 <_tx_thread_system_resume+0x1f4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80031a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d103      	bne.n	80031b0 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80031a8:	4a4d      	ldr	r2, [pc, #308]	@ (80032e0 <_tx_thread_system_resume+0x1f4>)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	e05c      	b.n	800326a <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80031b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d257      	bcs.n	800326a <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80031ba:	4a49      	ldr	r2, [pc, #292]	@ (80032e0 <_tx_thread_system_resume+0x1f4>)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80031c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031c6:	f383 8810 	msr	PRIMASK, r3
}
 80031ca:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80031cc:	4b40      	ldr	r3, [pc, #256]	@ (80032d0 <_tx_thread_system_resume+0x1e4>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 80031d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d174      	bne.n	80032c2 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80031d8:	4b42      	ldr	r3, [pc, #264]	@ (80032e4 <_tx_thread_system_resume+0x1f8>)
 80031da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031de:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80031e0:	f3ef 8305 	mrs	r3, IPSR
 80031e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 80031e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (_tx_ipsr_get() == 0)
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10c      	bne.n	8003206 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80031ec:	f3ef 8310 	mrs	r3, PRIMASK
 80031f0:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 80031f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 80031f4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80031f6:	b662      	cpsie	i
}
 80031f8:	bf00      	nop
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	f383 8810 	msr	PRIMASK, r3
}
 8003204:	bf00      	nop
}
 8003206:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8003208:	e05b      	b.n	80032c2 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800320a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800320c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320e:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8003210:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8003216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003220:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003226:	621a      	str	r2, [r3, #32]
 8003228:	e01f      	b.n	800326a <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2203      	movs	r2, #3
 8003234:	631a      	str	r2, [r3, #48]	@ 0x30
 8003236:	e018      	b.n	800326a <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323c:	2b01      	cmp	r3, #1
 800323e:	d014      	beq.n	800326a <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003244:	2b02      	cmp	r3, #2
 8003246:	d010      	beq.n	800326a <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800324c:	2b00      	cmp	r3, #0
 800324e:	d106      	bne.n	800325e <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	631a      	str	r2, [r3, #48]	@ 0x30
 800325c:	e005      	b.n	800326a <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2203      	movs	r2, #3
 8003268:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800326a:	4b1f      	ldr	r3, [pc, #124]	@ (80032e8 <_tx_thread_system_resume+0x1fc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003272:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	f383 8810 	msr	PRIMASK, r3
}
 800327a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800327c:	4b18      	ldr	r3, [pc, #96]	@ (80032e0 <_tx_thread_system_resume+0x1f4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003282:	429a      	cmp	r2, r3
 8003284:	d020      	beq.n	80032c8 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8003286:	4b12      	ldr	r3, [pc, #72]	@ (80032d0 <_tx_thread_system_resume+0x1e4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 800328c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800328e:	2b00      	cmp	r3, #0
 8003290:	d11a      	bne.n	80032c8 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8003292:	4b14      	ldr	r3, [pc, #80]	@ (80032e4 <_tx_thread_system_resume+0x1f8>)
 8003294:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003298:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800329a:	f3ef 8305 	mrs	r3, IPSR
 800329e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80032a0:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10f      	bne.n	80032c6 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80032a6:	f3ef 8310 	mrs	r3, PRIMASK
 80032aa:	613b      	str	r3, [r7, #16]
    return(posture);
 80032ac:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 80032ae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80032b0:	b662      	cpsie	i
}
 80032b2:	bf00      	nop
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f383 8810 	msr	PRIMASK, r3
}
 80032be:	bf00      	nop
}
 80032c0:	e001      	b.n	80032c6 <_tx_thread_system_resume+0x1da>
                                return;
 80032c2:	bf00      	nop
 80032c4:	e000      	b.n	80032c8 <_tx_thread_system_resume+0x1dc>
 80032c6:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 80032c8:	3758      	adds	r7, #88	@ 0x58
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20001390 	.word	0x20001390
 80032d4:	20001310 	.word	0x20001310
 80032d8:	20001308 	.word	0x20001308
 80032dc:	2000130c 	.word	0x2000130c
 80032e0:	200012fc 	.word	0x200012fc
 80032e4:	e000ed04 	.word	0xe000ed04
 80032e8:	200012f8 	.word	0x200012f8

080032ec <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b09e      	sub	sp, #120	@ 0x78
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80032f4:	4b81      	ldr	r3, [pc, #516]	@ (80034fc <_tx_thread_system_suspend+0x210>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80032fa:	f3ef 8310 	mrs	r3, PRIMASK
 80032fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 8003300:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 8003302:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8003304:	b672      	cpsid	i
    return(int_posture);
 8003306:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8003308:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800330e:	429a      	cmp	r2, r3
 8003310:	d112      	bne.n	8003338 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003316:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8003318:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800331a:	2b00      	cmp	r3, #0
 800331c:	d008      	beq.n	8003330 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800331e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003320:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003324:	d004      	beq.n	8003330 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	334c      	adds	r3, #76	@ 0x4c
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fa22 	bl	8003774 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	4a72      	ldr	r2, [pc, #456]	@ (8003500 <_tx_thread_system_suspend+0x214>)
 8003336:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8003338:	4b72      	ldr	r3, [pc, #456]	@ (8003504 <_tx_thread_system_suspend+0x218>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3b01      	subs	r3, #1
 800333e:	4a71      	ldr	r2, [pc, #452]	@ (8003504 <_tx_thread_system_suspend+0x218>)
 8003340:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003346:	2b01      	cmp	r3, #1
 8003348:	f040 80a6 	bne.w	8003498 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003356:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800335e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	429a      	cmp	r2, r3
 8003364:	d015      	beq.n	8003392 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336a:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800336c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800336e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003370:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8003372:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003374:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003376:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8003378:	4a63      	ldr	r2, [pc, #396]	@ (8003508 <_tx_thread_system_suspend+0x21c>)
 800337a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800337c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	429a      	cmp	r2, r3
 8003384:	d157      	bne.n	8003436 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8003386:	4960      	ldr	r1, [pc, #384]	@ (8003508 <_tx_thread_system_suspend+0x21c>)
 8003388:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800338a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800338c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003390:	e051      	b.n	8003436 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8003392:	4a5d      	ldr	r2, [pc, #372]	@ (8003508 <_tx_thread_system_suspend+0x21c>)
 8003394:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003396:	2100      	movs	r1, #0
 8003398:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800339c:	2201      	movs	r2, #1
 800339e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 80033a6:	4b59      	ldr	r3, [pc, #356]	@ (800350c <_tx_thread_system_suspend+0x220>)
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033ac:	43db      	mvns	r3, r3
 80033ae:	4013      	ands	r3, r2
 80033b0:	4a56      	ldr	r2, [pc, #344]	@ (800350c <_tx_thread_system_suspend+0x220>)
 80033b2:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 80033b4:	2300      	movs	r3, #0
 80033b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 80033b8:	4b54      	ldr	r3, [pc, #336]	@ (800350c <_tx_thread_system_suspend+0x220>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 80033be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d12b      	bne.n	800341c <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80033c4:	4b52      	ldr	r3, [pc, #328]	@ (8003510 <_tx_thread_system_suspend+0x224>)
 80033c6:	2220      	movs	r2, #32
 80033c8:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 80033ca:	4b52      	ldr	r3, [pc, #328]	@ (8003514 <_tx_thread_system_suspend+0x228>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033d2:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80033d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033d6:	f383 8810 	msr	PRIMASK, r3
}
 80033da:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80033dc:	4b49      	ldr	r3, [pc, #292]	@ (8003504 <_tx_thread_system_suspend+0x218>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 80033e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f040 8081 	bne.w	80034ec <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80033ea:	4b4b      	ldr	r3, [pc, #300]	@ (8003518 <_tx_thread_system_suspend+0x22c>)
 80033ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033f0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80033f2:	f3ef 8305 	mrs	r3, IPSR
 80033f6:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 80033f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (_tx_ipsr_get() == 0)
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10c      	bne.n	8003418 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80033fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003402:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 8003404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 8003406:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003408:	b662      	cpsie	i
}
 800340a:	bf00      	nop
 800340c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800340e:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003412:	f383 8810 	msr	PRIMASK, r3
}
 8003416:	bf00      	nop
}
 8003418:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800341a:	e067      	b.n	80034ec <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800341c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800341e:	fa93 f3a3 	rbit	r3, r3
 8003422:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003424:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003426:	fab3 f383 	clz	r3, r3
 800342a:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800342c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800342e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003430:	4413      	add	r3, r2
 8003432:	4a37      	ldr	r2, [pc, #220]	@ (8003510 <_tx_thread_system_suspend+0x224>)
 8003434:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8003436:	4b37      	ldr	r3, [pc, #220]	@ (8003514 <_tx_thread_system_suspend+0x228>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	429a      	cmp	r2, r3
 800343e:	d12b      	bne.n	8003498 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8003440:	4b33      	ldr	r3, [pc, #204]	@ (8003510 <_tx_thread_system_suspend+0x224>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a30      	ldr	r2, [pc, #192]	@ (8003508 <_tx_thread_system_suspend+0x21c>)
 8003446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800344a:	4a32      	ldr	r2, [pc, #200]	@ (8003514 <_tx_thread_system_suspend+0x228>)
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003450:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003454:	f383 8810 	msr	PRIMASK, r3
}
 8003458:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800345a:	4b2a      	ldr	r3, [pc, #168]	@ (8003504 <_tx_thread_system_suspend+0x218>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 8003460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003462:	2b00      	cmp	r3, #0
 8003464:	d144      	bne.n	80034f0 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8003466:	4b2c      	ldr	r3, [pc, #176]	@ (8003518 <_tx_thread_system_suspend+0x22c>)
 8003468:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800346c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800346e:	f3ef 8305 	mrs	r3, IPSR
 8003472:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 8003474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (_tx_ipsr_get() == 0)
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10c      	bne.n	8003494 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800347a:	f3ef 8310 	mrs	r3, PRIMASK
 800347e:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8003480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 8003482:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003484:	b662      	cpsie	i
}
 8003486:	bf00      	nop
 8003488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	f383 8810 	msr	PRIMASK, r3
}
 8003492:	bf00      	nop
}
 8003494:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8003496:	e02b      	b.n	80034f0 <_tx_thread_system_suspend+0x204>
 8003498:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800349a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f383 8810 	msr	PRIMASK, r3
}
 80034a2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80034a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003514 <_tx_thread_system_suspend+0x228>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d022      	beq.n	80034f4 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80034ae:	4b15      	ldr	r3, [pc, #84]	@ (8003504 <_tx_thread_system_suspend+0x218>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 80034b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d11c      	bne.n	80034f4 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80034ba:	4b17      	ldr	r3, [pc, #92]	@ (8003518 <_tx_thread_system_suspend+0x22c>)
 80034bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034c0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80034c2:	f3ef 8305 	mrs	r3, IPSR
 80034c6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80034c8:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10c      	bne.n	80034e8 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80034ce:	f3ef 8310 	mrs	r3, PRIMASK
 80034d2:	617b      	str	r3, [r7, #20]
    return(posture);
 80034d4:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 80034d6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80034d8:	b662      	cpsie	i
}
 80034da:	bf00      	nop
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f383 8810 	msr	PRIMASK, r3
}
 80034e6:	bf00      	nop
}
 80034e8:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 80034ea:	e003      	b.n	80034f4 <_tx_thread_system_suspend+0x208>
                return;
 80034ec:	bf00      	nop
 80034ee:	e002      	b.n	80034f6 <_tx_thread_system_suspend+0x20a>
            return;
 80034f0:	bf00      	nop
 80034f2:	e000      	b.n	80034f6 <_tx_thread_system_suspend+0x20a>
    return;
 80034f4:	bf00      	nop
}
 80034f6:	3778      	adds	r7, #120	@ 0x78
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	200012f8 	.word	0x200012f8
 8003500:	200018fc 	.word	0x200018fc
 8003504:	20001390 	.word	0x20001390
 8003508:	20001310 	.word	0x20001310
 800350c:	20001308 	.word	0x20001308
 8003510:	2000130c 	.word	0x2000130c
 8003514:	200012fc 	.word	0x200012fc
 8003518:	e000ed04 	.word	0xe000ed04

0800351c <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8003522:	4b21      	ldr	r3, [pc, #132]	@ (80035a8 <_tx_thread_time_slice+0x8c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003528:	f3ef 8310 	mrs	r3, PRIMASK
 800352c:	60fb      	str	r3, [r7, #12]
    return(posture);
 800352e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8003530:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003532:	b672      	cpsid	i
    return(int_posture);
 8003534:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8003536:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8003538:	4b1c      	ldr	r3, [pc, #112]	@ (80035ac <_tx_thread_time_slice+0x90>)
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d024      	beq.n	800358e <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003548:	2b00      	cmp	r3, #0
 800354a:	d120      	bne.n	800358e <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	69da      	ldr	r2, [r3, #28]
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	4a15      	ldr	r2, [pc, #84]	@ (80035b0 <_tx_thread_time_slice+0x94>)
 800355a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	429a      	cmp	r2, r3
 8003564:	d013      	beq.n	800358e <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800356e:	429a      	cmp	r2, r3
 8003570:	d10d      	bne.n	800358e <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	6a12      	ldr	r2, [r2, #32]
 800357a:	490e      	ldr	r1, [pc, #56]	@ (80035b4 <_tx_thread_time_slice+0x98>)
 800357c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8003580:	4b0d      	ldr	r3, [pc, #52]	@ (80035b8 <_tx_thread_time_slice+0x9c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a0b      	ldr	r2, [pc, #44]	@ (80035b4 <_tx_thread_time_slice+0x98>)
 8003586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800358a:	4a0c      	ldr	r2, [pc, #48]	@ (80035bc <_tx_thread_time_slice+0xa0>)
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f383 8810 	msr	PRIMASK, r3
}
 8003598:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800359a:	bf00      	nop
 800359c:	371c      	adds	r7, #28
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	200012f8 	.word	0x200012f8
 80035ac:	200013a0 	.word	0x200013a0
 80035b0:	200018fc 	.word	0x200018fc
 80035b4:	20001310 	.word	0x20001310
 80035b8:	2000130c 	.word	0x2000130c
 80035bc:	200012fc 	.word	0x200012fc

080035c0 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08a      	sub	sp, #40	@ 0x28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80035cc:	f3ef 8310 	mrs	r3, PRIMASK
 80035d0:	617b      	str	r3, [r7, #20]
    return(posture);
 80035d2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80035d4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80035d6:	b672      	cpsid	i
    return(int_posture);
 80035d8:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 80035da:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 80035dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d10e      	bne.n	8003602 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 80035e4:	4b13      	ldr	r3, [pc, #76]	@ (8003634 <_tx_thread_timeout+0x74>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3301      	adds	r3, #1
 80035ea:	4a12      	ldr	r2, [pc, #72]	@ (8003634 <_tx_thread_timeout+0x74>)
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f383 8810 	msr	PRIMASK, r3
}
 80035f8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 80035fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035fc:	f7ff fd76 	bl	80030ec <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8003600:	e013      	b.n	800362a <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8003602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003604:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003606:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8003608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800360e:	61bb      	str	r3, [r7, #24]
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f383 8810 	msr	PRIMASK, r3
}
 800361a:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	69b9      	ldr	r1, [r7, #24]
 8003626:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003628:	4798      	blx	r3
}
 800362a:	bf00      	nop
 800362c:	3728      	adds	r7, #40	@ 0x28
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20001390 	.word	0x20001390

08003638 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800363e:	f3ef 8310 	mrs	r3, PRIMASK
 8003642:	607b      	str	r3, [r7, #4]
    return(posture);
 8003644:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8003646:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003648:	b672      	cpsid	i
    return(int_posture);
 800364a:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800364c:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800364e:	4b09      	ldr	r3, [pc, #36]	@ (8003674 <_tx_timer_expiration_process+0x3c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	3301      	adds	r3, #1
 8003654:	4a07      	ldr	r2, [pc, #28]	@ (8003674 <_tx_timer_expiration_process+0x3c>)
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f383 8810 	msr	PRIMASK, r3
}
 8003662:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8003664:	4804      	ldr	r0, [pc, #16]	@ (8003678 <_tx_timer_expiration_process+0x40>)
 8003666:	f7ff fd41 	bl	80030ec <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800366a:	bf00      	nop
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	20001390 	.word	0x20001390
 8003678:	20001440 	.word	0x20001440

0800367c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800367c:	b590      	push	{r4, r7, lr}
 800367e:	b089      	sub	sp, #36	@ 0x24
 8003680:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8003682:	4b28      	ldr	r3, [pc, #160]	@ (8003724 <_tx_timer_initialize+0xa8>)
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8003688:	4b27      	ldr	r3, [pc, #156]	@ (8003728 <_tx_timer_initialize+0xac>)
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800368e:	4b27      	ldr	r3, [pc, #156]	@ (800372c <_tx_timer_initialize+0xb0>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8003694:	4b26      	ldr	r3, [pc, #152]	@ (8003730 <_tx_timer_initialize+0xb4>)
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800369a:	4b26      	ldr	r3, [pc, #152]	@ (8003734 <_tx_timer_initialize+0xb8>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 80036a0:	2280      	movs	r2, #128	@ 0x80
 80036a2:	2100      	movs	r1, #0
 80036a4:	4824      	ldr	r0, [pc, #144]	@ (8003738 <_tx_timer_initialize+0xbc>)
 80036a6:	f000 fb8f 	bl	8003dc8 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 80036aa:	4b24      	ldr	r3, [pc, #144]	@ (800373c <_tx_timer_initialize+0xc0>)
 80036ac:	4a22      	ldr	r2, [pc, #136]	@ (8003738 <_tx_timer_initialize+0xbc>)
 80036ae:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 80036b0:	4b23      	ldr	r3, [pc, #140]	@ (8003740 <_tx_timer_initialize+0xc4>)
 80036b2:	4a21      	ldr	r2, [pc, #132]	@ (8003738 <_tx_timer_initialize+0xbc>)
 80036b4:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 80036b6:	4b23      	ldr	r3, [pc, #140]	@ (8003744 <_tx_timer_initialize+0xc8>)
 80036b8:	4a23      	ldr	r2, [pc, #140]	@ (8003748 <_tx_timer_initialize+0xcc>)
 80036ba:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 80036bc:	4b21      	ldr	r3, [pc, #132]	@ (8003744 <_tx_timer_initialize+0xc8>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3304      	adds	r3, #4
 80036c2:	4a20      	ldr	r2, [pc, #128]	@ (8003744 <_tx_timer_initialize+0xc8>)
 80036c4:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 80036c6:	4b21      	ldr	r3, [pc, #132]	@ (800374c <_tx_timer_initialize+0xd0>)
 80036c8:	4a21      	ldr	r2, [pc, #132]	@ (8003750 <_tx_timer_initialize+0xd4>)
 80036ca:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 80036cc:	4b21      	ldr	r3, [pc, #132]	@ (8003754 <_tx_timer_initialize+0xd8>)
 80036ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036d2:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 80036d4:	4b20      	ldr	r3, [pc, #128]	@ (8003758 <_tx_timer_initialize+0xdc>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 80036da:	4b1c      	ldr	r3, [pc, #112]	@ (800374c <_tx_timer_initialize+0xd0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a1d      	ldr	r2, [pc, #116]	@ (8003754 <_tx_timer_initialize+0xd8>)
 80036e0:	6812      	ldr	r2, [r2, #0]
 80036e2:	491d      	ldr	r1, [pc, #116]	@ (8003758 <_tx_timer_initialize+0xdc>)
 80036e4:	6809      	ldr	r1, [r1, #0]
 80036e6:	481c      	ldr	r0, [pc, #112]	@ (8003758 <_tx_timer_initialize+0xdc>)
 80036e8:	6800      	ldr	r0, [r0, #0]
 80036ea:	2400      	movs	r4, #0
 80036ec:	9405      	str	r4, [sp, #20]
 80036ee:	2400      	movs	r4, #0
 80036f0:	9404      	str	r4, [sp, #16]
 80036f2:	9003      	str	r0, [sp, #12]
 80036f4:	9102      	str	r1, [sp, #8]
 80036f6:	9201      	str	r2, [sp, #4]
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	4b18      	ldr	r3, [pc, #96]	@ (800375c <_tx_timer_initialize+0xe0>)
 80036fc:	4a18      	ldr	r2, [pc, #96]	@ (8003760 <_tx_timer_initialize+0xe4>)
 80036fe:	4919      	ldr	r1, [pc, #100]	@ (8003764 <_tx_timer_initialize+0xe8>)
 8003700:	4819      	ldr	r0, [pc, #100]	@ (8003768 <_tx_timer_initialize+0xec>)
 8003702:	f7ff fabb 	bl	8002c7c <_tx_thread_create>
 8003706:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1e5      	bne.n	80036da <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800370e:	4b17      	ldr	r3, [pc, #92]	@ (800376c <_tx_timer_initialize+0xf0>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8003714:	4b16      	ldr	r3, [pc, #88]	@ (8003770 <_tx_timer_initialize+0xf4>)
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	bd90      	pop	{r4, r7, pc}
 8003722:	bf00      	nop
 8003724:	2000139c 	.word	0x2000139c
 8003728:	200018fc 	.word	0x200018fc
 800372c:	200013a0 	.word	0x200013a0
 8003730:	20001430 	.word	0x20001430
 8003734:	2000143c 	.word	0x2000143c
 8003738:	200013a4 	.word	0x200013a4
 800373c:	20001424 	.word	0x20001424
 8003740:	2000142c 	.word	0x2000142c
 8003744:	20001428 	.word	0x20001428
 8003748:	20001420 	.word	0x20001420
 800374c:	200014f0 	.word	0x200014f0
 8003750:	200014fc 	.word	0x200014fc
 8003754:	200014f4 	.word	0x200014f4
 8003758:	200014f8 	.word	0x200014f8
 800375c:	4154494d 	.word	0x4154494d
 8003760:	080038a9 	.word	0x080038a9
 8003764:	08003e70 	.word	0x08003e70
 8003768:	20001440 	.word	0x20001440
 800376c:	20001434 	.word	0x20001434
 8003770:	20001438 	.word	0x20001438

08003774 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8003774:	b480      	push	{r7}
 8003776:	b089      	sub	sp, #36	@ 0x24
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d04a      	beq.n	800381e <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800378e:	d046      	beq.n	800381e <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d142      	bne.n	800381e <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2b20      	cmp	r3, #32
 800379c:	d902      	bls.n	80037a4 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800379e:	231f      	movs	r3, #31
 80037a0:	61bb      	str	r3, [r7, #24]
 80037a2:	e002      	b.n	80037aa <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 80037aa:	4b20      	ldr	r3, [pc, #128]	@ (800382c <_tx_timer_system_activate+0xb8>)
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 80037b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003830 <_tx_timer_system_activate+0xbc>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	69fa      	ldr	r2, [r7, #28]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d30b      	bcc.n	80037d8 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 80037c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003830 <_tx_timer_system_activate+0xbc>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	69fa      	ldr	r2, [r7, #28]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	109b      	asrs	r3, r3, #2
 80037ca:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 80037cc:	4b19      	ldr	r3, [pc, #100]	@ (8003834 <_tx_timer_system_activate+0xc0>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d109      	bne.n	80037f4 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	e011      	b.n	8003818 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69fa      	ldr	r2, [r7, #28]
 800381c:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800381e:	bf00      	nop
 8003820:	3724      	adds	r7, #36	@ 0x24
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	2000142c 	.word	0x2000142c
 8003830:	20001428 	.word	0x20001428
 8003834:	20001424 	.word	0x20001424

08003838 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d026      	beq.n	800389a <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	429a      	cmp	r2, r3
 8003858:	d108      	bne.n	800386c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	429a      	cmp	r2, r3
 8003862:	d117      	bne.n	8003894 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	e013      	b.n	8003894 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	429a      	cmp	r2, r3
 8003886:	d105      	bne.n	8003894 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	619a      	str	r2, [r3, #24]
    }
}
 800389a:	bf00      	nop
 800389c:	371c      	adds	r7, #28
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
	...

080038a8 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b098      	sub	sp, #96	@ 0x60
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 80038b0:	2300      	movs	r3, #0
 80038b2:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a73      	ldr	r2, [pc, #460]	@ (8003a84 <_tx_timer_thread_entry+0x1dc>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	f040 80de 	bne.w	8003a7a <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80038be:	f3ef 8310 	mrs	r3, PRIMASK
 80038c2:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 80038c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 80038c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 80038c8:	b672      	cpsid	i
    return(int_posture);
 80038ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 80038cc:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 80038ce:	4b6e      	ldr	r3, [pc, #440]	@ (8003a88 <_tx_timer_thread_entry+0x1e0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f107 020c 	add.w	r2, r7, #12
 80038e2:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80038e4:	4b68      	ldr	r3, [pc, #416]	@ (8003a88 <_tx_timer_thread_entry+0x1e0>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80038ec:	4b66      	ldr	r3, [pc, #408]	@ (8003a88 <_tx_timer_thread_entry+0x1e0>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	3304      	adds	r3, #4
 80038f2:	4a65      	ldr	r2, [pc, #404]	@ (8003a88 <_tx_timer_thread_entry+0x1e0>)
 80038f4:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80038f6:	4b64      	ldr	r3, [pc, #400]	@ (8003a88 <_tx_timer_thread_entry+0x1e0>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	4b64      	ldr	r3, [pc, #400]	@ (8003a8c <_tx_timer_thread_entry+0x1e4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d103      	bne.n	800390a <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8003902:	4b63      	ldr	r3, [pc, #396]	@ (8003a90 <_tx_timer_thread_entry+0x1e8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a60      	ldr	r2, [pc, #384]	@ (8003a88 <_tx_timer_thread_entry+0x1e0>)
 8003908:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800390a:	4b62      	ldr	r3, [pc, #392]	@ (8003a94 <_tx_timer_thread_entry+0x1ec>)
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003912:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003916:	f383 8810 	msr	PRIMASK, r3
}
 800391a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800391c:	f3ef 8310 	mrs	r3, PRIMASK
 8003920:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 8003922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 8003924:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8003926:	b672      	cpsid	i
    return(int_posture);
 8003928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800392a:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800392c:	e07f      	b.n	8003a2e <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8003938:	2300      	movs	r3, #0
 800393a:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800393c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800393e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003940:	429a      	cmp	r2, r3
 8003942:	d102      	bne.n	800394a <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8003944:	2300      	movs	r3, #0
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	e00e      	b.n	8003968 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800394a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8003950:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003952:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003954:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8003956:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003958:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800395a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800395c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800395e:	f107 020c 	add.w	r2, r7, #12
 8003962:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8003964:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003966:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8003968:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b20      	cmp	r3, #32
 800396e:	d911      	bls.n	8003994 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8003970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8003978:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800397a:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800397c:	2300      	movs	r3, #0
 800397e:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8003980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003982:	f107 0208 	add.w	r2, r7, #8
 8003986:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8003988:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800398a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800398c:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800398e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	e01a      	b.n	80039ca <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8003994:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800399a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 80039a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039a6:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 80039a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d009      	beq.n	80039c4 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80039b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039b2:	f107 0208 	add.w	r2, r7, #8
 80039b6:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 80039b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039bc:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 80039be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	e002      	b.n	80039ca <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 80039c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039c6:	2200      	movs	r2, #0
 80039c8:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 80039ca:	4a33      	ldr	r2, [pc, #204]	@ (8003a98 <_tx_timer_thread_entry+0x1f0>)
 80039cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80039d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d6:	f383 8810 	msr	PRIMASK, r3
}
 80039da:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 80039dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 80039e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039e4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80039e6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80039e8:	f3ef 8310 	mrs	r3, PRIMASK
 80039ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 80039ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 80039f0:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80039f2:	b672      	cpsid	i
    return(int_posture);
 80039f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80039f6:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80039f8:	4b27      	ldr	r3, [pc, #156]	@ (8003a98 <_tx_timer_thread_entry+0x1f0>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d105      	bne.n	8003a12 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8003a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a08:	2200      	movs	r2, #0
 8003a0a:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8003a0c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003a0e:	f7ff feb1 	bl	8003774 <_tx_timer_system_activate>
 8003a12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a14:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	f383 8810 	msr	PRIMASK, r3
}
 8003a1c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a22:	623b      	str	r3, [r7, #32]
    return(posture);
 8003a24:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8003a26:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003a28:	b672      	cpsid	i
    return(int_posture);
 8003a2a:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8003a2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f47f af7c 	bne.w	800392e <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8003a36:	4b17      	ldr	r3, [pc, #92]	@ (8003a94 <_tx_timer_thread_entry+0x1ec>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d116      	bne.n	8003a6c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8003a3e:	4b17      	ldr	r3, [pc, #92]	@ (8003a9c <_tx_timer_thread_entry+0x1f4>)
 8003a40:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8003a42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a44:	2203      	movs	r2, #3
 8003a46:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8003a48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8003a4e:	4b14      	ldr	r3, [pc, #80]	@ (8003aa0 <_tx_timer_thread_entry+0x1f8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3301      	adds	r3, #1
 8003a54:	4a12      	ldr	r2, [pc, #72]	@ (8003aa0 <_tx_timer_thread_entry+0x1f8>)
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a5a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f383 8810 	msr	PRIMASK, r3
}
 8003a62:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8003a64:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8003a66:	f7ff fc41 	bl	80032ec <_tx_thread_system_suspend>
 8003a6a:	e728      	b.n	80038be <_tx_timer_thread_entry+0x16>
 8003a6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a6e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f383 8810 	msr	PRIMASK, r3
}
 8003a76:	bf00      	nop
            TX_DISABLE
 8003a78:	e721      	b.n	80038be <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8003a7a:	bf00      	nop
 8003a7c:	3760      	adds	r7, #96	@ 0x60
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	4154494d 	.word	0x4154494d
 8003a88:	2000142c 	.word	0x2000142c
 8003a8c:	20001428 	.word	0x20001428
 8003a90:	20001424 	.word	0x20001424
 8003a94:	20001430 	.word	0x20001430
 8003a98:	2000143c 	.word	0x2000143c
 8003a9c:	20001440 	.word	0x20001440
 8003aa0:	20001390 	.word	0x20001390

08003aa4 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b092      	sub	sp, #72	@ 0x48
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d102      	bne.n	8003ac2 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8003abc:	2302      	movs	r3, #2
 8003abe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ac0:	e075      	b.n	8003bae <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8003ac2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ac4:	2b34      	cmp	r3, #52	@ 0x34
 8003ac6:	d002      	beq.n	8003ace <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	647b      	str	r3, [r7, #68]	@ 0x44
 8003acc:	e06f      	b.n	8003bae <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003ace:	f3ef 8310 	mrs	r3, PRIMASK
 8003ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8003ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8003ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8003ad8:	b672      	cpsid	i
    return(int_posture);
 8003ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8003adc:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8003ade:	4b3b      	ldr	r3, [pc, #236]	@ (8003bcc <_txe_byte_pool_create+0x128>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	4a39      	ldr	r2, [pc, #228]	@ (8003bcc <_txe_byte_pool_create+0x128>)
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aea:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aee:	f383 8810 	msr	PRIMASK, r3
}
 8003af2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8003af4:	4b36      	ldr	r3, [pc, #216]	@ (8003bd0 <_txe_byte_pool_create+0x12c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8003afa:	2300      	movs	r3, #0
 8003afc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003afe:	e009      	b.n	8003b14 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d00b      	beq.n	8003b20 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8003b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8003b0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b10:	3301      	adds	r3, #1
 8003b12:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b14:	4b2f      	ldr	r3, [pc, #188]	@ (8003bd4 <_txe_byte_pool_create+0x130>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d3f0      	bcc.n	8003b00 <_txe_byte_pool_create+0x5c>
 8003b1e:	e000      	b.n	8003b22 <_txe_byte_pool_create+0x7e>
                break;
 8003b20:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003b22:	f3ef 8310 	mrs	r3, PRIMASK
 8003b26:	623b      	str	r3, [r7, #32]
    return(posture);
 8003b28:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8003b2a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003b2c:	b672      	cpsid	i
    return(int_posture);
 8003b2e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8003b30:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8003b32:	4b26      	ldr	r3, [pc, #152]	@ (8003bcc <_txe_byte_pool_create+0x128>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	4a24      	ldr	r2, [pc, #144]	@ (8003bcc <_txe_byte_pool_create+0x128>)
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b3e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b42:	f383 8810 	msr	PRIMASK, r3
}
 8003b46:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8003b48:	f7ff fa96 	bl	8003078 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d102      	bne.n	8003b5a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8003b54:	2302      	movs	r3, #2
 8003b56:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b58:	e029      	b.n	8003bae <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d102      	bne.n	8003b66 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8003b60:	2303      	movs	r3, #3
 8003b62:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b64:	e023      	b.n	8003bae <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b63      	cmp	r3, #99	@ 0x63
 8003b6a:	d802      	bhi.n	8003b72 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8003b6c:	2305      	movs	r3, #5
 8003b6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b70:	e01d      	b.n	8003bae <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8003b72:	4b19      	ldr	r3, [pc, #100]	@ (8003bd8 <_txe_byte_pool_create+0x134>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8003b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b7a:	4a18      	ldr	r2, [pc, #96]	@ (8003bdc <_txe_byte_pool_create+0x138>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d101      	bne.n	8003b84 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8003b80:	2313      	movs	r3, #19
 8003b82:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003b84:	f3ef 8305 	mrs	r3, IPSR
 8003b88:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8003b8a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8003b8c:	4b14      	ldr	r3, [pc, #80]	@ (8003be0 <_txe_byte_pool_create+0x13c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00b      	beq.n	8003bae <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003b96:	f3ef 8305 	mrs	r3, IPSR
 8003b9a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8003b9c:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8003b9e:	4b10      	ldr	r3, [pc, #64]	@ (8003be0 <_txe_byte_pool_create+0x13c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8003ba8:	d201      	bcs.n	8003bae <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8003baa:	2313      	movs	r3, #19
 8003bac:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8003bae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d106      	bne.n	8003bc2 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	68b9      	ldr	r1, [r7, #8]
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f7fe ff5a 	bl	8002a74 <_tx_byte_pool_create>
 8003bc0:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 8003bc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3748      	adds	r7, #72	@ 0x48
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20001390 	.word	0x20001390
 8003bd0:	200012e8 	.word	0x200012e8
 8003bd4:	200012ec 	.word	0x200012ec
 8003bd8:	200012f8 	.word	0x200012f8
 8003bdc:	20001440 	.word	0x20001440
 8003be0:	2000000c 	.word	0x2000000c

08003be4 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b09a      	sub	sp, #104	@ 0x68
 8003be8:	af06      	add	r7, sp, #24
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d102      	bne.n	8003c02 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8003bfc:	230e      	movs	r3, #14
 8003bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c00:	e0bb      	b.n	8003d7a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8003c02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c04:	2bb0      	cmp	r3, #176	@ 0xb0
 8003c06:	d002      	beq.n	8003c0e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8003c08:	230e      	movs	r3, #14
 8003c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c0c:	e0b5      	b.n	8003d7a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c12:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8003c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8003c16:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8003c18:	b672      	cpsid	i
    return(int_posture);
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8003c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8003c1e:	4b64      	ldr	r3, [pc, #400]	@ (8003db0 <_txe_thread_create+0x1cc>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3301      	adds	r3, #1
 8003c24:	4a62      	ldr	r2, [pc, #392]	@ (8003db0 <_txe_thread_create+0x1cc>)
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c2e:	f383 8810 	msr	PRIMASK, r3
}
 8003c32:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8003c34:	2300      	movs	r3, #0
 8003c36:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 8003c38:	4b5e      	ldr	r3, [pc, #376]	@ (8003db4 <_txe_thread_create+0x1d0>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8003c3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c40:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8003c42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c44:	3b01      	subs	r3, #1
 8003c46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c48:	4413      	add	r3, r2
 8003c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8003c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c4e:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8003c50:	2300      	movs	r3, #0
 8003c52:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c54:	e02b      	b.n	8003cae <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d101      	bne.n	8003c62 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8003c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d028      	beq.n	8003cba <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8003c68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d308      	bcc.n	8003c84 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8003c72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d203      	bcs.n	8003c84 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8003c80:	2301      	movs	r3, #1
 8003c82:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8003c84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d308      	bcc.n	8003ca0 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8003c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d203      	bcs.n	8003ca0 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8003ca0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca6:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8003ca8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003caa:	3301      	adds	r3, #1
 8003cac:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cae:	4b42      	ldr	r3, [pc, #264]	@ (8003db8 <_txe_thread_create+0x1d4>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d3ce      	bcc.n	8003c56 <_txe_thread_create+0x72>
 8003cb8:	e000      	b.n	8003cbc <_txe_thread_create+0xd8>
                break;
 8003cba:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003cbc:	f3ef 8310 	mrs	r3, PRIMASK
 8003cc0:	61fb      	str	r3, [r7, #28]
    return(posture);
 8003cc2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8003cc4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003cc6:	b672      	cpsid	i
    return(int_posture);
 8003cc8:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8003cca:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8003ccc:	4b38      	ldr	r3, [pc, #224]	@ (8003db0 <_txe_thread_create+0x1cc>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	4a37      	ldr	r2, [pc, #220]	@ (8003db0 <_txe_thread_create+0x1cc>)
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cd8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	f383 8810 	msr	PRIMASK, r3
}
 8003ce0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8003ce2:	f7ff f9c9 	bl	8003078 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d102      	bne.n	8003cf4 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8003cee:	230e      	movs	r3, #14
 8003cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cf2:	e042      	b.n	8003d7a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8003cf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d102      	bne.n	8003d00 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cfe:	e03c      	b.n	8003d7a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d102      	bne.n	8003d0c <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8003d06:	2303      	movs	r3, #3
 8003d08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d0a:	e036      	b.n	8003d7a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8003d0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d0e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003d10:	d802      	bhi.n	8003d18 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8003d12:	2305      	movs	r3, #5
 8003d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d16:	e030      	b.n	8003d7a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8003d18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d1a:	2b1f      	cmp	r3, #31
 8003d1c:	d902      	bls.n	8003d24 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8003d1e:	230f      	movs	r3, #15
 8003d20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d22:	e02a      	b.n	8003d7a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8003d24:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003d26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d902      	bls.n	8003d32 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8003d2c:	2318      	movs	r3, #24
 8003d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d30:	e023      	b.n	8003d7a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8003d32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d902      	bls.n	8003d3e <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8003d38:	2310      	movs	r3, #16
 8003d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d3c:	e01d      	b.n	8003d7a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8003d3e:	4b1f      	ldr	r3, [pc, #124]	@ (8003dbc <_txe_thread_create+0x1d8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8003d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d46:	4a1e      	ldr	r2, [pc, #120]	@ (8003dc0 <_txe_thread_create+0x1dc>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d101      	bne.n	8003d50 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8003d4c:	2313      	movs	r3, #19
 8003d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003d50:	f3ef 8305 	mrs	r3, IPSR
 8003d54:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8003d56:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8003d58:	4b1a      	ldr	r3, [pc, #104]	@ (8003dc4 <_txe_thread_create+0x1e0>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00b      	beq.n	8003d7a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003d62:	f3ef 8305 	mrs	r3, IPSR
 8003d66:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8003d68:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8003d6a:	4b16      	ldr	r3, [pc, #88]	@ (8003dc4 <_txe_thread_create+0x1e0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8003d74:	d201      	bcs.n	8003d7a <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8003d76:	2313      	movs	r3, #19
 8003d78:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8003d7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d112      	bne.n	8003da6 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8003d80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d82:	9305      	str	r3, [sp, #20]
 8003d84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d86:	9304      	str	r3, [sp, #16]
 8003d88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d8a:	9303      	str	r3, [sp, #12]
 8003d8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d8e:	9302      	str	r3, [sp, #8]
 8003d90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d92:	9301      	str	r3, [sp, #4]
 8003d94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	68b9      	ldr	r1, [r7, #8]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f7fe ff6c 	bl	8002c7c <_tx_thread_create>
 8003da4:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8003da6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3750      	adds	r7, #80	@ 0x50
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	20001390 	.word	0x20001390
 8003db4:	20001300 	.word	0x20001300
 8003db8:	20001304 	.word	0x20001304
 8003dbc:	200012f8 	.word	0x200012f8
 8003dc0:	20001440 	.word	0x20001440
 8003dc4:	2000000c 	.word	0x2000000c

08003dc8 <memset>:
 8003dc8:	4402      	add	r2, r0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d100      	bne.n	8003dd2 <memset+0xa>
 8003dd0:	4770      	bx	lr
 8003dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8003dd6:	e7f9      	b.n	8003dcc <memset+0x4>

08003dd8 <__libc_init_array>:
 8003dd8:	b570      	push	{r4, r5, r6, lr}
 8003dda:	4d0d      	ldr	r5, [pc, #52]	@ (8003e10 <__libc_init_array+0x38>)
 8003ddc:	2600      	movs	r6, #0
 8003dde:	4c0d      	ldr	r4, [pc, #52]	@ (8003e14 <__libc_init_array+0x3c>)
 8003de0:	1b64      	subs	r4, r4, r5
 8003de2:	10a4      	asrs	r4, r4, #2
 8003de4:	42a6      	cmp	r6, r4
 8003de6:	d109      	bne.n	8003dfc <__libc_init_array+0x24>
 8003de8:	4d0b      	ldr	r5, [pc, #44]	@ (8003e18 <__libc_init_array+0x40>)
 8003dea:	2600      	movs	r6, #0
 8003dec:	4c0b      	ldr	r4, [pc, #44]	@ (8003e1c <__libc_init_array+0x44>)
 8003dee:	f000 f817 	bl	8003e20 <_init>
 8003df2:	1b64      	subs	r4, r4, r5
 8003df4:	10a4      	asrs	r4, r4, #2
 8003df6:	42a6      	cmp	r6, r4
 8003df8:	d105      	bne.n	8003e06 <__libc_init_array+0x2e>
 8003dfa:	bd70      	pop	{r4, r5, r6, pc}
 8003dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e00:	3601      	adds	r6, #1
 8003e02:	4798      	blx	r3
 8003e04:	e7ee      	b.n	8003de4 <__libc_init_array+0xc>
 8003e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e0a:	3601      	adds	r6, #1
 8003e0c:	4798      	blx	r3
 8003e0e:	e7f2      	b.n	8003df6 <__libc_init_array+0x1e>
 8003e10:	08003e9c 	.word	0x08003e9c
 8003e14:	08003e9c 	.word	0x08003e9c
 8003e18:	08003e9c 	.word	0x08003e9c
 8003e1c:	08003ea0 	.word	0x08003ea0

08003e20 <_init>:
 8003e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e22:	bf00      	nop
 8003e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e26:	bc08      	pop	{r3}
 8003e28:	469e      	mov	lr, r3
 8003e2a:	4770      	bx	lr

08003e2c <_fini>:
 8003e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2e:	bf00      	nop
 8003e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e32:	bc08      	pop	{r3}
 8003e34:	469e      	mov	lr, r3
 8003e36:	4770      	bx	lr
